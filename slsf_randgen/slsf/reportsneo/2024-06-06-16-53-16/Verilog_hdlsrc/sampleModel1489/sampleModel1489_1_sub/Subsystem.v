// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1489\sampleModel1489_1_sub\Subsystem.v
// Created: 2024-08-12 10:38:55
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1489_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk1_out1;  // uint8
  wire [15:0] cfblk128_out1;  // uint16
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk114_const_val_1;  // uint8
  wire [7:0] cfblk118_const_val_1;  // uint8
  wire [7:0] cfblk62_const_val_1;  // uint8
  wire [7:0] cfblk115_const_val_1;  // uint8
  wire [7:0] cfblk36_const_val_1;  // uint8
  wire [7:0] cfblk110_const_val_1;  // uint8
  wire [7:0] cfblk21_const_val_1;  // uint8
  wire [7:0] cfblk113_const_val_1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  reg [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [31:0] cfblk95_add_temp;  // ufix32
  wire [31:0] cfblk95_1;  // ufix32
  wire [31:0] cfblk95_2;  // ufix32
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk133_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk133_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk26_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] Mysubsystem_7_out1;  // uint8
  reg [7:0] cfblk134_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk134_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire cfblk5_out1;  // ufix1
  wire [31:0] dtc_out_4;  // ufix32
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [15:0] cfblk3_out1;  // uint16
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [15:0] cfblk4_out1;  // uint16
  wire [31:0] cfblk56_add_temp;  // ufix32
  wire [31:0] cfblk56_1;  // ufix32
  wire [31:0] cfblk56_2;  // ufix32
  reg [7:0] cfblk42_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  reg [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk136_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  reg [8:0] cfblk101_div_temp;  // ufix9
  reg [8:0] cfblk101_t_0_0;  // ufix9
  reg [8:0] cfblk26_div_temp;  // ufix9
  reg [8:0] cfblk26_t_0_0;  // ufix9
  reg [8:0] cfblk119_div_temp;  // ufix9
  reg [8:0] cfblk119_t_0_0;  // ufix9
  reg [8:0] cfblk98_div_temp;  // ufix9
  reg [8:0] cfblk98_t_0_0;  // ufix9
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9
  reg [8:0] cfblk42_div_temp;  // ufix9
  reg [8:0] cfblk42_t_0_0;  // ufix9
  reg [15:0] cfblk91_varargout_1;  // ufix16
  reg [16:0] cfblk91_div_temp;  // ufix17
  reg [16:0] cfblk91_t_0_0;  // ufix17
  reg [8:0] cfblk106_div_temp;  // ufix9
  reg [8:0] cfblk106_t_0_0;  // ufix9
  reg [8:0] cfblk78_div_temp;  // ufix9
  reg [8:0] cfblk78_t_0_0;  // ufix9


  assign cfblk1_out1 = 8'b00000000;



  cfblk128 u_cfblk128 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk128_out1)  // uint16
                       );

  assign enb = clk_enable;

  cfblk127 u_cfblk127 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk127_out1)  // uint8
                       );

  assign cfblk59_out1 = (cfblk127_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk114_const_val_1 = 8'b00000000;



  assign cfblk118_const_val_1 = 8'b00000000;



  assign cfblk62_const_val_1 = 8'b00000000;



  assign cfblk115_const_val_1 = 8'b00000000;



  assign cfblk36_const_val_1 = 8'b00000000;



  assign cfblk110_const_val_1 = 8'b00000000;



  assign cfblk21_const_val_1 = 8'b00000000;



  assign cfblk113_const_val_1 = 8'b00000000;



  always @(cfblk11_out1, cfblk81_out1) begin
    cfblk101_div_temp = 9'b000000000;
    cfblk101_t_0_0 = 9'b000000000;
    if (cfblk11_out1 == 8'b00000000) begin
      cfblk101_out1 = 8'b11111111;
    end
    else begin
      cfblk101_t_0_0 = {1'b0, cfblk81_out1};
      cfblk101_div_temp = cfblk101_t_0_0 / cfblk11_out1;
      if (cfblk101_div_temp[8] != 1'b0) begin
        cfblk101_out1 = 8'b11111111;
      end
      else begin
        cfblk101_out1 = cfblk101_div_temp[7:0];
      end
    end
  end



  assign cfblk75_out1 = cfblk101_out1 + cfblk19_out1;



  assign cfblk117_out1 = cfblk27_out1 - cfblk75_out1;



  assign cfblk48_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk11_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk65_out1 = cfblk145_out1 + cfblk48_out1;



  assign cfblk10_out1 = (cfblk65_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out = cfblk10_out1;



  assign cfblk8_out1 = dtc_out;



  assign cfblk92_out1 = (cfblk11_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk113_out1 = cfblk92_out1 + cfblk113_const_val_1;



  assign cfblk95_1 = {24'b0, cfblk129_out1};
  assign cfblk95_2 = {16'b0, cfblk128_out1};
  assign cfblk95_add_temp = cfblk95_1 + cfblk95_2;
  assign cfblk95_out1 = cfblk95_add_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk11_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk6_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk81_out1 = cfblk6_out1 - cfblk124_out1;



  assign dtc_out_1 = cfblk41_out1;



  assign cfblk12_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk63_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  assign cfblk63_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk63_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk114_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  assign cfblk58_out1 = (cfblk129_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk133_process
      if (reset == 1'b1) begin
        cfblk133_reg[0] <= 8'b00000000;
        cfblk133_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk133_reg[0] <= cfblk133_reg_next[0];
          cfblk133_reg[1] <= cfblk133_reg_next[1];
        end
      end
    end

  assign cfblk133_out1 = cfblk133_reg[1];
  assign cfblk133_reg_next[0] = cfblk29_out1;
  assign cfblk133_reg_next[1] = cfblk133_reg[0];



  always @(cfblk133_out1, cfblk58_out1) begin
    cfblk26_div_temp = 9'b000000000;
    cfblk26_t_0_0 = 9'b000000000;
    if (cfblk58_out1 == 8'b00000000) begin
      cfblk26_out1 = 8'b11111111;
    end
    else begin
      cfblk26_t_0_0 = {1'b0, cfblk133_out1};
      cfblk26_div_temp = cfblk26_t_0_0 / cfblk58_out1;
      if (cfblk26_div_temp[8] != 1'b0) begin
        cfblk26_out1 = 8'b11111111;
      end
      else begin
        cfblk26_out1 = cfblk26_div_temp[7:0];
      end
    end
  end



  assign dtc_out_2 = cfblk26_out1;



  assign cfblk22_out1 = dtc_out_2;



  assign cfblk11_out1 = (cfblk17_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk19_out1 = cfblk149_out1 + cfblk11_out1;



  assign cfblk51_out1 = cfblk52_out1 + cfblk118_out1;



  assign cfblk114_out1 = cfblk51_out1 + cfblk114_const_val_1;



  assign cfblk32_out1 = cfblk114_out1 - cfblk41_out1;



  assign dtc_out_3 = cfblk32_out1;



  assign cfblk82_out1 = dtc_out_3;



  assign cfblk24_out1 = (cfblk82_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk24_out1, cfblk38_out1) begin
    cfblk119_div_temp = 9'b000000000;
    cfblk119_t_0_0 = 9'b000000000;
    if (cfblk38_out1 == 8'b00000000) begin
      cfblk119_out1 = 8'b11111111;
    end
    else begin
      cfblk119_t_0_0 = {1'b0, cfblk24_out1};
      cfblk119_div_temp = cfblk119_t_0_0 / cfblk38_out1;
      if (cfblk119_div_temp[8] != 1'b0) begin
        cfblk119_out1 = 8'b11111111;
      end
      else begin
        cfblk119_out1 = cfblk119_div_temp[7:0];
      end
    end
  end



  assign cfblk25_out1 = cfblk56_out1 + cfblk119_out1;



  assign cfblk76_out1 = cfblk21_out1 - cfblk25_out1;



  assign cfblk73_out1 = cfblk78_out1 + cfblk76_out1;



  Mysubsystem_7 u_Mysubsystem_7 (.In1(cfblk73_out1),  // uint8
                                 .In2(cfblk19_out1),  // uint8
                                 .Out1(Mysubsystem_7_out1)  // uint8
                                 );

  always @(posedge clk or posedge reset)
    begin : cfblk134_process
      if (reset == 1'b1) begin
        cfblk134_reg[0] <= 8'b00000000;
        cfblk134_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk134_reg[0] <= cfblk134_reg_next[0];
          cfblk134_reg[1] <= cfblk134_reg_next[1];
        end
      end
    end

  assign cfblk134_out1 = cfblk134_reg[1];
  assign cfblk134_reg_next[0] = Mysubsystem_7_out1;
  assign cfblk134_reg_next[1] = cfblk134_reg[0];



  DotProduct_block u_cfblk85_inst (.in1(cfblk134_out1),  // uint8
                                   .in2(cfblk22_out1),  // uint8
                                   .out1(cfblk85_out1)  // uint8
                                   );

  assign cfblk118_out1 = cfblk85_out1 + cfblk118_const_val_1;



  always @(cfblk118_out1, cfblk139_out1) begin
    cfblk98_div_temp = 9'b000000000;
    cfblk98_t_0_0 = 9'b000000000;
    if (cfblk139_out1 == 8'b00000000) begin
      cfblk98_out1 = 8'b11111111;
    end
    else begin
      cfblk98_t_0_0 = {1'b0, cfblk118_out1};
      cfblk98_div_temp = cfblk98_t_0_0 / cfblk139_out1;
      if (cfblk98_div_temp[8] != 1'b0) begin
        cfblk98_out1 = 8'b11111111;
      end
      else begin
        cfblk98_out1 = cfblk98_div_temp[7:0];
      end
    end
  end



  assign cfblk62_out1 = cfblk98_out1 + cfblk62_const_val_1;



  assign cfblk40_out1 = cfblk62_out1 - cfblk142_out1;



  assign cfblk89_out1 = (cfblk40_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk38_out1 = cfblk59_out1 - cfblk89_out1;



  assign cfblk61_out1 = cfblk38_out1 + cfblk114_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk61_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  always @(cfblk124_out1, cfblk138_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk124_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk138_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk124_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  assign cfblk41_out1 = cfblk44_out1 - cfblk29_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk41_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk87_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign cfblk5_out1 = (&cfblk2_out1[7:0]);



  assign dtc_out_4 = {31'b0, cfblk5_out1};



  assign cfblk23_out1 = dtc_out_4[7:0];



  DotProduct_block2 u_cfblk88_inst (.in1(cfblk23_out1),  // uint8
                                    .in2(cfblk137_out1),  // uint8
                                    .out1(cfblk88_out1)  // uint8
                                    );

  assign cfblk70_out1 = (cfblk88_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk3_out1 = {cfblk70_out1, cfblk141_out1};



  assign cfblk149_out1 = cfblk3_out1[7:0];



  cfblk129 u_cfblk129 (.In1(cfblk149_out1),  // uint8
                       .Out1(cfblk129_out1)  // uint8
                       );

  assign cfblk16_out1 = cfblk77_out1 - cfblk129_out1;



  assign cfblk34_out1 = cfblk16_out1 - cfblk2_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk125_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk99_out1 = cfblk144_out1 + cfblk34_out1;



  assign dtc_out_5 = cfblk99_out1;



  assign cfblk125_out1 = dtc_out_5;



  assign cfblk17_out1 = cfblk36_out1 + cfblk125_out1;



  assign cfblk112_out1 = (cfblk17_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk4_out1 = {cfblk112_out1, cfblk77_out1};



  assign cfblk56_1 = {16'b0, cfblk4_out1};
  assign cfblk56_2 = {24'b0, cfblk12_out1};
  assign cfblk56_add_temp = cfblk56_1 + cfblk56_2;
  assign cfblk56_out1 = cfblk56_add_temp[7:0];



  always @(cfblk2_out1, cfblk56_out1) begin
    cfblk42_div_temp = 9'b000000000;
    cfblk42_t_0_0 = 9'b000000000;
    if (cfblk2_out1 == 8'b00000000) begin
      cfblk42_out1 = 8'b11111111;
    end
    else begin
      cfblk42_t_0_0 = {1'b0, cfblk56_out1};
      cfblk42_div_temp = cfblk42_t_0_0 / cfblk2_out1;
      if (cfblk42_div_temp[8] != 1'b0) begin
        cfblk42_out1 = 8'b11111111;
      end
      else begin
        cfblk42_out1 = cfblk42_div_temp[7:0];
      end
    end
  end



  assign cfblk27_out1 = cfblk42_out1 + cfblk81_out1;



  assign dtc_out_6 = cfblk27_out1;



  assign cfblk105_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk105_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  assign cfblk29_out1 = cfblk143_out1 + cfblk38_out1;



  always @(cfblk128_out1, cfblk29_out1) begin
    cfblk91_div_temp = 17'b00000000000000000;
    cfblk91_t_0_0 = 17'b00000000000000000;
    if (cfblk29_out1 == 8'b00000000) begin
      cfblk91_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk91_t_0_0 = {1'b0, cfblk128_out1};
      cfblk91_div_temp = cfblk91_t_0_0 / cfblk29_out1;
      if (cfblk91_div_temp[16] != 1'b0) begin
        cfblk91_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk91_varargout_1 = cfblk91_div_temp[15:0];
      end
    end
    if (cfblk91_varargout_1[15:8] != 8'b00000000) begin
      cfblk91_out1 = 8'b11111111;
    end
    else begin
      cfblk91_out1 = cfblk91_varargout_1[7:0];
    end
  end



  assign cfblk115_out1 = cfblk91_out1 + cfblk115_const_val_1;



  assign cfblk36_out1 = cfblk115_out1 + cfblk36_const_val_1;



  always @(cfblk147_out1, cfblk36_out1) begin
    cfblk106_div_temp = 9'b000000000;
    cfblk106_t_0_0 = 9'b000000000;
    if (cfblk147_out1 == 8'b00000000) begin
      cfblk106_out1 = 8'b11111111;
    end
    else begin
      cfblk106_t_0_0 = {1'b0, cfblk36_out1};
      cfblk106_div_temp = cfblk106_t_0_0 / cfblk147_out1;
      if (cfblk106_div_temp[8] != 1'b0) begin
        cfblk106_out1 = 8'b11111111;
      end
      else begin
        cfblk106_out1 = cfblk106_div_temp[7:0];
      end
    end
  end



  assign cfblk124_out1 = cfblk106_out1 + cfblk118_out1;



  assign cfblk110_out1 = cfblk124_out1 + cfblk110_const_val_1;



  assign cfblk97_out1 = cfblk110_out1 - cfblk95_out1;



  assign dtc_out_7 = cfblk97_out1;



  assign cfblk121_out1 = dtc_out_7;



  assign cfblk57_out1 = cfblk121_out1 - cfblk44_out1;



  assign cfblk21_out1 = cfblk57_out1 + cfblk21_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk136_process
      if (reset == 1'b1) begin
        cfblk136_reg[0] <= 8'b00000000;
        cfblk136_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk136_reg[0] <= cfblk136_reg_next[0];
          cfblk136_reg[1] <= cfblk136_reg_next[1];
        end
      end
    end

  assign cfblk136_out1 = cfblk136_reg[1];
  assign cfblk136_reg_next[0] = cfblk21_out1;
  assign cfblk136_reg_next[1] = cfblk136_reg[0];



  DotProduct_block1 u_cfblk87_inst (.in1(cfblk1_out1),  // uint8
                                    .in2(cfblk136_out1),  // uint8
                                    .out1(cfblk87_out1)  // uint8
                                    );

  always @(cfblk113_out1, cfblk87_out1) begin
    cfblk78_div_temp = 9'b000000000;
    cfblk78_t_0_0 = 9'b000000000;
    if (cfblk113_out1 == 8'b00000000) begin
      cfblk78_out1 = 8'b11111111;
    end
    else begin
      cfblk78_t_0_0 = {1'b0, cfblk87_out1};
      cfblk78_div_temp = cfblk78_t_0_0 / cfblk113_out1;
      if (cfblk78_div_temp[8] != 1'b0) begin
        cfblk78_out1 = 8'b11111111;
      end
      else begin
        cfblk78_out1 = cfblk78_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk78_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  assign cfblk77_out1 = cfblk146_out1 - cfblk8_out1;



  assign cfblk28_out1 = (cfblk77_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk52_out1 = cfblk28_out1 + cfblk117_out1;



  assign Hdl_out = cfblk52_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

