// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1484\sampleModel1484_4_sub\Subsystem.v
// Created: 2024-06-10 04:40:21
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1484_4_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [15:0] cfblk156_out1;  // uint16
  wire [7:0] Mysubsystem_54_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [31:0] cfblk47_add_temp;  // ufix32
  wire [31:0] cfblk47_1;  // ufix32
  wire [31:0] cfblk47_2;  // ufix32
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk126_const_val_1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk125_const_val_1;  // uint8
  wire [7:0] cfblk130_const_val_1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] bitMask_for_cfblk5;  // uint8
  wire [7:0] cfblk38_const_val_1;  // uint8
  wire [7:0] cfblk88_const_val_1;  // uint8
  wire [7:0] cfblk142_const_val_1;  // uint8
  wire [7:0] cfblk45_const_val_1;  // uint8
  wire [7:0] cfblk14_const_val_1;  // uint8
  wire [7:0] cfblk58_const_val_1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk97_const_val_1;  // uint8
  wire [7:0] cfblk103_const_val_1;  // uint8
  wire [7:0] cfblk141_const_val_1;  // uint8
  wire [7:0] cfblk39_const_val_1;  // uint8
  wire [7:0] cfblk124_const_val_1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] Mysubsystem_11_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk80_const_val_1;  // uint8
  wire [15:0] cfblk159_out1;  // uint16
  wire [7:0] cfblk207_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  reg [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [15:0] cfblk1_out1;  // uint16
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] Mysubsystem_50_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire cfblk121_out1_is_not0;
  reg [7:0] cfblk74_out1;  // uint8
  wire cfblk74_out1_is_not0;
  wire cfblk4_out1;
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] Mysubsystem_34_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire cfblk7_out1;  // ufix1
  wire signed [1:0] cfblk27_out1;  // sfix2
  wire signed [31:0] cfblk10_sub_temp;  // sfix32
  wire signed [31:0] cfblk10_1;  // sfix32
  wire signed [31:0] cfblk10_2;  // sfix32
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk109_out1;  // uint8
  reg [8:0] cfblk138_div_temp;  // ufix9
  reg [8:0] cfblk138_t_0_0;  // ufix9
  reg [8:0] cfblk92_div_temp;  // ufix9
  reg [8:0] cfblk92_t_0_0;  // ufix9
  reg [8:0] cfblk74_div_temp;  // ufix9
  reg [8:0] cfblk74_t_0_0;  // ufix9
  reg [8:0] cfblk48_div_temp;  // ufix9
  reg [8:0] cfblk48_t_0_0;  // ufix9
  reg [8:0] cfblk35_div_temp;  // ufix9
  reg [8:0] cfblk35_t_0_0;  // ufix9
  reg [8:0] cfblk95_div_temp;  // ufix9
  reg [8:0] cfblk95_t_0_0;  // ufix9
  reg [8:0] cfblk109_div_temp;  // ufix9
  reg [8:0] cfblk109_t_0_0;  // ufix9
  reg [8:0] cfblk57_div_temp;  // ufix9
  reg [8:0] cfblk57_t_0_0;  // ufix9


  cfblk156 u_cfblk156 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk156_out1)  // uint16
                       );

  Mysubsystem_54 u_Mysubsystem_54 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_54_out1)  // uint8
                                   );

  assign cfblk15_out1 = (Mysubsystem_54_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk73_out1 = (cfblk15_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk47_1 = {16'b0, cfblk156_out1};
  assign cfblk47_2 = {24'b0, cfblk73_out1};
  assign cfblk47_add_temp = cfblk47_1 + cfblk47_2;
  assign cfblk47_out1 = cfblk47_add_temp[7:0];



  assign enb = clk_enable;

  assign cfblk126_const_val_1 = 8'b00000000;



  assign cfblk126_out1 = Mysubsystem_54_out1 + cfblk126_const_val_1;



  assign cfblk125_const_val_1 = 8'b00000000;



  assign cfblk130_const_val_1 = 8'b00000000;



  assign cfblk155_out1 = 8'b00000001;



  assign bitMask_for_cfblk5 = 8'b11011001;



  assign cfblk38_const_val_1 = 8'b00000000;



  assign cfblk88_const_val_1 = 8'b00000000;



  assign cfblk142_const_val_1 = 8'b00000000;



  assign cfblk45_const_val_1 = 8'b00000000;



  assign cfblk14_const_val_1 = 8'b00000000;



  assign cfblk58_const_val_1 = 8'b00000000;



  cfblk158 u_cfblk158 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk158_out1)  // uint8
                       );

  assign cfblk97_const_val_1 = 8'b00000000;



  assign cfblk103_const_val_1 = 8'b00000000;



  assign cfblk141_const_val_1 = 8'b00000000;



  assign cfblk39_const_val_1 = 8'b00000000;



  assign cfblk124_const_val_1 = 8'b00000000;



  assign cfblk124_out1 = cfblk47_out1 + cfblk124_const_val_1;



  Mysubsystem_11 u_Mysubsystem_11 (.In1(cfblk185_out1),  // uint8
                                   .Out1(Mysubsystem_11_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = Mysubsystem_11_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  assign cfblk80_const_val_1 = 8'b00000000;



  cfblk159 u_cfblk159 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk159_out1)  // uint16
                       );

  assign cfblk207_out1 = cfblk159_out1[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk149_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk83_out1 = cfblk105_out1 + cfblk54_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk83_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk76_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk45_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  always @(cfblk124_out1, cfblk54_out1) begin
    cfblk138_div_temp = 9'b000000000;
    cfblk138_t_0_0 = 9'b000000000;
    if (cfblk124_out1 == 8'b00000000) begin
      cfblk138_out1 = 8'b11111111;
    end
    else begin
      cfblk138_t_0_0 = {1'b0, cfblk54_out1};
      cfblk138_div_temp = cfblk138_t_0_0 / cfblk124_out1;
      if (cfblk138_div_temp[8] != 1'b0) begin
        cfblk138_out1 = 8'b11111111;
      end
      else begin
        cfblk138_out1 = cfblk138_div_temp[7:0];
      end
    end
  end



  cfblk160 u_cfblk160 (.In1(cfblk138_out1),  // uint8
                       .Out1(cfblk160_out1)  // uint8
                       );

  assign cfblk2_out1 = cfblk160_out1 & 8'b11111110;



  assign cfblk132_out1 = cfblk2_out1 + cfblk185_out1;



  assign cfblk149_out1 = cfblk161_out1 - cfblk87_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk149_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk63_out1 = cfblk36_out1 - cfblk45_out1;



  assign dtc_out = cfblk63_out1;



  assign cfblk61_out1 = dtc_out;



  DotProduct_block1 u_cfblk12_inst (.in1(cfblk61_out1),  // uint8
                                    .in2(cfblk45_out1),  // uint8
                                    .out1(cfblk12_out1)  // uint8
                                    );

  assign cfblk97_out1 = cfblk12_out1 + cfblk97_const_val_1;



  assign cfblk103_out1 = cfblk97_out1 + cfblk103_const_val_1;



  always @(cfblk103_out1, cfblk48_out1) begin
    cfblk92_div_temp = 9'b000000000;
    cfblk92_t_0_0 = 9'b000000000;
    if (cfblk48_out1 == 8'b00000000) begin
      cfblk92_out1 = 8'b11111111;
    end
    else begin
      cfblk92_t_0_0 = {1'b0, cfblk103_out1};
      cfblk92_div_temp = cfblk92_t_0_0 / cfblk48_out1;
      if (cfblk92_div_temp[8] != 1'b0) begin
        cfblk92_out1 = 8'b11111111;
      end
      else begin
        cfblk92_out1 = cfblk92_div_temp[7:0];
      end
    end
  end



  assign cfblk82_out1 = cfblk141_out1 - cfblk158_out1;



  assign cfblk56_out1 = cfblk82_out1 + cfblk92_out1;



  assign dtc_out_1 = cfblk56_out1;



  assign cfblk122_out1 = dtc_out_1;



  assign cfblk41_out1 = cfblk122_out1 - cfblk127_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk41_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign dtc_out_2 = cfblk75_out1;



  assign cfblk34_out1 = dtc_out_2;



  assign cfblk145_out1 = cfblk34_out1 - cfblk164_out1;



  assign cfblk141_out1 = cfblk145_out1 + cfblk141_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk141_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk66_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign cfblk144_out1 = (cfblk85_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk144_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign cfblk1_out1 = {cfblk183_out1, cfblk181_out1};



  assign cfblk193_out1 = cfblk1_out1[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk37_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  DotProduct_block4 u_cfblk147_inst (.in1(cfblk173_out1),  // uint8
                                     .in2(cfblk193_out1),  // uint8
                                     .out1(cfblk147_out1)  // uint8
                                     );

  assign dtc_out_3 = cfblk46_out1;



  assign cfblk133_out1 = dtc_out_3;



  Mysubsystem_50 u_Mysubsystem_50 (.In1(cfblk133_out1),  // uint8
                                   .Out1(Mysubsystem_50_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = Mysubsystem_50_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  DotProduct_block10 u_cfblk96_inst (.in1(cfblk184_out1),  // uint8
                                     .in2(cfblk147_out1),  // uint8
                                     .out1(cfblk96_out1)  // uint8
                                     );

  assign cfblk59_out1 = cfblk55_out1 + cfblk88_out1;



  DotProduct_block5 u_cfblk16_inst (.in1(cfblk55_out1),  // uint8
                                    .in2(cfblk135_out1),  // uint8
                                    .out1(cfblk16_out1)  // uint8
                                    );

  assign cfblk90_out1 = cfblk16_out1 + cfblk59_out1;



  assign cfblk127_out1 = cfblk90_out1 - cfblk67_out1;



  assign dtc_out_4 = cfblk127_out1;



  assign cfblk37_out1 = dtc_out_4;



  assign cfblk115_out1 = cfblk85_out1 - cfblk37_out1;



  assign cfblk43_out1 = cfblk79_out1 - cfblk77_out1;



  assign cfblk50_out1 = cfblk43_out1 - cfblk115_out1;



  assign cfblk45_out1 = cfblk5_out1 + cfblk45_const_val_1;



  assign cfblk36_out1 = cfblk45_out1 + cfblk79_out1;



  DotProduct_block3 u_cfblk146_inst (.in1(cfblk36_out1),  // uint8
                                     .in2(cfblk50_out1),  // uint8
                                     .out1(cfblk146_out1)  // uint8
                                     );

  assign cfblk25_out1 = (cfblk146_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk14_out1 = cfblk25_out1 + cfblk14_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk14_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk94_out1 = cfblk130_out1 - cfblk113_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk94_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  cfblk6 u_cfblk6 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk29_out1),  // uint8
                   .Y(cfblk6_out1)  // uint8
                   );

  assign cfblk53_out1 = cfblk6_out1 + cfblk172_out1;



  assign cfblk88_out1 = cfblk53_out1 + cfblk88_const_val_1;



  assign cfblk76_out1 = cfblk116_out1 - cfblk91_out1;



  assign cfblk46_out1 = (cfblk39_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk38_out1 = cfblk46_out1 + cfblk38_const_val_1;



  assign cfblk64_out1 = cfblk38_out1 + cfblk76_out1;



  assign dtc_out_5 = cfblk64_out1;



  assign cfblk111_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk111_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk44_out1 = cfblk178_out1 + cfblk88_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk44_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  DotProduct_block6 u_cfblk29_inst (.in1(cfblk113_out1),  // uint8
                                    .in2(cfblk163_out1),  // uint8
                                    .out1(cfblk29_out1)  // uint8
                                    );

  assign cfblk121_out1_is_not0 = cfblk121_out1 != 8'b00000000;



  assign cfblk79_out1 = cfblk116_out1 + Mysubsystem_54_out1;



  assign cfblk66_out1 = (cfblk130_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk66_out1, cfblk79_out1) begin
    cfblk74_div_temp = 9'b000000000;
    cfblk74_t_0_0 = 9'b000000000;
    if (cfblk79_out1 == 8'b00000000) begin
      cfblk74_out1 = 8'b11111111;
    end
    else begin
      cfblk74_t_0_0 = {1'b0, cfblk66_out1};
      cfblk74_div_temp = cfblk74_t_0_0 / cfblk79_out1;
      if (cfblk74_div_temp[8] != 1'b0) begin
        cfblk74_out1 = 8'b11111111;
      end
      else begin
        cfblk74_out1 = cfblk74_div_temp[7:0];
      end
    end
  end



  assign cfblk74_out1_is_not0 = cfblk74_out1 != 8'b00000000;



  assign cfblk4_out1 = cfblk74_out1_is_not0 & cfblk121_out1_is_not0;



  assign cfblk105_out1 = {7'b0, cfblk4_out1};



  assign cfblk84_out1 = cfblk73_out1 + cfblk105_out1;



  assign cfblk91_out1 = (cfblk84_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk13_out1 = cfblk91_out1 - cfblk29_out1;



  assign cfblk142_out1 = cfblk13_out1 + cfblk142_const_val_1;



  assign cfblk55_out1 = cfblk142_out1 + cfblk174_out1;



  assign cfblk5_out1 = cfblk19_out1 & bitMask_for_cfblk5;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk5_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk67_out1 = cfblk176_out1 - cfblk55_out1;



  assign dtc_out_6 = cfblk67_out1;



  assign cfblk68_out1 = dtc_out_6;



  assign cfblk19_out1 = cfblk68_out1 + cfblk74_out1;



  Mysubsystem_34 u_Mysubsystem_34 (.In1(cfblk19_out1),  // uint8
                                   .Out1(Mysubsystem_34_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = Mysubsystem_34_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  DotProduct_block8 u_cfblk77_inst (.in1(cfblk177_out1),  // uint8
                                    .in2(cfblk96_out1),  // uint8
                                    .out1(cfblk77_out1)  // uint8
                                    );

  assign cfblk58_out1 = cfblk77_out1 + cfblk58_const_val_1;



  assign cfblk113_out1 = cfblk58_out1 - cfblk165_out1;



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk113_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  assign cfblk39_out1 = cfblk3_out1 + cfblk39_const_val_1;



  assign cfblk62_out1 = (cfblk57_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk162 u_cfblk162 (.In1(cfblk62_out1),  // uint8
                       .Out1(cfblk162_out1)  // uint8
                       );

  assign cfblk128_out1 = cfblk162_out1 + cfblk39_out1;



  DotProduct_block u_cfblk112_inst (.in1(cfblk128_out1),  // uint8
                                    .in2(cfblk168_out1),  // uint8
                                    .out1(cfblk112_out1)  // uint8
                                    );

  assign cfblk54_out1 = cfblk155_out1 + cfblk112_out1;



  assign cfblk130_out1 = cfblk150_out1 + cfblk130_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk9_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk52_out1 = cfblk170_out1 + cfblk130_out1;



  assign cfblk143_out1 = cfblk52_out1 + cfblk54_out1;



  always @(cfblk143_out1, cfblk57_out1) begin
    cfblk48_div_temp = 9'b000000000;
    cfblk48_t_0_0 = 9'b000000000;
    if (cfblk57_out1 == 8'b00000000) begin
      cfblk48_out1 = 8'b11111111;
    end
    else begin
      cfblk48_t_0_0 = {1'b0, cfblk143_out1};
      cfblk48_div_temp = cfblk48_t_0_0 / cfblk57_out1;
      if (cfblk48_div_temp[8] != 1'b0) begin
        cfblk48_out1 = 8'b11111111;
      end
      else begin
        cfblk48_out1 = cfblk48_div_temp[7:0];
      end
    end
  end



  DotProduct u_cfblk11_inst (.in1(cfblk48_out1),  // uint8
                             .in2(cfblk126_out1),  // uint8
                             .out1(cfblk11_out1)  // uint8
                             );

  assign dtc_out_7 = cfblk11_out1;



  assign cfblk9_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk9_out1;



  assign cfblk28_out1 = dtc_out_8;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk28_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  always @(cfblk126_out1, cfblk80_out1) begin
    cfblk35_div_temp = 9'b000000000;
    cfblk35_t_0_0 = 9'b000000000;
    if (cfblk80_out1 == 8'b00000000) begin
      cfblk35_out1 = 8'b11111111;
    end
    else begin
      cfblk35_t_0_0 = {1'b0, cfblk126_out1};
      cfblk35_div_temp = cfblk35_t_0_0 / cfblk80_out1;
      if (cfblk35_div_temp[8] != 1'b0) begin
        cfblk35_out1 = 8'b11111111;
      end
      else begin
        cfblk35_out1 = cfblk35_div_temp[7:0];
      end
    end
  end



  assign cfblk125_out1 = cfblk35_out1 + cfblk125_const_val_1;



  always @(cfblk125_out1, cfblk171_out1) begin
    cfblk95_div_temp = 9'b000000000;
    cfblk95_t_0_0 = 9'b000000000;
    if (cfblk171_out1 == 8'b00000000) begin
      cfblk95_out1 = 8'b11111111;
    end
    else begin
      cfblk95_t_0_0 = {1'b0, cfblk125_out1};
      cfblk95_div_temp = cfblk95_t_0_0 / cfblk171_out1;
      if (cfblk95_div_temp[8] != 1'b0) begin
        cfblk95_out1 = 8'b11111111;
      end
      else begin
        cfblk95_out1 = cfblk95_div_temp[7:0];
      end
    end
  end



  assign cfblk117_out1 = (cfblk95_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk150_out1 = cfblk117_out1 + cfblk10_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk150_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  DotProduct_block9 u_cfblk87_inst (.in1(cfblk182_out1),  // uint8
                                    .in2(cfblk132_out1),  // uint8
                                    .out1(cfblk87_out1)  // uint8
                                    );

  assign cfblk116_out1 = cfblk87_out1 + cfblk175_out1;



  DotProduct_block7 u_cfblk75_inst (.in1(cfblk116_out1),  // uint8
                                    .in2(cfblk126_out1),  // uint8
                                    .out1(cfblk75_out1)  // uint8
                                    );

  assign cfblk123_out1 = cfblk47_out1 - cfblk80_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk123_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk89_out1 = cfblk166_out1 - cfblk75_out1;



  assign cfblk135_out1 = cfblk89_out1 + cfblk124_out1;



  assign cfblk80_out1 = cfblk135_out1 + cfblk80_const_val_1;



  cfblk161 u_cfblk161 (.In1(cfblk80_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk161_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk101_out1 = cfblk169_out1 + cfblk44_out1;



  assign cfblk40_out1 = cfblk101_out1 - cfblk207_out1;



  DotProduct_block2 u_cfblk121_inst (.in1(cfblk40_out1),  // uint8
                                     .in2(cfblk179_out1),  // uint8
                                     .out1(cfblk121_out1)  // uint8
                                     );

  assign cfblk7_out1 = (&cfblk121_out1[7:0]);



  assign cfblk27_out1 = (cfblk7_out1 > 1'b0 ? 2'sb01 :
              2'sb00);



  assign cfblk10_1 = {{30{cfblk27_out1[1]}}, cfblk27_out1};
  assign cfblk10_2 = {24'b0, cfblk180_out1};
  assign cfblk10_sub_temp = cfblk10_1 - cfblk10_2;
  assign cfblk10_out1 = cfblk10_sub_temp[7:0];



  assign dtc_out_9 = cfblk10_out1;



  assign cfblk21_out1 = dtc_out_9;



  assign cfblk24_out1 = cfblk21_out1 + cfblk21_out1;



  always @(cfblk167_out1, cfblk24_out1) begin
    cfblk109_div_temp = 9'b000000000;
    cfblk109_t_0_0 = 9'b000000000;
    if (cfblk167_out1 == 8'b00000000) begin
      cfblk109_out1 = 8'b11111111;
    end
    else begin
      cfblk109_t_0_0 = {1'b0, cfblk24_out1};
      cfblk109_div_temp = cfblk109_t_0_0 / cfblk167_out1;
      if (cfblk109_div_temp[8] != 1'b0) begin
        cfblk109_out1 = 8'b11111111;
      end
      else begin
        cfblk109_out1 = cfblk109_div_temp[7:0];
      end
    end
  end



  assign cfblk85_out1 = cfblk109_out1 + cfblk6_out1;



  always @(cfblk124_out1, cfblk85_out1) begin
    cfblk57_div_temp = 9'b000000000;
    cfblk57_t_0_0 = 9'b000000000;
    if (cfblk124_out1 == 8'b00000000) begin
      cfblk57_out1 = 8'b11111111;
    end
    else begin
      cfblk57_t_0_0 = {1'b0, cfblk85_out1};
      cfblk57_div_temp = cfblk57_t_0_0 / cfblk124_out1;
      if (cfblk57_div_temp[8] != 1'b0) begin
        cfblk57_out1 = 8'b11111111;
      end
      else begin
        cfblk57_out1 = cfblk57_div_temp[7:0];
      end
    end
  end



  assign Hdl_out = cfblk57_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

