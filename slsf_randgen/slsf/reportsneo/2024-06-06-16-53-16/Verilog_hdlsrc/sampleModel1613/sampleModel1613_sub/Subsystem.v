// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1613\sampleModel1613_sub\Subsystem.v
// Created: 2024-08-13 04:26:46
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1613_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk99_const_val_1;  // uint8
  wire [7:0] cfblk14_const_val_1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk110_const_val_1;  // uint8
  wire [7:0] cfblk114_const_val_1;  // uint8
  wire [7:0] cfblk65_const_val_1;  // uint8
  wire [7:0] cfblk82_const_val_1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk39_const_val_1;  // uint8
  wire [7:0] cfblk73_const_val_1;  // uint8
  wire [7:0] cfblk106_const_val_1;  // uint8
  wire [7:0] cfblk93_const_val_1;  // uint8
  wire [7:0] cfblk94_const_val_1;  // uint8
  wire [7:0] cfblk135_const_val_1;  // uint8
  wire [7:0] cfblk96_const_val_1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk36_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  reg [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk31_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk127_out1;  // uint8
  reg [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  reg [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  reg [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] dtc_out_8;  // ufix8
  reg [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  reg [7:0] cfblk136_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  reg [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [15:0] cfblk2_out1;  // uint16
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] dtc_out_13;  // ufix8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  reg [7:0] cfblk52_out1;  // uint8
  wire [7:0] dtc_out_14;  // ufix8
  wire [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] dtc_out_15;  // ufix8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] dtc_out_16;  // ufix8
  wire [7:0] cfblk68_out1;  // uint8
  reg [8:0] cfblk47_div_temp;  // ufix9
  reg [8:0] cfblk47_t_0_0;  // ufix9
  reg [8:0] cfblk31_div_temp;  // ufix9
  reg [8:0] cfblk31_t_0_0;  // ufix9
  reg [8:0] cfblk122_div_temp;  // ufix9
  reg [8:0] cfblk122_t_0_0;  // ufix9
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9
  reg [8:0] cfblk128_div_temp;  // ufix9
  reg [8:0] cfblk128_t_0_0;  // ufix9
  reg [8:0] cfblk132_div_temp;  // ufix9
  reg [8:0] cfblk132_t_0_0;  // ufix9
  reg [8:0] cfblk36_div_temp;  // ufix9
  reg [8:0] cfblk36_t_0_0;  // ufix9
  reg [8:0] cfblk61_div_temp;  // ufix9
  reg [8:0] cfblk61_t_0_0;  // ufix9
  reg [8:0] cfblk103_div_temp;  // ufix9
  reg [8:0] cfblk103_t_0_0;  // ufix9
  reg [8:0] cfblk124_div_temp;  // ufix9
  reg [8:0] cfblk124_t_0_0;  // ufix9
  reg [8:0] cfblk48_div_temp;  // ufix9
  reg [8:0] cfblk48_t_0_0;  // ufix9
  reg [8:0] cfblk136_div_temp;  // ufix9
  reg [8:0] cfblk136_t_0_0;  // ufix9
  reg [8:0] cfblk28_div_temp;  // ufix9
  reg [8:0] cfblk28_t_0_0;  // ufix9
  reg [8:0] cfblk59_div_temp;  // ufix9
  reg [8:0] cfblk59_t_0_0;  // ufix9
  reg [8:0] cfblk52_div_temp;  // ufix9
  reg [8:0] cfblk52_t_0_0;  // ufix9
  reg [8:0] cfblk125_div_temp;  // ufix9
  reg [8:0] cfblk125_t_0_0;  // ufix9
  reg [8:0] cfblk139_div_temp;  // ufix9
  reg [8:0] cfblk139_t_0_0;  // ufix9


  assign cfblk146_out1 = 8'b00000000;



  cfblk145 u_cfblk145 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk145_out1)  // uint8
                       );

  assign cfblk148_out1 = 8'b00000001;



  assign enb = clk_enable;

  assign dtc_out = cfblk146_out1;



  assign cfblk38_out1 = dtc_out;



  assign cfblk99_const_val_1 = 8'b00000000;



  assign cfblk14_const_val_1 = 8'b00000000;



  assign cfblk144_out1 = 8'b00000001;



  assign cfblk110_const_val_1 = 8'b00000000;



  assign cfblk114_const_val_1 = 8'b00000000;



  assign cfblk65_const_val_1 = 8'b00000000;



  assign cfblk82_const_val_1 = 8'b00000000;



  assign cfblk147_out1 = 8'b00000001;



  assign cfblk39_const_val_1 = 8'b00000000;



  assign cfblk73_const_val_1 = 8'b00000000;



  assign cfblk106_const_val_1 = 8'b00000000;



  assign cfblk93_const_val_1 = 8'b00000000;



  assign cfblk94_const_val_1 = 8'b00000000;



  assign cfblk135_const_val_1 = 8'b00000000;



  assign cfblk96_const_val_1 = 8'b00000000;



  cfblk149 u_cfblk149 (.In1(cfblk134_out1),  // uint8
                       .Out1(cfblk149_out1)  // uint8
                       );

  always @(cfblk16_out1, cfblk42_out1) begin
    cfblk47_div_temp = 9'b000000000;
    cfblk47_t_0_0 = 9'b000000000;
    if (cfblk42_out1 == 8'b00000000) begin
      cfblk47_out1 = 8'b11111111;
    end
    else begin
      cfblk47_t_0_0 = {1'b0, cfblk16_out1};
      cfblk47_div_temp = cfblk47_t_0_0 / cfblk42_out1;
      if (cfblk47_div_temp[8] != 1'b0) begin
        cfblk47_out1 = 8'b11111111;
      end
      else begin
        cfblk47_out1 = cfblk47_div_temp[7:0];
      end
    end
  end



  cfblk150 u_cfblk150 (.In1(cfblk47_out1),  // uint8
                       .Out1(cfblk150_out1)  // uint8
                       );

  assign cfblk106_out1 = cfblk150_out1 + cfblk106_const_val_1;



  assign dtc_out_1 = cfblk36_out1;



  assign cfblk66_out1 = dtc_out_1;



  assign cfblk23_out1 = (cfblk66_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk92_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  DotProduct u_cfblk102_inst (.in1(cfblk28_out1),  // uint8
                              .in2(cfblk124_out1),  // uint8
                              .out1(cfblk102_out1)  // uint8
                              );

  assign cfblk76_out1 = cfblk102_out1 + cfblk88_out1;



  assign cfblk80_out1 = cfblk16_out1 + cfblk76_out1;



  assign cfblk39_out1 = cfblk133_out1 + cfblk39_const_val_1;



  assign cfblk74_out1 = cfblk33_out1 + cfblk5_out1;



  always @(cfblk147_out1, cfblk74_out1) begin
    cfblk31_div_temp = 9'b000000000;
    cfblk31_t_0_0 = 9'b000000000;
    if (cfblk74_out1 == 8'b00000000) begin
      cfblk31_out1 = 8'b11111111;
    end
    else begin
      cfblk31_t_0_0 = {1'b0, cfblk147_out1};
      cfblk31_div_temp = cfblk31_t_0_0 / cfblk74_out1;
      if (cfblk31_div_temp[8] != 1'b0) begin
        cfblk31_out1 = 8'b11111111;
      end
      else begin
        cfblk31_out1 = cfblk31_div_temp[7:0];
      end
    end
  end



  assign dtc_out_2 = cfblk31_out1;



  assign cfblk127_out1 = dtc_out_2;



  always @(cfblk127_out1, cfblk39_out1) begin
    cfblk122_div_temp = 9'b000000000;
    cfblk122_t_0_0 = 9'b000000000;
    if (cfblk39_out1 == 8'b00000000) begin
      cfblk122_out1 = 8'b11111111;
    end
    else begin
      cfblk122_t_0_0 = {1'b0, cfblk127_out1};
      cfblk122_div_temp = cfblk122_t_0_0 / cfblk39_out1;
      if (cfblk122_div_temp[8] != 1'b0) begin
        cfblk122_out1 = 8'b11111111;
      end
      else begin
        cfblk122_out1 = cfblk122_div_temp[7:0];
      end
    end
  end



  always @(cfblk63_out1, cfblk7_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk63_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk7_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk63_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk44_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  always @(cfblk158_out1, cfblk75_out1) begin
    cfblk128_div_temp = 9'b000000000;
    cfblk128_t_0_0 = 9'b000000000;
    if (cfblk158_out1 == 8'b00000000) begin
      cfblk128_out1 = 8'b11111111;
    end
    else begin
      cfblk128_t_0_0 = {1'b0, cfblk75_out1};
      cfblk128_div_temp = cfblk128_t_0_0 / cfblk158_out1;
      if (cfblk128_div_temp[8] != 1'b0) begin
        cfblk128_out1 = 8'b11111111;
      end
      else begin
        cfblk128_out1 = cfblk128_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk120_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk10_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  DotProduct_block u_cfblk11_inst (.in1(cfblk85_out1),  // uint8
                                   .in2(cfblk99_out1),  // uint8
                                   .out1(cfblk11_out1)  // uint8
                                   );

  assign cfblk7_out1 = (cfblk11_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk7_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  always @(cfblk151_out1, cfblk4_out1) begin
    cfblk132_div_temp = 9'b000000000;
    cfblk132_t_0_0 = 9'b000000000;
    if (cfblk4_out1 == 8'b00000000) begin
      cfblk132_out1 = 8'b11111111;
    end
    else begin
      cfblk132_t_0_0 = {1'b0, cfblk151_out1};
      cfblk132_div_temp = cfblk132_t_0_0 / cfblk4_out1;
      if (cfblk132_div_temp[8] != 1'b0) begin
        cfblk132_out1 = 8'b11111111;
      end
      else begin
        cfblk132_out1 = cfblk132_div_temp[7:0];
      end
    end
  end



  DotProduct_block2 u_cfblk117_inst (.in1(cfblk132_out1),  // uint8
                                     .in2(cfblk73_out1),  // uint8
                                     .out1(cfblk117_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk117_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk140_out1 = cfblk159_out1 + cfblk17_out1;



  assign cfblk16_out1 = cfblk140_out1 + cfblk166_out1;



  assign cfblk130_out1 = cfblk118_out1 + cfblk16_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk130_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign dtc_out_3 = cfblk115_out1;



  assign cfblk63_out1 = dtc_out_3;



  always @(cfblk144_out1, cfblk63_out1) begin
    cfblk36_div_temp = 9'b000000000;
    cfblk36_t_0_0 = 9'b000000000;
    if (cfblk144_out1 == 8'b00000000) begin
      cfblk36_out1 = 8'b11111111;
    end
    else begin
      cfblk36_t_0_0 = {1'b0, cfblk63_out1};
      cfblk36_div_temp = cfblk36_t_0_0 / cfblk144_out1;
      if (cfblk36_div_temp[8] != 1'b0) begin
        cfblk36_out1 = 8'b11111111;
      end
      else begin
        cfblk36_out1 = cfblk36_div_temp[7:0];
      end
    end
  end



  assign dtc_out_4 = cfblk36_out1;



  assign cfblk116_out1 = dtc_out_4;



  cfblk152 u_cfblk152 (.In1(cfblk116_out1),  // uint8
                       .Out1(cfblk152_out1)  // uint8
                       );

  assign cfblk110_out1 = cfblk70_out1 + cfblk110_const_val_1;



  DotProduct_block9 u_cfblk49_inst (.in1(cfblk88_out1),  // uint8
                                    .in2(cfblk135_out1),  // uint8
                                    .out1(cfblk49_out1)  // uint8
                                    );

  assign cfblk46_out1 = (cfblk49_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk110_out1, cfblk46_out1) begin
    cfblk61_div_temp = 9'b000000000;
    cfblk61_t_0_0 = 9'b000000000;
    if (cfblk110_out1 == 8'b00000000) begin
      cfblk61_out1 = 8'b11111111;
    end
    else begin
      cfblk61_t_0_0 = {1'b0, cfblk46_out1};
      cfblk61_div_temp = cfblk61_t_0_0 / cfblk110_out1;
      if (cfblk61_div_temp[8] != 1'b0) begin
        cfblk61_out1 = 8'b11111111;
      end
      else begin
        cfblk61_out1 = cfblk61_div_temp[7:0];
      end
    end
  end



  assign cfblk56_out1 = (cfblk61_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_5 = cfblk56_out1;



  assign cfblk29_out1 = dtc_out_5;



  DotProduct_block11 u_cfblk90_inst (.in1(cfblk144_out1),  // uint8
                                     .in2(cfblk29_out1),  // uint8
                                     .out1(cfblk90_out1)  // uint8
                                     );

  assign cfblk114_out1 = cfblk90_out1 + cfblk114_const_val_1;



  assign dtc_out_6 = cfblk114_out1;



  assign cfblk126_out1 = dtc_out_6;



  assign cfblk86_out1 = cfblk118_out1 + cfblk139_out1;



  always @(cfblk86_out1, cfblk94_out1) begin
    cfblk103_div_temp = 9'b000000000;
    cfblk103_t_0_0 = 9'b000000000;
    if (cfblk94_out1 == 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk86_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk94_out1;
      if (cfblk103_div_temp[8] != 1'b0) begin
        cfblk103_out1 = 8'b11111111;
      end
      else begin
        cfblk103_out1 = cfblk103_div_temp[7:0];
      end
    end
  end



  DotProduct_block8 u_cfblk27_inst (.in1(cfblk103_out1),  // uint8
                                    .in2(cfblk126_out1),  // uint8
                                    .out1(cfblk27_out1)  // uint8
                                    );

  assign cfblk58_out1 = cfblk33_out1 - cfblk151_out1;



  assign cfblk20_out1 = cfblk58_out1 + cfblk27_out1;



  assign cfblk14_out1 = cfblk82_out1 + cfblk14_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk14_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk17_out1 = cfblk108_out1 - cfblk65_out1;



  always @(cfblk121_out1, cfblk17_out1) begin
    cfblk124_div_temp = 9'b000000000;
    cfblk124_t_0_0 = 9'b000000000;
    if (cfblk121_out1 == 8'b00000000) begin
      cfblk124_out1 = 8'b11111111;
    end
    else begin
      cfblk124_t_0_0 = {1'b0, cfblk17_out1};
      cfblk124_div_temp = cfblk124_t_0_0 / cfblk121_out1;
      if (cfblk124_div_temp[8] != 1'b0) begin
        cfblk124_out1 = 8'b11111111;
      end
      else begin
        cfblk124_out1 = cfblk124_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk124_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk121_out1 = cfblk167_out1 + cfblk65_out1;



  assign cfblk104_out1 = cfblk148_out1 - cfblk67_out1;



  assign cfblk57_out1 = cfblk104_out1 + cfblk121_out1;



  always @(cfblk163_out1, cfblk57_out1) begin
    cfblk48_div_temp = 9'b000000000;
    cfblk48_t_0_0 = 9'b000000000;
    if (cfblk163_out1 == 8'b00000000) begin
      cfblk48_out1 = 8'b11111111;
    end
    else begin
      cfblk48_t_0_0 = {1'b0, cfblk57_out1};
      cfblk48_div_temp = cfblk48_t_0_0 / cfblk163_out1;
      if (cfblk48_div_temp[8] != 1'b0) begin
        cfblk48_out1 = 8'b11111111;
      end
      else begin
        cfblk48_out1 = cfblk48_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk82_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk108_out1 = cfblk162_out1 + cfblk48_out1;



  assign cfblk45_out1 = cfblk77_out1 - cfblk108_out1;



  assign dtc_out_7 = cfblk45_out1;



  assign cfblk85_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk85_out1;



  assign cfblk118_out1 = dtc_out_8;



  assign cfblk19_out1 = cfblk125_out1 + cfblk118_out1;



  DotProduct_block7 u_cfblk15_inst (.in1(cfblk50_out1),  // uint8
                                    .in2(cfblk19_out1),  // uint8
                                    .out1(cfblk15_out1)  // uint8
                                    );

  assign dtc_out_9 = cfblk15_out1;



  assign cfblk35_out1 = dtc_out_9;



  assign cfblk30_out1 = cfblk35_out1 + cfblk20_out1;



  DotProduct_block5 u_cfblk134_inst (.in1(cfblk30_out1),  // uint8
                                     .in2(cfblk152_out1),  // uint8
                                     .out1(cfblk134_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk134_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk125_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk87_out1 = cfblk38_out1 - cfblk1_out1;



  assign cfblk123_out1 = cfblk87_out1 + cfblk164_out1;



  assign cfblk99_out1 = cfblk123_out1 + cfblk99_const_val_1;



  assign cfblk67_out1 = (cfblk99_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk37_out1 = (cfblk67_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_10 = cfblk28_out1;



  assign cfblk51_out1 = dtc_out_10;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk51_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk101_out1 = cfblk170_out1 + cfblk37_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk33_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  always @(cfblk101_out1, cfblk168_out1) begin
    cfblk136_div_temp = 9'b000000000;
    cfblk136_t_0_0 = 9'b000000000;
    if (cfblk101_out1 == 8'b00000000) begin
      cfblk136_out1 = 8'b11111111;
    end
    else begin
      cfblk136_t_0_0 = {1'b0, cfblk168_out1};
      cfblk136_div_temp = cfblk136_t_0_0 / cfblk101_out1;
      if (cfblk136_div_temp[8] != 1'b0) begin
        cfblk136_out1 = 8'b11111111;
      end
      else begin
        cfblk136_out1 = cfblk136_div_temp[7:0];
      end
    end
  end



  assign dtc_out_11 = cfblk42_out1;



  assign cfblk78_out1 = dtc_out_11;



  DotProduct_block1 u_cfblk113_inst (.in1(cfblk1_out1),  // uint8
                                     .in2(cfblk78_out1),  // uint8
                                     .out1(cfblk113_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk113_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  always @(cfblk136_out1, cfblk169_out1) begin
    cfblk28_div_temp = 9'b000000000;
    cfblk28_t_0_0 = 9'b000000000;
    if (cfblk136_out1 == 8'b00000000) begin
      cfblk28_out1 = 8'b11111111;
    end
    else begin
      cfblk28_t_0_0 = {1'b0, cfblk169_out1};
      cfblk28_div_temp = cfblk28_t_0_0 / cfblk136_out1;
      if (cfblk28_div_temp[8] != 1'b0) begin
        cfblk28_out1 = 8'b11111111;
      end
      else begin
        cfblk28_out1 = cfblk28_div_temp[7:0];
      end
    end
  end



  always @(cfblk155_out1, cfblk28_out1) begin
    cfblk59_div_temp = 9'b000000000;
    cfblk59_t_0_0 = 9'b000000000;
    if (cfblk155_out1 == 8'b00000000) begin
      cfblk59_out1 = 8'b11111111;
    end
    else begin
      cfblk59_t_0_0 = {1'b0, cfblk28_out1};
      cfblk59_div_temp = cfblk59_t_0_0 / cfblk155_out1;
      if (cfblk59_div_temp[8] != 1'b0) begin
        cfblk59_out1 = 8'b11111111;
      end
      else begin
        cfblk59_out1 = cfblk59_div_temp[7:0];
      end
    end
  end



  assign cfblk105_out1 = cfblk59_out1 - cfblk157_out1;



  assign cfblk133_out1 = cfblk105_out1 + cfblk161_out1;



  assign cfblk2_out1 = {cfblk133_out1, cfblk36_out1};



  assign cfblk180_out1 = cfblk2_out1[7:0];



  assign cfblk65_out1 = cfblk180_out1 + cfblk65_const_val_1;



  assign dtc_out_12 = cfblk65_out1;



  assign cfblk88_out1 = dtc_out_12;



  assign cfblk100_out1 = cfblk148_out1 + cfblk88_out1;



  assign dtc_out_13 = cfblk100_out1;



  assign cfblk42_out1 = dtc_out_13;



  DotProduct_block4 u_cfblk131_inst (.in1(cfblk145_out1),  // uint8
                                     .in2(cfblk42_out1),  // uint8
                                     .out1(cfblk131_out1)  // uint8
                                     );

  assign cfblk43_out1 = cfblk131_out1 + cfblk108_out1;



  assign cfblk33_out1 = cfblk43_out1 - cfblk115_out1;



  DotProduct_block10 u_cfblk70_inst (.in1(cfblk33_out1),  // uint8
                                     .in2(cfblk11_out1),  // uint8
                                     .out1(cfblk70_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk70_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(cfblk128_out1, cfblk160_out1) begin
    cfblk52_div_temp = 9'b000000000;
    cfblk52_t_0_0 = 9'b000000000;
    if (cfblk128_out1 == 8'b00000000) begin
      cfblk52_out1 = 8'b11111111;
    end
    else begin
      cfblk52_t_0_0 = {1'b0, cfblk160_out1};
      cfblk52_div_temp = cfblk52_t_0_0 / cfblk128_out1;
      if (cfblk52_div_temp[8] != 1'b0) begin
        cfblk52_out1 = 8'b11111111;
      end
      else begin
        cfblk52_out1 = cfblk52_div_temp[7:0];
      end
    end
  end



  assign cfblk82_out1 = cfblk52_out1 + cfblk82_const_val_1;



  assign cfblk120_out1 = cfblk82_out1 + cfblk122_out1;



  assign dtc_out_14 = cfblk120_out1;



  assign cfblk77_out1 = dtc_out_14;



  assign cfblk62_out1 = cfblk77_out1 - cfblk4_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk62_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk5_out1 = cfblk156_out1 + cfblk80_out1;



  assign dtc_out_15 = cfblk5_out1;



  assign cfblk50_out1 = dtc_out_15;



  assign cfblk10_out1 = (cfblk50_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk75_out1 = cfblk10_out1 + cfblk108_out1;



  assign cfblk73_out1 = cfblk75_out1 + cfblk73_const_val_1;



  assign cfblk24_out1 = cfblk73_out1 - cfblk135_out1;



  always @(cfblk146_out1, cfblk24_out1) begin
    cfblk125_div_temp = 9'b000000000;
    cfblk125_t_0_0 = 9'b000000000;
    if (cfblk24_out1 == 8'b00000000) begin
      cfblk125_out1 = 8'b11111111;
    end
    else begin
      cfblk125_t_0_0 = {1'b0, cfblk146_out1};
      cfblk125_div_temp = cfblk125_t_0_0 / cfblk24_out1;
      if (cfblk125_div_temp[8] != 1'b0) begin
        cfblk125_out1 = 8'b11111111;
      end
      else begin
        cfblk125_out1 = cfblk125_div_temp[7:0];
      end
    end
  end



  always @(cfblk125_out1, cfblk165_out1) begin
    cfblk139_div_temp = 9'b000000000;
    cfblk139_t_0_0 = 9'b000000000;
    if (cfblk165_out1 == 8'b00000000) begin
      cfblk139_out1 = 8'b11111111;
    end
    else begin
      cfblk139_t_0_0 = {1'b0, cfblk125_out1};
      cfblk139_div_temp = cfblk139_t_0_0 / cfblk165_out1;
      if (cfblk139_div_temp[8] != 1'b0) begin
        cfblk139_out1 = 8'b11111111;
      end
      else begin
        cfblk139_out1 = cfblk139_div_temp[7:0];
      end
    end
  end



  cfblk151 u_cfblk151 (.In1(cfblk139_out1),  // uint8
                       .Out1(cfblk151_out1)  // uint8
                       );

  assign cfblk92_out1 = cfblk151_out1 + cfblk23_out1;



  DotProduct_block6 u_cfblk142_inst (.in1(cfblk92_out1),  // uint8
                                     .in2(cfblk106_out1),  // uint8
                                     .out1(cfblk142_out1)  // uint8
                                     );

  assign cfblk93_out1 = cfblk142_out1 + cfblk93_const_val_1;



  DotProduct_block3 u_cfblk129_inst (.in1(cfblk93_out1),  // uint8
                                     .in2(cfblk149_out1),  // uint8
                                     .out1(cfblk129_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk129_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  cfblk1 u_cfblk1 (.u(cfblk154_out1),  // uint8
                   .y(cfblk1_out1)  // uint8
                   );

  assign cfblk94_out1 = cfblk1_out1 + cfblk94_const_val_1;



  assign cfblk135_out1 = cfblk94_out1 + cfblk135_const_val_1;



  assign cfblk96_out1 = cfblk135_out1 + cfblk96_const_val_1;



  assign dtc_out_16 = cfblk96_out1;



  assign cfblk68_out1 = dtc_out_16;



  assign cfblk115_out1 = (cfblk68_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign Hdl_out = cfblk115_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

