// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1706\sampleModel1706_sub\Subsystem.v
// Created: 2024-08-13 18:41:54
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1706_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk111_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk45_const_val_1;  // uint8
  wire [7:0] cfblk89_const_val_1;  // uint8
  wire [7:0] cfblk102_const_val_1;  // uint8
  wire [7:0] cfblk12_const_val_1;  // uint8
  wire [7:0] cfblk61_const_val_1;  // uint8
  wire [7:0] cfblk90_const_val_1;  // uint8
  wire [7:0] bitMask_for_cfblk5;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk95_const_val_1;  // uint8
  wire [7:0] cfblk30_const_val_1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  reg [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk72_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [3:0] cfblk4_out1;  // ufix4_E4
  wire [31:0] cfblk96_add_cast;  // ufix32
  wire [31:0] cfblk96_add_temp;  // ufix32
  wire [31:0] cfblk96_1;  // ufix32
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [31:0] cfblk117_add_temp;  // ufix32
  wire [31:0] cfblk117_1;  // ufix32
  wire [31:0] cfblk117_2;  // ufix32
  reg [8:0] cfblk111_div_temp;  // ufix9
  reg [8:0] cfblk111_t_0_0;  // ufix9
  reg [8:0] cfblk72_div_temp;  // ufix9
  reg [8:0] cfblk72_t_0_0;  // ufix9
  reg [8:0] cfblk80_div_temp;  // ufix9
  reg [8:0] cfblk80_t_0_0;  // ufix9
  reg [8:0] cfblk124_div_temp;  // ufix9
  reg [8:0] cfblk124_t_0_0;  // ufix9
  reg [8:0] cfblk34_div_temp;  // ufix9
  reg [8:0] cfblk34_t_0_0;  // ufix9
  reg [8:0] cfblk14_div_temp;  // ufix9
  reg [8:0] cfblk14_t_0_0;  // ufix9


  cfblk128 u_cfblk128 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk128_out1)  // uint8
                       );

  assign dtc_out = cfblk128_out1;



  assign cfblk113_out1 = dtc_out;



  assign cfblk129_out1 = 8'b00000001;



  assign cfblk130_out1 = 8'b00000000;



  assign dtc_out_1 = cfblk130_out1;



  assign cfblk83_out1 = dtc_out_1;



  always @(cfblk129_out1, cfblk83_out1) begin
    cfblk111_div_temp = 9'b000000000;
    cfblk111_t_0_0 = 9'b000000000;
    if (cfblk83_out1 == 8'b00000000) begin
      cfblk111_out1 = 8'b11111111;
    end
    else begin
      cfblk111_t_0_0 = {1'b0, cfblk129_out1};
      cfblk111_div_temp = cfblk111_t_0_0 / cfblk83_out1;
      if (cfblk111_div_temp[8] != 1'b0) begin
        cfblk111_out1 = 8'b11111111;
      end
      else begin
        cfblk111_out1 = cfblk111_div_temp[7:0];
      end
    end
  end



  assign dtc_out_2 = cfblk111_out1;



  assign cfblk122_out1 = dtc_out_2;



  assign enb = clk_enable;

  assign cfblk131_out1 = 8'b00000001;



  assign cfblk45_const_val_1 = 8'b00000000;



  assign cfblk89_const_val_1 = 8'b00000000;



  assign cfblk102_const_val_1 = 8'b00000000;



  assign cfblk12_const_val_1 = 8'b00000000;



  assign cfblk61_const_val_1 = 8'b00000000;



  assign cfblk90_const_val_1 = 8'b00000000;



  assign bitMask_for_cfblk5 = 8'b11011001;



  assign cfblk127_out1 = 8'b00000001;



  assign cfblk95_const_val_1 = 8'b00000000;



  assign cfblk30_const_val_1 = 8'b00000000;



  assign cfblk2_out1 = 8'b00000000;



  assign cfblk42_out1 = cfblk91_out1 + cfblk2_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk42_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  assign cfblk58_out1 = cfblk127_out1 + cfblk109_out1;



  assign cfblk20_out1 = cfblk129_out1 + cfblk58_out1;



  assign cfblk28_out1 = cfblk20_out1 + cfblk78_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk28_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk23_out1 = (cfblk132_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_3 = cfblk23_out1;



  assign cfblk32_out1 = dtc_out_3;



  assign cfblk12_out1 = cfblk106_out1 + cfblk12_const_val_1;



  assign cfblk89_out1 = cfblk7_out1 + cfblk89_const_val_1;



  assign cfblk102_out1 = cfblk89_out1 + cfblk102_const_val_1;



  DotProduct_block2 u_cfblk123_inst (.in1(cfblk124_out1),  // uint8
                                     .in2(cfblk102_out1),  // uint8
                                     .out1(cfblk123_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk123_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  assign cfblk65_out1 = cfblk119_out1 - cfblk146_out1;



  cfblk135 u_cfblk135 (.In1(cfblk106_out1),  // uint8
                       .Out1(cfblk135_out1)  // uint8
                       );

  assign cfblk94_out1 = (cfblk135_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk36_out1 = (cfblk94_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk55_out1 = cfblk36_out1 + cfblk65_out1;



  assign dtc_out_4 = cfblk55_out1;



  assign cfblk100_out1 = dtc_out_4;



  assign cfblk84_out1 = cfblk100_out1 + cfblk113_out1;



  assign cfblk39_out1 = (cfblk11_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk37_out1 = cfblk33_out1 + cfblk39_out1;



  assign cfblk15_out1 = (cfblk37_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk134 u_cfblk134 (.In1(cfblk15_out1),  // uint8
                       .Out1(cfblk134_out1)  // uint8
                       );

  cfblk136 u_cfblk136 (.In1(cfblk134_out1),  // uint8
                       .Out1(cfblk136_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk136_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  assign cfblk26_out1 = cfblk139_out1 + cfblk84_out1;



  cfblk132 u_cfblk132 (.In1(cfblk26_out1),  // uint8
                       .Out1(cfblk132_out1)  // uint8
                       );

  assign cfblk44_out1 = (cfblk132_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk74_out1 = (cfblk44_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk109_out1 = (cfblk74_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk57_out1 = cfblk109_out1 + cfblk12_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk57_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk106_out1 = cfblk149_out1 + cfblk65_out1;



  always @(cfblk106_out1, cfblk128_out1) begin
    cfblk72_div_temp = 9'b000000000;
    cfblk72_t_0_0 = 9'b000000000;
    if (cfblk128_out1 == 8'b00000000) begin
      cfblk72_out1 = 8'b11111111;
    end
    else begin
      cfblk72_t_0_0 = {1'b0, cfblk106_out1};
      cfblk72_div_temp = cfblk72_t_0_0 / cfblk128_out1;
      if (cfblk72_div_temp[8] != 1'b0) begin
        cfblk72_out1 = 8'b11111111;
      end
      else begin
        cfblk72_out1 = cfblk72_div_temp[7:0];
      end
    end
  end



  assign dtc_out_5 = cfblk72_out1;



  assign cfblk98_out1 = dtc_out_5;



  always @(cfblk83_out1, cfblk98_out1) begin
    cfblk80_div_temp = 9'b000000000;
    cfblk80_t_0_0 = 9'b000000000;
    if (cfblk83_out1 == 8'b00000000) begin
      cfblk80_out1 = 8'b11111111;
    end
    else begin
      cfblk80_t_0_0 = {1'b0, cfblk98_out1};
      cfblk80_div_temp = cfblk80_t_0_0 / cfblk83_out1;
      if (cfblk80_div_temp[8] != 1'b0) begin
        cfblk80_out1 = 8'b11111111;
      end
      else begin
        cfblk80_out1 = cfblk80_div_temp[7:0];
      end
    end
  end



  assign cfblk61_out1 = cfblk80_out1 + cfblk61_const_val_1;



  assign cfblk90_out1 = cfblk61_out1 + cfblk90_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk90_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk45_out1 = cfblk107_out1 + cfblk45_const_val_1;



  assign dtc_out_6 = cfblk25_out1;



  assign cfblk105_out1 = dtc_out_6;



  assign cfblk35_out1 = cfblk105_out1 + cfblk14_out1;



  assign cfblk73_out1 = cfblk71_out1 - cfblk35_out1;



  always @(cfblk45_out1, cfblk73_out1) begin
    cfblk124_div_temp = 9'b000000000;
    cfblk124_t_0_0 = 9'b000000000;
    if (cfblk45_out1 == 8'b00000000) begin
      cfblk124_out1 = 8'b11111111;
    end
    else begin
      cfblk124_t_0_0 = {1'b0, cfblk73_out1};
      cfblk124_div_temp = cfblk124_t_0_0 / cfblk45_out1;
      if (cfblk124_div_temp[8] != 1'b0) begin
        cfblk124_out1 = 8'b11111111;
      end
      else begin
        cfblk124_out1 = cfblk124_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk124_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk119_out1 = cfblk145_out1 + cfblk151_out1;



  DotProduct_block3 u_cfblk16_inst (.in1(cfblk78_out1),  // uint8
                                    .in2(cfblk83_out1),  // uint8
                                    .out1(cfblk16_out1)  // uint8
                                    );

  assign dtc_out_7 = cfblk16_out1;



  assign cfblk108_out1 = dtc_out_7;



  DotProduct u_cfblk103_inst (.in1(cfblk108_out1),  // uint8
                              .in2(cfblk119_out1),  // uint8
                              .out1(cfblk103_out1)  // uint8
                              );

  assign cfblk4_out1 = cfblk103_out1[7:4];



  assign cfblk96_add_cast = {24'b0, {cfblk4_out1, 4'b0000}};
  assign cfblk96_1 = {24'b0, cfblk32_out1};
  assign cfblk96_add_temp = cfblk96_add_cast + cfblk96_1;
  assign cfblk96_out1 = cfblk96_add_temp[7:0];



  DotProduct_block1 u_cfblk121_inst (.in1(cfblk131_out1),  // uint8
                                     .in2(cfblk96_out1),  // uint8
                                     .out1(cfblk121_out1)  // uint8
                                     );

  assign cfblk25_out1 = cfblk121_out1 + cfblk45_out1;



  always @(cfblk18_out1, cfblk25_out1) begin
    cfblk34_div_temp = 9'b000000000;
    cfblk34_t_0_0 = 9'b000000000;
    if (cfblk25_out1 == 8'b00000000) begin
      cfblk34_out1 = 8'b11111111;
    end
    else begin
      cfblk34_t_0_0 = {1'b0, cfblk18_out1};
      cfblk34_div_temp = cfblk34_t_0_0 / cfblk25_out1;
      if (cfblk34_div_temp[8] != 1'b0) begin
        cfblk34_out1 = 8'b11111111;
      end
      else begin
        cfblk34_out1 = cfblk34_div_temp[7:0];
      end
    end
  end



  assign cfblk5_out1 = cfblk34_out1 & bitMask_for_cfblk5;



  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk5_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  DotProduct_block u_cfblk107_inst (.in1(cfblk140_out1),  // uint8
                                    .in2(cfblk44_out1),  // uint8
                                    .out1(cfblk107_out1)  // uint8
                                    );

  assign dtc_out_8 = cfblk107_out1;



  assign cfblk33_out1 = dtc_out_8;



  assign cfblk67_out1 = (cfblk33_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk115_out1 = (cfblk67_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_9 = cfblk115_out1;



  assign cfblk69_out1 = dtc_out_9;



  cfblk6 u_cfblk6 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk69_out1),  // uint8
                   .Y(cfblk6_out1)  // uint8
                   );

  DotProduct_block4 u_cfblk64_inst (.in1(cfblk6_out1),  // uint8
                                    .in2(cfblk147_out1),  // uint8
                                    .out1(cfblk64_out1)  // uint8
                                    );

  assign cfblk95_out1 = cfblk64_out1 + cfblk95_const_val_1;



  assign cfblk18_out1 = cfblk95_out1 - cfblk113_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk24_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  DotProduct_block5 u_cfblk87_inst (.in1(cfblk141_out1),  // uint8
                                    .in2(cfblk18_out1),  // uint8
                                    .out1(cfblk87_out1)  // uint8
                                    );

  assign cfblk11_out1 = cfblk122_out1 + cfblk87_out1;



  assign dtc_out_10 = cfblk11_out1;



  assign cfblk71_out1 = dtc_out_10;



  assign cfblk30_out1 = cfblk71_out1 + cfblk30_const_val_1;



  assign cfblk7_out1 = cfblk30_out1 - cfblk142_out1;



  assign dtc_out_11 = cfblk7_out1;



  assign cfblk78_out1 = dtc_out_11;



  assign cfblk24_out1 = cfblk78_out1 - cfblk20_out1;



  assign cfblk53_out1 = (cfblk24_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk53_out1, cfblk78_out1) begin
    cfblk14_div_temp = 9'b000000000;
    cfblk14_t_0_0 = 9'b000000000;
    if (cfblk78_out1 == 8'b00000000) begin
      cfblk14_out1 = 8'b11111111;
    end
    else begin
      cfblk14_t_0_0 = {1'b0, cfblk53_out1};
      cfblk14_div_temp = cfblk14_t_0_0 / cfblk78_out1;
      if (cfblk14_div_temp[8] != 1'b0) begin
        cfblk14_out1 = 8'b11111111;
      end
      else begin
        cfblk14_out1 = cfblk14_div_temp[7:0];
      end
    end
  end



  assign cfblk77_out1 = (cfblk14_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk91_out1 = cfblk113_out1 - cfblk77_out1;



  assign Hdl_out = cfblk91_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

