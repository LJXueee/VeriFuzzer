// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1517\sampleModel1517_2_sub\Subsystem.v
// Created: 2024-07-01 04:35:52
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1517_2_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [15:0] cfblk161_out1;  // uint16
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk106_const_val_1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk54_const_val_1;  // uint8
  wire [7:0] cfblk87_const_val_1;  // uint8
  wire [7:0] cfblk7_const_val_1;  // uint8
  wire [7:0] cfblk53_const_val_1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] Mysubsystem_27_out1;  // uint8
  wire [7:0] cfblk83_const_val_1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire cfblk5_out1;
  wire signed [7:0] cfblk120_out1;  // int8
  wire signed [31:0] dtc_out;  // sfix32
  wire [7:0] cfblk33_out1;  // uint8
  wire cfblk3_relop1;
  reg  [0:1] cfblk181_reg;  // ufix1 [2]
  wire [0:1] cfblk181_reg_next;  // ufix1 [2]
  wire cfblk181_out1;
  wire [7:0] cfblk197_out1;  // uint8
  reg [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  reg [7:0] cfblk118_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [3:0] cfblk1_out1;  // ufix4_E4
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire cfblk169_out1_is_not0;
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk163_out1;  // uint8
  wire cfblk15_out1_is_not0;
  wire [7:0] cfblk61_out1;  // uint8
  reg [7:0] cfblk134_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire signed [31:0] cfblk145_sub_temp;  // sfix32
  wire signed [31:0] cfblk145_1;  // sfix32
  wire signed [31:0] cfblk145_2;  // sfix32
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  reg [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [31:0] cfblk92_add_temp;  // ufix32
  wire [31:0] cfblk92_1;  // ufix32
  wire [31:0] cfblk92_2;  // ufix32
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [31:0] cfblk49_add_temp;  // ufix32
  wire [31:0] cfblk49_1;  // ufix32
  wire [31:0] cfblk49_2;  // ufix32
  reg [8:0] cfblk134_div_temp;  // ufix9
  reg [8:0] cfblk134_t_0_0;  // ufix9
  reg [8:0] cfblk86_div_temp;  // ufix9
  reg [8:0] cfblk86_t_0_0;  // ufix9
  reg [8:0] cfblk10_div_temp;  // ufix9
  reg [8:0] cfblk10_t_0_0;  // ufix9
  reg [8:0] cfblk133_div_temp;  // ufix9
  reg [8:0] cfblk133_t_0_0;  // ufix9
  reg [8:0] cfblk30_div_temp;  // ufix9
  reg [8:0] cfblk30_t_0_0;  // ufix9
  reg [8:0] cfblk20_div_temp;  // ufix9
  reg [8:0] cfblk20_t_0_0;  // ufix9
  reg [8:0] cfblk118_div_temp;  // ufix9
  reg [8:0] cfblk118_t_0_0;  // ufix9


  assign cfblk158_out1 = 8'b00000001;



  assign cfblk156_out1 = 8'b00000001;



  assign cfblk4_out1 = 8'b00000000;



  assign enb = clk_enable;

  cfblk161 u_cfblk161 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk161_out1)  // uint16
                       );

  assign cfblk40_out1 = cfblk161_out1[7:0];



  assign cfblk106_const_val_1 = 8'b00000000;



  assign cfblk106_out1 = cfblk40_out1 + cfblk106_const_val_1;



  assign cfblk135_out1 = (cfblk106_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk54_const_val_1 = 8'b00000000;



  assign cfblk87_const_val_1 = 8'b00000000;



  assign cfblk7_const_val_1 = 8'b00000000;



  assign cfblk53_const_val_1 = 8'b00000000;



  assign cfblk155_out1 = 8'b00000001;



  assign cfblk31_out1 = (cfblk155_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk159_out1 = 8'b00000001;



  Mysubsystem_27 u_Mysubsystem_27 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_27_out1)  // uint8
                                   );

  assign cfblk83_const_val_1 = 8'b00000000;



  DotProduct_block5 u_cfblk71_inst (.in1(cfblk53_out1),  // uint8
                                    .in2(Mysubsystem_27_out1),  // uint8
                                    .out1(cfblk71_out1)  // uint8
                                    );

  assign cfblk77_out1 = cfblk159_out1 + cfblk71_out1;



  assign cfblk143_out1 = cfblk145_out1 - cfblk155_out1;



  DotProduct_block1 u_cfblk147_inst (.in1(cfblk143_out1),  // uint8
                                     .in2(cfblk77_out1),  // uint8
                                     .out1(cfblk147_out1)  // uint8
                                     );

  assign cfblk83_out1 = cfblk147_out1 + cfblk83_const_val_1;



  assign cfblk120_out1 = (cfblk5_out1 > 1'b0 ? 8'sb00000001 :
              8'sb00000000);



  assign dtc_out = {{24{cfblk120_out1[7]}}, cfblk120_out1};



  assign cfblk33_out1 = dtc_out[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 1'b0;
        cfblk181_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk3_relop1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign cfblk197_out1 = {7'b0, cfblk181_out1};



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk10_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk16_out1 = cfblk102_out1 + cfblk173_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk10_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign dtc_out_1 = cfblk118_out1;



  assign cfblk21_out1 = dtc_out_1;



  assign cfblk110_out1 = cfblk21_out1 - cfblk131_out1;



  DotProduct_block u_cfblk109_inst (.in1(cfblk135_out1),  // uint8
                                    .in2(cfblk121_out1),  // uint8
                                    .out1(cfblk109_out1)  // uint8
                                    );

  assign cfblk126_out1 = cfblk109_out1 + cfblk110_out1;



  assign cfblk26_out1 = cfblk14_out1 + cfblk86_out1;



  assign cfblk23_out1 = cfblk26_out1 - cfblk126_out1;



  assign cfblk8_out1 = cfblk57_out1 + cfblk23_out1;



  assign cfblk142_out1 = cfblk8_out1 + cfblk138_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk142_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk1_out1 = cfblk167_out1[7:4];



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk97_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk17_out1 = cfblk174_out1 + cfblk1_out1;



  assign dtc_out_2 = cfblk17_out1;



  assign cfblk57_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk29_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk169_out1_is_not0 = cfblk169_out1 != 8'b00000000;



  assign cfblk95_out1 = (cfblk105_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk70_out1 = (cfblk95_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk70_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk14_out1 = cfblk51_out1 - cfblk170_out1;



  cfblk163 u_cfblk163 (.In1(cfblk14_out1),  // uint8
                       .Out1(cfblk163_out1)  // uint8
                       );

  assign cfblk15_out1_is_not0 = cfblk163_out1 != 8'b00000000;



  assign cfblk5_out1 = cfblk15_out1_is_not0 & cfblk169_out1_is_not0;



  assign cfblk105_out1 = cfblk61_out1 - cfblk51_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk134_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk52_out1 = cfblk171_out1 + cfblk105_out1;



  assign cfblk54_out1 = cfblk52_out1 + cfblk54_const_val_1;



  assign cfblk145_1 = {24'b0, cfblk54_out1};
  assign cfblk145_2 = {31'b0, cfblk5_out1};
  assign cfblk145_sub_temp = cfblk145_1 - cfblk145_2;
  assign cfblk145_out1 = cfblk145_sub_temp[7:0];



  always @(cfblk145_out1, cfblk65_out1) begin
    cfblk134_div_temp = 9'b000000000;
    cfblk134_t_0_0 = 9'b000000000;
    if (cfblk65_out1 == 8'b00000000) begin
      cfblk134_out1 = 8'b11111111;
    end
    else begin
      cfblk134_t_0_0 = {1'b0, cfblk145_out1};
      cfblk134_div_temp = cfblk134_t_0_0 / cfblk65_out1;
      if (cfblk134_div_temp[8] != 1'b0) begin
        cfblk134_out1 = 8'b11111111;
      end
      else begin
        cfblk134_out1 = cfblk134_div_temp[7:0];
      end
    end
  end



  assign cfblk108_out1 = cfblk134_out1 + cfblk156_out1;



  assign cfblk87_out1 = cfblk108_out1 + cfblk87_const_val_1;



  assign cfblk7_out1 = cfblk87_out1 + cfblk7_const_val_1;



  assign cfblk53_out1 = cfblk7_out1 + cfblk53_const_val_1;



  always @(cfblk19_out1, cfblk53_out1) begin
    cfblk86_div_temp = 9'b000000000;
    cfblk86_t_0_0 = 9'b000000000;
    if (cfblk53_out1 == 8'b00000000) begin
      cfblk86_out1 = 8'b11111111;
    end
    else begin
      cfblk86_t_0_0 = {1'b0, cfblk19_out1};
      cfblk86_div_temp = cfblk86_t_0_0 / cfblk53_out1;
      if (cfblk86_div_temp[8] != 1'b0) begin
        cfblk86_out1 = 8'b11111111;
      end
      else begin
        cfblk86_out1 = cfblk86_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk86_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign cfblk121_out1 = cfblk183_out1 + cfblk57_out1;



  assign dtc_out_3 = cfblk123_out1;



  assign cfblk128_out1 = dtc_out_3;



  assign cfblk132_out1 = cfblk128_out1 - cfblk135_out1;



  always @(cfblk132_out1, cfblk138_out1) begin
    cfblk10_div_temp = 9'b000000000;
    cfblk10_t_0_0 = 9'b000000000;
    if (cfblk132_out1 == 8'b00000000) begin
      cfblk10_out1 = 8'b11111111;
    end
    else begin
      cfblk10_t_0_0 = {1'b0, cfblk138_out1};
      cfblk10_div_temp = cfblk10_t_0_0 / cfblk132_out1;
      if (cfblk10_div_temp[8] != 1'b0) begin
        cfblk10_out1 = 8'b11111111;
      end
      else begin
        cfblk10_out1 = cfblk10_div_temp[7:0];
      end
    end
  end



  assign cfblk97_out1 = cfblk146_out1 + cfblk10_out1;



  always @(cfblk49_out1, cfblk97_out1) begin
    cfblk133_div_temp = 9'b000000000;
    cfblk133_t_0_0 = 9'b000000000;
    if (cfblk49_out1 == 8'b00000000) begin
      cfblk133_out1 = 8'b11111111;
    end
    else begin
      cfblk133_t_0_0 = {1'b0, cfblk97_out1};
      cfblk133_div_temp = cfblk133_t_0_0 / cfblk49_out1;
      if (cfblk133_div_temp[8] != 1'b0) begin
        cfblk133_out1 = 8'b11111111;
      end
      else begin
        cfblk133_out1 = cfblk133_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk133_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk75_out1 = cfblk175_out1 + cfblk121_out1;



  assign dtc_out_4 = cfblk75_out1;



  assign cfblk89_out1 = dtc_out_4;



  cfblk164 u_cfblk164 (.In1(cfblk89_out1),  // uint8
                       .Out1(cfblk164_out1)  // uint8
                       );

  cfblk2 u_cfblk2 (.u(cfblk43_out1),  // uint8
                   .y(cfblk2_out1)  // uint8
                   );

  assign cfblk88_out1 = cfblk2_out1 + cfblk102_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk102_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk20_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk138_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  assign cfblk22_out1 = (cfblk104_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk43_out1 = cfblk22_out1 - cfblk186_out1;



  assign cfblk131_out1 = cfblk43_out1 - cfblk184_out1;



  assign cfblk51_out1 = cfblk60_out1 + cfblk131_out1;



  assign cfblk42_out1 = cfblk51_out1 + cfblk117_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk42_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign dtc_out_5 = cfblk60_out1;



  assign cfblk136_out1 = dtc_out_5;



  assign cfblk103_out1 = (cfblk136_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk162 u_cfblk162 (.In1(cfblk103_out1),  // uint8
                       .Out1(cfblk162_out1)  // uint8
                       );

  assign cfblk139_out1 = cfblk162_out1 + cfblk4_out1;



  assign cfblk85_out1 = cfblk139_out1 + cfblk182_out1;



  assign cfblk69_out1 = cfblk85_out1 + cfblk185_out1;



  assign cfblk104_out1 = (cfblk69_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk56_out1 = (cfblk104_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk55_out1 = cfblk156_out1 - cfblk56_out1;



  assign cfblk3_relop1 = cfblk55_out1 <= cfblk42_out1;



  assign cfblk92_1 = {31'b0, cfblk3_relop1};
  assign cfblk92_2 = {24'b0, cfblk88_out1};
  assign cfblk92_add_temp = cfblk92_1 + cfblk92_2;
  assign cfblk92_out1 = cfblk92_add_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk92_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  DotProduct_block4 u_cfblk58_inst (.in1(cfblk180_out1),  // uint8
                                    .in2(cfblk164_out1),  // uint8
                                    .out1(cfblk58_out1)  // uint8
                                    );

  assign cfblk60_out1 = (cfblk58_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk65_out1 = (cfblk60_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk138_out1 = cfblk65_out1 - cfblk43_out1;



  always @(cfblk138_out1, cfblk46_out1) begin
    cfblk30_div_temp = 9'b000000000;
    cfblk30_t_0_0 = 9'b000000000;
    if (cfblk46_out1 == 8'b00000000) begin
      cfblk30_out1 = 8'b11111111;
    end
    else begin
      cfblk30_t_0_0 = {1'b0, cfblk138_out1};
      cfblk30_div_temp = cfblk30_t_0_0 / cfblk46_out1;
      if (cfblk30_div_temp[8] != 1'b0) begin
        cfblk30_out1 = 8'b11111111;
      end
      else begin
        cfblk30_out1 = cfblk30_div_temp[7:0];
      end
    end
  end



  assign cfblk123_out1 = cfblk30_out1 - cfblk176_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk123_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  always @(cfblk16_out1, cfblk178_out1) begin
    cfblk20_div_temp = 9'b000000000;
    cfblk20_t_0_0 = 9'b000000000;
    if (cfblk16_out1 == 8'b00000000) begin
      cfblk20_out1 = 8'b11111111;
    end
    else begin
      cfblk20_t_0_0 = {1'b0, cfblk178_out1};
      cfblk20_div_temp = cfblk20_t_0_0 / cfblk16_out1;
      if (cfblk20_div_temp[8] != 1'b0) begin
        cfblk20_out1 = 8'b11111111;
      end
      else begin
        cfblk20_out1 = cfblk20_div_temp[7:0];
      end
    end
  end



  DotProduct_block2 u_cfblk19_inst (.in1(cfblk20_out1),  // uint8
                                    .in2(cfblk197_out1),  // uint8
                                    .out1(cfblk19_out1)  // uint8
                                    );

  assign dtc_out_6 = cfblk19_out1;



  assign cfblk66_out1 = dtc_out_6;



  assign dtc_out_7 = cfblk66_out1;



  assign cfblk46_out1 = dtc_out_7;



  assign cfblk117_out1 = cfblk158_out1 + cfblk46_out1;



  assign cfblk64_out1 = cfblk117_out1 + cfblk88_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk64_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  DotProduct_block3 u_cfblk29_inst (.in1(cfblk179_out1),  // uint8
                                    .in2(cfblk33_out1),  // uint8
                                    .out1(cfblk29_out1)  // uint8
                                    );

  always @(cfblk17_out1, cfblk29_out1) begin
    cfblk118_div_temp = 9'b000000000;
    cfblk118_t_0_0 = 9'b000000000;
    if (cfblk17_out1 == 8'b00000000) begin
      cfblk118_out1 = 8'b11111111;
    end
    else begin
      cfblk118_t_0_0 = {1'b0, cfblk29_out1};
      cfblk118_div_temp = cfblk118_t_0_0 / cfblk17_out1;
      if (cfblk118_div_temp[8] != 1'b0) begin
        cfblk118_out1 = 8'b11111111;
      end
      else begin
        cfblk118_out1 = cfblk118_div_temp[7:0];
      end
    end
  end



  assign cfblk48_out1 = cfblk118_out1 + cfblk58_out1;



  assign cfblk61_out1 = cfblk158_out1 + cfblk48_out1;



  assign cfblk12_out1 = cfblk61_out1 + cfblk7_out1;



  assign cfblk146_out1 = cfblk12_out1 + cfblk31_out1;



  assign cfblk49_1 = {24'b0, cfblk146_out1};
  assign cfblk49_2 = {16'b0, cfblk161_out1};
  assign cfblk49_add_temp = cfblk49_1 + cfblk49_2;
  assign cfblk49_out1 = cfblk49_add_temp[7:0];



  DotProduct u_cfblk102_inst (.in1(cfblk49_out1),  // uint8
                              .in2(cfblk83_out1),  // uint8
                              .out1(cfblk102_out1)  // uint8
                              );

  assign Hdl_out = cfblk102_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

