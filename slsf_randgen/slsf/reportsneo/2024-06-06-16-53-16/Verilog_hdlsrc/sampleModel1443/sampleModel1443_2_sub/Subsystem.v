// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1443\sampleModel1443_2_sub\Subsystem.v
// Created: 2024-07-01 00:07:36
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1443_2_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk82_const_val_1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk104_const_val_1;  // uint8
  wire [7:0] cfblk81_const_val_1;  // uint8
  wire [7:0] cfblk32_const_val_1;  // uint8
  wire [7:0] cfblk46_const_val_1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk16_const_val_1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk91_const_val_1;  // uint8
  wire [7:0] cfblk52_const_val_1;  // uint8
  wire [7:0] cfblk101_const_val_1;  // uint8
  wire [7:0] cfblk28_const_val_1;  // uint8
  wire [7:0] cfblk13_const_val_1;  // uint8
  wire [7:0] cfblk42_const_val_1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  reg [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk61_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  reg [7:0] cfblk92_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk39_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  reg [7:0] cfblk136_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] Mysubsystem_2_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk74_out1;  // uint8
  reg [8:0] cfblk108_div_temp;  // ufix9
  reg [8:0] cfblk108_t_0_0;  // ufix9
  reg [8:0] cfblk24_div_temp;  // ufix9
  reg [8:0] cfblk24_t_0_0;  // ufix9
  reg [8:0] cfblk94_div_temp;  // ufix9
  reg [8:0] cfblk94_t_0_0;  // ufix9
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9
  reg [8:0] cfblk92_div_temp;  // ufix9
  reg [8:0] cfblk92_t_0_0;  // ufix9
  reg [8:0] cfblk39_div_temp;  // ufix9
  reg [8:0] cfblk39_t_0_0;  // ufix9
  reg [8:0] cfblk76_div_temp;  // ufix9
  reg [8:0] cfblk76_t_0_0;  // ufix9
  reg [8:0] cfblk74_div_temp;  // ufix9
  reg [8:0] cfblk74_t_0_0;  // ufix9


  assign cfblk82_const_val_1 = 8'b00000000;



  assign cfblk129_out1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk127_out1 = 8'b00000001;



  assign cfblk104_const_val_1 = 8'b00000000;



  assign cfblk81_const_val_1 = 8'b00000000;



  assign cfblk32_const_val_1 = 8'b00000000;



  assign cfblk46_const_val_1 = 8'b00000000;



  assign cfblk46_out1 = cfblk129_out1 + cfblk46_const_val_1;



  assign cfblk16_const_val_1 = 8'b00000000;



  assign cfblk125_out1 = 8'b00000000;



  assign cfblk91_const_val_1 = 8'b00000000;



  assign cfblk52_const_val_1 = 8'b00000000;



  assign cfblk101_const_val_1 = 8'b00000000;



  assign cfblk28_const_val_1 = 8'b00000000;



  assign cfblk13_const_val_1 = 8'b00000000;



  assign cfblk42_const_val_1 = 8'b00000000;



  assign cfblk126_out1 = 8'b00000001;



  assign cfblk42_out1 = cfblk24_out1 + cfblk42_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk42_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  assign dtc_out = cfblk29_out1;



  assign cfblk40_out1 = dtc_out;



  assign cfblk113_out1 = cfblk81_out1 + cfblk98_out1;



  assign dtc_out_1 = cfblk9_out1;



  assign cfblk99_out1 = dtc_out_1;



  assign cfblk102_out1 = (cfblk73_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block1 u_cfblk57_inst (.in1(cfblk102_out1),  // uint8
                                    .in2(cfblk99_out1),  // uint8
                                    .out1(cfblk57_out1)  // uint8
                                    );

  assign cfblk56_out1 = (cfblk57_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk56_out1;



  assign cfblk106_out1 = dtc_out_2;



  assign cfblk116_out1 = cfblk106_out1 - cfblk113_out1;



  cfblk131 u_cfblk131 (.In1(cfblk116_out1),  // uint8
                       .Out1(cfblk131_out1)  // uint8
                       );

  DotProduct u_cfblk115_inst (.in1(cfblk4_out1),  // uint8
                              .in2(cfblk131_out1),  // uint8
                              .out1(cfblk115_out1)  // uint8
                              );

  always @(cfblk115_out1, cfblk24_out1) begin
    cfblk108_div_temp = 9'b000000000;
    cfblk108_t_0_0 = 9'b000000000;
    if (cfblk24_out1 == 8'b00000000) begin
      cfblk108_out1 = 8'b11111111;
    end
    else begin
      cfblk108_t_0_0 = {1'b0, cfblk115_out1};
      cfblk108_div_temp = cfblk108_t_0_0 / cfblk24_out1;
      if (cfblk108_div_temp[8] != 1'b0) begin
        cfblk108_out1 = 8'b11111111;
      end
      else begin
        cfblk108_out1 = cfblk108_div_temp[7:0];
      end
    end
  end



  assign cfblk64_out1 = (cfblk108_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk64_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk101_out1 = cfblk52_out1 + cfblk101_const_val_1;



  DotProduct_block5 u_cfblk7_inst (.in1(cfblk101_out1),  // uint8
                                   .in2(cfblk68_out1),  // uint8
                                   .out1(cfblk7_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk7_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  assign cfblk37_out1 = cfblk76_out1 + cfblk137_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk10_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  assign cfblk78_out1 = cfblk143_out1 - cfblk37_out1;



  DotProduct_block8 u_cfblk89_inst (.in1(cfblk78_out1),  // uint8
                                    .in2(cfblk145_out1),  // uint8
                                    .out1(cfblk89_out1)  // uint8
                                    );

  assign cfblk3_out1 = cfblk89_out1 | 8'b00000001;



  assign cfblk80_out1 = cfblk3_out1 + cfblk40_out1;



  assign dtc_out_3 = cfblk36_out1;



  assign cfblk10_out1 = dtc_out_3;



  assign cfblk27_out1 = cfblk82_out1 + cfblk24_out1;



  assign cfblk91_out1 = cfblk27_out1 + cfblk91_const_val_1;



  assign cfblk95_out1 = cfblk91_out1 - cfblk68_out1;



  assign cfblk96_out1 = cfblk95_out1 - cfblk46_out1;



  DotProduct_block u_cfblk15_inst (.in1(cfblk81_out1),  // uint8
                                   .in2(cfblk98_out1),  // uint8
                                   .out1(cfblk15_out1)  // uint8
                                   );

  cfblk4 u_cfblk4 (.u(cfblk68_out1),  // uint8
                   .y(cfblk4_out1)  // uint8
                   );

  assign cfblk81_out1 = cfblk4_out1 + cfblk81_const_val_1;



  assign cfblk32_out1 = cfblk81_out1 + cfblk32_const_val_1;



  assign cfblk8_out1 = (cfblk32_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block4 u_cfblk67_inst (.in1(cfblk8_out1),  // uint8
                                    .in2(cfblk68_out1),  // uint8
                                    .out1(cfblk67_out1)  // uint8
                                    );

  assign cfblk9_out1 = cfblk67_out1 + cfblk46_out1;



  cfblk133 u_cfblk133 (.In1(cfblk9_out1),  // uint8
                       .Out1(cfblk133_out1)  // uint8
                       );

  assign dtc_out_4 = cfblk133_out1;



  assign cfblk55_out1 = dtc_out_4;



  assign cfblk16_out1 = cfblk55_out1 + cfblk16_const_val_1;



  assign cfblk11_out1 = cfblk16_out1 + cfblk125_out1;



  assign cfblk36_out1 = cfblk11_out1 + cfblk15_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk36_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  assign cfblk98_out1 = cfblk142_out1 - cfblk96_out1;



  DotProduct_block2 u_cfblk59_inst (.in1(cfblk98_out1),  // uint8
                                    .in2(cfblk88_out1),  // uint8
                                    .out1(cfblk59_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk59_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk134_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  always @(cfblk140_out1, cfblk73_out1) begin
    cfblk24_div_temp = 9'b000000000;
    cfblk24_t_0_0 = 9'b000000000;
    if (cfblk140_out1 == 8'b00000000) begin
      cfblk24_out1 = 8'b11111111;
    end
    else begin
      cfblk24_t_0_0 = {1'b0, cfblk73_out1};
      cfblk24_div_temp = cfblk24_t_0_0 / cfblk140_out1;
      if (cfblk24_div_temp[8] != 1'b0) begin
        cfblk24_out1 = 8'b11111111;
      end
      else begin
        cfblk24_out1 = cfblk24_div_temp[7:0];
      end
    end
  end



  assign cfblk104_out1 = cfblk24_out1 + cfblk104_const_val_1;



  always @(cfblk104_out1, cfblk141_out1) begin
    cfblk94_div_temp = 9'b000000000;
    cfblk94_t_0_0 = 9'b000000000;
    if (cfblk141_out1 == 8'b00000000) begin
      cfblk94_out1 = 8'b11111111;
    end
    else begin
      cfblk94_t_0_0 = {1'b0, cfblk104_out1};
      cfblk94_div_temp = cfblk94_t_0_0 / cfblk141_out1;
      if (cfblk94_div_temp[8] != 1'b0) begin
        cfblk94_out1 = 8'b11111111;
      end
      else begin
        cfblk94_out1 = cfblk94_div_temp[7:0];
      end
    end
  end



  DotProduct_block7 u_cfblk75_inst (.in1(cfblk94_out1),  // uint8
                                    .in2(cfblk98_out1),  // uint8
                                    .out1(cfblk75_out1)  // uint8
                                    );

  always @(cfblk127_out1, cfblk75_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk75_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk127_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk75_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  cfblk132 u_cfblk132 (.In1(cfblk44_out1),  // uint8
                       .Out1(cfblk132_out1)  // uint8
                       );

  assign cfblk43_out1 = (cfblk132_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk130 u_cfblk130 (.In1(cfblk43_out1),  // uint8
                       .Out1(cfblk130_out1)  // uint8
                       );

  assign cfblk52_out1 = cfblk130_out1 + cfblk52_const_val_1;



  assign dtc_out_5 = cfblk93_out1;



  assign cfblk61_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk61_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  assign cfblk112_out1 = cfblk138_out1 + cfblk52_out1;



  assign cfblk88_out1 = (cfblk112_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk10_out1, cfblk88_out1) begin
    cfblk92_div_temp = 9'b000000000;
    cfblk92_t_0_0 = 9'b000000000;
    if (cfblk10_out1 == 8'b00000000) begin
      cfblk92_out1 = 8'b11111111;
    end
    else begin
      cfblk92_t_0_0 = {1'b0, cfblk88_out1};
      cfblk92_div_temp = cfblk92_t_0_0 / cfblk10_out1;
      if (cfblk92_div_temp[8] != 1'b0) begin
        cfblk92_out1 = 8'b11111111;
      end
      else begin
        cfblk92_out1 = cfblk92_div_temp[7:0];
      end
    end
  end



  assign cfblk82_out1 = cfblk68_out1 + cfblk82_const_val_1;



  assign dtc_out_6 = cfblk82_out1;



  assign cfblk110_out1 = dtc_out_6;



  assign cfblk29_out1 = cfblk110_out1 + cfblk129_out1;



  assign cfblk26_out1 = cfblk29_out1 - cfblk82_out1;



  assign cfblk97_out1 = cfblk26_out1 + cfblk92_out1;



  always @(cfblk88_out1, cfblk97_out1) begin
    cfblk39_div_temp = 9'b000000000;
    cfblk39_t_0_0 = 9'b000000000;
    if (cfblk88_out1 == 8'b00000000) begin
      cfblk39_out1 = 8'b11111111;
    end
    else begin
      cfblk39_t_0_0 = {1'b0, cfblk97_out1};
      cfblk39_div_temp = cfblk39_t_0_0 / cfblk88_out1;
      if (cfblk39_div_temp[8] != 1'b0) begin
        cfblk39_out1 = 8'b11111111;
      end
      else begin
        cfblk39_out1 = cfblk39_div_temp[7:0];
      end
    end
  end



  assign dtc_out_7 = cfblk39_out1;



  assign cfblk93_out1 = dtc_out_7;



  assign cfblk114_out1 = (cfblk93_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk134 u_cfblk134 (.In1(cfblk114_out1),  // uint8
                       .Out1(cfblk134_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk134_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  assign cfblk73_out1 = cfblk139_out1 + cfblk80_out1;



  assign cfblk28_out1 = cfblk73_out1 + cfblk28_const_val_1;



  assign dtc_out_8 = cfblk28_out1;



  assign cfblk119_out1 = dtc_out_8;



  assign cfblk72_out1 = (cfblk119_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk13_out1 = cfblk72_out1 + cfblk13_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk136_process
      if (reset == 1'b1) begin
        cfblk136_reg[0] <= 8'b00000000;
        cfblk136_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk136_reg[0] <= cfblk136_reg_next[0];
          cfblk136_reg[1] <= cfblk136_reg_next[1];
        end
      end
    end

  assign cfblk136_out1 = cfblk136_reg[1];
  assign cfblk136_reg_next[0] = cfblk13_out1;
  assign cfblk136_reg_next[1] = cfblk136_reg[0];



  DotProduct_block3 u_cfblk60_inst (.in1(cfblk136_out1),  // uint8
                                    .in2(Mysubsystem_2_out1),  // uint8
                                    .out1(cfblk60_out1)  // uint8
                                    );

  always @(cfblk146_out1, cfblk60_out1) begin
    cfblk76_div_temp = 9'b000000000;
    cfblk76_t_0_0 = 9'b000000000;
    if (cfblk146_out1 == 8'b00000000) begin
      cfblk76_out1 = 8'b11111111;
    end
    else begin
      cfblk76_t_0_0 = {1'b0, cfblk60_out1};
      cfblk76_div_temp = cfblk76_t_0_0 / cfblk146_out1;
      if (cfblk76_div_temp[8] != 1'b0) begin
        cfblk76_out1 = 8'b11111111;
      end
      else begin
        cfblk76_out1 = cfblk76_div_temp[7:0];
      end
    end
  end



  assign cfblk68_out1 = (cfblk76_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk12_out1 = cfblk68_out1 + cfblk126_out1;



  DotProduct_block6 u_cfblk70_inst (.in1(cfblk12_out1),  // uint8
                                    .in2(cfblk108_out1),  // uint8
                                    .out1(cfblk70_out1)  // uint8
                                    );

  always @(cfblk70_out1, cfblk99_out1) begin
    cfblk74_div_temp = 9'b000000000;
    cfblk74_t_0_0 = 9'b000000000;
    if (cfblk99_out1 == 8'b00000000) begin
      cfblk74_out1 = 8'b11111111;
    end
    else begin
      cfblk74_t_0_0 = {1'b0, cfblk70_out1};
      cfblk74_div_temp = cfblk74_t_0_0 / cfblk99_out1;
      if (cfblk74_div_temp[8] != 1'b0) begin
        cfblk74_out1 = 8'b11111111;
      end
      else begin
        cfblk74_out1 = cfblk74_div_temp[7:0];
      end
    end
  end



  Mysubsystem_2 u_Mysubsystem_2 (.clk(clk),
                                 .reset(reset),
                                 .enb(clk_enable),
                                 .In1(cfblk74_out1),  // uint8
                                 .Out1(Mysubsystem_2_out1)  // uint8
                                 );

  assign Hdl_out = Mysubsystem_2_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

