// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1821\sampleModel1821_4_sub\Subsystem.v
// Created: 2024-08-14 14:09:04
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk125                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1821_4_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk125,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk125;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk100_const_val_1;  // uint8
  wire [7:0] cfblk107_const_val_1;  // uint8
  wire [7:0] cfblk17_const_val_1;  // uint8
  wire [7:0] cfblk14_const_val_1;  // uint8
  wire [7:0] cfblk57_const_val_1;  // uint8
  wire [7:0] cfblk103_const_val_1;  // uint8
  wire [7:0] cfblk53_const_val_1;  // uint8
  wire [7:0] cfblk5_const_val_1;  // uint8
  wire [7:0] cfblk37_const_val_1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire cfblk2_relop1;
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [31:0] dtc_out_1;  // ufix32
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  reg [7:0] cfblk6_out1;  // uint8
  reg [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [31:0] cfblk32_add_temp;  // ufix32
  wire [31:0] cfblk32_1;  // ufix32
  wire [31:0] cfblk32_2;  // ufix32
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] Mysubsystem_22_out1;  // uint8
  wire [7:0] Mysubsystem_4_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] Mysubsystem_39_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  reg [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [15:0] cfblk1_out1;  // uint16
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9
  reg [8:0] cfblk22_div_temp;  // ufix9
  reg [8:0] cfblk22_t_0_0;  // ufix9
  reg [8:0] cfblk6_div_temp;  // ufix9
  reg [8:0] cfblk6_t_0_0;  // ufix9
  reg [8:0] cfblk19_div_temp;  // ufix9
  reg [8:0] cfblk19_t_0_0;  // ufix9


  assign cfblk130_out1 = 8'b00000001;



  assign cfblk100_const_val_1 = 8'b00000000;



  assign cfblk107_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk17_const_val_1 = 8'b00000000;



  assign cfblk14_const_val_1 = 8'b00000000;



  assign cfblk57_const_val_1 = 8'b00000000;



  assign cfblk103_const_val_1 = 8'b00000000;



  assign cfblk53_const_val_1 = 8'b00000000;



  assign cfblk5_const_val_1 = 8'b00000000;



  assign cfblk37_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk99_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  assign cfblk43_out1 = (cfblk62_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk43_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk74_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk29_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk166_out1 = {7'b0, cfblk2_relop1};



  assign cfblk53_out1 = cfblk24_out1 + cfblk53_const_val_1;



  assign cfblk29_out1 = cfblk53_out1 - cfblk38_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk29_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk86_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk5_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk42_out1 = cfblk30_out1 - cfblk77_out1;



  assign cfblk91_out1 = cfblk42_out1 - cfblk7_out1;



  assign dtc_out = cfblk91_out1;



  assign cfblk106_out1 = dtc_out;



  assign cfblk18_out1 = cfblk11_out1 + cfblk106_out1;



  cfblk135 u_cfblk135 (.In1(cfblk18_out1),  // uint8
                       .Out1(cfblk135_out1)  // uint8
                       );

  assign cfblk33_out1 = cfblk135_out1 + cfblk134_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk33_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk77_out1 = cfblk10_out1 + cfblk147_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk77_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk103_out1 = cfblk46_out1 + cfblk103_const_val_1;



  assign cfblk28_out1 = cfblk103_out1 + cfblk121_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk28_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  assign cfblk120_out1 = cfblk141_out1 - cfblk82_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk32_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  assign cfblk83_out1 = cfblk20_out1 + cfblk142_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk57_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  DotProduct_block4 u_cfblk56_inst (.in1(cfblk73_out1),  // uint8
                                    .in2(cfblk155_out1),  // uint8
                                    .out1(cfblk56_out1)  // uint8
                                    );

  assign cfblk65_out1 = (cfblk56_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk32_out1, cfblk99_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk32_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk99_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk32_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  assign cfblk55_out1 = cfblk44_out1 + cfblk136_out1;



  assign dtc_out_1 = {31'b0, cfblk2_relop1};



  assign cfblk51_out1 = dtc_out_1[7:0];



  assign cfblk7_out1 = cfblk51_out1 + cfblk64_out1;



  assign cfblk118_out1 = cfblk7_out1 + cfblk3_out1;



  assign cfblk9_out1 = cfblk26_out1 + cfblk118_out1;



  assign cfblk92_out1 = (cfblk9_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk49_out1 = cfblk92_out1 + cfblk167_out1;



  assign cfblk105_out1 = cfblk38_out1 + cfblk49_out1;



  assign cfblk17_out1 = cfblk105_out1 + cfblk17_const_val_1;



  assign cfblk25_out1 = cfblk130_out1 + cfblk81_out1;



  always @(cfblk25_out1, cfblk6_out1) begin
    cfblk22_div_temp = 9'b000000000;
    cfblk22_t_0_0 = 9'b000000000;
    if (cfblk6_out1 == 8'b00000000) begin
      cfblk22_out1 = 8'b11111111;
    end
    else begin
      cfblk22_t_0_0 = {1'b0, cfblk25_out1};
      cfblk22_div_temp = cfblk22_t_0_0 / cfblk6_out1;
      if (cfblk22_div_temp[8] != 1'b0) begin
        cfblk22_out1 = 8'b11111111;
      end
      else begin
        cfblk22_out1 = cfblk22_div_temp[7:0];
      end
    end
  end



  assign cfblk68_out1 = cfblk22_out1 + cfblk17_out1;



  DotProduct_block5 u_cfblk62_inst (.in1(cfblk68_out1),  // uint8
                                    .in2(cfblk55_out1),  // uint8
                                    .out1(cfblk62_out1)  // uint8
                                    );

  assign cfblk14_out1 = cfblk62_out1 + cfblk14_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk14_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk79_out1 = cfblk80_out1 + cfblk72_out1;



  assign cfblk2_relop1 = cfblk79_out1 <= cfblk78_out1;



  assign cfblk32_1 = {31'b0, cfblk2_relop1};
  assign cfblk32_2 = {24'b0, cfblk145_out1};
  assign cfblk32_add_temp = cfblk32_1 + cfblk32_2;
  assign cfblk32_out1 = cfblk32_add_temp[7:0];



  assign dtc_out_2 = cfblk24_out1;



  assign cfblk69_out1 = dtc_out_2;



  DotProduct_block9 u_cfblk99_inst (.in1(cfblk69_out1),  // uint8
                                    .in2(cfblk32_out1),  // uint8
                                    .out1(cfblk99_out1)  // uint8
                                    );

  assign cfblk10_out1 = (cfblk99_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk3 u_cfblk3 (.u(cfblk10_out1),  // uint8
                   .y(cfblk3_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk3_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  assign cfblk81_out1 = cfblk148_out1 + cfblk65_out1;



  assign cfblk82_out1 = (cfblk81_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_3 = cfblk82_out1;



  assign cfblk40_out1 = dtc_out_3;



  DotProduct_block2 u_cfblk36_inst (.in1(cfblk40_out1),  // uint8
                                    .in2(cfblk39_out1),  // uint8
                                    .out1(cfblk36_out1)  // uint8
                                    );

  assign cfblk57_out1 = cfblk36_out1 + cfblk57_const_val_1;



  assign dtc_out_4 = cfblk57_out1;



  assign cfblk11_out1 = dtc_out_4;



  Mysubsystem_22 u_Mysubsystem_22 (.In1(cfblk11_out1),  // uint8
                                   .In2(cfblk22_out1),  // uint8
                                   .In3(cfblk64_out1),  // uint8
                                   .Out1(Mysubsystem_22_out1)  // uint8
                                   );

  Mysubsystem_4 u_Mysubsystem_4 (.In1(Mysubsystem_22_out1),  // uint8
                                 .In2(cfblk73_out1),  // uint8
                                 .Out1(Mysubsystem_4_out1)  // uint8
                                 );

  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = Mysubsystem_4_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  DotProduct_block7 u_cfblk78_inst (.in1(cfblk154_out1),  // uint8
                                    .in2(cfblk83_out1),  // uint8
                                    .out1(cfblk78_out1)  // uint8
                                    );

  assign cfblk98_out1 = (cfblk86_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk64_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  DotProduct_block1 u_cfblk119_inst (.in1(cfblk156_out1),  // uint8
                                     .in2(cfblk114_out1),  // uint8
                                     .out1(cfblk119_out1)  // uint8
                                     );

  assign cfblk66_out1 = (cfblk119_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block3 u_cfblk39_inst (.in1(cfblk66_out1),  // uint8
                                    .in2(cfblk98_out1),  // uint8
                                    .out1(cfblk39_out1)  // uint8
                                    );

  assign cfblk64_out1 = cfblk39_out1 - cfblk39_out1;



  assign cfblk63_out1 = cfblk64_out1 + cfblk78_out1;



  assign dtc_out_5 = cfblk63_out1;



  assign cfblk110_out1 = dtc_out_5;



  assign cfblk100_out1 = cfblk27_out1 + cfblk100_const_val_1;



  assign cfblk21_out1 = cfblk130_out1 + cfblk100_out1;



  assign cfblk107_out1 = cfblk21_out1 + cfblk107_const_val_1;



  DotProduct_block6 u_cfblk74_inst (.in1(cfblk107_out1),  // uint8
                                    .in2(cfblk110_out1),  // uint8
                                    .out1(cfblk74_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk74_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  DotProduct u_cfblk114_inst (.in1(cfblk157_out1),  // uint8
                              .in2(cfblk37_out1),  // uint8
                              .out1(cfblk114_out1)  // uint8
                              );

  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk114_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  always @(cfblk120_out1, cfblk153_out1) begin
    cfblk6_div_temp = 9'b000000000;
    cfblk6_t_0_0 = 9'b000000000;
    if (cfblk120_out1 == 8'b00000000) begin
      cfblk6_out1 = 8'b11111111;
    end
    else begin
      cfblk6_t_0_0 = {1'b0, cfblk153_out1};
      cfblk6_div_temp = cfblk6_t_0_0 / cfblk120_out1;
      if (cfblk6_div_temp[8] != 1'b0) begin
        cfblk6_out1 = 8'b11111111;
      end
      else begin
        cfblk6_out1 = cfblk6_div_temp[7:0];
      end
    end
  end



  assign cfblk72_out1 = cfblk6_out1 - cfblk144_out1;



  assign cfblk80_out1 = cfblk72_out1 + cfblk149_out1;



  cfblk136 u_cfblk136 (.In1(cfblk80_out1),  // uint8
                       .Out1(cfblk136_out1)  // uint8
                       );

  assign cfblk121_out1 = (cfblk136_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk93_out1 = cfblk121_out1 + cfblk161_out1;



  assign cfblk20_out1 = cfblk93_out1 - cfblk150_out1;



  assign dtc_out_6 = cfblk117_out1;



  assign cfblk27_out1 = dtc_out_6;



  assign cfblk61_out1 = cfblk27_out1 + cfblk101_out1;



  assign dtc_out_7 = cfblk61_out1;



  assign cfblk24_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk24_out1;



  assign cfblk95_out1 = dtc_out_8;



  assign cfblk38_out1 = cfblk95_out1 - cfblk20_out1;



  assign cfblk67_out1 = (cfblk38_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  Mysubsystem_39 u_Mysubsystem_39 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk67_out1),  // uint8
                                   .Out1(Mysubsystem_39_out1)  // uint8
                                   );

  DotProduct_block8 u_cfblk86_inst (.in1(Mysubsystem_39_out1),  // uint8
                                    .in2(cfblk166_out1),  // uint8
                                    .out1(cfblk86_out1)  // uint8
                                    );

  cfblk133 u_cfblk133 (.In1(cfblk86_out1),  // uint8
                       .Out1(cfblk133_out1)  // uint8
                       );

  assign cfblk5_out1 = cfblk133_out1 + cfblk5_const_val_1;



  assign dtc_out_9 = cfblk5_out1;



  assign cfblk46_out1 = dtc_out_9;



  DotProduct_block u_cfblk117_inst (.in1(cfblk46_out1),  // uint8
                                    .in2(cfblk151_out1),  // uint8
                                    .out1(cfblk117_out1)  // uint8
                                    );

  assign cfblk26_out1 = (cfblk117_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk134 u_cfblk134 (.In1(cfblk26_out1),  // uint8
                       .Out1(cfblk134_out1)  // uint8
                       );

  always @(cfblk134_out1, cfblk158_out1) begin
    cfblk19_div_temp = 9'b000000000;
    cfblk19_t_0_0 = 9'b000000000;
    if (cfblk158_out1 == 8'b00000000) begin
      cfblk19_out1 = 8'b11111111;
    end
    else begin
      cfblk19_t_0_0 = {1'b0, cfblk134_out1};
      cfblk19_div_temp = cfblk19_t_0_0 / cfblk158_out1;
      if (cfblk19_div_temp[8] != 1'b0) begin
        cfblk19_out1 = 8'b11111111;
      end
      else begin
        cfblk19_out1 = cfblk19_div_temp[7:0];
      end
    end
  end



  assign cfblk101_out1 = cfblk19_out1 + cfblk6_out1;



  cfblk131 u_cfblk131 (.In1(cfblk101_out1),  // uint8
                       .Out1(cfblk131_out1)  // uint8
                       );

  assign dtc_out_10 = cfblk131_out1;



  assign cfblk23_out1 = dtc_out_10;



  assign cfblk37_out1 = cfblk23_out1 + cfblk37_const_val_1;



  assign dtc_out_11 = cfblk37_out1;



  assign cfblk30_out1 = dtc_out_11;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk30_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk1_out1 = {cfblk159_out1, cfblk146_out1};



  assign cfblk167_out1 = cfblk1_out1[7:0];



  assign cfblk73_out1 = cfblk167_out1 - cfblk143_out1;



  assign cfblk125 = cfblk73_out1;

  assign Hdl_out = cfblk80_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

