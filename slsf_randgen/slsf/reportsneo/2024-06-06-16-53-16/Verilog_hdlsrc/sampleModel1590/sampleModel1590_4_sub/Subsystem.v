// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1590\sampleModel1590_4_sub\Subsystem.v
// Created: 2024-08-13 00:45:18
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1590_4_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk45_const_val_1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk33_const_val_1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk147_const_val_1;  // uint8
  wire [7:0] cfblk84_const_val_1;  // uint8
  wire [7:0] cfblk122_const_val_1;  // uint8
  wire [7:0] cfblk4_const_val_1;  // uint8
  wire [7:0] cfblk121_const_val_1;  // uint8
  wire [7:0] cfblk60_const_val_1;  // uint8
  wire [7:0] cfblk105_const_val_1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk134_const_val_1;  // uint8
  wire [7:0] cfblk89_const_val_1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  reg [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [15:0] cfblk3_out1;  // uint16
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  reg [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  reg [7:0] cfblk110_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  reg [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] Mysubsystem_36_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [8:0] cfblk42_div_temp;  // ufix9
  reg [8:0] cfblk42_t_0_0;  // ufix9
  reg [8:0] cfblk61_div_temp;  // ufix9
  reg [8:0] cfblk61_t_0_0;  // ufix9
  reg [8:0] cfblk112_div_temp;  // ufix9
  reg [8:0] cfblk112_t_0_0;  // ufix9
  reg [8:0] cfblk110_div_temp;  // ufix9
  reg [8:0] cfblk110_t_0_0;  // ufix9
  reg [8:0] cfblk77_div_temp;  // ufix9
  reg [8:0] cfblk77_t_0_0;  // ufix9
  reg [8:0] cfblk87_div_temp;  // ufix9
  reg [8:0] cfblk87_t_0_0;  // ufix9
  reg [8:0] cfblk19_div_temp;  // ufix9
  reg [8:0] cfblk19_t_0_0;  // ufix9
  reg [8:0] cfblk103_div_temp;  // ufix9
  reg [8:0] cfblk103_t_0_0;  // ufix9
  reg [8:0] cfblk63_div_temp;  // ufix9
  reg [8:0] cfblk63_t_0_0;  // ufix9
  reg [8:0] cfblk58_div_temp;  // ufix9
  reg [8:0] cfblk58_t_0_0;  // ufix9
  reg [8:0] cfblk115_div_temp;  // ufix9
  reg [8:0] cfblk115_t_0_0;  // ufix9
  reg [8:0] cfblk140_div_temp;  // ufix9
  reg [8:0] cfblk140_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk45_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk102_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk18_out1 = (cfblk176_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out = cfblk18_out1;



  assign cfblk38_out1 = dtc_out;



  assign cfblk45_out1 = cfblk38_out1 + cfblk45_const_val_1;



  DotProduct u_cfblk102_inst (.in1(cfblk45_out1),  // uint8
                              .in2(cfblk176_out1),  // uint8
                              .out1(cfblk102_out1)  // uint8
                              );

  assign cfblk125_out1 = (cfblk102_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk125_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign cfblk159_out1 = 8'b00000001;



  assign cfblk158_out1 = 8'b00000001;



  assign cfblk33_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk18_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk147_const_val_1 = 8'b00000000;



  assign cfblk84_const_val_1 = 8'b00000000;



  assign cfblk122_const_val_1 = 8'b00000000;



  assign cfblk4_const_val_1 = 8'b00000000;



  assign cfblk121_const_val_1 = 8'b00000000;



  assign cfblk60_const_val_1 = 8'b00000000;



  assign cfblk105_const_val_1 = 8'b00000000;



  assign cfblk160_out1 = 8'b00000000;



  assign cfblk134_const_val_1 = 8'b00000000;



  assign cfblk89_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk137_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk84_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk92_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  cfblk161 u_cfblk161 (.In1(cfblk4_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk161_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  assign cfblk104_out1 = (cfblk134_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk85_out1 = cfblk38_out1 + cfblk148_out1;



  assign cfblk20_out1 = (cfblk107_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk20_out1, cfblk85_out1) begin
    cfblk42_div_temp = 9'b000000000;
    cfblk42_t_0_0 = 9'b000000000;
    if (cfblk85_out1 == 8'b00000000) begin
      cfblk42_out1 = 8'b11111111;
    end
    else begin
      cfblk42_t_0_0 = {1'b0, cfblk20_out1};
      cfblk42_div_temp = cfblk42_t_0_0 / cfblk85_out1;
      if (cfblk42_div_temp[8] != 1'b0) begin
        cfblk42_out1 = 8'b11111111;
      end
      else begin
        cfblk42_out1 = cfblk42_div_temp[7:0];
      end
    end
  end



  assign cfblk57_out1 = cfblk42_out1 + cfblk10_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk57_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk65_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk111_out1 = cfblk135_out1 + cfblk170_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk111_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  assign cfblk119_out1 = cfblk140_out1 - cfblk1_out1;



  DotProduct_block12 u_cfblk98_inst (.in1(cfblk119_out1),  // uint8
                                     .in2(cfblk123_out1),  // uint8
                                     .out1(cfblk98_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk98_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk126_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  assign cfblk3_out1 = {cfblk140_out1, cfblk186_out1};



  assign cfblk193_out1 = cfblk3_out1[7:0];



  DotProduct_block1 u_cfblk13_inst (.in1(cfblk107_out1),  // uint8
                                    .in2(cfblk33_out1),  // uint8
                                    .out1(cfblk13_out1)  // uint8
                                    );

  assign dtc_out_1 = cfblk1_out1;



  assign cfblk71_out1 = dtc_out_1;



  assign dtc_out_2 = cfblk71_out1;



  assign cfblk133_out1 = dtc_out_2;



  cfblk162 u_cfblk162 (.In1(cfblk103_out1),  // uint8
                       .Out1(cfblk162_out1)  // uint8
                       );

  DotProduct_block4 u_cfblk148_inst (.in1(cfblk162_out1),  // uint8
                                     .in2(cfblk19_out1),  // uint8
                                     .out1(cfblk148_out1)  // uint8
                                     );

  assign cfblk127_out1 = (cfblk70_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk4_out1 = cfblk127_out1 + cfblk4_const_val_1;



  assign cfblk121_out1 = cfblk4_out1 + cfblk121_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk121_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  DotProduct_block2 u_cfblk135_inst (.in1(cfblk185_out1),  // uint8
                                     .in2(cfblk148_out1),  // uint8
                                     .out1(cfblk135_out1)  // uint8
                                     );

  assign cfblk78_out1 = cfblk79_out1 + cfblk134_out1;



  always @(cfblk135_out1, cfblk78_out1) begin
    cfblk61_div_temp = 9'b000000000;
    cfblk61_t_0_0 = 9'b000000000;
    if (cfblk135_out1 == 8'b00000000) begin
      cfblk61_out1 = 8'b11111111;
    end
    else begin
      cfblk61_t_0_0 = {1'b0, cfblk78_out1};
      cfblk61_div_temp = cfblk61_t_0_0 / cfblk135_out1;
      if (cfblk61_div_temp[8] != 1'b0) begin
        cfblk61_out1 = 8'b11111111;
      end
      else begin
        cfblk61_out1 = cfblk61_div_temp[7:0];
      end
    end
  end



  assign cfblk31_out1 = (cfblk61_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_3 = cfblk94_out1;



  assign cfblk27_out1 = dtc_out_3;



  assign cfblk76_out1 = (cfblk51_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk147_out1 = cfblk76_out1 + cfblk147_const_val_1;



  assign cfblk64_out1 = cfblk147_out1 + cfblk23_out1;



  assign cfblk90_out1 = cfblk64_out1 - cfblk129_out1;



  always @(cfblk77_out1, cfblk90_out1) begin
    cfblk112_div_temp = 9'b000000000;
    cfblk112_t_0_0 = 9'b000000000;
    if (cfblk90_out1 == 8'b00000000) begin
      cfblk112_out1 = 8'b11111111;
    end
    else begin
      cfblk112_t_0_0 = {1'b0, cfblk77_out1};
      cfblk112_div_temp = cfblk112_t_0_0 / cfblk90_out1;
      if (cfblk112_div_temp[8] != 1'b0) begin
        cfblk112_out1 = 8'b11111111;
      end
      else begin
        cfblk112_out1 = cfblk112_div_temp[7:0];
      end
    end
  end



  assign cfblk84_out1 = cfblk112_out1 + cfblk84_const_val_1;



  assign cfblk56_out1 = cfblk84_out1 + cfblk150_out1;



  assign cfblk83_out1 = cfblk56_out1 - cfblk27_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk83_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk73_out1 = cfblk44_out1 - cfblk167_out1;



  DotProduct_block11 u_cfblk9_inst (.in1(cfblk180_out1),  // uint8
                                    .in2(cfblk73_out1),  // uint8
                                    .out1(cfblk9_out1)  // uint8
                                    );

  assign cfblk97_out1 = cfblk158_out1 + cfblk9_out1;



  assign cfblk122_out1 = cfblk97_out1 + cfblk122_const_val_1;



  assign cfblk137_out1 = (cfblk129_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk137_out1, cfblk18_out1) begin
    cfblk110_div_temp = 9'b000000000;
    cfblk110_t_0_0 = 9'b000000000;
    if (cfblk137_out1 == 8'b00000000) begin
      cfblk110_out1 = 8'b11111111;
    end
    else begin
      cfblk110_t_0_0 = {1'b0, cfblk18_out1};
      cfblk110_div_temp = cfblk110_t_0_0 / cfblk137_out1;
      if (cfblk110_div_temp[8] != 1'b0) begin
        cfblk110_out1 = 8'b11111111;
      end
      else begin
        cfblk110_out1 = cfblk110_div_temp[7:0];
      end
    end
  end



  assign dtc_out_4 = cfblk110_out1;



  assign cfblk123_out1 = dtc_out_4;



  DotProduct_block5 u_cfblk149_inst (.in1(cfblk123_out1),  // uint8
                                     .in2(cfblk126_out1),  // uint8
                                     .out1(cfblk149_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk149_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk49_out1 = cfblk172_out1 + cfblk122_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk23_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign cfblk29_out1 = cfblk117_out1 + cfblk19_out1;



  assign cfblk33_out1 = cfblk93_out1 + cfblk33_const_val_1;



  assign cfblk86_out1 = cfblk33_out1 + cfblk29_out1;



  assign cfblk34_out1 = cfblk86_out1 + cfblk181_out1;



  assign cfblk51_out1 = (cfblk34_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk51_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk143_out1 = cfblk187_out1 + cfblk49_out1;



  assign dtc_out_5 = cfblk143_out1;



  assign cfblk150_out1 = dtc_out_5;



  assign cfblk59_out1 = cfblk158_out1 - cfblk66_out1;



  assign cfblk144_out1 = cfblk59_out1 + cfblk150_out1;



  always @(cfblk144_out1, cfblk31_out1) begin
    cfblk77_div_temp = 9'b000000000;
    cfblk77_t_0_0 = 9'b000000000;
    if (cfblk31_out1 == 8'b00000000) begin
      cfblk77_out1 = 8'b11111111;
    end
    else begin
      cfblk77_t_0_0 = {1'b0, cfblk144_out1};
      cfblk77_div_temp = cfblk77_t_0_0 / cfblk31_out1;
      if (cfblk77_div_temp[8] != 1'b0) begin
        cfblk77_out1 = 8'b11111111;
      end
      else begin
        cfblk77_out1 = cfblk77_div_temp[7:0];
      end
    end
  end



  assign cfblk23_out1 = (cfblk77_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk23_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign cfblk128_out1 = cfblk89_out1 - cfblk182_out1;



  assign cfblk93_out1 = (cfblk128_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk15_out1 = cfblk159_out1 - cfblk93_out1;



  assign cfblk5_out1 = cfblk15_out1 - cfblk133_out1;



  DotProduct_block9 u_cfblk65_inst (.in1(cfblk5_out1),  // uint8
                                    .in2(cfblk13_out1),  // uint8
                                    .out1(cfblk65_out1)  // uint8
                                    );

  always @(cfblk65_out1, cfblk89_out1) begin
    cfblk87_div_temp = 9'b000000000;
    cfblk87_t_0_0 = 9'b000000000;
    if (cfblk89_out1 == 8'b00000000) begin
      cfblk87_out1 = 8'b11111111;
    end
    else begin
      cfblk87_t_0_0 = {1'b0, cfblk65_out1};
      cfblk87_div_temp = cfblk87_t_0_0 / cfblk89_out1;
      if (cfblk87_div_temp[8] != 1'b0) begin
        cfblk87_out1 = 8'b11111111;
      end
      else begin
        cfblk87_out1 = cfblk87_div_temp[7:0];
      end
    end
  end



  assign cfblk11_out1 = (cfblk87_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk82_out1 = (cfblk11_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk60_out1 = cfblk82_out1 + cfblk60_const_val_1;



  DotProduct_block10 u_cfblk88_inst (.in1(cfblk60_out1),  // uint8
                                     .in2(cfblk193_out1),  // uint8
                                     .out1(cfblk88_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk88_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk79_out1 = cfblk1_out1 - cfblk168_out1;



  always @(cfblk173_out1, cfblk79_out1) begin
    cfblk19_div_temp = 9'b000000000;
    cfblk19_t_0_0 = 9'b000000000;
    if (cfblk173_out1 == 8'b00000000) begin
      cfblk19_out1 = 8'b11111111;
    end
    else begin
      cfblk19_t_0_0 = {1'b0, cfblk79_out1};
      cfblk19_div_temp = cfblk19_t_0_0 / cfblk173_out1;
      if (cfblk19_div_temp[8] != 1'b0) begin
        cfblk19_out1 = 8'b11111111;
      end
      else begin
        cfblk19_out1 = cfblk19_div_temp[7:0];
      end
    end
  end



  always @(cfblk190_out1, cfblk19_out1) begin
    cfblk103_div_temp = 9'b000000000;
    cfblk103_t_0_0 = 9'b000000000;
    if (cfblk190_out1 == 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk19_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk190_out1;
      if (cfblk103_div_temp[8] != 1'b0) begin
        cfblk103_out1 = 8'b11111111;
      end
      else begin
        cfblk103_out1 = cfblk103_div_temp[7:0];
      end
    end
  end



  assign cfblk120_out1 = (cfblk103_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk124_out1 = cfblk120_out1 - cfblk111_out1;



  assign cfblk105_out1 = cfblk124_out1 + cfblk105_const_val_1;



  always @(cfblk105_out1, cfblk160_out1) begin
    cfblk63_div_temp = 9'b000000000;
    cfblk63_t_0_0 = 9'b000000000;
    if (cfblk160_out1 == 8'b00000000) begin
      cfblk63_out1 = 8'b11111111;
    end
    else begin
      cfblk63_t_0_0 = {1'b0, cfblk105_out1};
      cfblk63_div_temp = cfblk63_t_0_0 / cfblk160_out1;
      if (cfblk63_div_temp[8] != 1'b0) begin
        cfblk63_out1 = 8'b11111111;
      end
      else begin
        cfblk63_out1 = cfblk63_div_temp[7:0];
      end
    end
  end



  always @(cfblk171_out1, cfblk63_out1) begin
    cfblk58_div_temp = 9'b000000000;
    cfblk58_t_0_0 = 9'b000000000;
    if (cfblk171_out1 == 8'b00000000) begin
      cfblk58_out1 = 8'b11111111;
    end
    else begin
      cfblk58_t_0_0 = {1'b0, cfblk63_out1};
      cfblk58_div_temp = cfblk58_t_0_0 / cfblk171_out1;
      if (cfblk58_div_temp[8] != 1'b0) begin
        cfblk58_out1 = 8'b11111111;
      end
      else begin
        cfblk58_out1 = cfblk58_div_temp[7:0];
      end
    end
  end



  assign dtc_out_6 = cfblk32_out1;



  assign cfblk136_out1 = dtc_out_6;



  assign cfblk106_out1 = (cfblk136_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk106_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  DotProduct_block8 u_cfblk44_inst (.in1(cfblk188_out1),  // uint8
                                    .in2(cfblk58_out1),  // uint8
                                    .out1(cfblk44_out1)  // uint8
                                    );

  assign cfblk117_out1 = (cfblk44_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        cfblk189_reg[0] <= 8'b00000000;
        cfblk189_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk189_reg[0] <= cfblk189_reg_next[0];
          cfblk189_reg[1] <= cfblk189_reg_next[1];
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk117_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk189_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  DotProduct_block u_cfblk126_inst (.in1(cfblk1_out1),  // uint8
                                    .in2(cfblk34_out1),  // uint8
                                    .out1(cfblk126_out1)  // uint8
                                    );

  assign cfblk10_out1 = (cfblk126_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk10_out1, cfblk177_out1) begin
    cfblk115_div_temp = 9'b000000000;
    cfblk115_t_0_0 = 9'b000000000;
    if (cfblk10_out1 == 8'b00000000) begin
      cfblk115_out1 = 8'b11111111;
    end
    else begin
      cfblk115_t_0_0 = {1'b0, cfblk177_out1};
      cfblk115_div_temp = cfblk115_t_0_0 / cfblk10_out1;
      if (cfblk115_div_temp[8] != 1'b0) begin
        cfblk115_out1 = 8'b11111111;
      end
      else begin
        cfblk115_out1 = cfblk115_div_temp[7:0];
      end
    end
  end



  DotProduct_block3 u_cfblk146_inst (.in1(cfblk115_out1),  // uint8
                                     .in2(cfblk104_out1),  // uint8
                                     .out1(cfblk146_out1)  // uint8
                                     );

  assign cfblk129_out1 = cfblk146_out1 + cfblk73_out1;



  assign cfblk48_out1 = cfblk129_out1 + cfblk107_out1;



  assign dtc_out_7 = cfblk48_out1;



  assign cfblk130_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk130_out1;



  assign cfblk101_out1 = dtc_out_8;



  assign dtc_out_9 = cfblk101_out1;



  assign cfblk70_out1 = dtc_out_9;



  Mysubsystem_36 u_Mysubsystem_36 (.In1(cfblk70_out1),  // uint8
                                   .Out1(Mysubsystem_36_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = Mysubsystem_36_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign cfblk67_out1 = cfblk183_out1 - cfblk143_out1;



  always @(cfblk184_out1, cfblk67_out1) begin
    cfblk140_div_temp = 9'b000000000;
    cfblk140_t_0_0 = 9'b000000000;
    if (cfblk184_out1 == 8'b00000000) begin
      cfblk140_out1 = 8'b11111111;
    end
    else begin
      cfblk140_t_0_0 = {1'b0, cfblk67_out1};
      cfblk140_div_temp = cfblk140_t_0_0 / cfblk184_out1;
      if (cfblk140_div_temp[8] != 1'b0) begin
        cfblk140_out1 = 8'b11111111;
      end
      else begin
        cfblk140_out1 = cfblk140_div_temp[7:0];
      end
    end
  end



  assign cfblk139_out1 = (cfblk140_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk8_out1 = cfblk139_out1 + cfblk133_out1;



  assign cfblk107_out1 = cfblk8_out1 + cfblk129_out1;



  assign cfblk145_out1 = (cfblk107_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk66_out1 = cfblk145_out1 + cfblk134_out1;



  assign cfblk132_out1 = cfblk66_out1 - cfblk60_out1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk132_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk2_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk36_out1 = cfblk169_out1 + cfblk193_out1;



  DotProduct_block7 u_cfblk32_inst (.in1(cfblk36_out1),  // uint8
                                    .in2(cfblk166_out1),  // uint8
                                    .out1(cfblk32_out1)  // uint8
                                    );

  assign cfblk134_out1 = cfblk32_out1 + cfblk134_const_val_1;



  DotProduct_block6 u_cfblk17_inst (.in1(cfblk134_out1),  // uint8
                                    .in2(cfblk175_out1),  // uint8
                                    .out1(cfblk17_out1)  // uint8
                                    );

  assign cfblk92_out1 = (cfblk17_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk131_out1 = (cfblk92_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk94_out1 = cfblk131_out1 + cfblk174_out1;



  assign cfblk89_out1 = cfblk94_out1 + cfblk89_const_val_1;



  assign Hdl_out = cfblk89_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

