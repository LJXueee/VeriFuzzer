// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1512\sampleModel1512_5_sub\Subsystem.v
// Created: 2024-06-10 05:49:28
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1512_5_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] Mysubsystem_30_out2;  // uint8
  wire [7:0] Mysubsystem_30_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk43_const_val_1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk113_const_val_1;  // uint8
  wire [15:0] Mysubsystem_40_out1;  // uint16
  wire [7:0] cfblk47_const_val_1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [3:0] cfblk3_out1;  // ufix4_E4
  wire [7:0] cfblk93_const_val_1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [15:0] cfblk147_out1;  // uint16
  wire [7:0] cfblk84_const_val_1;  // uint8
  wire [7:0] cfblk104_const_val_1;  // uint8
  wire [7:0] cfblk18_const_val_1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [15:0] cfblk151_out1;  // uint16
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk124_const_val_1;  // uint8
  wire [7:0] cfblk79_const_val_1;  // uint8
  wire [7:0] Mysubsystem_38_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  reg [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk134_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  reg [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  reg [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk23_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  reg [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [31:0] cfblk63_add_cast;  // ufix32
  wire [31:0] cfblk63_add_temp;  // ufix32
  wire [31:0] cfblk63_1;  // ufix32
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk54_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire signed [31:0] cfblk119_sub_temp;  // sfix32
  wire signed [31:0] cfblk119_1;  // sfix32
  wire signed [31:0] cfblk119_2;  // sfix32
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  reg [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk137_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  reg [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] Mysubsystem_3_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [8:0] cfblk108_div_temp;  // ufix9
  reg [8:0] cfblk108_t_0_0;  // ufix9
  reg [8:0] cfblk134_div_temp;  // ufix9
  reg [8:0] cfblk134_t_0_0;  // ufix9
  reg [8:0] cfblk71_div_temp;  // ufix9
  reg [8:0] cfblk71_t_0_0;  // ufix9
  reg [8:0] cfblk81_div_temp;  // ufix9
  reg [8:0] cfblk81_t_0_0;  // ufix9
  reg [8:0] cfblk92_div_temp;  // ufix9
  reg [8:0] cfblk92_t_0_0;  // ufix9
  reg [8:0] cfblk64_div_temp;  // ufix9
  reg [8:0] cfblk64_t_0_0;  // ufix9
  reg [8:0] cfblk85_div_temp;  // ufix9
  reg [8:0] cfblk85_t_0_0;  // ufix9
  reg [8:0] cfblk17_div_temp;  // ufix9
  reg [8:0] cfblk17_t_0_0;  // ufix9
  reg [8:0] cfblk37_div_temp;  // ufix9
  reg [8:0] cfblk37_t_0_0;  // ufix9
  reg [15:0] cfblk100_varargout_1;  // ufix16
  reg [16:0] cfblk100_div_temp;  // ufix17
  reg [16:0] cfblk100_t_0_0;  // ufix17
  reg [8:0] cfblk35_div_temp;  // ufix9
  reg [8:0] cfblk35_t_0_0;  // ufix9
  reg [8:0] cfblk103_div_temp;  // ufix9
  reg [8:0] cfblk103_t_0_0;  // ufix9
  reg [8:0] cfblk31_div_temp;  // ufix9
  reg [8:0] cfblk31_t_0_0;  // ufix9
  reg [8:0] cfblk40_div_temp;  // ufix9
  reg [8:0] cfblk40_t_0_0;  // ufix9
  reg [8:0] cfblk137_div_temp;  // ufix9
  reg [8:0] cfblk137_t_0_0;  // ufix9
  reg [8:0] cfblk115_div_temp;  // ufix9
  reg [8:0] cfblk115_t_0_0;  // ufix9
  reg [8:0] cfblk97_div_temp;  // ufix9
  reg [8:0] cfblk97_t_0_0;  // ufix9


  cfblk152 u_cfblk152 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk152_out1)  // uint8
                       );

  assign cfblk149_out1 = 8'b00000001;



  Mysubsystem_30 u_Mysubsystem_30 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(Mysubsystem_30_out2),  // uint8
                                   .Out1(Mysubsystem_30_out1),  // uint8
                                   .Out2(Mysubsystem_30_out2)  // uint8
                                   );

  assign cfblk148_out1 = 8'b00000001;



  assign cfblk94_out1 = cfblk148_out1 + cfblk149_out1;



  assign cfblk43_const_val_1 = 8'b00000000;



  assign cfblk43_out1 = cfblk94_out1 + cfblk43_const_val_1;



  assign cfblk13_out1 = (cfblk43_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block u_cfblk112_inst (.in1(Mysubsystem_30_out2),  // uint8
                                    .in2(cfblk13_out1),  // uint8
                                    .out1(cfblk112_out1)  // uint8
                                    );

  assign enb = clk_enable;

  assign cfblk113_const_val_1 = 8'b00000000;



  Mysubsystem_40 u_Mysubsystem_40 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_40_out1)  // uint16
                                   );

  assign cfblk47_const_val_1 = 8'b00000000;



  assign cfblk5_out1 = (cfblk152_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk153 u_cfblk153 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk153_out1)  // uint8
                       );

  assign cfblk125_out1 = (cfblk153_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk3_out1 = cfblk125_out1[7:4];



  assign cfblk93_const_val_1 = 8'b00000000;



  assign cfblk2_out1 = 8'b00000000;



  cfblk147 u_cfblk147 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk147_out1)  // uint16
                       );

  assign cfblk84_const_val_1 = 8'b00000000;



  assign cfblk104_const_val_1 = 8'b00000000;



  assign cfblk18_const_val_1 = 8'b00000000;



  assign cfblk10_out1 = cfblk147_out1[7:0];



  cfblk151 u_cfblk151 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk151_out1)  // uint16
                       );

  assign cfblk98_out1 = cfblk151_out1[7:0];



  DotProduct_block4 u_cfblk9_inst (.in1(cfblk2_out1),  // uint8
                                   .in2(cfblk112_out1),  // uint8
                                   .out1(cfblk9_out1)  // uint8
                                   );

  assign cfblk124_const_val_1 = 8'b00000000;



  assign cfblk79_const_val_1 = 8'b00000000;



  Mysubsystem_38 u_Mysubsystem_38 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_38_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk104_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk74_out1 = cfblk14_out1 - cfblk103_out1;



  always @(cfblk4_out1, cfblk74_out1) begin
    cfblk108_div_temp = 9'b000000000;
    cfblk108_t_0_0 = 9'b000000000;
    if (cfblk4_out1 == 8'b00000000) begin
      cfblk108_out1 = 8'b11111111;
    end
    else begin
      cfblk108_t_0_0 = {1'b0, cfblk74_out1};
      cfblk108_div_temp = cfblk108_t_0_0 / cfblk4_out1;
      if (cfblk108_div_temp[8] != 1'b0) begin
        cfblk108_out1 = 8'b11111111;
      end
      else begin
        cfblk108_out1 = cfblk108_div_temp[7:0];
      end
    end
  end



  always @(Mysubsystem_38_out1, cfblk108_out1) begin
    cfblk134_div_temp = 9'b000000000;
    cfblk134_t_0_0 = 9'b000000000;
    if (cfblk108_out1 == 8'b00000000) begin
      cfblk134_out1 = 8'b11111111;
    end
    else begin
      cfblk134_t_0_0 = {1'b0, Mysubsystem_38_out1};
      cfblk134_div_temp = cfblk134_t_0_0 / cfblk108_out1;
      if (cfblk134_div_temp[8] != 1'b0) begin
        cfblk134_out1 = 8'b11111111;
      end
      else begin
        cfblk134_out1 = cfblk134_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk134_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk165_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign dtc_out = cfblk58_out1;



  assign cfblk114_out1 = dtc_out;



  DotProduct u_cfblk102_inst (.in1(cfblk114_out1),  // uint8
                              .in2(cfblk2_out1),  // uint8
                              .out1(cfblk102_out1)  // uint8
                              );

  assign dtc_out_1 = cfblk102_out1;



  assign cfblk90_out1 = dtc_out_1;



  always @(cfblk69_out1, cfblk90_out1) begin
    cfblk71_div_temp = 9'b000000000;
    cfblk71_t_0_0 = 9'b000000000;
    if (cfblk69_out1 == 8'b00000000) begin
      cfblk71_out1 = 8'b11111111;
    end
    else begin
      cfblk71_t_0_0 = {1'b0, cfblk90_out1};
      cfblk71_div_temp = cfblk71_t_0_0 / cfblk69_out1;
      if (cfblk71_div_temp[8] != 1'b0) begin
        cfblk71_out1 = 8'b11111111;
      end
      else begin
        cfblk71_out1 = cfblk71_div_temp[7:0];
      end
    end
  end



  assign cfblk14_out1 = cfblk153_out1 + cfblk71_out1;



  assign cfblk79_out1 = cfblk14_out1 + cfblk79_const_val_1;



  assign cfblk128_out1 = cfblk79_out1 + cfblk51_out1;



  cfblk155 u_cfblk155 (.In1(cfblk128_out1),  // uint8
                       .Out1(cfblk155_out1)  // uint8
                       );

  always @(cfblk43_out1, cfblk97_out1) begin
    cfblk81_div_temp = 9'b000000000;
    cfblk81_t_0_0 = 9'b000000000;
    if (cfblk97_out1 == 8'b00000000) begin
      cfblk81_out1 = 8'b11111111;
    end
    else begin
      cfblk81_t_0_0 = {1'b0, cfblk43_out1};
      cfblk81_div_temp = cfblk81_t_0_0 / cfblk97_out1;
      if (cfblk81_div_temp[8] != 1'b0) begin
        cfblk81_out1 = 8'b11111111;
      end
      else begin
        cfblk81_out1 = cfblk81_div_temp[7:0];
      end
    end
  end



  assign cfblk124_out1 = cfblk81_out1 + cfblk124_const_val_1;



  assign cfblk70_out1 = cfblk9_out1 + cfblk6_out1;



  assign cfblk21_out1 = cfblk97_out1 + cfblk70_out1;



  assign dtc_out_2 = cfblk21_out1;



  assign cfblk69_out1 = dtc_out_2;



  assign cfblk117_out1 = cfblk69_out1 + cfblk124_out1;



  assign cfblk11_out1 = cfblk35_out1 - cfblk117_out1;



  always @(cfblk11_out1, cfblk98_out1) begin
    cfblk92_div_temp = 9'b000000000;
    cfblk92_t_0_0 = 9'b000000000;
    if (cfblk11_out1 == 8'b00000000) begin
      cfblk92_out1 = 8'b11111111;
    end
    else begin
      cfblk92_t_0_0 = {1'b0, cfblk98_out1};
      cfblk92_div_temp = cfblk92_t_0_0 / cfblk11_out1;
      if (cfblk92_div_temp[8] != 1'b0) begin
        cfblk92_out1 = 8'b11111111;
      end
      else begin
        cfblk92_out1 = cfblk92_div_temp[7:0];
      end
    end
  end



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk92_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign cfblk26_out1 = cfblk4_out1 + cfblk117_out1;



  always @(cfblk10_out1, cfblk44_out1) begin
    cfblk64_div_temp = 9'b000000000;
    cfblk64_t_0_0 = 9'b000000000;
    if (cfblk44_out1 == 8'b00000000) begin
      cfblk64_out1 = 8'b11111111;
    end
    else begin
      cfblk64_t_0_0 = {1'b0, cfblk10_out1};
      cfblk64_div_temp = cfblk64_t_0_0 / cfblk44_out1;
      if (cfblk64_div_temp[8] != 1'b0) begin
        cfblk64_out1 = 8'b11111111;
      end
      else begin
        cfblk64_out1 = cfblk64_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk64_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk58_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign dtc_out_3 = cfblk41_out1;



  assign cfblk6_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk103_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk7_out1 = cfblk168_out1 - cfblk6_out1;



  always @(Mysubsystem_30_out1, cfblk36_out1) begin
    cfblk85_div_temp = 9'b000000000;
    cfblk85_t_0_0 = 9'b000000000;
    if (Mysubsystem_30_out1 == 8'b00000000) begin
      cfblk85_out1 = 8'b11111111;
    end
    else begin
      cfblk85_t_0_0 = {1'b0, cfblk36_out1};
      cfblk85_div_temp = cfblk85_t_0_0 / Mysubsystem_30_out1;
      if (cfblk85_div_temp[8] != 1'b0) begin
        cfblk85_out1 = 8'b11111111;
      end
      else begin
        cfblk85_out1 = cfblk85_div_temp[7:0];
      end
    end
  end



  always @(cfblk85_out1, cfblk93_out1) begin
    cfblk17_div_temp = 9'b000000000;
    cfblk17_t_0_0 = 9'b000000000;
    if (cfblk93_out1 == 8'b00000000) begin
      cfblk17_out1 = 8'b11111111;
    end
    else begin
      cfblk17_t_0_0 = {1'b0, cfblk85_out1};
      cfblk17_div_temp = cfblk17_t_0_0 / cfblk93_out1;
      if (cfblk17_div_temp[8] != 1'b0) begin
        cfblk17_out1 = 8'b11111111;
      end
      else begin
        cfblk17_out1 = cfblk17_div_temp[7:0];
      end
    end
  end



  assign cfblk104_out1 = cfblk17_out1 + cfblk104_const_val_1;



  assign cfblk18_out1 = cfblk104_out1 + cfblk18_const_val_1;



  assign cfblk66_out1 = cfblk18_out1 - cfblk63_out1;



  assign dtc_out_4 = cfblk66_out1;



  assign cfblk23_out1 = dtc_out_4;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk23_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  always @(cfblk172_out1, cfblk7_out1) begin
    cfblk37_div_temp = 9'b000000000;
    cfblk37_t_0_0 = 9'b000000000;
    if (cfblk7_out1 == 8'b00000000) begin
      cfblk37_out1 = 8'b11111111;
    end
    else begin
      cfblk37_t_0_0 = {1'b0, cfblk172_out1};
      cfblk37_div_temp = cfblk37_t_0_0 / cfblk7_out1;
      if (cfblk37_div_temp[8] != 1'b0) begin
        cfblk37_out1 = 8'b11111111;
      end
      else begin
        cfblk37_out1 = cfblk37_div_temp[7:0];
      end
    end
  end



  always @(cfblk119_out1, cfblk147_out1) begin
    cfblk100_div_temp = 17'b00000000000000000;
    cfblk100_t_0_0 = 17'b00000000000000000;
    if (cfblk119_out1 == 8'b00000000) begin
      cfblk100_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk100_t_0_0 = {1'b0, cfblk147_out1};
      cfblk100_div_temp = cfblk100_t_0_0 / cfblk119_out1;
      if (cfblk100_div_temp[16] != 1'b0) begin
        cfblk100_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk100_varargout_1 = cfblk100_div_temp[15:0];
      end
    end
    if (cfblk100_varargout_1[15:8] != 8'b00000000) begin
      cfblk100_out1 = 8'b11111111;
    end
    else begin
      cfblk100_out1 = cfblk100_varargout_1[7:0];
    end
  end



  assign cfblk86_out1 = (cfblk100_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk84_out1 = cfblk86_out1 + cfblk84_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk58_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk36_out1 = (cfblk103_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk93_out1 = cfblk36_out1 + cfblk93_const_val_1;



  assign cfblk78_out1 = cfblk93_out1 + cfblk112_out1;



  assign cfblk58_out1 = cfblk78_out1 + cfblk73_out1;



  assign cfblk63_add_cast = {24'b0, {cfblk3_out1, 4'b0000}};
  assign cfblk63_1 = {24'b0, cfblk58_out1};
  assign cfblk63_add_temp = cfblk63_add_cast + cfblk63_1;
  assign cfblk63_out1 = cfblk63_add_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk63_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk88_out1 = cfblk171_out1 - cfblk2_out1;



  assign cfblk126_out1 = (cfblk88_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk75_out1 = cfblk5_out1 + cfblk126_out1;



  assign dtc_out_5 = cfblk75_out1;



  assign cfblk54_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk54_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign dtc_out_6 = cfblk83_out1;



  assign cfblk123_out1 = dtc_out_6;



  assign cfblk122_out1 = (cfblk123_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk47_out1 = cfblk122_out1 + cfblk47_const_val_1;



  assign cfblk119_1 = {16'b0, Mysubsystem_40_out1};
  assign cfblk119_2 = {24'b0, cfblk47_out1};
  assign cfblk119_sub_temp = cfblk119_1 - cfblk119_2;
  assign cfblk119_out1 = cfblk119_sub_temp[7:0];



  assign cfblk91_out1 = cfblk119_out1 - cfblk175_out1;



  DotProduct_block1 u_cfblk41_inst (.in1(cfblk91_out1),  // uint8
                                    .in2(cfblk170_out1),  // uint8
                                    .out1(cfblk41_out1)  // uint8
                                    );

  assign cfblk27_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block2 u_cfblk42_inst (.in1(cfblk27_out1),  // uint8
                                    .in2(cfblk84_out1),  // uint8
                                    .out1(cfblk42_out1)  // uint8
                                    );

  always @(cfblk42_out1, cfblk54_out1) begin
    cfblk35_div_temp = 9'b000000000;
    cfblk35_t_0_0 = 9'b000000000;
    if (cfblk54_out1 == 8'b00000000) begin
      cfblk35_out1 = 8'b11111111;
    end
    else begin
      cfblk35_t_0_0 = {1'b0, cfblk42_out1};
      cfblk35_div_temp = cfblk35_t_0_0 / cfblk54_out1;
      if (cfblk35_div_temp[8] != 1'b0) begin
        cfblk35_out1 = 8'b11111111;
      end
      else begin
        cfblk35_out1 = cfblk35_div_temp[7:0];
      end
    end
  end



  assign cfblk113_out1 = cfblk31_out1 + cfblk113_const_val_1;



  always @(cfblk113_out1, cfblk83_out1) begin
    cfblk103_div_temp = 9'b000000000;
    cfblk103_t_0_0 = 9'b000000000;
    if (cfblk83_out1 == 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk113_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk83_out1;
      if (cfblk103_div_temp[8] != 1'b0) begin
        cfblk103_out1 = 8'b11111111;
      end
      else begin
        cfblk103_out1 = cfblk103_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk103_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  always @(cfblk174_out1, cfblk35_out1) begin
    cfblk31_div_temp = 9'b000000000;
    cfblk31_t_0_0 = 9'b000000000;
    if (cfblk35_out1 == 8'b00000000) begin
      cfblk31_out1 = 8'b11111111;
    end
    else begin
      cfblk31_t_0_0 = {1'b0, cfblk174_out1};
      cfblk31_div_temp = cfblk31_t_0_0 / cfblk35_out1;
      if (cfblk31_div_temp[8] != 1'b0) begin
        cfblk31_out1 = 8'b11111111;
      end
      else begin
        cfblk31_out1 = cfblk31_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk31_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  always @(cfblk167_out1, cfblk37_out1) begin
    cfblk40_div_temp = 9'b000000000;
    cfblk40_t_0_0 = 9'b000000000;
    if (cfblk37_out1 == 8'b00000000) begin
      cfblk40_out1 = 8'b11111111;
    end
    else begin
      cfblk40_t_0_0 = {1'b0, cfblk167_out1};
      cfblk40_div_temp = cfblk40_t_0_0 / cfblk37_out1;
      if (cfblk40_div_temp[8] != 1'b0) begin
        cfblk40_out1 = 8'b11111111;
      end
      else begin
        cfblk40_out1 = cfblk40_div_temp[7:0];
      end
    end
  end



  assign cfblk68_out1 = cfblk40_out1 + cfblk169_out1;



  assign cfblk44_out1 = cfblk68_out1 + cfblk160_out1;



  always @(cfblk43_out1, cfblk82_out1) begin
    cfblk137_div_temp = 9'b000000000;
    cfblk137_t_0_0 = 9'b000000000;
    if (cfblk82_out1 == 8'b00000000) begin
      cfblk137_out1 = 8'b11111111;
    end
    else begin
      cfblk137_t_0_0 = {1'b0, cfblk43_out1};
      cfblk137_div_temp = cfblk137_t_0_0 / cfblk82_out1;
      if (cfblk137_div_temp[8] != 1'b0) begin
        cfblk137_out1 = 8'b11111111;
      end
      else begin
        cfblk137_out1 = cfblk137_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk137_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk82_out1 = cfblk163_out1 - cfblk44_out1;



  always @(cfblk26_out1, cfblk82_out1) begin
    cfblk115_div_temp = 9'b000000000;
    cfblk115_t_0_0 = 9'b000000000;
    if (cfblk26_out1 == 8'b00000000) begin
      cfblk115_out1 = 8'b11111111;
    end
    else begin
      cfblk115_t_0_0 = {1'b0, cfblk82_out1};
      cfblk115_div_temp = cfblk115_t_0_0 / cfblk26_out1;
      if (cfblk115_div_temp[8] != 1'b0) begin
        cfblk115_out1 = 8'b11111111;
      end
      else begin
        cfblk115_out1 = cfblk115_div_temp[7:0];
      end
    end
  end



  assign cfblk131_out1 = (cfblk115_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  Mysubsystem_3 u_Mysubsystem_3 (.In1(cfblk43_out1),  // uint8
                                 .In2(cfblk111_out1),  // uint8
                                 .In3(cfblk131_out1),  // uint8
                                 .In4(cfblk155_out1),  // uint8
                                 .Out1(Mysubsystem_3_out1)  // uint8
                                 );

  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = Mysubsystem_3_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  always @(cfblk162_out1, cfblk1_out1) begin
    cfblk97_div_temp = 9'b000000000;
    cfblk97_t_0_0 = 9'b000000000;
    if (cfblk1_out1 == 8'b00000000) begin
      cfblk97_out1 = 8'b11111111;
    end
    else begin
      cfblk97_t_0_0 = {1'b0, cfblk162_out1};
      cfblk97_div_temp = cfblk97_t_0_0 / cfblk1_out1;
      if (cfblk97_div_temp[8] != 1'b0) begin
        cfblk97_out1 = 8'b11111111;
      end
      else begin
        cfblk97_out1 = cfblk97_div_temp[7:0];
      end
    end
  end



  assign cfblk73_out1 = cfblk97_out1 + cfblk173_out1;



  assign cfblk133_out1 = (cfblk73_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk83_out1 = cfblk148_out1 + cfblk133_out1;



  assign cfblk127_out1 = cfblk112_out1 + cfblk59_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk127_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  DotProduct_block3 u_cfblk59_inst (.in1(cfblk177_out1),  // uint8
                                    .in2(cfblk83_out1),  // uint8
                                    .out1(cfblk59_out1)  // uint8
                                    );

  assign cfblk51_out1 = cfblk59_out1 + cfblk137_out1;



  assign cfblk61_out1 = cfblk149_out1 - cfblk51_out1;



  assign cfblk111_out1 = cfblk152_out1 - cfblk61_out1;



  assign cfblk121_out1 = (cfblk111_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign Hdl_out = cfblk121_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

