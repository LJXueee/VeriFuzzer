// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1830\sampleModel1830_1_sub\Subsystem.v
// Created: 2024-07-02 03:34:07
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1830_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] bitMask_for_cfblk4;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk154_const_val_1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk153_const_val_1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk24_const_val_1;  // uint8
  wire [7:0] Mysubsystem_5_out1;  // uint8
  wire [15:0] Mysubsystem_5_out2;  // ufix16_En7
  wire [7:0] cfblk156_const_val_1;  // uint8
  wire [7:0] cfblk139_const_val_1;  // uint8
  wire [7:0] Mysubsystem_9_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk106_const_val_1;  // uint8
  wire [7:0] cfblk82_const_val_1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk67_const_val_1;  // uint8
  wire [7:0] cfblk50_const_val_1;  // uint8
  wire [7:0] cfblk97_const_val_1;  // uint8
  wire [7:0] cfblk31_const_val_1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [15:0] cfblk159_out1;  // uint16
  reg [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk150_const_val_1;  // uint8
  wire [7:0] cfblk48_const_val_1;  // uint8
  wire [7:0] cfblk71_const_val_1;  // uint8
  wire [7:0] cfblk10_const_val_1;  // uint8
  wire [7:0] cfblk109_const_val_1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk195_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_out1;  // uint8
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] cfblk194_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk165_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  reg [7:0] cfblk196_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk196_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk196_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  reg [7:0] cfblk192_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  reg [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  reg [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk163_out1;  // uint8
  reg [7:0] cfblk193_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [15:0] cfblk7_out1;  // uint16
  wire [7:0] cfblk207_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  reg [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [31:0] cfblk142_add_cast;  // ufix32_En7
  wire [31:0] cfblk142_add_cast_1;  // ufix32_En7
  wire [31:0] cfblk142_add_temp;  // ufix32_En7
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  reg [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk197_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk197_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk197_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk108_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk77_out1;  // uint8
  wire [15:0] cfblk6_out1;  // uint16
  wire [7:0] cfblk200_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire cfblk1_relop1;
  reg [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [31:0] cfblk148_add_cast;  // ufix32_En7
  wire [31:0] cfblk148_add_cast_1;  // ufix32_En7
  wire [31:0] cfblk148_add_temp;  // ufix32_En7
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk12_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk129_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg [15:0] cfblk17_varargout_1;  // ufix16
  reg [15:0] cfblk17_div_temp;  // ufix16
  reg [8:0] cfblk55_div_temp;  // ufix9
  reg [8:0] cfblk55_t_0_0;  // ufix9
  reg [8:0] cfblk14_div_temp;  // ufix9
  reg [8:0] cfblk14_t_0_0;  // ufix9
  reg [8:0] cfblk8_div_temp;  // ufix9
  reg [8:0] cfblk8_t_0_0;  // ufix9
  reg [8:0] cfblk130_div_temp;  // ufix9
  reg [8:0] cfblk130_t_0_0;  // ufix9
  reg [8:0] cfblk15_div_temp;  // ufix9
  reg [8:0] cfblk15_t_0_0;  // ufix9
  reg [8:0] cfblk108_div_temp;  // ufix9
  reg [8:0] cfblk108_t_0_0;  // ufix9
  reg [7:0] cfblk105_div_temp;  // ufix8
  reg [8:0] cfblk129_div_temp;  // ufix9
  reg [8:0] cfblk129_t_0_0;  // ufix9
  reg [8:0] cfblk26_div_temp;  // ufix9
  reg [8:0] cfblk26_t_0_0;  // ufix9


  cfblk160 u_cfblk160 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk160_out1)  // uint8
                       );

  assign bitMask_for_cfblk4 = 8'b11011001;



  assign cfblk4_out1 = cfblk160_out1 & bitMask_for_cfblk4;



  assign cfblk39_out1 = (cfblk4_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk154_const_val_1 = 8'b00000000;



  assign cfblk154_out1 = cfblk39_out1 + cfblk154_const_val_1;



  assign dtc_out = cfblk154_out1;



  assign cfblk13_out1 = dtc_out;



  assign cfblk153_const_val_1 = 8'b00000000;



  assign cfblk161_out1 = 8'b00000001;



  assign cfblk24_const_val_1 = 8'b00000000;



  Mysubsystem_5 u_Mysubsystem_5 (.Out1(Mysubsystem_5_out1),  // uint8
                                 .Out2(Mysubsystem_5_out2)  // ufix16_En7
                                 );

  assign enb = clk_enable;

  assign cfblk156_const_val_1 = 8'b00000000;



  assign cfblk139_const_val_1 = 8'b00000000;



  Mysubsystem_9 u_Mysubsystem_9 (.Out1(Mysubsystem_9_out1)  // uint8
                                 );

  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = Mysubsystem_9_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign cfblk106_const_val_1 = 8'b00000000;



  assign cfblk82_const_val_1 = 8'b00000000;



  assign dtc_out_1 = cfblk4_out1;



  assign cfblk111_out1 = dtc_out_1;



  assign cfblk74_out1 = (cfblk111_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk67_const_val_1 = 8'b00000000;



  assign cfblk50_const_val_1 = 8'b00000000;



  assign cfblk97_const_val_1 = 8'b00000000;



  assign cfblk31_const_val_1 = 8'b00000000;



  assign cfblk138_out1 = Mysubsystem_5_out1 + cfblk161_out1;



  cfblk159 u_cfblk159 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk159_out1)  // uint16
                       );

  always @(cfblk138_out1, cfblk159_out1) begin
    cfblk17_div_temp = 16'b0000000000000000;
    if (cfblk159_out1 == 16'b0000000000000000) begin
      cfblk17_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk17_div_temp = cfblk138_out1 / cfblk159_out1;
      cfblk17_varargout_1 = cfblk17_div_temp;
    end
    if (cfblk17_varargout_1[15:8] != 8'b00000000) begin
      cfblk17_out1 = 8'b11111111;
    end
    else begin
      cfblk17_out1 = cfblk17_varargout_1[7:0];
    end
  end



  assign cfblk150_const_val_1 = 8'b00000000;



  assign cfblk48_const_val_1 = 8'b00000000;



  assign cfblk71_const_val_1 = 8'b00000000;



  assign cfblk10_const_val_1 = 8'b00000000;



  assign cfblk109_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk195_process
      if (reset == 1'b1) begin
        cfblk195_reg[0] <= 8'b00000000;
        cfblk195_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk195_reg[0] <= cfblk195_reg_next[0];
          cfblk195_reg[1] <= cfblk195_reg_next[1];
        end
      end
    end

  assign cfblk195_out1 = cfblk195_reg[1];
  assign cfblk195_reg_next[0] = cfblk43_out1;
  assign cfblk195_reg_next[1] = cfblk195_reg[0];



  assign cfblk44_out1 = cfblk175_out1 + cfblk4_out1;



  assign cfblk16_out1 = cfblk127_out1 + cfblk13_out1;



  assign cfblk92_out1 = cfblk16_out1 + cfblk44_out1;



  assign cfblk109_out1 = cfblk92_out1 + cfblk109_const_val_1;



  assign dtc_out_2 = cfblk93_out1;



  assign cfblk11_out1 = dtc_out_2;



  assign cfblk43_out1 = cfblk11_out1 + cfblk109_out1;



  assign cfblk122_out1 = cfblk153_out1 + cfblk43_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk122_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk194_process
      if (reset == 1'b1) begin
        cfblk194_reg[0] <= 8'b00000000;
        cfblk194_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk194_reg[0] <= cfblk194_reg_next[0];
          cfblk194_reg[1] <= cfblk194_reg_next[1];
        end
      end
    end

  assign cfblk194_out1 = cfblk194_reg[1];
  assign cfblk194_reg_next[0] = cfblk5_out1;
  assign cfblk194_reg_next[1] = cfblk194_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk68_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk165_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign cfblk71_out1 = cfblk49_out1 + cfblk71_const_val_1;



  assign cfblk69_out1 = cfblk71_out1 + cfblk182_out1;



  assign cfblk32_out1 = cfblk69_out1 + cfblk183_out1;



  assign cfblk10_out1 = cfblk32_out1 + cfblk10_const_val_1;



  always @(cfblk10_out1, cfblk194_out1) begin
    cfblk55_div_temp = 9'b000000000;
    cfblk55_t_0_0 = 9'b000000000;
    if (cfblk194_out1 == 8'b00000000) begin
      cfblk55_out1 = 8'b11111111;
    end
    else begin
      cfblk55_t_0_0 = {1'b0, cfblk10_out1};
      cfblk55_div_temp = cfblk55_t_0_0 / cfblk194_out1;
      if (cfblk55_div_temp[8] != 1'b0) begin
        cfblk55_out1 = 8'b11111111;
      end
      else begin
        cfblk55_out1 = cfblk55_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk55_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk196_process
      if (reset == 1'b1) begin
        cfblk196_reg[0] <= 8'b00000000;
        cfblk196_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk196_reg[0] <= cfblk196_reg_next[0];
          cfblk196_reg[1] <= cfblk196_reg_next[1];
        end
      end
    end

  assign cfblk196_out1 = cfblk196_reg[1];
  assign cfblk196_reg_next[0] = cfblk93_out1;
  assign cfblk196_reg_next[1] = cfblk196_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        cfblk189_reg[0] <= 8'b00000000;
        cfblk189_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk189_reg[0] <= cfblk189_reg_next[0];
          cfblk189_reg[1] <= cfblk189_reg_next[1];
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk79_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  assign cfblk150_out1 = cfblk156_out1 + cfblk150_const_val_1;



  assign cfblk48_out1 = cfblk150_out1 + cfblk48_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk48_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk31_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk9_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  DotProduct_block5 u_cfblk33_inst (.in1(cfblk101_out1),  // uint8
                                    .in2(cfblk27_out1),  // uint8
                                    .out1(cfblk33_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk192_process
      if (reset == 1'b1) begin
        cfblk192_reg[0] <= 8'b00000000;
        cfblk192_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk192_reg[0] <= cfblk192_reg_next[0];
          cfblk192_reg[1] <= cfblk192_reg_next[1];
        end
      end
    end

  assign cfblk192_out1 = cfblk192_reg[1];
  assign cfblk192_reg_next[0] = cfblk33_out1;
  assign cfblk192_reg_next[1] = cfblk192_reg[0];



  always @(cfblk192_out1, cfblk40_out1) begin
    cfblk14_div_temp = 9'b000000000;
    cfblk14_t_0_0 = 9'b000000000;
    if (cfblk192_out1 == 8'b00000000) begin
      cfblk14_out1 = 8'b11111111;
    end
    else begin
      cfblk14_t_0_0 = {1'b0, cfblk40_out1};
      cfblk14_div_temp = cfblk14_t_0_0 / cfblk192_out1;
      if (cfblk14_div_temp[8] != 1'b0) begin
        cfblk14_out1 = 8'b11111111;
      end
      else begin
        cfblk14_out1 = cfblk14_div_temp[7:0];
      end
    end
  end



  assign cfblk35_out1 = (cfblk14_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk176_out1, cfblk35_out1) begin
    cfblk8_div_temp = 9'b000000000;
    cfblk8_t_0_0 = 9'b000000000;
    if (cfblk176_out1 == 8'b00000000) begin
      cfblk8_out1 = 8'b11111111;
    end
    else begin
      cfblk8_t_0_0 = {1'b0, cfblk35_out1};
      cfblk8_div_temp = cfblk8_t_0_0 / cfblk176_out1;
      if (cfblk8_div_temp[8] != 1'b0) begin
        cfblk8_out1 = 8'b11111111;
      end
      else begin
        cfblk8_out1 = cfblk8_div_temp[7:0];
      end
    end
  end



  assign cfblk57_out1 = cfblk8_out1 + cfblk17_out1;



  assign cfblk21_out1 = cfblk57_out1 - cfblk186_out1;



  assign cfblk60_out1 = cfblk21_out1 + cfblk178_out1;



  assign cfblk97_out1 = cfblk3_out1 + cfblk97_const_val_1;



  DotProduct_block4 u_cfblk27_inst (.in1(cfblk97_out1),  // uint8
                                    .in2(cfblk127_out1),  // uint8
                                    .out1(cfblk27_out1)  // uint8
                                    );

  DotProduct_block6 u_cfblk37_inst (.in1(cfblk113_out1),  // uint8
                                    .in2(cfblk27_out1),  // uint8
                                    .out1(cfblk37_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk193_process
      if (reset == 1'b1) begin
        cfblk193_reg[0] <= 8'b00000000;
        cfblk193_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk193_reg[0] <= cfblk193_reg_next[0];
          cfblk193_reg[1] <= cfblk193_reg_next[1];
        end
      end
    end

  assign cfblk193_out1 = cfblk193_reg[1];
  assign cfblk193_reg_next[0] = cfblk163_out1;
  assign cfblk193_reg_next[1] = cfblk193_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk107_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  DotProduct_block7 u_cfblk79_inst (.in1(cfblk106_out1),  // uint8
                                    .in2(cfblk187_out1),  // uint8
                                    .out1(cfblk79_out1)  // uint8
                                    );

  assign cfblk113_out1 = (cfblk79_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk113_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign cfblk66_out1 = cfblk20_out1 + cfblk88_out1;



  assign cfblk52_out1 = cfblk66_out1 + cfblk128_out1;



  assign cfblk50_out1 = cfblk52_out1 + cfblk50_const_val_1;



  assign cfblk7_out1 = {cfblk137_out1, cfblk127_out1};



  assign cfblk207_out1 = cfblk7_out1[7:0];



  assign dtc_out_3 = cfblk207_out1;



  assign cfblk96_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk96_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk78_out1 = cfblk172_out1 + cfblk125_out1;



  assign cfblk137_out1 = cfblk78_out1 - cfblk50_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk137_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk124_out1 = cfblk171_out1 + cfblk26_out1;



  assign dtc_out_4 = cfblk124_out1;



  assign cfblk101_out1 = dtc_out_4;



  assign cfblk142_add_cast = {17'b0, {cfblk101_out1, 7'b0000000}};
  assign cfblk142_add_cast_1 = {16'b0, Mysubsystem_5_out2};
  assign cfblk142_add_temp = cfblk142_add_cast + cfblk142_add_cast_1;
  assign cfblk142_out1 = cfblk142_add_temp[14:7];



  assign cfblk121_out1 = cfblk142_out1 - cfblk181_out1;



  DotProduct_block3 u_cfblk135_inst (.in1(cfblk121_out1),  // uint8
                                     .in2(cfblk193_out1),  // uint8
                                     .out1(cfblk135_out1)  // uint8
                                     );

  always @(cfblk135_out1, cfblk154_out1) begin
    cfblk130_div_temp = 9'b000000000;
    cfblk130_t_0_0 = 9'b000000000;
    if (cfblk154_out1 == 8'b00000000) begin
      cfblk130_out1 = 8'b11111111;
    end
    else begin
      cfblk130_t_0_0 = {1'b0, cfblk135_out1};
      cfblk130_div_temp = cfblk130_t_0_0 / cfblk154_out1;
      if (cfblk130_div_temp[8] != 1'b0) begin
        cfblk130_out1 = 8'b11111111;
      end
      else begin
        cfblk130_out1 = cfblk130_div_temp[7:0];
      end
    end
  end



  assign cfblk61_out1 = cfblk130_out1 + cfblk130_out1;



  assign cfblk143_out1 = cfblk61_out1 - cfblk37_out1;



  cfblk165 u_cfblk165 (.In1(cfblk143_out1),  // uint8
                       .Out1(cfblk165_out1)  // uint8
                       );

  assign cfblk110_out1 = cfblk165_out1 + cfblk106_out1;



  DotProduct_block10 u_cfblk93_inst (.in1(cfblk164_out1),  // uint8
                                     .in2(cfblk117_out1),  // uint8
                                     .out1(cfblk93_out1)  // uint8
                                     );

  assign cfblk127_out1 = cfblk74_out1 + cfblk93_out1;



  assign cfblk67_out1 = cfblk127_out1 + cfblk67_const_val_1;



  always @(cfblk110_out1, cfblk67_out1) begin
    cfblk15_div_temp = 9'b000000000;
    cfblk15_t_0_0 = 9'b000000000;
    if (cfblk110_out1 == 8'b00000000) begin
      cfblk15_out1 = 8'b11111111;
    end
    else begin
      cfblk15_t_0_0 = {1'b0, cfblk67_out1};
      cfblk15_div_temp = cfblk15_t_0_0 / cfblk110_out1;
      if (cfblk15_div_temp[8] != 1'b0) begin
        cfblk15_out1 = 8'b11111111;
      end
      else begin
        cfblk15_out1 = cfblk15_div_temp[7:0];
      end
    end
  end



  assign cfblk91_out1 = (cfblk15_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk31_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk197_process
      if (reset == 1'b1) begin
        cfblk197_reg[0] <= 8'b00000000;
        cfblk197_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk197_reg[0] <= cfblk197_reg_next[0];
          cfblk197_reg[1] <= cfblk197_reg_next[1];
        end
      end
    end

  assign cfblk197_out1 = cfblk197_reg[1];
  assign cfblk197_reg_next[0] = cfblk133_out1;
  assign cfblk197_reg_next[1] = cfblk197_reg[0];



  assign cfblk72_out1 = (cfblk148_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk82_out1 = cfblk72_out1 + cfblk82_const_val_1;



  assign cfblk20_out1 = cfblk82_out1 + cfblk65_out1;



  assign dtc_out_5 = cfblk20_out1;



  assign cfblk40_out1 = dtc_out_5;



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk153_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  always @(cfblk3_out1, cfblk76_out1) begin
    cfblk108_div_temp = 9'b000000000;
    cfblk108_t_0_0 = 9'b000000000;
    if (cfblk3_out1 == 8'b00000000) begin
      cfblk108_out1 = 8'b11111111;
    end
    else begin
      cfblk108_t_0_0 = {1'b0, cfblk76_out1};
      cfblk108_div_temp = cfblk108_t_0_0 / cfblk3_out1;
      if (cfblk108_div_temp[8] != 1'b0) begin
        cfblk108_out1 = 8'b11111111;
      end
      else begin
        cfblk108_out1 = cfblk108_div_temp[7:0];
      end
    end
  end



  assign cfblk106_out1 = cfblk108_out1 + cfblk106_const_val_1;



  assign dtc_out_6 = cfblk106_out1;



  assign cfblk77_out1 = dtc_out_6;



  assign cfblk6_out1 = {cfblk77_out1, cfblk40_out1};



  assign cfblk200_out1 = cfblk6_out1[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk200_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk9_out1 = (cfblk86_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_7 = cfblk9_out1;



  assign cfblk22_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk22_out1;



  assign cfblk58_out1 = dtc_out_8;



  assign cfblk156_out1 = cfblk58_out1 + cfblk156_const_val_1;



  assign cfblk99_out1 = cfblk156_out1 - cfblk160_out1;



  assign cfblk139_out1 = cfblk99_out1 + cfblk139_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk139_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  assign cfblk1_relop1 = cfblk179_out1 <= cfblk177_out1;



  always @(cfblk180_out1, cfblk1_relop1) begin
    cfblk105_div_temp = 8'b00000000;
    if (cfblk180_out1 == 8'b00000000) begin
      cfblk105_out1 = 8'b11111111;
    end
    else begin
      cfblk105_div_temp = cfblk1_relop1 / cfblk180_out1;
      cfblk105_out1 = cfblk105_div_temp;
    end
  end



  DotProduct_block9 u_cfblk85_inst (.in1(cfblk105_out1),  // uint8
                                    .in2(cfblk197_out1),  // uint8
                                    .out1(cfblk85_out1)  // uint8
                                    );

  assign cfblk112_out1 = (cfblk85_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk131_out1 = cfblk112_out1 + cfblk185_out1;



  assign cfblk25_out1 = cfblk153_out1 + cfblk65_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk25_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  assign cfblk118_out1 = cfblk190_out1 + cfblk131_out1;



  assign cfblk148_add_cast = {16'b0, Mysubsystem_5_out2};
  assign cfblk148_add_cast_1 = {17'b0, {cfblk163_out1, 7'b0000000}};
  assign cfblk148_add_temp = cfblk148_add_cast + cfblk148_add_cast_1;
  assign cfblk148_out1 = cfblk148_add_temp[14:7];



  assign cfblk136_out1 = (cfblk148_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk42_out1 = cfblk136_out1 - cfblk49_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk42_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk155_out1 = cfblk173_out1 - cfblk118_out1;



  assign cfblk88_out1 = (cfblk153_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block8 u_cfblk83_inst (.in1(cfblk153_out1),  // uint8
                                    .in2(cfblk161_out1),  // uint8
                                    .out1(cfblk83_out1)  // uint8
                                    );

  assign cfblk149_out1 = cfblk83_out1 + cfblk88_out1;



  assign cfblk24_out1 = cfblk149_out1 + cfblk24_const_val_1;



  assign cfblk89_out1 = (cfblk24_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct u_cfblk100_inst (.in1(cfblk89_out1),  // uint8
                              .in2(cfblk155_out1),  // uint8
                              .out1(cfblk100_out1)  // uint8
                              );

  assign cfblk115_out1 = cfblk100_out1 - cfblk91_out1;



  assign cfblk107_out1 = cfblk115_out1 + cfblk37_out1;



  assign dtc_out_9 = cfblk107_out1;



  assign cfblk68_out1 = dtc_out_9;



  assign dtc_out_10 = cfblk86_out1;



  assign cfblk62_out1 = dtc_out_10;



  DotProduct_block11 u_cfblk95_inst (.in1(cfblk62_out1),  // uint8
                                     .in2(cfblk134_out1),  // uint8
                                     .out1(cfblk95_out1)  // uint8
                                     );

  assign dtc_out_11 = cfblk95_out1;



  assign cfblk76_out1 = dtc_out_11;



  assign cfblk153_out1 = cfblk76_out1 + cfblk153_const_val_1;



  assign cfblk12_out1 = cfblk153_out1 + cfblk68_out1;



  assign cfblk31_out1 = cfblk12_out1 + cfblk31_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk31_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  assign cfblk86_out1 = cfblk184_out1 + cfblk60_out1;



  DotProduct_block u_cfblk128_inst (.in1(cfblk13_out1),  // uint8
                                    .in2(cfblk86_out1),  // uint8
                                    .out1(cfblk128_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk128_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk29_out1 = cfblk175_out1 - cfblk121_out1;



  DotProduct_block2 u_cfblk134_inst (.in1(cfblk65_out1),  // uint8
                                     .in2(cfblk29_out1),  // uint8
                                     .out1(cfblk134_out1)  // uint8
                                     );

  cfblk164 u_cfblk164 (.In1(cfblk134_out1),  // uint8
                       .Out1(cfblk164_out1)  // uint8
                       );

  always @(cfblk164_out1, cfblk189_out1) begin
    cfblk129_div_temp = 9'b000000000;
    cfblk129_t_0_0 = 9'b000000000;
    if (cfblk189_out1 == 8'b00000000) begin
      cfblk129_out1 = 8'b11111111;
    end
    else begin
      cfblk129_t_0_0 = {1'b0, cfblk164_out1};
      cfblk129_div_temp = cfblk129_t_0_0 / cfblk189_out1;
      if (cfblk129_div_temp[8] != 1'b0) begin
        cfblk129_out1 = 8'b11111111;
      end
      else begin
        cfblk129_out1 = cfblk129_div_temp[7:0];
      end
    end
  end



  assign cfblk49_out1 = (cfblk129_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk49_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk65_out1 = cfblk169_out1 + cfblk155_out1;



  assign cfblk157_out1 = cfblk65_out1 - cfblk196_out1;



  DotProduct_block1 u_cfblk133_inst (.in1(cfblk157_out1),  // uint8
                                     .in2(cfblk170_out1),  // uint8
                                     .out1(cfblk133_out1)  // uint8
                                     );

  always @(cfblk133_out1, cfblk191_out1) begin
    cfblk26_div_temp = 9'b000000000;
    cfblk26_t_0_0 = 9'b000000000;
    if (cfblk191_out1 == 8'b00000000) begin
      cfblk26_out1 = 8'b11111111;
    end
    else begin
      cfblk26_t_0_0 = {1'b0, cfblk133_out1};
      cfblk26_div_temp = cfblk26_t_0_0 / cfblk191_out1;
      if (cfblk26_div_temp[8] != 1'b0) begin
        cfblk26_out1 = 8'b11111111;
      end
      else begin
        cfblk26_out1 = cfblk26_div_temp[7:0];
      end
    end
  end



  assign cfblk125_out1 = cfblk26_out1 + cfblk55_out1;



  cfblk163 u_cfblk163 (.In1(cfblk125_out1),  // uint8
                       .Out1(cfblk163_out1)  // uint8
                       );

  assign cfblk90_out1 = (cfblk163_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk117_out1 = cfblk90_out1 - cfblk195_out1;



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk117_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  assign Hdl_out = cfblk5_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

