// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1979\sampleModel1979_3_sub\Subsystem.v
// Created: 2024-08-16 07:04:13
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1979_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk146_out1;  // uint8
  wire [15:0] cfblk150_out1;  // uint16
  wire [7:0] cfblk148_out1;  // uint8
  wire [31:0] cfblk75_add_temp;  // ufix32
  wire [31:0] cfblk75_1;  // ufix32
  wire [31:0] cfblk75_2;  // ufix32
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk119_const_val_1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk81_const_val_1;  // uint8
  wire [15:0] cfblk127_out1;  // uint16
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk32_const_val_1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk53_const_val_1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk132_const_val_1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  reg [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  reg [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [31:0] cfblk105_add_temp;  // ufix32
  wire [31:0] cfblk105_1;  // ufix32
  wire [31:0] cfblk105_2;  // ufix32
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  reg [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  reg [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [15:0] Mysubsystem_38_out1;  // uint16
  reg [15:0] cfblk166_reg [0:1];  // ufix16 [2]
  wire [15:0] cfblk166_reg_next [0:1];  // ufix16 [2]
  wire [15:0] cfblk166_out1;  // uint16
  reg [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  reg [7:0] cfblk31_out1;  // uint8
  reg [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk102_out1;  // uint8
  reg [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk116_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  reg [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  reg [8:0] cfblk38_div_temp;  // ufix9
  reg [8:0] cfblk38_t_0_0;  // ufix9
  reg [8:0] cfblk87_div_temp;  // ufix9
  reg [8:0] cfblk87_t_0_0;  // ufix9
  reg [8:0] cfblk92_div_temp;  // ufix9
  reg [8:0] cfblk92_t_0_0;  // ufix9
  reg [8:0] cfblk124_div_temp;  // ufix9
  reg [8:0] cfblk124_t_0_0;  // ufix9
  reg [15:0] cfblk107_varargout_1;  // ufix16
  reg [16:0] cfblk107_div_temp;  // ufix17
  reg [16:0] cfblk107_t_0_0;  // ufix17
  reg [8:0] cfblk122_div_temp;  // ufix9
  reg [8:0] cfblk122_t_0_0;  // ufix9
  reg [8:0] cfblk39_div_temp;  // ufix9
  reg [8:0] cfblk39_t_0_0;  // ufix9
  reg [8:0] cfblk9_div_temp;  // ufix9
  reg [8:0] cfblk9_t_0_0;  // ufix9
  reg [8:0] cfblk31_div_temp;  // ufix9
  reg [8:0] cfblk31_t_0_0;  // ufix9
  reg [8:0] cfblk15_div_temp;  // ufix9
  reg [8:0] cfblk15_t_0_0;  // ufix9
  reg [8:0] cfblk29_div_temp;  // ufix9
  reg [8:0] cfblk29_t_0_0;  // ufix9
  reg [8:0] cfblk34_div_temp;  // ufix9
  reg [8:0] cfblk34_t_0_0;  // ufix9
  reg [8:0] cfblk64_div_temp;  // ufix9
  reg [8:0] cfblk64_t_0_0;  // ufix9
  reg [8:0] cfblk45_div_temp;  // ufix9
  reg [8:0] cfblk45_t_0_0;  // ufix9


  assign enb = clk_enable;

  cfblk146 u_cfblk146 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk146_out1)  // uint8
                       );

  cfblk150 u_cfblk150 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk150_out1)  // uint16
                       );

  cfblk148 u_cfblk148 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk148_out1)  // uint8
                       );

  assign cfblk75_1 = {16'b0, cfblk150_out1};
  assign cfblk75_2 = {24'b0, cfblk148_out1};
  assign cfblk75_add_temp = cfblk75_1 + cfblk75_2;
  assign cfblk75_out1 = cfblk75_add_temp[7:0];



  assign cfblk6_out1 = (cfblk75_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk119_const_val_1 = 8'b00000000;



  assign cfblk119_out1 = cfblk6_out1 + cfblk119_const_val_1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk119_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign dtc_out = cfblk148_out1;



  assign cfblk61_out1 = dtc_out;



  assign cfblk147_out1 = 8'b00000000;



  assign cfblk109_out1 = (cfblk147_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk81_const_val_1 = 8'b00000000;



  assign cfblk127_out1 = (cfblk150_out1 > 16'b0000000000000000 ? 16'b0000000000000001 :
              16'b0000000000000000);



  assign cfblk5_out1 = (cfblk119_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk149 u_cfblk149 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk149_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk149_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk112_out1 = (cfblk6_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk32_const_val_1 = 8'b00000000;



  assign dtc_out_1 = cfblk112_out1;



  assign cfblk47_out1 = dtc_out_1;



  assign cfblk69_out1 = cfblk47_out1 + cfblk149_out1;



  assign cfblk53_const_val_1 = 8'b00000000;



  assign cfblk67_out1 = cfblk5_out1 + cfblk109_out1;



  assign cfblk132_const_val_1 = 8'b00000000;



  assign cfblk132_out1 = cfblk67_out1 + cfblk132_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk132_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk44_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk27_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  DotProduct_block5 u_cfblk49_inst (.in1(cfblk160_out1),  // uint8
                                    .in2(cfblk57_out1),  // uint8
                                    .out1(cfblk49_out1)  // uint8
                                    );

  DotProduct_block4 u_cfblk27_inst (.in1(cfblk49_out1),  // uint8
                                    .in2(cfblk180_out1),  // uint8
                                    .out1(cfblk27_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk93_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk1_out1 = cfblk171_out1 | 8'b00000001;



  DotProduct_block3 u_cfblk125_inst (.in1(cfblk152_out1),  // uint8
                                     .in2(cfblk3_out1),  // uint8
                                     .out1(cfblk125_out1)  // uint8
                                     );

  assign cfblk32_out1 = cfblk92_out1 + cfblk32_const_val_1;



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk32_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  always @(cfblk3_out1, cfblk98_out1) begin
    cfblk38_div_temp = 9'b000000000;
    cfblk38_t_0_0 = 9'b000000000;
    if (cfblk98_out1 == 8'b00000000) begin
      cfblk38_out1 = 8'b11111111;
    end
    else begin
      cfblk38_t_0_0 = {1'b0, cfblk3_out1};
      cfblk38_div_temp = cfblk38_t_0_0 / cfblk98_out1;
      if (cfblk38_div_temp[8] != 1'b0) begin
        cfblk38_out1 = 8'b11111111;
      end
      else begin
        cfblk38_out1 = cfblk38_div_temp[7:0];
      end
    end
  end



  assign cfblk25_out1 = cfblk38_out1 - cfblk125_out1;



  always @(cfblk17_out1, cfblk25_out1) begin
    cfblk87_div_temp = 9'b000000000;
    cfblk87_t_0_0 = 9'b000000000;
    if (cfblk17_out1 == 8'b00000000) begin
      cfblk87_out1 = 8'b11111111;
    end
    else begin
      cfblk87_t_0_0 = {1'b0, cfblk25_out1};
      cfblk87_div_temp = cfblk87_t_0_0 / cfblk17_out1;
      if (cfblk87_div_temp[8] != 1'b0) begin
        cfblk87_out1 = 8'b11111111;
      end
      else begin
        cfblk87_out1 = cfblk87_div_temp[7:0];
      end
    end
  end



  assign cfblk126_out1 = cfblk87_out1 + cfblk118_out1;



  assign cfblk103_out1 = cfblk36_out1 + cfblk126_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk103_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk45_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk54_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  cfblk155 u_cfblk155 (.In1(cfblk151_out1),  // uint8
                       .Out1(cfblk155_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk155_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk46_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk45_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign dtc_out_2 = cfblk18_out1;



  assign cfblk74_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk82_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk105_1 = {24'b0, cfblk99_out1};
  assign cfblk105_2 = {16'b0, cfblk127_out1};
  assign cfblk105_add_temp = cfblk105_1 + cfblk105_2;
  assign cfblk105_out1 = cfblk105_add_temp[7:0];



  always @(cfblk105_out1, cfblk151_out1) begin
    cfblk92_div_temp = 9'b000000000;
    cfblk92_t_0_0 = 9'b000000000;
    if (cfblk151_out1 == 8'b00000000) begin
      cfblk92_out1 = 8'b11111111;
    end
    else begin
      cfblk92_t_0_0 = {1'b0, cfblk105_out1};
      cfblk92_div_temp = cfblk92_t_0_0 / cfblk151_out1;
      if (cfblk92_div_temp[8] != 1'b0) begin
        cfblk92_out1 = 8'b11111111;
      end
      else begin
        cfblk92_out1 = cfblk92_div_temp[7:0];
      end
    end
  end



  assign cfblk72_out1 = cfblk148_out1 + cfblk82_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk137_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk44_out1 = cfblk9_out1 - cfblk169_out1;



  assign cfblk51_out1 = cfblk44_out1 - cfblk39_out1;



  assign cfblk135_out1 = (cfblk51_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk81_out1 = cfblk98_out1 + cfblk81_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk81_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk99_out1 = (cfblk153_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block6 u_cfblk54_inst (.in1(cfblk99_out1),  // uint8
                                    .in2(cfblk164_out1),  // uint8
                                    .out1(cfblk54_out1)  // uint8
                                    );

  assign cfblk98_out1 = cfblk109_out1 - cfblk54_out1;



  assign dtc_out_3 = cfblk91_out1;



  assign cfblk108_out1 = dtc_out_3;



  assign cfblk55_out1 = cfblk108_out1 + cfblk115_out1;



  always @(cfblk55_out1, cfblk61_out1) begin
    cfblk124_div_temp = 9'b000000000;
    cfblk124_t_0_0 = 9'b000000000;
    if (cfblk61_out1 == 8'b00000000) begin
      cfblk124_out1 = 8'b11111111;
    end
    else begin
      cfblk124_t_0_0 = {1'b0, cfblk55_out1};
      cfblk124_div_temp = cfblk124_t_0_0 / cfblk61_out1;
      if (cfblk124_div_temp[8] != 1'b0) begin
        cfblk124_out1 = 8'b11111111;
      end
      else begin
        cfblk124_out1 = cfblk124_div_temp[7:0];
      end
    end
  end



  cfblk153 u_cfblk153 (.In1(cfblk124_out1),  // uint8
                       .Out1(cfblk153_out1)  // uint8
                       );

  assign cfblk8_out1 = cfblk153_out1 + cfblk98_out1;



  assign dtc_out_4 = cfblk8_out1;



  assign cfblk19_out1 = dtc_out_4;



  assign cfblk97_out1 = cfblk19_out1 - cfblk135_out1;



  assign cfblk120_out1 = cfblk123_out1 + cfblk97_out1;



  DotProduct_block1 u_cfblk117_inst (.in1(cfblk120_out1),  // uint8
                                     .in2(cfblk85_out1),  // uint8
                                     .out1(cfblk117_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk117_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  cfblk151 u_cfblk151 (.In1(cfblk77_out1),  // uint8
                       .Out1(cfblk151_out1)  // uint8
                       );

  assign cfblk131_out1 = cfblk2_out1 - cfblk151_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk131_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  assign cfblk140_out1 = cfblk179_out1 + cfblk36_out1;



  assign cfblk106_out1 = (cfblk137_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk82_out1 = (cfblk106_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk82_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk50_out1 = cfblk167_out1 + cfblk140_out1;



  assign cfblk18_out1 = cfblk50_out1 + cfblk161_out1;



  assign cfblk91_out1 = (cfblk122_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk17_out1 = cfblk91_out1 + cfblk18_out1;



  assign cfblk23_out1 = cfblk119_out1 - cfblk17_out1;



  Mysubsystem_38 u_Mysubsystem_38 (.In1(cfblk23_out1),  // uint8
                                   .In2(cfblk72_out1),  // uint8
                                   .In3(cfblk92_out1),  // uint8
                                   .In4(cfblk109_out1),  // uint8
                                   .Out1(Mysubsystem_38_out1)  // uint16
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 16'b0000000000000000;
        cfblk166_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = Mysubsystem_38_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(cfblk166_out1, cfblk44_out1) begin
    cfblk107_div_temp = 17'b00000000000000000;
    cfblk107_t_0_0 = 17'b00000000000000000;
    if (cfblk44_out1 == 8'b00000000) begin
      cfblk107_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk107_t_0_0 = {1'b0, cfblk166_out1};
      cfblk107_div_temp = cfblk107_t_0_0 / cfblk44_out1;
      if (cfblk107_div_temp[16] != 1'b0) begin
        cfblk107_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk107_varargout_1 = cfblk107_div_temp[15:0];
      end
    end
    if (cfblk107_varargout_1[15:8] != 8'b00000000) begin
      cfblk107_out1 = 8'b11111111;
    end
    else begin
      cfblk107_out1 = cfblk107_varargout_1[7:0];
    end
  end



  DotProduct_block8 u_cfblk77_inst (.in1(cfblk107_out1),  // uint8
                                    .in2(cfblk36_out1),  // uint8
                                    .out1(cfblk77_out1)  // uint8
                                    );

  always @(cfblk168_out1, cfblk77_out1) begin
    cfblk122_div_temp = 9'b000000000;
    cfblk122_t_0_0 = 9'b000000000;
    if (cfblk168_out1 == 8'b00000000) begin
      cfblk122_out1 = 8'b11111111;
    end
    else begin
      cfblk122_t_0_0 = {1'b0, cfblk77_out1};
      cfblk122_div_temp = cfblk122_t_0_0 / cfblk168_out1;
      if (cfblk122_div_temp[8] != 1'b0) begin
        cfblk122_out1 = 8'b11111111;
      end
      else begin
        cfblk122_out1 = cfblk122_div_temp[7:0];
      end
    end
  end



  cfblk152 u_cfblk152 (.In1(cfblk122_out1),  // uint8
                       .Out1(cfblk152_out1)  // uint8
                       );

  assign cfblk128_out1 = (cfblk152_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk128_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  always @(cfblk146_out1, cfblk177_out1) begin
    cfblk39_div_temp = 9'b000000000;
    cfblk39_t_0_0 = 9'b000000000;
    if (cfblk177_out1 == 8'b00000000) begin
      cfblk39_out1 = 8'b11111111;
    end
    else begin
      cfblk39_t_0_0 = {1'b0, cfblk146_out1};
      cfblk39_div_temp = cfblk39_t_0_0 / cfblk177_out1;
      if (cfblk39_div_temp[8] != 1'b0) begin
        cfblk39_out1 = 8'b11111111;
      end
      else begin
        cfblk39_out1 = cfblk39_div_temp[7:0];
      end
    end
  end



  always @(cfblk39_out1, cfblk5_out1) begin
    cfblk9_div_temp = 9'b000000000;
    cfblk9_t_0_0 = 9'b000000000;
    if (cfblk5_out1 == 8'b00000000) begin
      cfblk9_out1 = 8'b11111111;
    end
    else begin
      cfblk9_t_0_0 = {1'b0, cfblk39_out1};
      cfblk9_div_temp = cfblk9_t_0_0 / cfblk5_out1;
      if (cfblk9_div_temp[8] != 1'b0) begin
        cfblk9_out1 = 8'b11111111;
      end
      else begin
        cfblk9_out1 = cfblk9_div_temp[7:0];
      end
    end
  end



  assign cfblk80_out1 = cfblk9_out1 - cfblk117_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk80_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk134_out1 = cfblk162_out1 - cfblk74_out1;



  assign cfblk10_out1 = cfblk134_out1 + cfblk183_out1;



  DotProduct_block2 u_cfblk118_inst (.in1(cfblk10_out1),  // uint8
                                     .in2(cfblk181_out1),  // uint8
                                     .out1(cfblk118_out1)  // uint8
                                     );

  assign cfblk63_out1 = cfblk118_out1 + cfblk176_out1;



  cfblk154 u_cfblk154 (.In1(cfblk63_out1),  // uint8
                       .Out1(cfblk154_out1)  // uint8
                       );

  always @(cfblk154_out1, cfblk178_out1) begin
    cfblk31_div_temp = 9'b000000000;
    cfblk31_t_0_0 = 9'b000000000;
    if (cfblk178_out1 == 8'b00000000) begin
      cfblk31_out1 = 8'b11111111;
    end
    else begin
      cfblk31_t_0_0 = {1'b0, cfblk154_out1};
      cfblk31_div_temp = cfblk31_t_0_0 / cfblk178_out1;
      if (cfblk31_div_temp[8] != 1'b0) begin
        cfblk31_out1 = 8'b11111111;
      end
      else begin
        cfblk31_out1 = cfblk31_div_temp[7:0];
      end
    end
  end



  always @(cfblk112_out1, cfblk31_out1) begin
    cfblk15_div_temp = 9'b000000000;
    cfblk15_t_0_0 = 9'b000000000;
    if (cfblk112_out1 == 8'b00000000) begin
      cfblk15_out1 = 8'b11111111;
    end
    else begin
      cfblk15_t_0_0 = {1'b0, cfblk31_out1};
      cfblk15_div_temp = cfblk15_t_0_0 / cfblk112_out1;
      if (cfblk15_div_temp[8] != 1'b0) begin
        cfblk15_out1 = 8'b11111111;
      end
      else begin
        cfblk15_out1 = cfblk15_div_temp[7:0];
      end
    end
  end



  assign cfblk136_out1 = (cfblk15_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk136_out1, cfblk163_out1) begin
    cfblk29_div_temp = 9'b000000000;
    cfblk29_t_0_0 = 9'b000000000;
    if (cfblk163_out1 == 8'b00000000) begin
      cfblk29_out1 = 8'b11111111;
    end
    else begin
      cfblk29_t_0_0 = {1'b0, cfblk136_out1};
      cfblk29_div_temp = cfblk29_t_0_0 / cfblk163_out1;
      if (cfblk29_div_temp[8] != 1'b0) begin
        cfblk29_out1 = 8'b11111111;
      end
      else begin
        cfblk29_out1 = cfblk29_div_temp[7:0];
      end
    end
  end



  assign cfblk85_out1 = cfblk29_out1 + cfblk182_out1;



  assign cfblk56_out1 = (cfblk85_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block7 u_cfblk57_inst (.in1(cfblk56_out1),  // uint8
                                    .in2(cfblk165_out1),  // uint8
                                    .out1(cfblk57_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk57_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk36_out1 = cfblk159_out1 + cfblk1_out1;



  assign dtc_out_5 = cfblk36_out1;



  assign cfblk102_out1 = dtc_out_5;



  always @(cfblk102_out1, cfblk69_out1) begin
    cfblk34_div_temp = 9'b000000000;
    cfblk34_t_0_0 = 9'b000000000;
    if (cfblk69_out1 == 8'b00000000) begin
      cfblk34_out1 = 8'b11111111;
    end
    else begin
      cfblk34_t_0_0 = {1'b0, cfblk102_out1};
      cfblk34_div_temp = cfblk34_t_0_0 / cfblk69_out1;
      if (cfblk34_div_temp[8] != 1'b0) begin
        cfblk34_out1 = 8'b11111111;
      end
      else begin
        cfblk34_out1 = cfblk34_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk76_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk137_out1 = cfblk170_out1 + cfblk34_out1;



  assign cfblk76_out1 = cfblk137_out1 + cfblk115_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk14_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  DotProduct_block9 u_cfblk93_inst (.in1(cfblk175_out1),  // uint8
                                    .in2(cfblk76_out1),  // uint8
                                    .out1(cfblk93_out1)  // uint8
                                    );

  assign dtc_out_6 = cfblk93_out1;



  assign cfblk14_out1 = dtc_out_6;



  DotProduct_block u_cfblk116_inst (.in1(cfblk14_out1),  // uint8
                                    .in2(cfblk61_out1),  // uint8
                                    .out1(cfblk116_out1)  // uint8
                                    );

  assign cfblk123_out1 = cfblk116_out1 + cfblk23_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk123_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  always @(cfblk174_out1, cfblk27_out1) begin
    cfblk64_div_temp = 9'b000000000;
    cfblk64_t_0_0 = 9'b000000000;
    if (cfblk27_out1 == 8'b00000000) begin
      cfblk64_out1 = 8'b11111111;
    end
    else begin
      cfblk64_t_0_0 = {1'b0, cfblk174_out1};
      cfblk64_div_temp = cfblk64_t_0_0 / cfblk27_out1;
      if (cfblk64_div_temp[8] != 1'b0) begin
        cfblk64_out1 = 8'b11111111;
      end
      else begin
        cfblk64_out1 = cfblk64_div_temp[7:0];
      end
    end
  end



  assign cfblk53_out1 = cfblk64_out1 + cfblk53_const_val_1;



  always @(cfblk53_out1, cfblk74_out1) begin
    cfblk45_div_temp = 9'b000000000;
    cfblk45_t_0_0 = 9'b000000000;
    if (cfblk74_out1 == 8'b00000000) begin
      cfblk45_out1 = 8'b11111111;
    end
    else begin
      cfblk45_t_0_0 = {1'b0, cfblk53_out1};
      cfblk45_div_temp = cfblk45_t_0_0 / cfblk74_out1;
      if (cfblk45_div_temp[8] != 1'b0) begin
        cfblk45_out1 = 8'b11111111;
      end
      else begin
        cfblk45_out1 = cfblk45_div_temp[7:0];
      end
    end
  end



  assign cfblk46_out1 = cfblk45_out1 + cfblk45_out1;



  assign cfblk115_out1 = cfblk46_out1 - cfblk173_out1;



  assign dtc_out_7 = cfblk115_out1;



  assign cfblk121_out1 = dtc_out_7;



  assign Hdl_out = cfblk121_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

