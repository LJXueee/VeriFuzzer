// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1471\sampleModel1471_5_sub\Subsystem.v
// Created: 2024-06-10 04:14:07
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk122                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1471_5_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk122,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk122;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] Mysubsystem_10_out1;  // uint8
  wire [7:0] Mysubsystem_28_out1;  // uint8
  wire [7:0] cfblk7_const_val_1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk110_const_val_1;  // uint8
  wire [15:0] cfblk125_out1;  // uint16
  wire [7:0] cfblk19_const_val_1;  // uint8
  wire [7:0] cfblk56_const_val_1;  // uint8
  wire [7:0] cfblk52_const_val_1;  // uint8
  wire [7:0] cfblk51_const_val_1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  reg [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk101_out1;  // uint8
  reg [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] Mysubsystem_31_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  reg [7:0] cfblk102_out1;  // uint8
  wire signed [31:0] cfblk62_sub_temp;  // sfix32
  wire signed [31:0] cfblk62_1;  // sfix32
  wire signed [31:0] cfblk62_2;  // sfix32
  wire Mysubsystem_30_out1;
  reg [7:0] cfblk76_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [31:0] cfblk68_add_temp;  // ufix32
  wire [31:0] cfblk68_1;  // ufix32
  wire [31:0] cfblk68_2;  // ufix32
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk35_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  reg [8:0] cfblk98_div_temp;  // ufix9
  reg [8:0] cfblk98_t_0_0;  // ufix9
  reg [8:0] cfblk38_div_temp;  // ufix9
  reg [8:0] cfblk38_t_0_0;  // ufix9
  reg [8:0] cfblk65_div_temp;  // ufix9
  reg [8:0] cfblk65_t_0_0;  // ufix9
  reg [8:0] cfblk111_div_temp;  // ufix9
  reg [8:0] cfblk111_t_0_0;  // ufix9
  reg [8:0] cfblk102_div_temp;  // ufix9
  reg [8:0] cfblk102_t_0_0;  // ufix9
  reg [8:0] cfblk82_div_temp;  // ufix9
  reg [8:0] cfblk82_t_0_0;  // ufix9
  reg [8:0] cfblk46_div_temp;  // ufix9
  reg [8:0] cfblk46_t_0_0;  // ufix9
  reg [8:0] cfblk76_div_temp;  // ufix9
  reg [8:0] cfblk76_t_0_0;  // ufix9
  reg [8:0] cfblk115_div_temp;  // ufix9
  reg [8:0] cfblk115_t_0_0;  // ufix9


  assign cfblk124_out1 = 8'b00000001;



  assign dtc_out = cfblk124_out1;



  assign cfblk100_out1 = dtc_out;



  Mysubsystem_10 u_Mysubsystem_10 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_10_out1)  // uint8
                                   );

  Mysubsystem_28 u_Mysubsystem_28 (.In1(Mysubsystem_10_out1),  // uint8
                                   .Out1(Mysubsystem_28_out1)  // uint8
                                   );

  assign cfblk7_const_val_1 = 8'b00000000;



  assign cfblk7_out1 = Mysubsystem_28_out1 + cfblk7_const_val_1;



  assign cfblk110_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  cfblk125 u_cfblk125 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk125_out1)  // uint16
                       );

  assign cfblk19_const_val_1 = 8'b00000000;



  assign cfblk56_const_val_1 = 8'b00000000;



  assign cfblk52_const_val_1 = 8'b00000000;



  assign cfblk51_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk51_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk58_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk52_out1 = cfblk98_out1 + cfblk52_const_val_1;



  assign cfblk58_out1 = cfblk52_out1 + Mysubsystem_10_out1;



  assign dtc_out_1 = cfblk58_out1;



  assign cfblk101_out1 = dtc_out_1;



  assign cfblk36_out1 = cfblk101_out1 - cfblk82_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk36_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  assign cfblk80_out1 = cfblk3_out1 + cfblk148_out1;



  assign dtc_out_2 = cfblk25_out1;



  assign cfblk119_out1 = dtc_out_2;



  assign cfblk3_out1 = cfblk119_out1 & 8'b11111110;



  assign cfblk72_out1 = cfblk25_out1 - cfblk62_out1;



  assign cfblk56_out1 = cfblk72_out1 + cfblk56_const_val_1;



  assign cfblk2_out1 = cfblk56_out1 | 8'b00000001;



  always @(cfblk2_out1, cfblk65_out1) begin
    cfblk98_div_temp = 9'b000000000;
    cfblk98_t_0_0 = 9'b000000000;
    if (cfblk2_out1 == 8'b00000000) begin
      cfblk98_out1 = 8'b11111111;
    end
    else begin
      cfblk98_t_0_0 = {1'b0, cfblk65_out1};
      cfblk98_div_temp = cfblk98_t_0_0 / cfblk2_out1;
      if (cfblk98_div_temp[8] != 1'b0) begin
        cfblk98_out1 = 8'b11111111;
      end
      else begin
        cfblk98_out1 = cfblk98_div_temp[7:0];
      end
    end
  end



  assign cfblk69_out1 = (cfblk98_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk69_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk82_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  assign cfblk19_out1 = cfblk86_out1 + cfblk19_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk19_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  DotProduct u_cfblk116_inst (.in1(cfblk143_out1),  // uint8
                              .in2(cfblk42_out1),  // uint8
                              .out1(cfblk116_out1)  // uint8
                              );

  assign cfblk26_out1 = (cfblk116_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk26_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  always @(cfblk115_out1, cfblk95_out1) begin
    cfblk38_div_temp = 9'b000000000;
    cfblk38_t_0_0 = 9'b000000000;
    if (cfblk115_out1 == 8'b00000000) begin
      cfblk38_out1 = 8'b11111111;
    end
    else begin
      cfblk38_t_0_0 = {1'b0, cfblk95_out1};
      cfblk38_div_temp = cfblk38_t_0_0 / cfblk115_out1;
      if (cfblk38_div_temp[8] != 1'b0) begin
        cfblk38_out1 = 8'b11111111;
      end
      else begin
        cfblk38_out1 = cfblk38_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk38_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk82_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk113_out1 = cfblk68_out1 - cfblk149_out1;



  always @(cfblk113_out1, cfblk144_out1) begin
    cfblk65_div_temp = 9'b000000000;
    cfblk65_t_0_0 = 9'b000000000;
    if (cfblk144_out1 == 8'b00000000) begin
      cfblk65_out1 = 8'b11111111;
    end
    else begin
      cfblk65_t_0_0 = {1'b0, cfblk113_out1};
      cfblk65_div_temp = cfblk65_t_0_0 / cfblk144_out1;
      if (cfblk65_div_temp[8] != 1'b0) begin
        cfblk65_out1 = 8'b11111111;
      end
      else begin
        cfblk65_out1 = cfblk65_div_temp[7:0];
      end
    end
  end



  assign dtc_out_3 = cfblk65_out1;



  assign cfblk117_out1 = dtc_out_3;



  assign dtc_out_4 = cfblk31_out1;



  assign cfblk9_out1 = dtc_out_4;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk9_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk22_out1 = cfblk154_out1 - cfblk117_out1;



  assign cfblk91_out1 = cfblk22_out1 - cfblk100_out1;



  assign cfblk42_out1 = (cfblk91_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk96_out1 = cfblk42_out1 + cfblk145_out1;



  always @(cfblk153_out1, cfblk96_out1) begin
    cfblk111_div_temp = 9'b000000000;
    cfblk111_t_0_0 = 9'b000000000;
    if (cfblk153_out1 == 8'b00000000) begin
      cfblk111_out1 = 8'b11111111;
    end
    else begin
      cfblk111_t_0_0 = {1'b0, cfblk96_out1};
      cfblk111_div_temp = cfblk111_t_0_0 / cfblk153_out1;
      if (cfblk111_div_temp[8] != 1'b0) begin
        cfblk111_out1 = 8'b11111111;
      end
      else begin
        cfblk111_out1 = cfblk111_div_temp[7:0];
      end
    end
  end



  cfblk129 u_cfblk129 (.In1(cfblk111_out1),  // uint8
                       .Out1(cfblk129_out1)  // uint8
                       );

  assign cfblk25_out1 = cfblk129_out1 + cfblk152_out1;



  assign cfblk6_out1 = cfblk25_out1 & 8'b11111110;



  assign cfblk31_out1 = cfblk6_out1 - cfblk3_out1;



  Mysubsystem_31 u_Mysubsystem_31 (.In1(cfblk31_out1),  // uint8
                                   .In2(cfblk116_out1),  // uint8
                                   .Out1(Mysubsystem_31_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = Mysubsystem_31_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  always @(cfblk137_out1, cfblk80_out1) begin
    cfblk102_div_temp = 9'b000000000;
    cfblk102_t_0_0 = 9'b000000000;
    if (cfblk80_out1 == 8'b00000000) begin
      cfblk102_out1 = 8'b11111111;
    end
    else begin
      cfblk102_t_0_0 = {1'b0, cfblk137_out1};
      cfblk102_div_temp = cfblk102_t_0_0 / cfblk80_out1;
      if (cfblk102_div_temp[8] != 1'b0) begin
        cfblk102_out1 = 8'b11111111;
      end
      else begin
        cfblk102_out1 = cfblk102_div_temp[7:0];
      end
    end
  end



  always @(cfblk102_out1, cfblk151_out1) begin
    cfblk82_div_temp = 9'b000000000;
    cfblk82_t_0_0 = 9'b000000000;
    if (cfblk151_out1 == 8'b00000000) begin
      cfblk82_out1 = 8'b11111111;
    end
    else begin
      cfblk82_t_0_0 = {1'b0, cfblk102_out1};
      cfblk82_div_temp = cfblk82_t_0_0 / cfblk151_out1;
      if (cfblk82_div_temp[8] != 1'b0) begin
        cfblk82_out1 = 8'b11111111;
      end
      else begin
        cfblk82_out1 = cfblk82_div_temp[7:0];
      end
    end
  end



  assign cfblk62_1 = {16'b0, cfblk125_out1};
  assign cfblk62_2 = {24'b0, cfblk82_out1};
  assign cfblk62_sub_temp = cfblk62_1 - cfblk62_2;
  assign cfblk62_out1 = cfblk62_sub_temp[7:0];



  Mysubsystem_30 u_Mysubsystem_30 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk62_out1),  // uint8
                                   .Y(Mysubsystem_30_out1)
                                   );

  assign dtc_out_5 = cfblk76_out1;



  assign cfblk55_out1 = dtc_out_5;



  assign dtc_out_6 = cfblk55_out1;



  assign cfblk70_out1 = dtc_out_6;



  assign cfblk110_out1 = cfblk70_out1 + cfblk110_const_val_1;



  cfblk127 u_cfblk127 (.In1(cfblk110_out1),  // uint8
                       .Out1(cfblk127_out1)  // uint8
                       );

  DotProduct_block u_cfblk48_inst (.in1(cfblk7_out1),  // uint8
                                   .in2(cfblk115_out1),  // uint8
                                   .out1(cfblk48_out1)  // uint8
                                   );

  assign cfblk53_out1 = cfblk21_out1 + cfblk48_out1;



  assign cfblk29_out1 = cfblk86_out1 + cfblk53_out1;



  always @(cfblk127_out1, cfblk29_out1) begin
    cfblk46_div_temp = 9'b000000000;
    cfblk46_t_0_0 = 9'b000000000;
    if (cfblk127_out1 == 8'b00000000) begin
      cfblk46_out1 = 8'b11111111;
    end
    else begin
      cfblk46_t_0_0 = {1'b0, cfblk29_out1};
      cfblk46_div_temp = cfblk46_t_0_0 / cfblk127_out1;
      if (cfblk46_div_temp[8] != 1'b0) begin
        cfblk46_out1 = 8'b11111111;
      end
      else begin
        cfblk46_out1 = cfblk46_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk46_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  assign cfblk68_1 = {24'b0, cfblk141_out1};
  assign cfblk68_2 = {31'b0, Mysubsystem_30_out1};
  assign cfblk68_add_temp = cfblk68_1 + cfblk68_2;
  assign cfblk68_out1 = cfblk68_add_temp[7:0];



  always @(cfblk42_out1, cfblk68_out1) begin
    cfblk76_div_temp = 9'b000000000;
    cfblk76_t_0_0 = 9'b000000000;
    if (cfblk42_out1 == 8'b00000000) begin
      cfblk76_out1 = 8'b11111111;
    end
    else begin
      cfblk76_t_0_0 = {1'b0, cfblk68_out1};
      cfblk76_div_temp = cfblk76_t_0_0 / cfblk42_out1;
      if (cfblk76_div_temp[8] != 1'b0) begin
        cfblk76_out1 = 8'b11111111;
      end
      else begin
        cfblk76_out1 = cfblk76_div_temp[7:0];
      end
    end
  end



  assign cfblk95_out1 = cfblk76_out1 - cfblk116_out1;



  always @(cfblk139_out1, cfblk95_out1) begin
    cfblk115_div_temp = 9'b000000000;
    cfblk115_t_0_0 = 9'b000000000;
    if (cfblk139_out1 == 8'b00000000) begin
      cfblk115_out1 = 8'b11111111;
    end
    else begin
      cfblk115_t_0_0 = {1'b0, cfblk95_out1};
      cfblk115_div_temp = cfblk115_t_0_0 / cfblk139_out1;
      if (cfblk115_div_temp[8] != 1'b0) begin
        cfblk115_out1 = 8'b11111111;
      end
      else begin
        cfblk115_out1 = cfblk115_div_temp[7:0];
      end
    end
  end



  assign dtc_out_7 = cfblk115_out1;



  assign cfblk20_out1 = dtc_out_7;



  assign cfblk51_out1 = cfblk20_out1 + cfblk51_const_val_1;



  assign dtc_out_8 = cfblk51_out1;



  assign cfblk21_out1 = dtc_out_8;



  assign cfblk67_out1 = cfblk100_out1 - cfblk21_out1;



  assign cfblk114_out1 = cfblk67_out1 + cfblk117_out1;



  assign dtc_out_9 = cfblk114_out1;



  assign cfblk35_out1 = dtc_out_9;



  assign cfblk86_out1 = (cfblk35_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk122 = cfblk86_out1;

  assign Hdl_out = cfblk111_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

