// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1655\sampleModel1655_3_sub\Subsystem.v
// Created: 2024-08-13 09:38:57
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1655_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk8_const_val_1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk72_const_val_1;  // uint8
  wire [15:0] Mysubsystem_33_out1;  // ufix16_En7
  wire [63:0] Mysubsystem_5_out1;  // ufix64
  real Mysubsystem_5_out1_double;  // double
  wire switch_compare_1;
  wire [7:0] cfblk134_const_val_1;  // uint8
  wire [15:0] cfblk147_out1;  // uint16
  wire [7:0] bitMask_for_cfblk1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk102_const_val_1;  // uint8
  wire [7:0] cfblk7_const_val_1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  reg [7:0] cfblk86_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] Mysubsystem_32_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  reg [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [15:0] Mysubsystem_17_out1;  // ufix16_En7
  reg [15:0] cfblk158_reg [0:1];  // ufix16 [2]
  wire [15:0] cfblk158_reg_next [0:1];  // ufix16_En7 [2]
  wire [15:0] cfblk158_out1;  // ufix16_En7
  wire signed [31:0] cfblk117_sub_cast;  // sfix32_En7
  wire signed [31:0] cfblk117_sub_cast_1;  // sfix32_En7
  wire signed [31:0] cfblk117_sub_temp;  // sfix32_En7
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk107_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] cfblk74_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  reg [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk79_out1;  // uint8
  reg [7:0] cfblk123_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire signed [31:0] cfblk85_sub_cast;  // sfix32_En7
  wire signed [31:0] cfblk85_sub_cast_1;  // sfix32_En7
  wire signed [31:0] cfblk85_sub_temp;  // sfix32_En7
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  reg [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] dtc_out_13;  // ufix8
  reg [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] dtc_out_14;  // ufix8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [31:0] cfblk95_add_cast;  // ufix32_En7
  wire [31:0] cfblk95_add_cast_1;  // ufix32_En7
  wire [31:0] cfblk95_add_temp;  // ufix32_En7
  reg [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] dtc_out_15;  // ufix8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  reg [8:0] cfblk71_div_temp;  // ufix9
  reg [8:0] cfblk71_t_0_0;  // ufix9
  reg [8:0] cfblk103_div_temp;  // ufix9
  reg [8:0] cfblk103_t_0_0;  // ufix9
  reg [8:0] cfblk107_div_temp;  // ufix9
  reg [8:0] cfblk107_t_0_0;  // ufix9
  reg [8:0] cfblk110_div_temp;  // ufix9
  reg [8:0] cfblk110_t_0_0;  // ufix9
  reg [8:0] cfblk74_div_temp;  // ufix9
  reg [8:0] cfblk74_t_0_0;  // ufix9
  reg [8:0] cfblk86_div_temp;  // ufix9
  reg [8:0] cfblk86_t_0_0;  // ufix9
  reg [15:0] cfblk113_varargout_1;  // ufix16
  reg [16:0] cfblk113_div_temp;  // ufix17
  reg [16:0] cfblk113_t_0_0;  // ufix17
  reg [8:0] cfblk78_div_temp;  // ufix9
  reg [8:0] cfblk78_t_0_0;  // ufix9
  reg [8:0] cfblk23_div_temp;  // ufix9
  reg [8:0] cfblk23_t_0_0;  // ufix9
  reg [8:0] cfblk123_div_temp;  // ufix9
  reg [8:0] cfblk123_t_0_0;  // ufix9
  reg [8:0] cfblk89_div_temp;  // ufix9
  reg [8:0] cfblk89_t_0_0;  // ufix9
  reg [8:0] cfblk69_div_temp;  // ufix9
  reg [8:0] cfblk69_t_0_0;  // ufix9
  reg [8:0] cfblk76_div_temp;  // ufix9
  reg [8:0] cfblk76_t_0_0;  // ufix9
  reg [8:0] cfblk60_div_temp;  // ufix9
  reg [8:0] cfblk60_t_0_0;  // ufix9
  reg [8:0] cfblk108_div_temp;  // ufix9
  reg [8:0] cfblk108_t_0_0;  // ufix9


  assign cfblk145_out1 = 8'b00000001;



  assign cfblk8_const_val_1 = 8'b00000000;



  assign cfblk8_out1 = cfblk145_out1 + cfblk8_const_val_1;



  assign dtc_out = cfblk8_out1;



  assign cfblk29_out1 = dtc_out;



  assign cfblk72_const_val_1 = 8'b00000000;



  Mysubsystem_33 u_Mysubsystem_33 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_33_out1)  // ufix16_En7
                                   );

  Mysubsystem_5 u_Mysubsystem_5 (.clk(clk),
                                 .reset(reset),
                                 .enb(clk_enable),
                                 .In1(Mysubsystem_5_out1),  // double
                                 .Out1(Mysubsystem_5_out1)  // double
                                 );

  always @* Mysubsystem_5_out1_double = $bitstoreal(Mysubsystem_5_out1);

  assign switch_compare_1 = Mysubsystem_5_out1_double >= 0.0;



  assign cfblk134_const_val_1 = 8'b00000000;



  cfblk147 u_cfblk147 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk147_out1)  // uint16
                       );

  assign enb = clk_enable;

  assign bitMask_for_cfblk1 = 8'b11011001;



  cfblk149 u_cfblk149 (.In1(cfblk8_out1),  // uint8
                       .Out1(cfblk149_out1)  // uint8
                       );

  assign cfblk102_const_val_1 = 8'b00000000;



  assign cfblk7_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk118_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk139_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign dtc_out_1 = cfblk86_out1;



  assign cfblk2_out1 = dtc_out_1;



  assign cfblk32_out1 = cfblk2_out1 - cfblk55_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk32_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk83_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk39_out1 = (cfblk84_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk110_out1, cfblk39_out1) begin
    cfblk71_div_temp = 9'b000000000;
    cfblk71_t_0_0 = 9'b000000000;
    if (cfblk39_out1 == 8'b00000000) begin
      cfblk71_out1 = 8'b11111111;
    end
    else begin
      cfblk71_t_0_0 = {1'b0, cfblk110_out1};
      cfblk71_div_temp = cfblk71_t_0_0 / cfblk39_out1;
      if (cfblk71_div_temp[8] != 1'b0) begin
        cfblk71_out1 = 8'b11111111;
      end
      else begin
        cfblk71_out1 = cfblk71_div_temp[7:0];
      end
    end
  end



  assign cfblk83_out1 = cfblk16_out1 + cfblk23_out1;



  DotProduct_block2 u_cfblk137_inst (.in1(cfblk83_out1),  // uint8
                                     .in2(cfblk118_out1),  // uint8
                                     .out1(cfblk137_out1)  // uint8
                                     );

  assign cfblk102_out1 = cfblk137_out1 + cfblk102_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk102_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  cfblk151 u_cfblk151 (.In1(cfblk140_out1),  // uint8
                       .Out1(cfblk151_out1)  // uint8
                       );

  Mysubsystem_32 u_Mysubsystem_32 (.In1(cfblk68_out1),  // uint8
                                   .In2(cfblk129_out1),  // uint8
                                   .Out1(Mysubsystem_32_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = Mysubsystem_32_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk30_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  assign dtc_out_2 = cfblk118_out1;



  assign cfblk132_out1 = dtc_out_2;



  DotProduct_block6 u_cfblk40_inst (.in1(cfblk149_out1),  // uint8
                                    .in2(cfblk132_out1),  // uint8
                                    .out1(cfblk40_out1)  // uint8
                                    );

  DotProduct_block u_cfblk121_inst (.in1(cfblk40_out1),  // uint8
                                    .in2(cfblk108_out1),  // uint8
                                    .out1(cfblk121_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk121_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk148_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk90_out1 = (cfblk3_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_3 = cfblk90_out1;



  assign cfblk27_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk27_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  always @(cfblk36_out1, cfblk72_out1) begin
    cfblk103_div_temp = 9'b000000000;
    cfblk103_t_0_0 = 9'b000000000;
    if (cfblk36_out1 == 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk72_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk36_out1;
      if (cfblk103_div_temp[8] != 1'b0) begin
        cfblk103_out1 = 8'b11111111;
      end
      else begin
        cfblk103_out1 = cfblk103_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk103_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  DotProduct_block1 u_cfblk133_inst (.in1(cfblk72_out1),  // uint8
                                     .in2(cfblk163_out1),  // uint8
                                     .out1(cfblk133_out1)  // uint8
                                     );

  assign dtc_out_4 = cfblk23_out1;



  assign cfblk116_out1 = dtc_out_4;



  Mysubsystem_17 u_Mysubsystem_17 (.In1(cfblk3_out1),  // uint8
                                   .In2(cfblk41_out1),  // uint8
                                   .In3(cfblk116_out1),  // uint8
                                   .Out1(Mysubsystem_17_out1)  // ufix16_En7
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 16'b0000000000000000;
        cfblk158_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = Mysubsystem_17_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk117_sub_cast = {16'b0, cfblk158_out1};
  assign cfblk117_sub_cast_1 = {17'b0, {cfblk133_out1, 7'b0000000}};
  assign cfblk117_sub_temp = cfblk117_sub_cast - cfblk117_sub_cast_1;
  assign cfblk117_out1 = cfblk117_sub_temp[14:7];



  assign dtc_out_5 = cfblk117_out1;



  assign cfblk30_out1 = dtc_out_5;



  DotProduct u_cfblk109_inst (.in1(cfblk29_out1),  // uint8
                              .in2(cfblk30_out1),  // uint8
                              .out1(cfblk109_out1)  // uint8
                              );

  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk73_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk131_out1 = cfblk172_out1 - cfblk109_out1;



  always @(cfblk131_out1, cfblk157_out1) begin
    cfblk107_div_temp = 9'b000000000;
    cfblk107_t_0_0 = 9'b000000000;
    if (cfblk157_out1 == 8'b00000000) begin
      cfblk107_out1 = 8'b11111111;
    end
    else begin
      cfblk107_t_0_0 = {1'b0, cfblk131_out1};
      cfblk107_div_temp = cfblk107_t_0_0 / cfblk157_out1;
      if (cfblk107_div_temp[8] != 1'b0) begin
        cfblk107_out1 = 8'b11111111;
      end
      else begin
        cfblk107_out1 = cfblk107_div_temp[7:0];
      end
    end
  end



  assign dtc_out_6 = cfblk118_out1;



  assign cfblk14_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk23_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  assign cfblk28_out1 = cfblk160_out1 - cfblk25_out1;



  assign cfblk41_out1 = cfblk67_out1 + cfblk28_out1;



  assign cfblk80_out1 = cfblk41_out1 + cfblk14_out1;



  always @(cfblk76_out1, cfblk80_out1) begin
    cfblk110_div_temp = 9'b000000000;
    cfblk110_t_0_0 = 9'b000000000;
    if (cfblk80_out1 == 8'b00000000) begin
      cfblk110_out1 = 8'b11111111;
    end
    else begin
      cfblk110_t_0_0 = {1'b0, cfblk76_out1};
      cfblk110_div_temp = cfblk110_t_0_0 / cfblk80_out1;
      if (cfblk110_div_temp[8] != 1'b0) begin
        cfblk110_out1 = 8'b11111111;
      end
      else begin
        cfblk110_out1 = cfblk110_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk110_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  DotProduct_block8 u_cfblk99_inst (.in1(cfblk168_out1),  // uint8
                                    .in2(cfblk107_out1),  // uint8
                                    .out1(cfblk99_out1)  // uint8
                                    );

  assign cfblk140_out1 = (cfblk7_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk24_out1 = cfblk34_out1 - cfblk140_out1;



  assign cfblk3_out1 = cfblk24_out1 + cfblk99_out1;



  cfblk150 u_cfblk150 (.In1(cfblk124_out1),  // uint8
                       .Out1(cfblk150_out1)  // uint8
                       );

  assign cfblk93_out1 = cfblk150_out1 - cfblk3_out1;



  DotProduct_block7 u_cfblk6_inst (.in1(cfblk93_out1),  // uint8
                                   .in2(cfblk133_out1),  // uint8
                                   .out1(cfblk6_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk6_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk119_out1 = cfblk72_out1 - cfblk34_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk119_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk1_out1 = cfblk167_out1 & bitMask_for_cfblk1;



  always @(cfblk108_out1, cfblk95_out1) begin
    cfblk74_div_temp = 9'b000000000;
    cfblk74_t_0_0 = 9'b000000000;
    if (cfblk95_out1 == 8'b00000000) begin
      cfblk74_out1 = 8'b11111111;
    end
    else begin
      cfblk74_t_0_0 = {1'b0, cfblk108_out1};
      cfblk74_div_temp = cfblk74_t_0_0 / cfblk95_out1;
      if (cfblk74_div_temp[8] != 1'b0) begin
        cfblk74_out1 = 8'b11111111;
      end
      else begin
        cfblk74_out1 = cfblk74_div_temp[7:0];
      end
    end
  end



  assign dtc_out_7 = cfblk148_out1;



  assign cfblk67_out1 = dtc_out_7;



  always @(cfblk67_out1, cfblk74_out1) begin
    cfblk86_div_temp = 9'b000000000;
    cfblk86_t_0_0 = 9'b000000000;
    if (cfblk74_out1 == 8'b00000000) begin
      cfblk86_out1 = 8'b11111111;
    end
    else begin
      cfblk86_t_0_0 = {1'b0, cfblk67_out1};
      cfblk86_div_temp = cfblk86_t_0_0 / cfblk74_out1;
      if (cfblk86_div_temp[8] != 1'b0) begin
        cfblk86_out1 = 8'b11111111;
      end
      else begin
        cfblk86_out1 = cfblk86_div_temp[7:0];
      end
    end
  end



  always @(cfblk147_out1, cfblk86_out1) begin
    cfblk113_div_temp = 17'b00000000000000000;
    cfblk113_t_0_0 = 17'b00000000000000000;
    if (cfblk86_out1 == 8'b00000000) begin
      cfblk113_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk113_t_0_0 = {1'b0, cfblk147_out1};
      cfblk113_div_temp = cfblk113_t_0_0 / cfblk86_out1;
      if (cfblk113_div_temp[16] != 1'b0) begin
        cfblk113_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk113_varargout_1 = cfblk113_div_temp[15:0];
      end
    end
    if (cfblk113_varargout_1[15:8] != 8'b00000000) begin
      cfblk113_out1 = 8'b11111111;
    end
    else begin
      cfblk113_out1 = cfblk113_varargout_1[7:0];
    end
  end



  always @(cfblk16_out1, cfblk46_out1) begin
    cfblk78_div_temp = 9'b000000000;
    cfblk78_t_0_0 = 9'b000000000;
    if (cfblk46_out1 == 8'b00000000) begin
      cfblk78_out1 = 8'b11111111;
    end
    else begin
      cfblk78_t_0_0 = {1'b0, cfblk16_out1};
      cfblk78_div_temp = cfblk78_t_0_0 / cfblk46_out1;
      if (cfblk78_div_temp[8] != 1'b0) begin
        cfblk78_out1 = 8'b11111111;
      end
      else begin
        cfblk78_out1 = cfblk78_div_temp[7:0];
      end
    end
  end



  assign cfblk134_out1 = cfblk78_out1 + cfblk134_const_val_1;



  cfblk148 u_cfblk148 (.In1(cfblk134_out1),  // uint8
                       .Out1(cfblk148_out1)  // uint8
                       );

  always @(cfblk113_out1, cfblk148_out1) begin
    cfblk23_div_temp = 9'b000000000;
    cfblk23_t_0_0 = 9'b000000000;
    if (cfblk113_out1 == 8'b00000000) begin
      cfblk23_out1 = 8'b11111111;
    end
    else begin
      cfblk23_t_0_0 = {1'b0, cfblk148_out1};
      cfblk23_div_temp = cfblk23_t_0_0 / cfblk113_out1;
      if (cfblk23_div_temp[8] != 1'b0) begin
        cfblk23_out1 = 8'b11111111;
      end
      else begin
        cfblk23_out1 = cfblk23_div_temp[7:0];
      end
    end
  end



  assign cfblk152_out1 = (switch_compare_1 == 1'b0 ? cfblk76_out1 :
              cfblk84_out1);



  assign cfblk5_out1 = cfblk152_out1 + cfblk23_out1;



  assign dtc_out_8 = cfblk5_out1;



  assign cfblk55_out1 = dtc_out_8;



  assign dtc_out_9 = cfblk65_out1;



  assign cfblk25_out1 = dtc_out_9;



  assign dtc_out_10 = cfblk25_out1;



  assign cfblk79_out1 = dtc_out_10;



  always @(cfblk118_out1, cfblk79_out1) begin
    cfblk123_div_temp = 9'b000000000;
    cfblk123_t_0_0 = 9'b000000000;
    if (cfblk118_out1 == 8'b00000000) begin
      cfblk123_out1 = 8'b11111111;
    end
    else begin
      cfblk123_t_0_0 = {1'b0, cfblk79_out1};
      cfblk123_div_temp = cfblk123_t_0_0 / cfblk118_out1;
      if (cfblk123_div_temp[8] != 1'b0) begin
        cfblk123_out1 = 8'b11111111;
      end
      else begin
        cfblk123_out1 = cfblk123_div_temp[7:0];
      end
    end
  end



  assign dtc_out_11 = cfblk123_out1;



  assign cfblk68_out1 = dtc_out_11;



  DotProduct_block5 u_cfblk36_inst (.in1(cfblk68_out1),  // uint8
                                    .in2(cfblk55_out1),  // uint8
                                    .out1(cfblk36_out1)  // uint8
                                    );

  assign dtc_out_12 = cfblk36_out1;



  assign cfblk139_out1 = dtc_out_12;



  assign cfblk26_out1 = cfblk139_out1 + cfblk118_out1;



  assign cfblk84_out1 = cfblk101_out1 + cfblk29_out1;



  assign cfblk72_out1 = cfblk84_out1 + cfblk72_const_val_1;



  assign cfblk85_sub_cast = {17'b0, {cfblk72_out1, 7'b0000000}};
  assign cfblk85_sub_cast_1 = {16'b0, Mysubsystem_33_out1};
  assign cfblk85_sub_temp = cfblk85_sub_cast - cfblk85_sub_cast_1;
  assign cfblk85_out1 = cfblk85_sub_temp[14:7];



  assign cfblk92_out1 = cfblk85_out1 + cfblk72_out1;



  assign cfblk51_out1 = cfblk92_out1 - cfblk26_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk51_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  always @(cfblk154_out1, cfblk1_out1) begin
    cfblk89_div_temp = 9'b000000000;
    cfblk89_t_0_0 = 9'b000000000;
    if (cfblk1_out1 == 8'b00000000) begin
      cfblk89_out1 = 8'b11111111;
    end
    else begin
      cfblk89_t_0_0 = {1'b0, cfblk154_out1};
      cfblk89_div_temp = cfblk89_t_0_0 / cfblk1_out1;
      if (cfblk89_div_temp[8] != 1'b0) begin
        cfblk89_out1 = 8'b11111111;
      end
      else begin
        cfblk89_out1 = cfblk89_div_temp[7:0];
      end
    end
  end



  assign cfblk81_out1 = cfblk89_out1 + cfblk156_out1;



  assign dtc_out_13 = cfblk81_out1;



  assign cfblk129_out1 = dtc_out_13;



  always @(cfblk129_out1, cfblk171_out1) begin
    cfblk69_div_temp = 9'b000000000;
    cfblk69_t_0_0 = 9'b000000000;
    if (cfblk171_out1 == 8'b00000000) begin
      cfblk69_out1 = 8'b11111111;
    end
    else begin
      cfblk69_t_0_0 = {1'b0, cfblk129_out1};
      cfblk69_div_temp = cfblk69_t_0_0 / cfblk171_out1;
      if (cfblk69_div_temp[8] != 1'b0) begin
        cfblk69_out1 = 8'b11111111;
      end
      else begin
        cfblk69_out1 = cfblk69_div_temp[7:0];
      end
    end
  end



  assign cfblk120_out1 = cfblk69_out1 + cfblk159_out1;



  assign dtc_out_14 = cfblk120_out1;



  assign cfblk35_out1 = dtc_out_14;



  DotProduct_block3 u_cfblk16_inst (.in1(cfblk35_out1),  // uint8
                                    .in2(cfblk155_out1),  // uint8
                                    .out1(cfblk16_out1)  // uint8
                                    );

  assign cfblk11_out1 = cfblk16_out1 + cfblk169_out1;



  assign cfblk101_out1 = (cfblk11_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk95_add_cast = {17'b0, {cfblk101_out1, 7'b0000000}};
  assign cfblk95_add_cast_1 = {16'b0, Mysubsystem_33_out1};
  assign cfblk95_add_temp = cfblk95_add_cast + cfblk95_add_cast_1;
  assign cfblk95_out1 = cfblk95_add_temp[14:7];



  assign cfblk46_out1 = cfblk95_out1 + cfblk151_out1;



  assign cfblk65_out1 = cfblk46_out1 + cfblk165_out1;



  assign cfblk118_out1 = (cfblk65_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk118_out1, cfblk68_out1) begin
    cfblk76_div_temp = 9'b000000000;
    cfblk76_t_0_0 = 9'b000000000;
    if (cfblk68_out1 == 8'b00000000) begin
      cfblk76_out1 = 8'b11111111;
    end
    else begin
      cfblk76_t_0_0 = {1'b0, cfblk118_out1};
      cfblk76_div_temp = cfblk76_t_0_0 / cfblk68_out1;
      if (cfblk76_div_temp[8] != 1'b0) begin
        cfblk76_out1 = 8'b11111111;
      end
      else begin
        cfblk76_out1 = cfblk76_div_temp[7:0];
      end
    end
  end



  always @(cfblk40_out1, cfblk76_out1) begin
    cfblk60_div_temp = 9'b000000000;
    cfblk60_t_0_0 = 9'b000000000;
    if (cfblk40_out1 == 8'b00000000) begin
      cfblk60_out1 = 8'b11111111;
    end
    else begin
      cfblk60_t_0_0 = {1'b0, cfblk76_out1};
      cfblk60_div_temp = cfblk60_t_0_0 / cfblk40_out1;
      if (cfblk60_div_temp[8] != 1'b0) begin
        cfblk60_out1 = 8'b11111111;
      end
      else begin
        cfblk60_out1 = cfblk60_div_temp[7:0];
      end
    end
  end



  assign cfblk34_out1 = cfblk60_out1 + cfblk71_out1;



  assign cfblk138_out1 = cfblk34_out1 - cfblk164_out1;



  DotProduct_block4 u_cfblk17_inst (.in1(cfblk138_out1),  // uint8
                                    .in2(cfblk161_out1),  // uint8
                                    .out1(cfblk17_out1)  // uint8
                                    );

  assign cfblk97_out1 = (cfblk17_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk162_out1, cfblk97_out1) begin
    cfblk108_div_temp = 9'b000000000;
    cfblk108_t_0_0 = 9'b000000000;
    if (cfblk162_out1 == 8'b00000000) begin
      cfblk108_out1 = 8'b11111111;
    end
    else begin
      cfblk108_t_0_0 = {1'b0, cfblk97_out1};
      cfblk108_div_temp = cfblk108_t_0_0 / cfblk162_out1;
      if (cfblk108_div_temp[8] != 1'b0) begin
        cfblk108_out1 = 8'b11111111;
      end
      else begin
        cfblk108_out1 = cfblk108_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk108_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk73_out1 = cfblk166_out1 - cfblk99_out1;



  assign cfblk124_out1 = cfblk73_out1 - cfblk39_out1;



  assign dtc_out_15 = cfblk124_out1;



  assign cfblk88_out1 = dtc_out_15;



  assign cfblk63_out1 = cfblk88_out1 + cfblk145_out1;



  assign cfblk128_out1 = cfblk63_out1 + cfblk170_out1;



  assign cfblk7_out1 = cfblk128_out1 + cfblk7_const_val_1;



  assign Hdl_out = cfblk7_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

