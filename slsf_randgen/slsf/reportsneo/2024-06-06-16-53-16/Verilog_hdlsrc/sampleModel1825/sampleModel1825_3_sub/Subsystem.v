// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1825\sampleModel1825_3_sub\Subsystem.v
// Created: 2024-08-14 14:42:28
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1825_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire [15:0] cfblk159_out1;  // uint16
  wire [7:0] cfblk31_const_val_1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk130_const_val_1;  // uint8
  wire [7:0] cfblk49_const_val_1;  // uint8
  wire [7:0] cfblk24_const_val_1;  // uint8
  wire [7:0] cfblk80_const_val_1;  // uint8
  wire [7:0] cfblk29_const_val_1;  // uint8
  wire [7:0] cfblk22_const_val_1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk38_const_val_1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  reg [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire signed [31:0] cfblk88_sub_temp;  // sfix32
  wire signed [31:0] cfblk88_1;  // sfix32
  wire signed [31:0] cfblk88_2;  // sfix32
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk152_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  reg [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  reg [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk112_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk153_out1;  // uint8
  wire [31:0] cfblk115_add_temp;  // ufix32
  wire [31:0] cfblk115_1;  // ufix32
  wire [31:0] cfblk115_2;  // ufix32
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  reg [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] dtc_out_13;  // ufix8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] dtc_out_14;  // ufix8
  reg [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  reg [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] dtc_out_15;  // ufix8
  wire [7:0] cfblk154_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] dtc_out_16;  // ufix8
  wire [7:0] dtc_out_17;  // ufix8
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] dtc_out_18;  // ufix8
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  reg [8:0] cfblk14_div_temp;  // ufix9
  reg [8:0] cfblk14_t_0_0;  // ufix9
  reg [8:0] cfblk152_div_temp;  // ufix9
  reg [8:0] cfblk152_t_0_0;  // ufix9
  reg [8:0] cfblk112_div_temp;  // ufix9
  reg [8:0] cfblk112_t_0_0;  // ufix9
  reg [8:0] cfblk97_div_temp;  // ufix9
  reg [8:0] cfblk97_t_0_0;  // ufix9
  reg [8:0] cfblk7_div_temp;  // ufix9
  reg [8:0] cfblk7_t_0_0;  // ufix9
  reg [8:0] cfblk64_div_temp;  // ufix9
  reg [8:0] cfblk64_t_0_0;  // ufix9
  reg [8:0] cfblk153_div_temp;  // ufix9
  reg [8:0] cfblk153_t_0_0;  // ufix9
  reg [8:0] cfblk19_div_temp;  // ufix9
  reg [8:0] cfblk19_t_0_0;  // ufix9
  reg [8:0] cfblk100_div_temp;  // ufix9
  reg [8:0] cfblk100_t_0_0;  // ufix9
  reg [8:0] cfblk40_div_temp;  // ufix9
  reg [8:0] cfblk40_t_0_0;  // ufix9
  reg [8:0] cfblk30_div_temp;  // ufix9
  reg [8:0] cfblk30_t_0_0;  // ufix9
  reg [8:0] cfblk74_div_temp;  // ufix9
  reg [8:0] cfblk74_t_0_0;  // ufix9
  reg [8:0] cfblk21_div_temp;  // ufix9
  reg [8:0] cfblk21_t_0_0;  // ufix9


  assign cfblk157_out1 = 8'b00000001;



  assign dtc_out = cfblk157_out1;



  assign cfblk147_out1 = dtc_out;



  assign dtc_out_1 = cfblk147_out1;



  assign cfblk81_out1 = dtc_out_1;



  assign cfblk55_out1 = (cfblk81_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk55_out1;



  assign cfblk15_out1 = dtc_out_2;



  assign enb = clk_enable;

  assign cfblk158_out1 = 8'b00000001;



  cfblk159 u_cfblk159 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk159_out1)  // uint16
                       );

  assign cfblk31_const_val_1 = 8'b00000000;



  assign dtc_out_3 = cfblk158_out1;



  assign cfblk121_out1 = dtc_out_3;



  assign cfblk130_const_val_1 = 8'b00000000;



  assign cfblk49_const_val_1 = 8'b00000000;



  assign cfblk24_const_val_1 = 8'b00000000;



  assign cfblk80_const_val_1 = 8'b00000000;



  assign cfblk29_const_val_1 = 8'b00000000;



  assign cfblk22_const_val_1 = 8'b00000000;



  assign dtc_out_4 = cfblk157_out1;



  assign cfblk98_out1 = dtc_out_4;



  assign cfblk38_const_val_1 = 8'b00000000;



  DotProduct_block4 u_cfblk35_inst (.in1(cfblk8_out1),  // uint8
                                    .in2(cfblk141_out1),  // uint8
                                    .out1(cfblk35_out1)  // uint8
                                    );

  assign cfblk38_out1 = cfblk35_out1 + cfblk38_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk38_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(cfblk32_out1, cfblk54_out1) begin
    cfblk14_div_temp = 9'b000000000;
    cfblk14_t_0_0 = 9'b000000000;
    if (cfblk32_out1 == 8'b00000000) begin
      cfblk14_out1 = 8'b11111111;
    end
    else begin
      cfblk14_t_0_0 = {1'b0, cfblk54_out1};
      cfblk14_div_temp = cfblk14_t_0_0 / cfblk32_out1;
      if (cfblk14_div_temp[8] != 1'b0) begin
        cfblk14_out1 = 8'b11111111;
      end
      else begin
        cfblk14_out1 = cfblk14_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk14_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk43_out1 = cfblk98_out1 + cfblk128_out1;



  assign cfblk52_out1 = cfblk12_out1 + cfblk43_out1;



  DotProduct_block6 u_cfblk70_inst (.in1(cfblk141_out1),  // uint8
                                    .in2(cfblk11_out1),  // uint8
                                    .out1(cfblk70_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk70_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  DotProduct_block7 u_cfblk82_inst (.in1(cfblk171_out1),  // uint8
                                    .in2(cfblk64_out1),  // uint8
                                    .out1(cfblk82_out1)  // uint8
                                    );

  assign cfblk124_out1 = (cfblk82_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_5 = cfblk124_out1;



  assign cfblk141_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk141_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk13_out1 = cfblk170_out1 - cfblk52_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk149_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  assign cfblk94_out1 = cfblk95_out1 - cfblk64_out1;



  DotProduct_block1 u_cfblk140_inst (.in1(cfblk94_out1),  // uint8
                                     .in2(cfblk126_out1),  // uint8
                                     .out1(cfblk140_out1)  // uint8
                                     );

  assign cfblk29_out1 = cfblk140_out1 + cfblk29_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk29_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk88_1 = {16'b0, cfblk159_out1};
  assign cfblk88_2 = {24'b0, cfblk22_out1};
  assign cfblk88_sub_temp = cfblk88_1 - cfblk88_2;
  assign cfblk88_out1 = cfblk88_sub_temp[7:0];



  always @(cfblk88_out1, cfblk93_out1) begin
    cfblk152_div_temp = 9'b000000000;
    cfblk152_t_0_0 = 9'b000000000;
    if (cfblk88_out1 == 8'b00000000) begin
      cfblk152_out1 = 8'b11111111;
    end
    else begin
      cfblk152_t_0_0 = {1'b0, cfblk93_out1};
      cfblk152_div_temp = cfblk152_t_0_0 / cfblk88_out1;
      if (cfblk152_div_temp[8] != 1'b0) begin
        cfblk152_out1 = 8'b11111111;
      end
      else begin
        cfblk152_out1 = cfblk152_div_temp[7:0];
      end
    end
  end



  assign dtc_out_6 = cfblk152_out1;



  assign cfblk95_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk95_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  assign cfblk16_out1 = cfblk162_out1 + cfblk22_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk16_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  assign cfblk80_out1 = cfblk25_out1 + cfblk80_const_val_1;



  assign cfblk142_out1 = (cfblk80_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_7 = cfblk142_out1;



  assign cfblk32_out1 = dtc_out_7;



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk32_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk25_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign cfblk47_out1 = (cfblk7_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        cfblk189_reg[0] <= 8'b00000000;
        cfblk189_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk189_reg[0] <= cfblk189_reg_next[0];
          cfblk189_reg[1] <= cfblk189_reg_next[1];
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk47_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  assign cfblk49_out1 = cfblk100_out1 + cfblk49_const_val_1;



  assign cfblk92_out1 = cfblk49_out1 - cfblk96_out1;



  always @(cfblk64_out1, cfblk92_out1) begin
    cfblk112_div_temp = 9'b000000000;
    cfblk112_t_0_0 = 9'b000000000;
    if (cfblk92_out1 == 8'b00000000) begin
      cfblk112_out1 = 8'b11111111;
    end
    else begin
      cfblk112_t_0_0 = {1'b0, cfblk64_out1};
      cfblk112_div_temp = cfblk112_t_0_0 / cfblk92_out1;
      if (cfblk112_div_temp[8] != 1'b0) begin
        cfblk112_out1 = 8'b11111111;
      end
      else begin
        cfblk112_out1 = cfblk112_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk112_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk174_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk36_out1 = cfblk1_out1 - cfblk189_out1;



  assign cfblk34_out1 = cfblk131_out1 + cfblk36_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk34_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk24_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  assign dtc_out_8 = cfblk123_out1;



  assign cfblk27_out1 = dtc_out_8;



  always @(cfblk19_out1, cfblk27_out1) begin
    cfblk97_div_temp = 9'b000000000;
    cfblk97_t_0_0 = 9'b000000000;
    if (cfblk19_out1 == 8'b00000000) begin
      cfblk97_out1 = 8'b11111111;
    end
    else begin
      cfblk97_t_0_0 = {1'b0, cfblk27_out1};
      cfblk97_div_temp = cfblk97_t_0_0 / cfblk19_out1;
      if (cfblk97_div_temp[8] != 1'b0) begin
        cfblk97_out1 = 8'b11111111;
      end
      else begin
        cfblk97_out1 = cfblk97_div_temp[7:0];
      end
    end
  end



  assign cfblk28_out1 = cfblk97_out1 + cfblk121_out1;



  assign cfblk93_out1 = (cfblk85_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk8_out1, cfblk93_out1) begin
    cfblk7_div_temp = 9'b000000000;
    cfblk7_t_0_0 = 9'b000000000;
    if (cfblk8_out1 == 8'b00000000) begin
      cfblk7_out1 = 8'b11111111;
    end
    else begin
      cfblk7_t_0_0 = {1'b0, cfblk93_out1};
      cfblk7_div_temp = cfblk7_t_0_0 / cfblk8_out1;
      if (cfblk7_div_temp[8] != 1'b0) begin
        cfblk7_out1 = 8'b11111111;
      end
      else begin
        cfblk7_out1 = cfblk7_div_temp[7:0];
      end
    end
  end



  assign cfblk57_out1 = cfblk7_out1 + cfblk20_out1;



  assign cfblk149_out1 = (cfblk57_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_9 = cfblk149_out1;



  assign cfblk42_out1 = dtc_out_9;



  cfblk160 u_cfblk160 (.In1(cfblk42_out1),  // uint8
                       .Out1(cfblk160_out1)  // uint8
                       );

  always @(cfblk160_out1, cfblk28_out1) begin
    cfblk64_div_temp = 9'b000000000;
    cfblk64_t_0_0 = 9'b000000000;
    if (cfblk28_out1 == 8'b00000000) begin
      cfblk64_out1 = 8'b11111111;
    end
    else begin
      cfblk64_t_0_0 = {1'b0, cfblk160_out1};
      cfblk64_div_temp = cfblk64_t_0_0 / cfblk28_out1;
      if (cfblk64_div_temp[8] != 1'b0) begin
        cfblk64_out1 = 8'b11111111;
      end
      else begin
        cfblk64_out1 = cfblk64_div_temp[7:0];
      end
    end
  end



  assign dtc_out_10 = cfblk99_out1;



  assign cfblk45_out1 = dtc_out_10;



  always @(cfblk45_out1, cfblk78_out1) begin
    cfblk153_div_temp = 9'b000000000;
    cfblk153_t_0_0 = 9'b000000000;
    if (cfblk78_out1 == 8'b00000000) begin
      cfblk153_out1 = 8'b11111111;
    end
    else begin
      cfblk153_t_0_0 = {1'b0, cfblk45_out1};
      cfblk153_div_temp = cfblk153_t_0_0 / cfblk78_out1;
      if (cfblk153_div_temp[8] != 1'b0) begin
        cfblk153_out1 = 8'b11111111;
      end
      else begin
        cfblk153_out1 = cfblk153_div_temp[7:0];
      end
    end
  end



  assign cfblk115_1 = {24'b0, cfblk153_out1};
  assign cfblk115_2 = {16'b0, cfblk159_out1};
  assign cfblk115_add_temp = cfblk115_1 + cfblk115_2;
  assign cfblk115_out1 = cfblk115_add_temp[7:0];



  assign dtc_out_11 = cfblk115_out1;



  assign cfblk108_out1 = dtc_out_11;



  DotProduct_block5 u_cfblk66_inst (.in1(cfblk108_out1),  // uint8
                                    .in2(cfblk128_out1),  // uint8
                                    .out1(cfblk66_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk66_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  always @(cfblk126_out1, cfblk186_out1) begin
    cfblk19_div_temp = 9'b000000000;
    cfblk19_t_0_0 = 9'b000000000;
    if (cfblk126_out1 == 8'b00000000) begin
      cfblk19_out1 = 8'b11111111;
    end
    else begin
      cfblk19_t_0_0 = {1'b0, cfblk186_out1};
      cfblk19_div_temp = cfblk19_t_0_0 / cfblk126_out1;
      if (cfblk19_div_temp[8] != 1'b0) begin
        cfblk19_out1 = 8'b11111111;
      end
      else begin
        cfblk19_out1 = cfblk19_div_temp[7:0];
      end
    end
  end



  always @(cfblk19_out1, cfblk55_out1) begin
    cfblk100_div_temp = 9'b000000000;
    cfblk100_t_0_0 = 9'b000000000;
    if (cfblk55_out1 == 8'b00000000) begin
      cfblk100_out1 = 8'b11111111;
    end
    else begin
      cfblk100_t_0_0 = {1'b0, cfblk19_out1};
      cfblk100_div_temp = cfblk100_t_0_0 / cfblk55_out1;
      if (cfblk100_div_temp[8] != 1'b0) begin
        cfblk100_out1 = 8'b11111111;
      end
      else begin
        cfblk100_out1 = cfblk100_div_temp[7:0];
      end
    end
  end



  assign cfblk58_out1 = cfblk100_out1 + cfblk74_out1;



  assign cfblk78_out1 = (cfblk58_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk99_out1 = cfblk158_out1 - cfblk2_out1;



  assign cfblk133_out1 = cfblk21_out1 + cfblk147_out1;



  assign cfblk126_out1 = cfblk133_out1 + cfblk99_out1;



  assign dtc_out_12 = cfblk31_out1;



  assign cfblk26_out1 = dtc_out_12;



  assign dtc_out_13 = cfblk26_out1;



  assign cfblk62_out1 = dtc_out_13;



  assign dtc_out_14 = cfblk62_out1;



  assign cfblk25_out1 = dtc_out_14;



  always @(cfblk12_out1, cfblk25_out1) begin
    cfblk40_div_temp = 9'b000000000;
    cfblk40_t_0_0 = 9'b000000000;
    if (cfblk12_out1 == 8'b00000000) begin
      cfblk40_out1 = 8'b11111111;
    end
    else begin
      cfblk40_t_0_0 = {1'b0, cfblk25_out1};
      cfblk40_div_temp = cfblk40_t_0_0 / cfblk12_out1;
      if (cfblk40_div_temp[8] != 1'b0) begin
        cfblk40_out1 = 8'b11111111;
      end
      else begin
        cfblk40_out1 = cfblk40_div_temp[7:0];
      end
    end
  end



  assign cfblk18_out1 = cfblk40_out1 - cfblk162_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk18_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  DotProduct u_cfblk131_inst (.in1(cfblk181_out1),  // uint8
                              .in2(cfblk126_out1),  // uint8
                              .out1(cfblk131_out1)  // uint8
                              );

  assign cfblk8_out1 = cfblk157_out1 - cfblk110_out1;



  assign cfblk50_out1 = cfblk8_out1 - cfblk131_out1;



  always @(cfblk50_out1, cfblk78_out1) begin
    cfblk30_div_temp = 9'b000000000;
    cfblk30_t_0_0 = 9'b000000000;
    if (cfblk78_out1 == 8'b00000000) begin
      cfblk30_out1 = 8'b11111111;
    end
    else begin
      cfblk30_t_0_0 = {1'b0, cfblk50_out1};
      cfblk30_div_temp = cfblk30_t_0_0 / cfblk78_out1;
      if (cfblk30_div_temp[8] != 1'b0) begin
        cfblk30_out1 = 8'b11111111;
      end
      else begin
        cfblk30_out1 = cfblk30_div_temp[7:0];
      end
    end
  end



  assign cfblk31_out1 = cfblk30_out1 + cfblk31_const_val_1;



  cfblk162 u_cfblk162 (.In1(cfblk31_out1),  // uint8
                       .Out1(cfblk162_out1)  // uint8
                       );

  assign cfblk63_out1 = cfblk162_out1 + cfblk64_out1;



  DotProduct_block u_cfblk136_inst (.in1(cfblk63_out1),  // uint8
                                    .in2(cfblk22_out1),  // uint8
                                    .out1(cfblk136_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk136_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk127_out1 = (cfblk22_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk73_out1 = cfblk127_out1 + cfblk176_out1;



  assign cfblk145_out1 = (cfblk73_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk56_out1 = cfblk145_out1 + cfblk191_out1;



  assign dtc_out_15 = cfblk56_out1;



  assign cfblk128_out1 = dtc_out_15;



  DotProduct_block3 u_cfblk154_inst (.in1(cfblk128_out1),  // uint8
                                     .in2(cfblk127_out1),  // uint8
                                     .out1(cfblk154_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk154_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  assign cfblk20_out1 = cfblk15_out1 + cfblk184_out1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk20_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign cfblk130_out1 = cfblk2_out1 + cfblk130_const_val_1;



  assign cfblk90_out1 = cfblk130_out1 + cfblk178_out1;



  assign cfblk110_out1 = cfblk90_out1 + cfblk182_out1;



  assign cfblk24_out1 = cfblk110_out1 + cfblk24_const_val_1;



  assign cfblk83_out1 = cfblk24_out1 - cfblk179_out1;



  assign cfblk12_out1 = cfblk83_out1 - cfblk185_out1;



  always @(cfblk12_out1, cfblk188_out1) begin
    cfblk74_div_temp = 9'b000000000;
    cfblk74_t_0_0 = 9'b000000000;
    if (cfblk188_out1 == 8'b00000000) begin
      cfblk74_out1 = 8'b11111111;
    end
    else begin
      cfblk74_t_0_0 = {1'b0, cfblk12_out1};
      cfblk74_div_temp = cfblk74_t_0_0 / cfblk188_out1;
      if (cfblk74_div_temp[8] != 1'b0) begin
        cfblk74_out1 = 8'b11111111;
      end
      else begin
        cfblk74_out1 = cfblk74_div_temp[7:0];
      end
    end
  end



  assign dtc_out_16 = cfblk74_out1;



  assign cfblk85_out1 = dtc_out_16;



  assign dtc_out_17 = cfblk85_out1;



  assign cfblk146_out1 = dtc_out_17;



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk146_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk54_out1 = cfblk187_out1 + cfblk175_out1;



  assign cfblk125_out1 = cfblk54_out1 + cfblk190_out1;



  assign cfblk22_out1 = cfblk125_out1 + cfblk22_const_val_1;



  assign dtc_out_18 = cfblk22_out1;



  assign cfblk96_out1 = dtc_out_18;



  cfblk161 u_cfblk161 (.In1(cfblk96_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  assign cfblk11_out1 = cfblk161_out1 + cfblk123_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk11_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign cfblk3_out1 = cfblk177_out1 + cfblk13_out1;



  always @(cfblk180_out1, cfblk3_out1) begin
    cfblk21_div_temp = 9'b000000000;
    cfblk21_t_0_0 = 9'b000000000;
    if (cfblk180_out1 == 8'b00000000) begin
      cfblk21_out1 = 8'b11111111;
    end
    else begin
      cfblk21_t_0_0 = {1'b0, cfblk3_out1};
      cfblk21_div_temp = cfblk21_t_0_0 / cfblk180_out1;
      if (cfblk21_div_temp[8] != 1'b0) begin
        cfblk21_out1 = 8'b11111111;
      end
      else begin
        cfblk21_out1 = cfblk21_div_temp[7:0];
      end
    end
  end



  assign cfblk4_out1 = cfblk21_out1 + cfblk154_out1;



  DotProduct_block2 u_cfblk143_inst (.in1(cfblk4_out1),  // uint8
                                     .in2(cfblk81_out1),  // uint8
                                     .out1(cfblk143_out1)  // uint8
                                     );

  assign cfblk123_out1 = cfblk143_out1 - cfblk173_out1;



  assign Hdl_out = cfblk123_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

