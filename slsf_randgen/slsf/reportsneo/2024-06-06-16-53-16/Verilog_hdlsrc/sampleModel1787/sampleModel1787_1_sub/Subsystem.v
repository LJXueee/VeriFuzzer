// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1787\sampleModel1787_1_sub\Subsystem.v
// Created: 2024-08-14 09:02:46
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk147                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1787_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk147,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk147;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [31:0] Mysubsystem_17_out1;  // ufix32_En15
  wire [7:0] cfblk17_const_val_1;  // uint8
  wire [7:0] Mysubsystem_5_out1;  // uint8
  wire [7:0] cfblk60_const_val_1;  // uint8
  wire [7:0] cfblk22_const_val_1;  // uint8
  wire [7:0] cfblk79_const_val_1;  // uint8
  wire [7:0] cfblk44_const_val_1;  // uint8
  reg [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk184_out1;  // uint8
  reg [7:0] cfblk123_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [31:0] cfblk101_add_cast;  // ufix32_En14
  wire [31:0] cfblk101_add_cast_1;  // ufix32_En14
  wire [31:0] cfblk101_add_temp;  // ufix32_En14
  wire [7:0] cfblk101_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire cfblk6_out1;
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  reg [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  reg [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  reg [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] Mysubsystem_38_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire cfblk173_out1_is_not0;
  wire [7:0] cfblk155_out1;  // uint8
  wire cfblk144_out1_is_not0;
  wire signed [7:0] cfblk15_out1;  // int8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  reg [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  reg [7:0] cfblk72_out1;  // uint8
  wire signed [31:0] cfblk115_add_temp;  // sfix32
  wire signed [31:0] cfblk115_1;  // sfix32
  wire signed [31:0] cfblk115_2;  // sfix32
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk41_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk124_out1;  // uint8
  reg [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  reg [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [31:0] cfblk31_add_cast;  // ufix32_En14
  wire [31:0] cfblk31_add_cast_1;  // ufix32_En14
  wire [31:0] cfblk31_add_temp;  // ufix32_En14
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [8:0] cfblk123_div_temp;  // ufix9
  reg [8:0] cfblk123_t_0_0;  // ufix9
  reg [8:0] cfblk113_div_temp;  // ufix9
  reg [8:0] cfblk113_t_0_0;  // ufix9
  reg [8:0] cfblk35_div_temp;  // ufix9
  reg [8:0] cfblk35_t_0_0;  // ufix9
  reg [8:0] cfblk29_div_temp;  // ufix9
  reg [8:0] cfblk29_t_0_0;  // ufix9
  reg [8:0] cfblk140_div_temp;  // ufix9
  reg [8:0] cfblk140_t_0_0;  // ufix9
  reg [8:0] cfblk99_div_temp;  // ufix9
  reg [8:0] cfblk99_t_0_0;  // ufix9
  reg [8:0] cfblk63_div_temp;  // ufix9
  reg [8:0] cfblk63_t_0_0;  // ufix9
  reg [8:0] cfblk72_div_temp;  // ufix9
  reg [8:0] cfblk72_t_0_0;  // ufix9
  reg [8:0] cfblk136_div_temp;  // ufix9
  reg [8:0] cfblk136_t_0_0;  // ufix9
  reg [8:0] cfblk137_div_temp;  // ufix9
  reg [8:0] cfblk137_t_0_0;  // ufix9
  reg [8:0] cfblk41_div_temp;  // ufix9
  reg [8:0] cfblk41_t_0_0;  // ufix9
  reg [8:0] cfblk64_div_temp;  // ufix9
  reg [8:0] cfblk64_t_0_0;  // ufix9
  reg [8:0] cfblk124_div_temp;  // ufix9
  reg [8:0] cfblk124_t_0_0;  // ufix9
  reg [8:0] cfblk58_div_temp;  // ufix9
  reg [8:0] cfblk58_t_0_0;  // ufix9
  reg [8:0] cfblk120_div_temp;  // ufix9
  reg [8:0] cfblk120_t_0_0;  // ufix9
  reg [8:0] cfblk82_div_temp;  // ufix9
  reg [8:0] cfblk82_t_0_0;  // ufix9


  Mysubsystem_17 u_Mysubsystem_17 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_17_out1)  // ufix32_En15
                                   );

  assign enb = clk_enable;

  assign cfblk17_const_val_1 = 8'b00000000;



  Mysubsystem_5 u_Mysubsystem_5 (.Out1(Mysubsystem_5_out1)  // uint8
                                 );

  assign cfblk60_const_val_1 = 8'b00000000;



  assign cfblk22_const_val_1 = 8'b00000000;



  assign cfblk79_const_val_1 = 8'b00000000;



  assign cfblk44_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk64_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk19_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  always @(cfblk184_out1, cfblk188_out1) begin
    cfblk123_div_temp = 9'b000000000;
    cfblk123_t_0_0 = 9'b000000000;
    if (cfblk184_out1 == 8'b00000000) begin
      cfblk123_out1 = 8'b11111111;
    end
    else begin
      cfblk123_t_0_0 = {1'b0, cfblk188_out1};
      cfblk123_div_temp = cfblk123_t_0_0 / cfblk184_out1;
      if (cfblk123_div_temp[8] != 1'b0) begin
        cfblk123_out1 = 8'b11111111;
      end
      else begin
        cfblk123_out1 = cfblk123_div_temp[7:0];
      end
    end
  end



  assign dtc_out = cfblk123_out1;



  assign cfblk19_out1 = dtc_out;



  assign cfblk3_out1 = cfblk141_out1 | 8'b00000001;



  assign cfblk79_out1 = cfblk17_out1 + cfblk79_const_val_1;



  assign cfblk10_out1 = cfblk79_out1 + cfblk3_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk10_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk101_add_cast = {10'b0, {cfblk14_out1, 14'b00000000000000}};
  assign cfblk101_add_cast_1 = {1'b0, Mysubsystem_17_out1[31:1]};
  assign cfblk101_add_temp = cfblk101_add_cast + cfblk101_add_cast_1;
  assign cfblk101_out1 = cfblk101_add_temp[21:14];



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk101_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk116_out1 = cfblk172_out1 - cfblk6_out1;



  always @(cfblk112_out1, cfblk33_out1) begin
    cfblk113_div_temp = 9'b000000000;
    cfblk113_t_0_0 = 9'b000000000;
    if (cfblk33_out1 == 8'b00000000) begin
      cfblk113_out1 = 8'b11111111;
    end
    else begin
      cfblk113_t_0_0 = {1'b0, cfblk112_out1};
      cfblk113_div_temp = cfblk113_t_0_0 / cfblk33_out1;
      if (cfblk113_div_temp[8] != 1'b0) begin
        cfblk113_out1 = 8'b11111111;
      end
      else begin
        cfblk113_out1 = cfblk113_div_temp[7:0];
      end
    end
  end



  assign cfblk55_out1 = cfblk113_out1 + cfblk11_out1;



  assign cfblk84_out1 = (cfblk76_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk87_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk2_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk60_out1 = cfblk130_out1 + cfblk60_const_val_1;



  assign cfblk51_out1 = Mysubsystem_5_out1 - cfblk47_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk51_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  always @(cfblk185_out1, cfblk60_out1) begin
    cfblk35_div_temp = 9'b000000000;
    cfblk35_t_0_0 = 9'b000000000;
    if (cfblk60_out1 == 8'b00000000) begin
      cfblk35_out1 = 8'b11111111;
    end
    else begin
      cfblk35_t_0_0 = {1'b0, cfblk185_out1};
      cfblk35_div_temp = cfblk35_t_0_0 / cfblk60_out1;
      if (cfblk35_div_temp[8] != 1'b0) begin
        cfblk35_out1 = 8'b11111111;
      end
      else begin
        cfblk35_out1 = cfblk35_div_temp[7:0];
      end
    end
  end



  assign cfblk89_out1 = cfblk35_out1 - Mysubsystem_5_out1;



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk30_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign cfblk28_out1 = cfblk4_out1 + cfblk89_out1;



  assign cfblk141_out1 = cfblk28_out1 + cfblk176_out1;



  assign dtc_out_1 = cfblk141_out1;



  assign cfblk106_out1 = dtc_out_1;



  assign cfblk54_out1 = cfblk106_out1 + cfblk170_out1;



  assign dtc_out_2 = cfblk71_out1;



  assign cfblk135_out1 = dtc_out_2;



  cfblk157 u_cfblk157 (.In1(cfblk25_out1),  // uint8
                       .Out1(cfblk157_out1)  // uint8
                       );

  assign cfblk87_out1 = cfblk157_out1 + cfblk90_out1;



  assign cfblk8_out1 = cfblk99_out1 + cfblk130_out1;



  assign cfblk61_out1 = (cfblk29_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  Mysubsystem_38 u_Mysubsystem_38 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk61_out1),  // uint8
                                   .Out1(Mysubsystem_38_out1)  // uint8
                                   );

  always @(Mysubsystem_38_out1, cfblk8_out1) begin
    cfblk29_div_temp = 9'b000000000;
    cfblk29_t_0_0 = 9'b000000000;
    if (cfblk8_out1 == 8'b00000000) begin
      cfblk29_out1 = 8'b11111111;
    end
    else begin
      cfblk29_t_0_0 = {1'b0, Mysubsystem_38_out1};
      cfblk29_div_temp = cfblk29_t_0_0 / cfblk8_out1;
      if (cfblk29_div_temp[8] != 1'b0) begin
        cfblk29_out1 = 8'b11111111;
      end
      else begin
        cfblk29_out1 = cfblk29_div_temp[7:0];
      end
    end
  end



  assign cfblk65_out1 = cfblk127_out1 + cfblk29_out1;



  DotProduct_block u_cfblk18_inst (.in1(cfblk65_out1),  // uint8
                                   .in2(cfblk96_out1),  // uint8
                                   .out1(cfblk18_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk64_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  assign cfblk17_out1 = cfblk184_out1 + cfblk17_const_val_1;



  assign cfblk90_out1 = cfblk70_out1 + cfblk33_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk90_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk173_out1_is_not0 = cfblk173_out1 != 8'b00000000;



  assign cfblk144_out1_is_not0 = cfblk155_out1 != 8'b00000000;



  assign cfblk6_out1 = cfblk144_out1_is_not0 & cfblk173_out1_is_not0;



  assign cfblk15_out1 = (cfblk6_out1 > 1'b0 ? 8'sb00000001 :
              8'sb00000000);



  DotProduct_block4 u_cfblk47_inst (.in1(cfblk85_out1),  // uint8
                                    .in2(cfblk120_out1),  // uint8
                                    .out1(cfblk47_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk47_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  always @(cfblk186_out1, cfblk46_out1) begin
    cfblk140_div_temp = 9'b000000000;
    cfblk140_t_0_0 = 9'b000000000;
    if (cfblk186_out1 == 8'b00000000) begin
      cfblk140_out1 = 8'b11111111;
    end
    else begin
      cfblk140_t_0_0 = {1'b0, cfblk46_out1};
      cfblk140_div_temp = cfblk140_t_0_0 / cfblk186_out1;
      if (cfblk140_div_temp[8] != 1'b0) begin
        cfblk140_out1 = 8'b11111111;
      end
      else begin
        cfblk140_out1 = cfblk140_div_temp[7:0];
      end
    end
  end



  assign cfblk9_out1 = cfblk68_out1 + cfblk22_out1;



  cfblk5 u_cfblk5 (.u(cfblk9_out1),  // uint8
                   .y(cfblk5_out1)  // uint8
                   );

  cfblk158 u_cfblk158 (.In1(cfblk5_out1),  // uint8
                       .Out1(cfblk158_out1)  // uint8
                       );

  always @(cfblk115_out1, cfblk158_out1) begin
    cfblk99_div_temp = 9'b000000000;
    cfblk99_t_0_0 = 9'b000000000;
    if (cfblk115_out1 == 8'b00000000) begin
      cfblk99_out1 = 8'b11111111;
    end
    else begin
      cfblk99_t_0_0 = {1'b0, cfblk158_out1};
      cfblk99_div_temp = cfblk99_t_0_0 / cfblk115_out1;
      if (cfblk99_div_temp[8] != 1'b0) begin
        cfblk99_out1 = 8'b11111111;
      end
      else begin
        cfblk99_out1 = cfblk99_div_temp[7:0];
      end
    end
  end



  assign cfblk128_out1 = (cfblk99_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk128_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign cfblk71_out1 = (cfblk22_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk70_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  always @(cfblk174_out1, cfblk71_out1) begin
    cfblk63_div_temp = 9'b000000000;
    cfblk63_t_0_0 = 9'b000000000;
    if (cfblk71_out1 == 8'b00000000) begin
      cfblk63_out1 = 8'b11111111;
    end
    else begin
      cfblk63_t_0_0 = {1'b0, cfblk174_out1};
      cfblk63_div_temp = cfblk63_t_0_0 / cfblk71_out1;
      if (cfblk63_div_temp[8] != 1'b0) begin
        cfblk63_out1 = 8'b11111111;
      end
      else begin
        cfblk63_out1 = cfblk63_div_temp[7:0];
      end
    end
  end



  DotProduct u_cfblk108_inst (.in1(cfblk63_out1),  // uint8
                              .in2(cfblk177_out1),  // uint8
                              .out1(cfblk108_out1)  // uint8
                              );

  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk108_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk85_out1 = cfblk168_out1 + cfblk140_out1;



  assign cfblk130_out1 = (cfblk85_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk130_out1, cfblk68_out1) begin
    cfblk72_div_temp = 9'b000000000;
    cfblk72_t_0_0 = 9'b000000000;
    if (cfblk68_out1 == 8'b00000000) begin
      cfblk72_out1 = 8'b11111111;
    end
    else begin
      cfblk72_t_0_0 = {1'b0, cfblk130_out1};
      cfblk72_div_temp = cfblk72_t_0_0 / cfblk68_out1;
      if (cfblk72_div_temp[8] != 1'b0) begin
        cfblk72_out1 = 8'b11111111;
      end
      else begin
        cfblk72_out1 = cfblk72_div_temp[7:0];
      end
    end
  end



  assign cfblk115_1 = {24'b0, cfblk72_out1};
  assign cfblk115_2 = {{24{cfblk15_out1[7]}}, cfblk15_out1};
  assign cfblk115_add_temp = cfblk115_1 + cfblk115_2;
  assign cfblk115_out1 = cfblk115_add_temp[7:0];



  assign cfblk57_out1 = cfblk115_out1 + cfblk17_out1;



  always @(cfblk18_out1, cfblk57_out1) begin
    cfblk136_div_temp = 9'b000000000;
    cfblk136_t_0_0 = 9'b000000000;
    if (cfblk18_out1 == 8'b00000000) begin
      cfblk136_out1 = 8'b11111111;
    end
    else begin
      cfblk136_t_0_0 = {1'b0, cfblk57_out1};
      cfblk136_div_temp = cfblk136_t_0_0 / cfblk18_out1;
      if (cfblk136_div_temp[8] != 1'b0) begin
        cfblk136_out1 = 8'b11111111;
      end
      else begin
        cfblk136_out1 = cfblk136_div_temp[7:0];
      end
    end
  end



  DotProduct_block2 u_cfblk33_inst (.in1(cfblk136_out1),  // uint8
                                    .in2(cfblk128_out1),  // uint8
                                    .out1(cfblk33_out1)  // uint8
                                    );

  assign cfblk2_out1 = cfblk33_out1 | 8'b00000001;



  always @(cfblk2_out1, cfblk87_out1) begin
    cfblk137_div_temp = 9'b000000000;
    cfblk137_t_0_0 = 9'b000000000;
    if (cfblk87_out1 == 8'b00000000) begin
      cfblk137_out1 = 8'b11111111;
    end
    else begin
      cfblk137_t_0_0 = {1'b0, cfblk2_out1};
      cfblk137_div_temp = cfblk137_t_0_0 / cfblk87_out1;
      if (cfblk137_div_temp[8] != 1'b0) begin
        cfblk137_out1 = 8'b11111111;
      end
      else begin
        cfblk137_out1 = cfblk137_div_temp[7:0];
      end
    end
  end



  assign cfblk14_out1 = cfblk137_out1 + cfblk135_out1;



  assign cfblk78_out1 = cfblk64_out1 + cfblk64_out1;



  always @(cfblk14_out1, cfblk78_out1) begin
    cfblk41_div_temp = 9'b000000000;
    cfblk41_t_0_0 = 9'b000000000;
    if (cfblk14_out1 == 8'b00000000) begin
      cfblk41_out1 = 8'b11111111;
    end
    else begin
      cfblk41_t_0_0 = {1'b0, cfblk78_out1};
      cfblk41_div_temp = cfblk41_t_0_0 / cfblk14_out1;
      if (cfblk41_div_temp[8] != 1'b0) begin
        cfblk41_out1 = 8'b11111111;
      end
      else begin
        cfblk41_out1 = cfblk41_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk41_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  always @(cfblk167_out1, cfblk54_out1) begin
    cfblk64_div_temp = 9'b000000000;
    cfblk64_t_0_0 = 9'b000000000;
    if (cfblk54_out1 == 8'b00000000) begin
      cfblk64_out1 = 8'b11111111;
    end
    else begin
      cfblk64_t_0_0 = {1'b0, cfblk167_out1};
      cfblk64_div_temp = cfblk64_t_0_0 / cfblk54_out1;
      if (cfblk64_div_temp[8] != 1'b0) begin
        cfblk64_out1 = 8'b11111111;
      end
      else begin
        cfblk64_out1 = cfblk64_div_temp[7:0];
      end
    end
  end



  assign dtc_out_3 = cfblk64_out1;



  assign cfblk11_out1 = dtc_out_3;



  assign dtc_out_4 = cfblk11_out1;



  assign cfblk134_out1 = dtc_out_4;



  cfblk154 u_cfblk154 (.In1(cfblk134_out1),  // uint8
                       .Out1(cfblk154_out1)  // uint8
                       );

  assign cfblk43_out1 = cfblk154_out1 + cfblk8_out1;



  assign cfblk112_out1 = (cfblk43_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk105_out1 = cfblk112_out1 + cfblk136_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk105_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk30_out1 = cfblk180_out1 + cfblk84_out1;



  assign cfblk145_out1 = (cfblk30_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk145_out1, cfblk55_out1) begin
    cfblk124_div_temp = 9'b000000000;
    cfblk124_t_0_0 = 9'b000000000;
    if (cfblk55_out1 == 8'b00000000) begin
      cfblk124_out1 = 8'b11111111;
    end
    else begin
      cfblk124_t_0_0 = {1'b0, cfblk145_out1};
      cfblk124_div_temp = cfblk124_t_0_0 / cfblk55_out1;
      if (cfblk124_div_temp[8] != 1'b0) begin
        cfblk124_out1 = 8'b11111111;
      end
      else begin
        cfblk124_out1 = cfblk124_div_temp[7:0];
      end
    end
  end



  always @(cfblk124_out1, cfblk184_out1) begin
    cfblk58_div_temp = 9'b000000000;
    cfblk58_t_0_0 = 9'b000000000;
    if (cfblk184_out1 == 8'b00000000) begin
      cfblk58_out1 = 8'b11111111;
    end
    else begin
      cfblk58_t_0_0 = {1'b0, cfblk124_out1};
      cfblk58_div_temp = cfblk58_t_0_0 / cfblk184_out1;
      if (cfblk58_div_temp[8] != 1'b0) begin
        cfblk58_out1 = 8'b11111111;
      end
      else begin
        cfblk58_out1 = cfblk58_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk58_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(cfblk116_out1, cfblk166_out1) begin
    cfblk120_div_temp = 9'b000000000;
    cfblk120_t_0_0 = 9'b000000000;
    if (cfblk116_out1 == 8'b00000000) begin
      cfblk120_out1 = 8'b11111111;
    end
    else begin
      cfblk120_t_0_0 = {1'b0, cfblk166_out1};
      cfblk120_div_temp = cfblk120_t_0_0 / cfblk116_out1;
      if (cfblk120_div_temp[8] != 1'b0) begin
        cfblk120_out1 = 8'b11111111;
      end
      else begin
        cfblk120_out1 = cfblk120_div_temp[7:0];
      end
    end
  end



  assign cfblk76_out1 = (cfblk120_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk156 u_cfblk156 (.In1(cfblk76_out1),  // uint8
                       .Out1(cfblk156_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk156_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  DotProduct_block1 u_cfblk25_inst (.in1(cfblk165_out1),  // uint8
                                    .in2(cfblk89_out1),  // uint8
                                    .out1(cfblk25_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk25_out1;



  assign cfblk133_out1 = dtc_out_5;



  assign cfblk22_out1 = cfblk133_out1 + cfblk22_const_val_1;



  cfblk155 u_cfblk155 (.In1(cfblk22_out1),  // uint8
                       .Out1(cfblk155_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk155_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  always @(cfblk127_out1, cfblk187_out1) begin
    cfblk82_div_temp = 9'b000000000;
    cfblk82_t_0_0 = 9'b000000000;
    if (cfblk187_out1 == 8'b00000000) begin
      cfblk82_out1 = 8'b11111111;
    end
    else begin
      cfblk82_t_0_0 = {1'b0, cfblk127_out1};
      cfblk82_div_temp = cfblk82_t_0_0 / cfblk187_out1;
      if (cfblk82_div_temp[8] != 1'b0) begin
        cfblk82_out1 = 8'b11111111;
      end
      else begin
        cfblk82_out1 = cfblk82_div_temp[7:0];
      end
    end
  end



  DotProduct_block3 u_cfblk46_inst (.in1(cfblk82_out1),  // uint8
                                    .in2(cfblk164_out1),  // uint8
                                    .out1(cfblk46_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk46_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk96_out1 = cfblk163_out1 + cfblk19_out1;



  assign cfblk31_add_cast = {1'b0, Mysubsystem_17_out1[31:1]};
  assign cfblk31_add_cast_1 = {10'b0, {cfblk96_out1, 14'b00000000000000}};
  assign cfblk31_add_temp = cfblk31_add_cast + cfblk31_add_cast_1;
  assign cfblk31_out1 = cfblk31_add_temp[21:14];



  assign cfblk127_out1 = cfblk31_out1 - cfblk182_out1;



  assign cfblk67_out1 = cfblk127_out1 + cfblk64_out1;



  assign dtc_out_6 = cfblk67_out1;



  assign cfblk83_out1 = dtc_out_6;



  assign cfblk68_out1 = cfblk83_out1 + cfblk108_out1;



  assign cfblk94_out1 = cfblk68_out1 - cfblk47_out1;



  assign cfblk44_out1 = cfblk94_out1 + cfblk44_const_val_1;



  assign cfblk70_out1 = cfblk44_out1 + cfblk120_out1;



  assign cfblk147 = cfblk70_out1;

  assign Hdl_out = cfblk101_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

