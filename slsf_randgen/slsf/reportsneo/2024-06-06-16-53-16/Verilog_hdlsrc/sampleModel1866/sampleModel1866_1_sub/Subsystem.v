// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1866\sampleModel1866_1_sub\Subsystem.v
// Created: 2024-08-14 22:24:10
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1866_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk121_const_val_1;  // uint8
  wire [7:0] cfblk113_const_val_1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk139_const_val_1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk123_const_val_1;  // uint8
  wire [7:0] cfblk10_const_val_1;  // uint8
  wire [7:0] cfblk141_const_val_1;  // uint8
  wire [7:0] cfblk67_const_val_1;  // uint8
  wire [7:0] cfblk112_const_val_1;  // uint8
  wire [7:0] cfblk118_const_val_1;  // uint8
  wire [7:0] cfblk35_const_val_1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk206_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk206_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk206_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk128_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk204_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk204_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk204_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk203_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk203_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk203_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk42_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk201_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk201_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk201_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk193_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_out1;  // uint8
  reg [7:0] cfblk6_out1;  // uint8
  reg [7:0] cfblk194_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  reg [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  reg [7:0] cfblk199_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk199_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk199_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk207_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk207_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk207_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] dtc_out_13;  // ufix8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] Mysubsystem_28_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk200_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] dtc_out_14;  // ufix8
  wire [7:0] dtc_out_15;  // ufix8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] dtc_out_16;  // ufix8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  reg [7:0] cfblk195_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] dtc_out_17;  // ufix8
  reg [7:0] cfblk198_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk198_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk198_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] dtc_out_18;  // ufix8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] dtc_out_19;  // ufix8
  reg [7:0] cfblk200_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk200_reg_next [0:1];  // ufix8 [2]
  reg [8:0] cfblk77_div_temp;  // ufix9
  reg [8:0] cfblk77_t_0_0;  // ufix9
  reg [8:0] cfblk42_div_temp;  // ufix9
  reg [8:0] cfblk42_t_0_0;  // ufix9
  reg [8:0] cfblk6_div_temp;  // ufix9
  reg [8:0] cfblk6_t_0_0;  // ufix9
  reg [8:0] cfblk41_div_temp;  // ufix9
  reg [8:0] cfblk41_t_0_0;  // ufix9
  reg [8:0] cfblk88_div_temp;  // ufix9
  reg [8:0] cfblk88_t_0_0;  // ufix9


  assign cfblk158_out1 = 8'b00000000;



  assign cfblk121_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk113_const_val_1 = 8'b00000000;



  assign dtc_out = cfblk113_out1;



  assign cfblk115_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk115_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign dtc_out_1 = cfblk170_out1;



  assign cfblk44_out1 = dtc_out_1;



  assign cfblk58_out1 = (cfblk44_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk113_out1 = cfblk58_out1 + cfblk113_const_val_1;



  cfblk160 u_cfblk160 (.In1(cfblk113_out1),  // uint8
                       .Out1(cfblk160_out1)  // uint8
                       );

  assign cfblk139_const_val_1 = 8'b00000000;



  assign cfblk157_out1 = 8'b00000001;



  assign cfblk123_const_val_1 = 8'b00000000;



  assign cfblk10_const_val_1 = 8'b00000000;



  assign cfblk141_const_val_1 = 8'b00000000;



  assign cfblk67_const_val_1 = 8'b00000000;



  assign cfblk112_const_val_1 = 8'b00000000;



  assign cfblk118_const_val_1 = 8'b00000000;



  assign cfblk35_const_val_1 = 8'b00000000;



  DotProduct_block3 u_cfblk13_inst (.in1(cfblk17_out1),  // uint8
                                    .in2(cfblk121_out1),  // uint8
                                    .out1(cfblk13_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk13_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  always @(cfblk122_out1, cfblk24_out1) begin
    cfblk77_div_temp = 9'b000000000;
    cfblk77_t_0_0 = 9'b000000000;
    if (cfblk24_out1 == 8'b00000000) begin
      cfblk77_out1 = 8'b11111111;
    end
    else begin
      cfblk77_t_0_0 = {1'b0, cfblk122_out1};
      cfblk77_div_temp = cfblk77_t_0_0 / cfblk24_out1;
      if (cfblk77_div_temp[8] != 1'b0) begin
        cfblk77_out1 = 8'b11111111;
      end
      else begin
        cfblk77_out1 = cfblk77_div_temp[7:0];
      end
    end
  end



  assign cfblk90_out1 = cfblk64_out1 + cfblk77_out1;



  assign cfblk75_out1 = (cfblk90_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk135_out1 = cfblk75_out1 + cfblk98_out1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk135_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk206_process
      if (reset == 1'b1) begin
        cfblk206_reg[0] <= 8'b00000000;
        cfblk206_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk206_reg[0] <= cfblk206_reg_next[0];
          cfblk206_reg[1] <= cfblk206_reg_next[1];
        end
      end
    end

  assign cfblk206_out1 = cfblk206_reg[1];
  assign cfblk206_reg_next[0] = cfblk66_out1;
  assign cfblk206_reg_next[1] = cfblk206_reg[0];



  DotProduct_block7 u_cfblk74_inst (.in1(cfblk120_out1),  // uint8
                                    .in2(cfblk109_out1),  // uint8
                                    .out1(cfblk74_out1)  // uint8
                                    );

  assign dtc_out_2 = cfblk74_out1;



  assign cfblk64_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk64_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  assign dtc_out_3 = cfblk82_out1;



  assign cfblk128_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk128_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk204_process
      if (reset == 1'b1) begin
        cfblk204_reg[0] <= 8'b00000000;
        cfblk204_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk204_reg[0] <= cfblk204_reg_next[0];
          cfblk204_reg[1] <= cfblk204_reg_next[1];
        end
      end
    end

  assign cfblk204_out1 = cfblk204_reg[1];
  assign cfblk204_reg_next[0] = cfblk21_out1;
  assign cfblk204_reg_next[1] = cfblk204_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk12_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk203_process
      if (reset == 1'b1) begin
        cfblk203_reg[0] <= 8'b00000000;
        cfblk203_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk203_reg[0] <= cfblk203_reg_next[0];
          cfblk203_reg[1] <= cfblk203_reg_next[1];
        end
      end
    end

  assign cfblk203_out1 = cfblk203_reg[1];
  assign cfblk203_reg_next[0] = cfblk45_out1;
  assign cfblk203_reg_next[1] = cfblk203_reg[0];



  assign cfblk5_out1 = (cfblk17_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk5_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk10_out1 = cfblk110_out1 + cfblk10_const_val_1;



  assign cfblk8_out1 = cfblk63_out1 + cfblk10_out1;



  assign dtc_out_4 = cfblk4_out1;



  assign cfblk136_out1 = dtc_out_4;



  DotProduct_block4 u_cfblk144_inst (.in1(cfblk136_out1),  // uint8
                                     .in2(cfblk52_out1),  // uint8
                                     .out1(cfblk144_out1)  // uint8
                                     );

  assign dtc_out_5 = cfblk144_out1;



  assign cfblk122_out1 = dtc_out_5;



  assign cfblk108_out1 = (cfblk122_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk108_out1, cfblk8_out1) begin
    cfblk42_div_temp = 9'b000000000;
    cfblk42_t_0_0 = 9'b000000000;
    if (cfblk8_out1 == 8'b00000000) begin
      cfblk42_out1 = 8'b11111111;
    end
    else begin
      cfblk42_t_0_0 = {1'b0, cfblk108_out1};
      cfblk42_div_temp = cfblk42_t_0_0 / cfblk8_out1;
      if (cfblk42_div_temp[8] != 1'b0) begin
        cfblk42_out1 = 8'b11111111;
      end
      else begin
        cfblk42_out1 = cfblk42_div_temp[7:0];
      end
    end
  end



  assign dtc_out_6 = cfblk42_out1;



  assign cfblk62_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk201_process
      if (reset == 1'b1) begin
        cfblk201_reg[0] <= 8'b00000000;
        cfblk201_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk201_reg[0] <= cfblk201_reg_next[0];
          cfblk201_reg[1] <= cfblk201_reg_next[1];
        end
      end
    end

  assign cfblk201_out1 = cfblk201_reg[1];
  assign cfblk201_reg_next[0] = cfblk62_out1;
  assign cfblk201_reg_next[1] = cfblk201_reg[0];



  assign cfblk141_out1 = cfblk201_out1 + cfblk141_const_val_1;



  assign cfblk32_out1 = cfblk141_out1 + cfblk187_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk193_process
      if (reset == 1'b1) begin
        cfblk193_reg[0] <= 8'b00000000;
        cfblk193_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk193_reg[0] <= cfblk193_reg_next[0];
          cfblk193_reg[1] <= cfblk193_reg_next[1];
        end
      end
    end

  assign cfblk193_out1 = cfblk193_reg[1];
  assign cfblk193_reg_next[0] = cfblk120_out1;
  assign cfblk193_reg_next[1] = cfblk193_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk194_process
      if (reset == 1'b1) begin
        cfblk194_reg[0] <= 8'b00000000;
        cfblk194_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk194_reg[0] <= cfblk194_reg_next[0];
          cfblk194_reg[1] <= cfblk194_reg_next[1];
        end
      end
    end

  assign cfblk194_out1 = cfblk194_reg[1];
  assign cfblk194_reg_next[0] = cfblk6_out1;
  assign cfblk194_reg_next[1] = cfblk194_reg[0];



  always @(cfblk139_out1, cfblk194_out1) begin
    cfblk6_div_temp = 9'b000000000;
    cfblk6_t_0_0 = 9'b000000000;
    if (cfblk139_out1 == 8'b00000000) begin
      cfblk6_out1 = 8'b11111111;
    end
    else begin
      cfblk6_t_0_0 = {1'b0, cfblk194_out1};
      cfblk6_div_temp = cfblk6_t_0_0 / cfblk139_out1;
      if (cfblk6_div_temp[8] != 1'b0) begin
        cfblk6_out1 = 8'b11111111;
      end
      else begin
        cfblk6_out1 = cfblk6_div_temp[7:0];
      end
    end
  end



  assign cfblk153_out1 = cfblk6_out1 + cfblk193_out1;



  assign cfblk120_out1 = cfblk153_out1 - cfblk127_out1;



  assign cfblk98_out1 = cfblk127_out1 + cfblk120_out1;



  assign dtc_out_7 = cfblk98_out1;



  assign cfblk147_out1 = dtc_out_7;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk147_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  always @(cfblk175_out1, cfblk32_out1) begin
    cfblk41_div_temp = 9'b000000000;
    cfblk41_t_0_0 = 9'b000000000;
    if (cfblk32_out1 == 8'b00000000) begin
      cfblk41_out1 = 8'b11111111;
    end
    else begin
      cfblk41_t_0_0 = {1'b0, cfblk175_out1};
      cfblk41_div_temp = cfblk41_t_0_0 / cfblk32_out1;
      if (cfblk41_div_temp[8] != 1'b0) begin
        cfblk41_out1 = 8'b11111111;
      end
      else begin
        cfblk41_out1 = cfblk41_div_temp[7:0];
      end
    end
  end



  assign cfblk43_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk4_out1 = (cfblk43_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block5 u_cfblk148_inst (.in1(cfblk4_out1),  // uint8
                                     .in2(cfblk203_out1),  // uint8
                                     .out1(cfblk148_out1)  // uint8
                                     );

  assign cfblk129_out1 = (cfblk148_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk24_out1 = cfblk129_out1 + cfblk179_out1;



  assign cfblk152_out1 = cfblk24_out1 - cfblk204_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk199_process
      if (reset == 1'b1) begin
        cfblk199_reg[0] <= 8'b00000000;
        cfblk199_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk199_reg[0] <= cfblk199_reg_next[0];
          cfblk199_reg[1] <= cfblk199_reg_next[1];
        end
      end
    end

  assign cfblk199_out1 = cfblk199_reg[1];
  assign cfblk199_reg_next[0] = cfblk127_out1;
  assign cfblk199_reg_next[1] = cfblk199_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk94_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk177_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk14_out1 = cfblk1_out1 + cfblk199_out1;



  assign dtc_out_8 = cfblk14_out1;



  assign cfblk83_out1 = dtc_out_8;



  assign cfblk21_out1 = cfblk83_out1 + cfblk19_out1;



  assign dtc_out_9 = cfblk33_out1;



  assign cfblk54_out1 = dtc_out_9;



  assign dtc_out_10 = cfblk54_out1;



  assign cfblk78_out1 = dtc_out_10;



  assign cfblk40_out1 = cfblk112_out1 + cfblk96_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk40_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  DotProduct_block8 u_cfblk94_inst (.in1(cfblk180_out1),  // uint8
                                    .in2(cfblk78_out1),  // uint8
                                    .out1(cfblk94_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk151_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  DotProduct_block u_cfblk12_inst (.in1(cfblk188_out1),  // uint8
                                   .in2(cfblk94_out1),  // uint8
                                   .out1(cfblk12_out1)  // uint8
                                   );

  DotProduct_block9 u_cfblk96_inst (.in1(cfblk12_out1),  // uint8
                                    .in2(cfblk21_out1),  // uint8
                                    .out1(cfblk96_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk207_process
      if (reset == 1'b1) begin
        cfblk207_reg[0] <= 8'b00000000;
        cfblk207_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk207_reg[0] <= cfblk207_reg_next[0];
          cfblk207_reg[1] <= cfblk207_reg_next[1];
        end
      end
    end

  assign cfblk207_out1 = cfblk207_reg[1];
  assign cfblk207_reg_next[0] = cfblk18_out1;
  assign cfblk207_reg_next[1] = cfblk207_reg[0];



  assign cfblk86_out1 = cfblk126_out1 + cfblk207_out1;



  assign cfblk123_out1 = cfblk86_out1 + cfblk123_const_val_1;



  assign dtc_out_11 = cfblk123_out1;



  assign cfblk28_out1 = dtc_out_11;



  assign dtc_out_12 = cfblk28_out1;



  assign cfblk60_out1 = dtc_out_12;



  assign cfblk149_out1 = cfblk60_out1 + cfblk96_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk149_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign cfblk95_out1 = cfblk181_out1 + cfblk152_out1;



  assign cfblk111_out1 = cfblk95_out1 + cfblk183_out1;



  assign cfblk48_out1 = cfblk111_out1 - cfblk191_out1;



  assign cfblk9_out1 = cfblk48_out1 - cfblk206_out1;



  assign cfblk80_out1 = cfblk157_out1 + cfblk9_out1;



  assign cfblk109_out1 = cfblk80_out1 + cfblk62_out1;



  assign dtc_out_13 = cfblk109_out1;



  assign cfblk45_out1 = dtc_out_13;



  assign cfblk20_out1 = (cfblk45_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk49_out1 = cfblk20_out1 - cfblk2_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk49_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk139_out1 = cfblk121_out1 + cfblk139_const_val_1;



  Mysubsystem_28 u_Mysubsystem_28 (.In1(cfblk139_out1),  // uint8
                                   .Out1(Mysubsystem_28_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        cfblk189_reg[0] <= 8'b00000000;
        cfblk189_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk189_reg[0] <= cfblk189_reg_next[0];
          cfblk189_reg[1] <= cfblk189_reg_next[1];
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = Mysubsystem_28_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  assign cfblk110_out1 = (cfblk18_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk19_out1 = cfblk110_out1 - cfblk189_out1;



  cfblk159 u_cfblk159 (.In1(cfblk19_out1),  // uint8
                       .Out1(cfblk159_out1)  // uint8
                       );

  assign cfblk124_out1 = cfblk200_out1 - cfblk159_out1;



  DotProduct u_cfblk104_inst (.in1(cfblk124_out1),  // uint8
                              .in2(cfblk176_out1),  // uint8
                              .out1(cfblk104_out1)  // uint8
                              );

  DotProduct_block2 u_cfblk127_inst (.in1(cfblk104_out1),  // uint8
                                     .in2(cfblk14_out1),  // uint8
                                     .out1(cfblk127_out1)  // uint8
                                     );

  assign cfblk67_out1 = cfblk127_out1 + cfblk67_const_val_1;



  assign cfblk11_out1 = cfblk88_out1 + cfblk118_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk11_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign cfblk79_out1 = cfblk182_out1 + cfblk67_out1;



  always @(cfblk186_out1, cfblk79_out1) begin
    cfblk88_div_temp = 9'b000000000;
    cfblk88_t_0_0 = 9'b000000000;
    if (cfblk186_out1 == 8'b00000000) begin
      cfblk88_out1 = 8'b11111111;
    end
    else begin
      cfblk88_t_0_0 = {1'b0, cfblk79_out1};
      cfblk88_div_temp = cfblk88_t_0_0 / cfblk186_out1;
      if (cfblk88_div_temp[8] != 1'b0) begin
        cfblk88_out1 = 8'b11111111;
      end
      else begin
        cfblk88_out1 = cfblk88_div_temp[7:0];
      end
    end
  end



  assign dtc_out_14 = cfblk88_out1;



  assign cfblk82_out1 = dtc_out_14;



  assign dtc_out_15 = cfblk82_out1;



  assign cfblk17_out1 = dtc_out_15;



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk17_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  DotProduct_block1 u_cfblk126_inst (.in1(cfblk160_out1),  // uint8
                                     .in2(cfblk184_out1),  // uint8
                                     .out1(cfblk126_out1)  // uint8
                                     );

  DotProduct_block6 u_cfblk18_inst (.in1(cfblk126_out1),  // uint8
                                    .in2(cfblk80_out1),  // uint8
                                    .out1(cfblk18_out1)  // uint8
                                    );

  assign dtc_out_16 = cfblk18_out1;



  assign cfblk66_out1 = dtc_out_16;



  assign cfblk100_out1 = cfblk66_out1 + cfblk5_out1;



  assign cfblk112_out1 = cfblk100_out1 + cfblk112_const_val_1;



  assign cfblk121_out1 = cfblk23_out1 + cfblk121_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk195_process
      if (reset == 1'b1) begin
        cfblk195_reg[0] <= 8'b00000000;
        cfblk195_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk195_reg[0] <= cfblk195_reg_next[0];
          cfblk195_reg[1] <= cfblk195_reg_next[1];
        end
      end
    end

  assign cfblk195_out1 = cfblk195_reg[1];
  assign cfblk195_reg_next[0] = cfblk121_out1;
  assign cfblk195_reg_next[1] = cfblk195_reg[0];



  assign cfblk106_out1 = cfblk195_out1 + cfblk112_out1;



  assign cfblk92_out1 = cfblk106_out1 - cfblk24_out1;



  assign cfblk118_out1 = cfblk92_out1 + cfblk118_const_val_1;



  assign cfblk35_out1 = cfblk118_out1 + cfblk35_const_val_1;



  assign cfblk151_out1 = (cfblk35_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_17 = cfblk151_out1;



  assign cfblk23_out1 = dtc_out_17;



  always @(posedge clk or posedge reset)
    begin : cfblk198_process
      if (reset == 1'b1) begin
        cfblk198_reg[0] <= 8'b00000000;
        cfblk198_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk198_reg[0] <= cfblk198_reg_next[0];
          cfblk198_reg[1] <= cfblk198_reg_next[1];
        end
      end
    end

  assign cfblk198_out1 = cfblk198_reg[1];
  assign cfblk198_reg_next[0] = cfblk23_out1;
  assign cfblk198_reg_next[1] = cfblk198_reg[0];



  assign cfblk39_out1 = cfblk198_out1 + cfblk127_out1;



  assign cfblk73_out1 = cfblk158_out1 + cfblk39_out1;



  assign cfblk33_out1 = (cfblk73_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk52_out1 = (cfblk33_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_18 = cfblk52_out1;



  assign cfblk38_out1 = dtc_out_18;



  assign dtc_out_19 = cfblk38_out1;



  assign cfblk63_out1 = dtc_out_19;



  always @(posedge clk or posedge reset)
    begin : cfblk200_process
      if (reset == 1'b1) begin
        cfblk200_reg[0] <= 8'b00000000;
        cfblk200_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk200_reg[0] <= cfblk200_reg_next[0];
          cfblk200_reg[1] <= cfblk200_reg_next[1];
        end
      end
    end

  assign cfblk200_out1 = cfblk200_reg[1];
  assign cfblk200_reg_next[0] = cfblk63_out1;
  assign cfblk200_reg_next[1] = cfblk200_reg[0];



  assign Hdl_out = cfblk200_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

