// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1583\sampleModel1583_1_sub\Subsystem.v
// Created: 2024-08-12 23:54:13
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk144                      ce_out        1
// cfblk145                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1583_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk144,
           cfblk145,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk144;  // uint8
  output  [7:0] cfblk145;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [15:0] cfblk148_out1;  // uint16
  wire [15:0] cfblk151_out1;  // uint16
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk131_const_val_1;  // uint8
  wire [15:0] cfblk147_out1;  // uint16
  reg [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk16_const_val_1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk101_const_val_1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] Mysubsystem_13_out1;  // uint8
  wire [7:0] Mysubsystem_24_out1;  // uint8
  wire [7:0] Mysubsystem_44_out1;  // uint8
  wire [7:0] Mysubsystem_12_out1;  // uint8
  wire [7:0] cfblk69_const_val_1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk36_const_val_1;  // uint8
  wire [7:0] cfblk125_const_val_1;  // uint8
  wire [7:0] cfblk5_const_val_1;  // uint8
  wire [15:0] cfblk3_out1;  // uint16
  wire [7:0] cfblk114_const_val_1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [31:0] cfblk14_add_temp;  // ufix32
  wire [31:0] cfblk14_1;  // ufix32
  wire [31:0] cfblk14_2;  // ufix32
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire cfblk64_out1_is_not0;
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire cfblk2_out1;
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire cfblk44_out1_is_not0;
  wire [7:0] cfblk12_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk104_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire signed [31:0] cfblk70_sub_temp;  // sfix32
  wire signed [31:0] cfblk70_1;  // sfix32
  wire signed [31:0] cfblk70_2;  // sfix32
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  reg [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  reg [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk72_out1;  // uint8
  reg [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  reg [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [31:0] cfblk7_add_temp;  // ufix32
  wire [31:0] cfblk7_1;  // ufix32
  wire [31:0] cfblk7_2;  // ufix32
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  reg [7:0] cfblk17_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] dtc_out_13;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] dtc_out_14;  // ufix8
  reg [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  reg [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] Mysubsystem_1_out1;  // uint8
  wire [7:0] Mysubsystem_1_out2;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] Mysubsystem_41_out1;  // uint8
  reg [15:0] cfblk65_varargout_1;  // ufix16
  reg [16:0] cfblk65_div_temp;  // ufix17
  reg [16:0] cfblk65_t_0_0;  // ufix17
  reg [8:0] cfblk52_div_temp;  // ufix9
  reg [8:0] cfblk52_t_0_0;  // ufix9
  reg [8:0] cfblk107_div_temp;  // ufix9
  reg [8:0] cfblk107_t_0_0;  // ufix9
  reg [8:0] cfblk99_div_temp;  // ufix9
  reg [8:0] cfblk99_t_0_0;  // ufix9
  reg [8:0] cfblk104_div_temp;  // ufix9
  reg [8:0] cfblk104_t_0_0;  // ufix9
  reg [8:0] cfblk66_div_temp;  // ufix9
  reg [8:0] cfblk66_t_0_0;  // ufix9
  reg [8:0] cfblk115_div_temp;  // ufix9
  reg [8:0] cfblk115_t_0_0;  // ufix9
  reg [8:0] cfblk51_div_temp;  // ufix9
  reg [8:0] cfblk51_t_0_0;  // ufix9
  reg [8:0] cfblk88_div_temp;  // ufix9
  reg [8:0] cfblk88_t_0_0;  // ufix9
  reg [8:0] cfblk72_div_temp;  // ufix9
  reg [8:0] cfblk72_t_0_0;  // ufix9
  reg [8:0] cfblk117_div_temp;  // ufix9
  reg [8:0] cfblk117_t_0_0;  // ufix9
  reg [8:0] cfblk62_div_temp;  // ufix9
  reg [8:0] cfblk62_t_0_0;  // ufix9
  reg [8:0] cfblk17_div_temp;  // ufix9
  reg [8:0] cfblk17_t_0_0;  // ufix9
  reg [8:0] cfblk113_div_temp;  // ufix9
  reg [8:0] cfblk113_t_0_0;  // ufix9
  reg [8:0] cfblk48_div_temp;  // ufix9
  reg [8:0] cfblk48_t_0_0;  // ufix9


  cfblk148 u_cfblk148 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk148_out1)  // uint16
                       );

  cfblk151 u_cfblk151 (.In1(cfblk148_out1),  // uint16
                       .Out1(cfblk151_out1)  // uint16
                       );

  assign cfblk61_out1 = cfblk151_out1[7:0];



  assign cfblk131_const_val_1 = 8'b00000000;



  cfblk147 u_cfblk147 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk147_out1)  // uint16
                       );

  always @(cfblk147_out1, cfblk148_out1) begin
    cfblk65_div_temp = 17'b00000000000000000;
    cfblk65_t_0_0 = 17'b00000000000000000;
    if (cfblk147_out1 == 16'b0000000000000000) begin
      cfblk65_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk65_t_0_0 = {1'b0, cfblk148_out1};
      cfblk65_div_temp = cfblk65_t_0_0 / cfblk147_out1;
      if (cfblk65_div_temp[16] != 1'b0) begin
        cfblk65_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk65_varargout_1 = cfblk65_div_temp[15:0];
      end
    end
    if (cfblk65_varargout_1[15:8] != 8'b00000000) begin
      cfblk65_out1 = 8'b11111111;
    end
    else begin
      cfblk65_out1 = cfblk65_varargout_1[7:0];
    end
  end



  assign enb = clk_enable;

  assign cfblk149_out1 = 8'b00000000;



  assign cfblk16_const_val_1 = 8'b00000000;



  assign cfblk146_out1 = 8'b00000000;



  assign cfblk101_const_val_1 = 8'b00000000;



  assign cfblk101_out1 = cfblk149_out1 + cfblk101_const_val_1;



  Mysubsystem_24 u_Mysubsystem_24 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(Mysubsystem_13_out1),  // uint8
                                   .Out1(Mysubsystem_24_out1)  // uint8
                                   );

  Mysubsystem_44 u_Mysubsystem_44 (.In1(Mysubsystem_24_out1),  // uint8
                                   .Out1(Mysubsystem_44_out1)  // uint8
                                   );

  Mysubsystem_12 u_Mysubsystem_12 (.u(Mysubsystem_44_out1),  // uint8
                                   .Out1(Mysubsystem_12_out1)  // uint8
                                   );

  Mysubsystem_13 u_Mysubsystem_13 (.In1(Mysubsystem_12_out1),  // uint8
                                   .Out1(Mysubsystem_13_out1)  // uint8
                                   );

  assign cfblk69_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk161_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  assign cfblk36_const_val_1 = 8'b00000000;



  assign cfblk125_const_val_1 = 8'b00000000;



  assign cfblk5_const_val_1 = 8'b00000000;



  assign cfblk3_out1 = cfblk147_out1 >>> 8'd8;



  assign cfblk114_const_val_1 = 8'b00000000;



  assign cfblk24_out1 = (cfblk130_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk133_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk108_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk87_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk55_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  DotProduct_block1 u_cfblk30_inst (.in1(cfblk53_out1),  // uint8
                                    .in2(cfblk10_out1),  // uint8
                                    .out1(cfblk30_out1)  // uint8
                                    );

  assign cfblk14_1 = {16'b0, cfblk3_out1};
  assign cfblk14_2 = {24'b0, cfblk30_out1};
  assign cfblk14_add_temp = cfblk14_1 + cfblk14_2;
  assign cfblk14_out1 = cfblk14_add_temp[7:0];



  assign cfblk114_out1 = cfblk14_out1 + cfblk114_const_val_1;



  assign cfblk58_out1 = cfblk93_out1 + cfblk89_out1;



  assign cfblk142_out1 = cfblk74_out1 + cfblk91_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk142_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(cfblk43_out1, cfblk84_out1) begin
    cfblk52_div_temp = 9'b000000000;
    cfblk52_t_0_0 = 9'b000000000;
    if (cfblk84_out1 == 8'b00000000) begin
      cfblk52_out1 = 8'b11111111;
    end
    else begin
      cfblk52_t_0_0 = {1'b0, cfblk43_out1};
      cfblk52_div_temp = cfblk52_t_0_0 / cfblk84_out1;
      if (cfblk52_div_temp[8] != 1'b0) begin
        cfblk52_out1 = 8'b11111111;
      end
      else begin
        cfblk52_out1 = cfblk52_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk52_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk93_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk64_out1_is_not0 = cfblk38_out1 != 8'b00000000;



  assign dtc_out = cfblk135_out1;



  assign cfblk75_out1 = dtc_out;



  cfblk152 u_cfblk152 (.In1(cfblk78_out1),  // uint8
                       .Out1(cfblk152_out1)  // uint8
                       );

  assign cfblk56_out1 = cfblk152_out1 + cfblk75_out1;



  assign dtc_out_1 = cfblk56_out1;



  assign cfblk27_out1 = dtc_out_1;



  DotProduct_block4 u_cfblk91_inst (.in1(cfblk27_out1),  // uint8
                                    .in2(cfblk45_out1),  // uint8
                                    .out1(cfblk91_out1)  // uint8
                                    );

  assign cfblk191_out1 = {7'b0, cfblk2_out1};



  assign cfblk76_out1 = (cfblk119_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk76_out1;



  assign cfblk31_out1 = dtc_out_2;



  assign cfblk53_out1 = (cfblk31_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk131_out1, cfblk53_out1) begin
    cfblk107_div_temp = 9'b000000000;
    cfblk107_t_0_0 = 9'b000000000;
    if (cfblk53_out1 == 8'b00000000) begin
      cfblk107_out1 = 8'b11111111;
    end
    else begin
      cfblk107_t_0_0 = {1'b0, cfblk131_out1};
      cfblk107_div_temp = cfblk107_t_0_0 / cfblk53_out1;
      if (cfblk107_div_temp[8] != 1'b0) begin
        cfblk107_out1 = 8'b11111111;
      end
      else begin
        cfblk107_out1 = cfblk107_div_temp[7:0];
      end
    end
  end



  assign cfblk36_out1 = cfblk107_out1 + cfblk36_const_val_1;



  always @(cfblk191_out1, cfblk36_out1) begin
    cfblk99_div_temp = 9'b000000000;
    cfblk99_t_0_0 = 9'b000000000;
    if (cfblk191_out1 == 8'b00000000) begin
      cfblk99_out1 = 8'b11111111;
    end
    else begin
      cfblk99_t_0_0 = {1'b0, cfblk36_out1};
      cfblk99_div_temp = cfblk99_t_0_0 / cfblk191_out1;
      if (cfblk99_div_temp[8] != 1'b0) begin
        cfblk99_out1 = 8'b11111111;
      end
      else begin
        cfblk99_out1 = cfblk99_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk99_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk44_out1 = cfblk158_out1 + cfblk91_out1;



  assign cfblk44_out1_is_not0 = cfblk44_out1 != 8'b00000000;



  assign cfblk2_out1 = cfblk44_out1_is_not0 & cfblk64_out1_is_not0;



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk12_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign dtc_out_3 = cfblk125_out1;



  assign cfblk45_out1 = dtc_out_3;



  always @(Mysubsystem_13_out1, cfblk16_out1) begin
    cfblk104_div_temp = 9'b000000000;
    cfblk104_t_0_0 = 9'b000000000;
    if (cfblk16_out1 == 8'b00000000) begin
      cfblk104_out1 = 8'b11111111;
    end
    else begin
      cfblk104_t_0_0 = {1'b0, Mysubsystem_13_out1};
      cfblk104_div_temp = cfblk104_t_0_0 / cfblk16_out1;
      if (cfblk104_div_temp[8] != 1'b0) begin
        cfblk104_out1 = 8'b11111111;
      end
      else begin
        cfblk104_out1 = cfblk104_div_temp[7:0];
      end
    end
  end



  assign dtc_out_4 = cfblk104_out1;



  assign cfblk108_out1 = dtc_out_4;



  assign cfblk55_out1 = cfblk6_out1 + cfblk125_out1;



  assign cfblk105_out1 = cfblk55_out1 + cfblk16_out1;



  assign cfblk54_out1 = cfblk105_out1 + cfblk108_out1;



  assign cfblk77_out1 = (cfblk54_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk45_out1, cfblk77_out1) begin
    cfblk66_div_temp = 9'b000000000;
    cfblk66_t_0_0 = 9'b000000000;
    if (cfblk45_out1 == 8'b00000000) begin
      cfblk66_out1 = 8'b11111111;
    end
    else begin
      cfblk66_t_0_0 = {1'b0, cfblk77_out1};
      cfblk66_div_temp = cfblk66_t_0_0 / cfblk45_out1;
      if (cfblk66_div_temp[8] != 1'b0) begin
        cfblk66_out1 = 8'b11111111;
      end
      else begin
        cfblk66_out1 = cfblk66_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk66_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk82_out1 = cfblk171_out1 + cfblk177_out1;



  assign cfblk97_out1 = cfblk33_out1 + cfblk87_out1;



  assign dtc_out_5 = cfblk97_out1;



  assign cfblk80_out1 = dtc_out_5;



  assign cfblk135_out1 = cfblk101_out1 + cfblk80_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk135_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk33_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk120_out1 = cfblk140_out1 + cfblk168_out1;



  assign cfblk70_1 = {24'b0, cfblk120_out1};
  assign cfblk70_2 = {16'b0, cfblk148_out1};
  assign cfblk70_sub_temp = cfblk70_1 - cfblk70_2;
  assign cfblk70_out1 = cfblk70_sub_temp[7:0];



  assign cfblk73_out1 = cfblk146_out1 + cfblk87_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk73_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  DotProduct u_cfblk109_inst (.in1(cfblk183_out1),  // uint8
                              .in2(cfblk70_out1),  // uint8
                              .out1(cfblk109_out1)  // uint8
                              );

  assign dtc_out_6 = cfblk109_out1;



  assign cfblk10_out1 = dtc_out_6;



  assign cfblk119_out1 = cfblk10_out1 + cfblk181_out1;



  always @(cfblk119_out1, cfblk131_out1) begin
    cfblk115_div_temp = 9'b000000000;
    cfblk115_t_0_0 = 9'b000000000;
    if (cfblk119_out1 == 8'b00000000) begin
      cfblk115_out1 = 8'b11111111;
    end
    else begin
      cfblk115_t_0_0 = {1'b0, cfblk131_out1};
      cfblk115_div_temp = cfblk115_t_0_0 / cfblk119_out1;
      if (cfblk115_div_temp[8] != 1'b0) begin
        cfblk115_out1 = 8'b11111111;
      end
      else begin
        cfblk115_out1 = cfblk115_div_temp[7:0];
      end
    end
  end



  DotProduct_block3 u_cfblk83_inst (.in1(cfblk115_out1),  // uint8
                                    .in2(cfblk50_out1),  // uint8
                                    .out1(cfblk83_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk83_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  always @(cfblk164_out1, cfblk82_out1) begin
    cfblk51_div_temp = 9'b000000000;
    cfblk51_t_0_0 = 9'b000000000;
    if (cfblk82_out1 == 8'b00000000) begin
      cfblk51_out1 = 8'b11111111;
    end
    else begin
      cfblk51_t_0_0 = {1'b0, cfblk164_out1};
      cfblk51_div_temp = cfblk51_t_0_0 / cfblk82_out1;
      if (cfblk51_div_temp[8] != 1'b0) begin
        cfblk51_out1 = 8'b11111111;
      end
      else begin
        cfblk51_out1 = cfblk51_div_temp[7:0];
      end
    end
  end



  assign cfblk69_out1 = cfblk51_out1 + cfblk69_const_val_1;



  always @(cfblk130_out1, cfblk1_out1) begin
    cfblk88_div_temp = 9'b000000000;
    cfblk88_t_0_0 = 9'b000000000;
    if (cfblk130_out1 == 8'b00000000) begin
      cfblk88_out1 = 8'b11111111;
    end
    else begin
      cfblk88_t_0_0 = {1'b0, cfblk1_out1};
      cfblk88_div_temp = cfblk88_t_0_0 / cfblk130_out1;
      if (cfblk88_div_temp[8] != 1'b0) begin
        cfblk88_out1 = 8'b11111111;
      end
      else begin
        cfblk88_out1 = cfblk88_div_temp[7:0];
      end
    end
  end



  assign cfblk13_out1 = cfblk88_out1 - cfblk110_out1;



  assign dtc_out_7 = cfblk132_out1;



  assign cfblk8_out1 = dtc_out_7;



  assign cfblk123_out1 = (cfblk16_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk65_out1, cfblk74_out1) begin
    cfblk72_div_temp = 9'b000000000;
    cfblk72_t_0_0 = 9'b000000000;
    if (cfblk74_out1 == 8'b00000000) begin
      cfblk72_out1 = 8'b11111111;
    end
    else begin
      cfblk72_t_0_0 = {1'b0, cfblk65_out1};
      cfblk72_div_temp = cfblk72_t_0_0 / cfblk74_out1;
      if (cfblk72_div_temp[8] != 1'b0) begin
        cfblk72_out1 = 8'b11111111;
      end
      else begin
        cfblk72_out1 = cfblk72_div_temp[7:0];
      end
    end
  end



  always @(cfblk123_out1, cfblk72_out1) begin
    cfblk117_div_temp = 9'b000000000;
    cfblk117_t_0_0 = 9'b000000000;
    if (cfblk123_out1 == 8'b00000000) begin
      cfblk117_out1 = 8'b11111111;
    end
    else begin
      cfblk117_t_0_0 = {1'b0, cfblk72_out1};
      cfblk117_div_temp = cfblk117_t_0_0 / cfblk123_out1;
      if (cfblk117_div_temp[8] != 1'b0) begin
        cfblk117_out1 = 8'b11111111;
      end
      else begin
        cfblk117_out1 = cfblk117_div_temp[7:0];
      end
    end
  end



  assign cfblk134_out1 = (cfblk117_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk67_out1 = cfblk134_out1 + cfblk149_out1;



  assign dtc_out_8 = cfblk67_out1;



  assign cfblk38_out1 = dtc_out_8;



  assign cfblk40_out1 = cfblk38_out1 - cfblk8_out1;



  assign cfblk133_out1 = (cfblk40_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk41_out1 = cfblk61_out1 - cfblk106_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk41_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  assign cfblk106_out1 = cfblk185_out1 + cfblk87_out1;



  assign cfblk43_out1 = cfblk106_out1 + cfblk62_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk43_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  DotProduct_block2 u_cfblk6_inst (.in1(cfblk174_out1),  // uint8
                                   .in2(cfblk133_out1),  // uint8
                                   .out1(cfblk6_out1)  // uint8
                                   );

  always @(cfblk65_out1, cfblk6_out1) begin
    cfblk62_div_temp = 9'b000000000;
    cfblk62_t_0_0 = 9'b000000000;
    if (cfblk6_out1 == 8'b00000000) begin
      cfblk62_out1 = 8'b11111111;
    end
    else begin
      cfblk62_t_0_0 = {1'b0, cfblk65_out1};
      cfblk62_div_temp = cfblk62_t_0_0 / cfblk6_out1;
      if (cfblk62_div_temp[8] != 1'b0) begin
        cfblk62_out1 = 8'b11111111;
      end
      else begin
        cfblk62_out1 = cfblk62_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk62_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk85_out1 = cfblk173_out1 + cfblk13_out1;



  assign dtc_out_9 = cfblk1_out1;



  assign cfblk11_out1 = dtc_out_9;



  assign cfblk29_out1 = (cfblk11_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk93_out1 = cfblk29_out1 + cfblk85_out1;



  assign dtc_out_10 = cfblk93_out1;



  assign cfblk33_out1 = dtc_out_10;



  assign cfblk16_out1 = cfblk33_out1 + cfblk16_const_val_1;



  assign dtc_out_11 = cfblk16_out1;



  assign cfblk74_out1 = dtc_out_11;



  assign cfblk131_out1 = cfblk130_out1 + cfblk131_const_val_1;



  assign cfblk12_out1 = cfblk131_out1 + cfblk74_out1;



  assign cfblk57_out1 = cfblk12_out1 + cfblk69_out1;



  assign cfblk42_out1 = cfblk57_out1 + cfblk161_out1;



  assign cfblk139_out1 = (cfblk42_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk7_1 = {24'b0, cfblk139_out1};
  assign cfblk7_2 = {31'b0, cfblk2_out1};
  assign cfblk7_add_temp = cfblk7_1 + cfblk7_2;
  assign cfblk7_out1 = cfblk7_add_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk7_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk98_out1 = cfblk159_out1 + cfblk69_out1;



  DotProduct_block u_cfblk130_inst (.in1(cfblk98_out1),  // uint8
                                    .in2(cfblk166_out1),  // uint8
                                    .out1(cfblk130_out1)  // uint8
                                    );

  assign cfblk89_out1 = cfblk130_out1 + cfblk163_out1;



  assign cfblk140_out1 = cfblk89_out1 - cfblk160_out1;



  assign cfblk19_out1 = cfblk61_out1 + cfblk140_out1;



  assign cfblk125_out1 = cfblk19_out1 + cfblk125_const_val_1;



  assign cfblk137_out1 = cfblk125_out1 - cfblk58_out1;



  assign cfblk5_out1 = cfblk137_out1 + cfblk5_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk5_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  always @(cfblk114_out1, cfblk167_out1) begin
    cfblk17_div_temp = 9'b000000000;
    cfblk17_t_0_0 = 9'b000000000;
    if (cfblk114_out1 == 8'b00000000) begin
      cfblk17_out1 = 8'b11111111;
    end
    else begin
      cfblk17_t_0_0 = {1'b0, cfblk167_out1};
      cfblk17_div_temp = cfblk17_t_0_0 / cfblk114_out1;
      if (cfblk17_div_temp[8] != 1'b0) begin
        cfblk17_out1 = 8'b11111111;
      end
      else begin
        cfblk17_out1 = cfblk17_div_temp[7:0];
      end
    end
  end



  assign cfblk78_out1 = cfblk17_out1 - Mysubsystem_13_out1;



  assign dtc_out_12 = cfblk78_out1;



  assign cfblk37_out1 = dtc_out_12;



  assign cfblk84_out1 = cfblk37_out1 - cfblk170_out1;



  assign cfblk87_out1 = cfblk84_out1 + cfblk182_out1;



  assign dtc_out_13 = cfblk87_out1;



  assign cfblk121_out1 = dtc_out_13;



  assign cfblk102_out1 = cfblk121_out1 - cfblk19_out1;



  assign cfblk47_out1 = cfblk102_out1 + cfblk179_out1;



  assign cfblk132_out1 = cfblk47_out1 + cfblk169_out1;



  assign cfblk110_out1 = cfblk132_out1 - cfblk24_out1;



  assign dtc_out_14 = cfblk110_out1;



  assign cfblk50_out1 = dtc_out_14;



  always @(cfblk50_out1, cfblk8_out1) begin
    cfblk113_div_temp = 9'b000000000;
    cfblk113_t_0_0 = 9'b000000000;
    if (cfblk8_out1 == 8'b00000000) begin
      cfblk113_out1 = 8'b11111111;
    end
    else begin
      cfblk113_t_0_0 = {1'b0, cfblk50_out1};
      cfblk113_div_temp = cfblk113_t_0_0 / cfblk8_out1;
      if (cfblk113_div_temp[8] != 1'b0) begin
        cfblk113_out1 = 8'b11111111;
      end
      else begin
        cfblk113_out1 = cfblk113_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk113_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk1_out1 = cfblk165_out1 | 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk152_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  always @(cfblk162_out1, cfblk1_out1) begin
    cfblk48_div_temp = 9'b000000000;
    cfblk48_t_0_0 = 9'b000000000;
    if (cfblk162_out1 == 8'b00000000) begin
      cfblk48_out1 = 8'b11111111;
    end
    else begin
      cfblk48_t_0_0 = {1'b0, cfblk1_out1};
      cfblk48_div_temp = cfblk48_t_0_0 / cfblk162_out1;
      if (cfblk48_div_temp[8] != 1'b0) begin
        cfblk48_out1 = 8'b11111111;
      end
      else begin
        cfblk48_out1 = cfblk48_div_temp[7:0];
      end
    end
  end



  assign cfblk112_out1 = cfblk16_out1 - cfblk76_out1;



  Mysubsystem_1 u_Mysubsystem_1 (.In1(cfblk112_out1),  // uint8
                                 .In2(cfblk45_out1),  // uint8
                                 .cfblk145(Mysubsystem_1_out1),  // uint8
                                 .Out2(Mysubsystem_1_out2)  // uint8
                                 );

  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = Mysubsystem_1_out2;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk111_out1 = cfblk48_out1 - cfblk180_out1;



  Mysubsystem_41 u_Mysubsystem_41 (.In1(cfblk111_out1),  // uint8
                                   .cfblk144(Mysubsystem_41_out1)  // uint8
                                   );

  assign cfblk144 = Mysubsystem_41_out1;

  assign cfblk145 = Mysubsystem_1_out1;

  assign Hdl_out = cfblk99_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

