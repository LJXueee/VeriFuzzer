// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1581\sampleModel1581_2_sub\Subsystem.v
// Created: 2024-08-12 23:02:12
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1581_2_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk41_const_val_1;  // uint8
  wire [7:0] cfblk19_const_val_1;  // uint8
  wire [7:0] cfblk6_const_val_1;  // uint8
  wire [7:0] cfblk33_const_val_1;  // uint8
  wire [7:0] cfblk72_const_val_1;  // uint8
  wire [7:0] cfblk29_const_val_1;  // uint8
  wire [7:0] cfblk43_const_val_1;  // uint8
  wire [7:0] cfblk58_const_val_1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk135_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk118_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  reg [7:0] cfblk133_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk133_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk136_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk134_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk134_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] dtc_out_13;  // ufix8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk31_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  reg [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  reg [8:0] cfblk10_div_temp;  // ufix9
  reg [8:0] cfblk10_t_0_0;  // ufix9
  reg [8:0] cfblk82_div_temp;  // ufix9
  reg [8:0] cfblk82_t_0_0;  // ufix9
  reg [8:0] cfblk118_div_temp;  // ufix9
  reg [8:0] cfblk118_t_0_0;  // ufix9
  reg [8:0] cfblk107_div_temp;  // ufix9
  reg [8:0] cfblk107_t_0_0;  // ufix9
  reg [8:0] cfblk31_div_temp;  // ufix9
  reg [8:0] cfblk31_t_0_0;  // ufix9
  reg [8:0] cfblk20_div_temp;  // ufix9
  reg [8:0] cfblk20_t_0_0;  // ufix9
  reg [8:0] cfblk98_div_temp;  // ufix9
  reg [8:0] cfblk98_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk41_const_val_1 = 8'b00000000;



  assign cfblk19_const_val_1 = 8'b00000000;



  assign cfblk6_const_val_1 = 8'b00000000;



  assign cfblk33_const_val_1 = 8'b00000000;



  assign cfblk72_const_val_1 = 8'b00000000;



  assign cfblk29_const_val_1 = 8'b00000000;



  assign cfblk43_const_val_1 = 8'b00000000;



  assign cfblk58_const_val_1 = 8'b00000000;



  assign dtc_out = cfblk95_out1;



  assign cfblk77_out1 = dtc_out;



  assign cfblk43_out1 = cfblk77_out1 + cfblk43_const_val_1;



  assign cfblk45_out1 = cfblk114_out1 - cfblk47_out1;



  assign cfblk63_out1 = cfblk123_out1 + cfblk95_out1;



  assign cfblk93_out1 = (cfblk63_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk89_out1 = cfblk25_out1 + cfblk112_out1;



  always @(cfblk29_out1, cfblk89_out1) begin
    cfblk10_div_temp = 9'b000000000;
    cfblk10_t_0_0 = 9'b000000000;
    if (cfblk29_out1 == 8'b00000000) begin
      cfblk10_out1 = 8'b11111111;
    end
    else begin
      cfblk10_t_0_0 = {1'b0, cfblk89_out1};
      cfblk10_div_temp = cfblk10_t_0_0 / cfblk29_out1;
      if (cfblk10_div_temp[8] != 1'b0) begin
        cfblk10_out1 = 8'b11111111;
      end
      else begin
        cfblk10_out1 = cfblk10_div_temp[7:0];
      end
    end
  end



  assign cfblk76_out1 = cfblk10_out1 - cfblk93_out1;



  assign cfblk50_out1 = cfblk76_out1 + cfblk45_out1;



  always @(cfblk50_out1, cfblk85_out1) begin
    cfblk82_div_temp = 9'b000000000;
    cfblk82_t_0_0 = 9'b000000000;
    if (cfblk50_out1 == 8'b00000000) begin
      cfblk82_out1 = 8'b11111111;
    end
    else begin
      cfblk82_t_0_0 = {1'b0, cfblk85_out1};
      cfblk82_div_temp = cfblk82_t_0_0 / cfblk50_out1;
      if (cfblk82_div_temp[8] != 1'b0) begin
        cfblk82_out1 = 8'b11111111;
      end
      else begin
        cfblk82_out1 = cfblk82_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk82_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  assign cfblk22_out1 = cfblk5_out1 - cfblk141_out1;



  assign cfblk111_out1 = (cfblk22_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk29_out1 = cfblk111_out1 + cfblk29_const_val_1;



  assign cfblk60_out1 = cfblk41_out1 - cfblk29_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk60_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk135_process
      if (reset == 1'b1) begin
        cfblk135_reg[0] <= 8'b00000000;
        cfblk135_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk135_reg[0] <= cfblk135_reg_next[0];
          cfblk135_reg[1] <= cfblk135_reg_next[1];
        end
      end
    end

  assign cfblk135_out1 = cfblk135_reg[1];
  assign cfblk135_reg_next[0] = cfblk95_out1;
  assign cfblk135_reg_next[1] = cfblk135_reg[0];



  assign cfblk6_out1 = cfblk113_out1 + cfblk6_const_val_1;



  assign dtc_out_1 = cfblk6_out1;



  assign cfblk70_out1 = dtc_out_1;



  assign cfblk5_out1 = (cfblk70_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk5_out1;



  assign cfblk12_out1 = dtc_out_2;



  assign cfblk75_out1 = (cfblk12_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk75_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  assign cfblk33_out1 = cfblk143_out1 + cfblk33_const_val_1;



  assign cfblk54_out1 = cfblk33_out1 - cfblk135_out1;



  assign cfblk72_out1 = cfblk54_out1 + cfblk72_const_val_1;



  assign cfblk23_out1 = cfblk72_out1 + cfblk142_out1;



  assign cfblk115_out1 = (cfblk127_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk65_out1 = cfblk115_out1 - cfblk55_out1;



  assign dtc_out_3 = cfblk65_out1;



  assign cfblk112_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk112_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk85_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  DotProduct_block1 u_cfblk51_inst (.in1(cfblk25_out1),  // uint8
                                    .in2(cfblk151_out1),  // uint8
                                    .out1(cfblk51_out1)  // uint8
                                    );

  assign cfblk8_out1 = cfblk58_out1 - cfblk58_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk8_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  always @(cfblk138_out1, cfblk51_out1) begin
    cfblk118_div_temp = 9'b000000000;
    cfblk118_t_0_0 = 9'b000000000;
    if (cfblk51_out1 == 8'b00000000) begin
      cfblk118_out1 = 8'b11111111;
    end
    else begin
      cfblk118_t_0_0 = {1'b0, cfblk138_out1};
      cfblk118_div_temp = cfblk118_t_0_0 / cfblk51_out1;
      if (cfblk118_div_temp[8] != 1'b0) begin
        cfblk118_out1 = 8'b11111111;
      end
      else begin
        cfblk118_out1 = cfblk118_div_temp[7:0];
      end
    end
  end



  assign dtc_out_4 = cfblk118_out1;



  assign cfblk74_out1 = dtc_out_4;



  assign dtc_out_5 = cfblk35_out1;



  assign cfblk55_out1 = dtc_out_5;



  assign cfblk113_out1 = cfblk55_out1 + cfblk15_out1;



  assign cfblk13_out1 = cfblk35_out1 + cfblk113_out1;



  assign cfblk47_out1 = (cfblk13_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk47_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk56_out1 = cfblk145_out1 + cfblk74_out1;



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk56_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign dtc_out_6 = cfblk4_out1;



  assign cfblk95_out1 = dtc_out_6;



  assign cfblk92_out1 = cfblk107_out1 + cfblk95_out1;



  assign dtc_out_7 = cfblk92_out1;



  assign cfblk80_out1 = dtc_out_7;



  assign cfblk21_out1 = (cfblk80_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk114_out1 = cfblk21_out1 + cfblk51_out1;



  DotProduct_block3 u_cfblk88_inst (.in1(cfblk114_out1),  // uint8
                                    .in2(cfblk114_out1),  // uint8
                                    .out1(cfblk88_out1)  // uint8
                                    );

  assign cfblk15_out1 = cfblk88_out1 + cfblk146_out1;



  assign cfblk41_out1 = cfblk15_out1 + cfblk41_const_val_1;



  assign cfblk19_out1 = cfblk41_out1 + cfblk19_const_val_1;



  assign dtc_out_8 = cfblk19_out1;



  assign cfblk123_out1 = dtc_out_8;



  assign cfblk11_out1 = (cfblk123_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_9 = cfblk11_out1;



  assign cfblk120_out1 = dtc_out_9;



  cfblk127 u_cfblk127 (.In1(cfblk120_out1),  // uint8
                       .Out1(cfblk127_out1)  // uint8
                       );

  assign cfblk35_out1 = (cfblk127_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block u_cfblk26_inst (.in1(cfblk73_out1),  // uint8
                                   .in2(cfblk35_out1),  // uint8
                                   .out1(cfblk26_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk26_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  assign cfblk25_out1 = cfblk148_out1 + cfblk23_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk133_process
      if (reset == 1'b1) begin
        cfblk133_reg[0] <= 8'b00000000;
        cfblk133_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk133_reg[0] <= cfblk133_reg_next[0];
          cfblk133_reg[1] <= cfblk133_reg_next[1];
        end
      end
    end

  assign cfblk133_out1 = cfblk133_reg[1];
  assign cfblk133_reg_next[0] = cfblk25_out1;
  assign cfblk133_reg_next[1] = cfblk133_reg[0];



  cfblk1 u_cfblk1 (.u(cfblk133_out1),  // uint8
                   .y(cfblk1_out1)  // uint8
                   );

  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk1_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign cfblk116_out1 = (cfblk2_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_10 = cfblk116_out1;



  assign cfblk73_out1 = dtc_out_10;



  always @(cfblk73_out1, cfblk8_out1) begin
    cfblk107_div_temp = 9'b000000000;
    cfblk107_t_0_0 = 9'b000000000;
    if (cfblk8_out1 == 8'b00000000) begin
      cfblk107_out1 = 8'b11111111;
    end
    else begin
      cfblk107_t_0_0 = {1'b0, cfblk73_out1};
      cfblk107_div_temp = cfblk107_t_0_0 / cfblk8_out1;
      if (cfblk107_div_temp[8] != 1'b0) begin
        cfblk107_out1 = 8'b11111111;
      end
      else begin
        cfblk107_out1 = cfblk107_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk107_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  DotProduct_block2 u_cfblk85_inst (.in1(cfblk150_out1),  // uint8
                                    .in2(cfblk43_out1),  // uint8
                                    .out1(cfblk85_out1)  // uint8
                                    );

  assign cfblk58_out1 = cfblk85_out1 + cfblk58_const_val_1;



  assign dtc_out_11 = cfblk58_out1;



  assign cfblk44_out1 = dtc_out_11;



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk13_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign dtc_out_12 = cfblk116_out1;



  assign cfblk119_out1 = dtc_out_12;



  DotProduct u_cfblk16_inst (.in1(cfblk144_out1),  // uint8
                             .in2(cfblk119_out1),  // uint8
                             .out1(cfblk16_out1)  // uint8
                             );

  assign cfblk27_out1 = (cfblk35_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk136_process
      if (reset == 1'b1) begin
        cfblk136_reg[0] <= 8'b00000000;
        cfblk136_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk136_reg[0] <= cfblk136_reg_next[0];
          cfblk136_reg[1] <= cfblk136_reg_next[1];
        end
      end
    end

  assign cfblk136_out1 = cfblk136_reg[1];
  assign cfblk136_reg_next[0] = cfblk43_out1;
  assign cfblk136_reg_next[1] = cfblk136_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk27_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk18_out1 = cfblk16_out1 + cfblk147_out1;



  assign cfblk28_out1 = cfblk136_out1 + cfblk18_out1;



  assign cfblk109_out1 = cfblk114_out1 + cfblk127_out1;



  DotProduct_block5 u_cfblk99_inst (.in1(cfblk10_out1),  // uint8
                                    .in2(cfblk72_out1),  // uint8
                                    .out1(cfblk99_out1)  // uint8
                                    );

  assign cfblk81_out1 = cfblk99_out1 + cfblk74_out1;



  assign cfblk38_out1 = cfblk109_out1 - cfblk81_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk134_process
      if (reset == 1'b1) begin
        cfblk134_reg[0] <= 8'b00000000;
        cfblk134_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk134_reg[0] <= cfblk134_reg_next[0];
          cfblk134_reg[1] <= cfblk134_reg_next[1];
        end
      end
    end

  assign cfblk134_out1 = cfblk134_reg[1];
  assign cfblk134_reg_next[0] = cfblk38_out1;
  assign cfblk134_reg_next[1] = cfblk134_reg[0];



  DotProduct_block4 u_cfblk91_inst (.in1(cfblk28_out1),  // uint8
                                    .in2(cfblk134_out1),  // uint8
                                    .out1(cfblk91_out1)  // uint8
                                    );

  assign dtc_out_13 = cfblk91_out1;



  assign cfblk14_out1 = dtc_out_13;



  assign cfblk3_out1 = cfblk37_out1 | 8'b00000001;



  always @(cfblk115_out1, cfblk3_out1) begin
    cfblk31_div_temp = 9'b000000000;
    cfblk31_t_0_0 = 9'b000000000;
    if (cfblk3_out1 == 8'b00000000) begin
      cfblk31_out1 = 8'b11111111;
    end
    else begin
      cfblk31_t_0_0 = {1'b0, cfblk115_out1};
      cfblk31_div_temp = cfblk31_t_0_0 / cfblk3_out1;
      if (cfblk31_div_temp[8] != 1'b0) begin
        cfblk31_out1 = 8'b11111111;
      end
      else begin
        cfblk31_out1 = cfblk31_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk31_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  always @(cfblk139_out1, cfblk14_out1) begin
    cfblk20_div_temp = 9'b000000000;
    cfblk20_t_0_0 = 9'b000000000;
    if (cfblk139_out1 == 8'b00000000) begin
      cfblk20_out1 = 8'b11111111;
    end
    else begin
      cfblk20_t_0_0 = {1'b0, cfblk14_out1};
      cfblk20_div_temp = cfblk20_t_0_0 / cfblk139_out1;
      if (cfblk20_div_temp[8] != 1'b0) begin
        cfblk20_out1 = 8'b11111111;
      end
      else begin
        cfblk20_out1 = cfblk20_div_temp[7:0];
      end
    end
  end



  always @(cfblk20_out1) begin
    cfblk98_div_temp = 9'b000000000;
    cfblk98_t_0_0 = 9'b000000000;
    if (cfblk20_out1 == 8'b00000000) begin
      cfblk98_out1 = 8'b11111111;
    end
    else begin
      cfblk98_t_0_0 = {1'b0, cfblk20_out1};
      cfblk98_div_temp = cfblk98_t_0_0 / cfblk20_out1;
      if (cfblk98_div_temp[8] != 1'b0) begin
        cfblk98_out1 = 8'b11111111;
      end
      else begin
        cfblk98_out1 = cfblk98_div_temp[7:0];
      end
    end
  end



  assign cfblk122_out1 = cfblk98_out1 - cfblk58_out1;



  cfblk126 u_cfblk126 (.In1(cfblk122_out1),  // uint8
                       .Out1(cfblk126_out1)  // uint8
                       );

  assign cfblk48_out1 = cfblk44_out1 - cfblk126_out1;



  assign cfblk37_out1 = (cfblk48_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign Hdl_out = cfblk37_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

