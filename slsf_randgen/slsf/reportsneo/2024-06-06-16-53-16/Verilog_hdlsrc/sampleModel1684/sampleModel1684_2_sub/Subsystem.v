// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1684\sampleModel1684_2_sub\Subsystem.v
// Created: 2024-06-10 10:44:48
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk151                      ce_out        1
// cfblk152                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1684_2_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk151,
           cfblk152,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk151;  // uint8
  output  [7:0] cfblk152;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk106_const_val_1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk78_const_val_1;  // uint8
  wire [7:0] cfblk37_const_val_1;  // uint8
  wire [7:0] cfblk91_const_val_1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk121_const_val_1;  // uint8
  wire [7:0] cfblk143_const_val_1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk81_const_val_1;  // uint8
  wire [7:0] cfblk59_const_val_1;  // uint8
  wire [7:0] cfblk35_const_val_1;  // uint8
  wire [7:0] bitMask_for_cfblk5;  // uint8
  wire [7:0] cfblk57_const_val_1;  // uint8
  wire [7:0] cfblk119_const_val_1;  // uint8
  wire [7:0] bitMask_for_cfblk6;  // uint8
  wire [7:0] cfblk99_const_val_1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk64_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  reg [7:0] cfblk118_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  reg [7:0] cfblk194_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  reg [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  reg [7:0] cfblk117_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] dtc_out_13;  // ufix8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] dtc_out_14;  // ufix8
  reg [8:0] cfblk64_div_temp;  // ufix9
  reg [8:0] cfblk64_t_0_0;  // ufix9
  reg [8:0] cfblk118_div_temp;  // ufix9
  reg [8:0] cfblk118_t_0_0;  // ufix9
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9
  reg [8:0] cfblk110_div_temp;  // ufix9
  reg [8:0] cfblk110_t_0_0;  // ufix9
  reg [8:0] cfblk123_div_temp;  // ufix9
  reg [8:0] cfblk123_t_0_0;  // ufix9
  reg [8:0] cfblk117_div_temp;  // ufix9
  reg [8:0] cfblk117_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk155_out1 = 8'b00000000;



  cfblk156 u_cfblk156 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk156_out1)  // uint8
                       );

  assign cfblk103_out1 = (cfblk156_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk164 u_cfblk164 (.In1(cfblk103_out1),  // uint8
                       .Out1(cfblk164_out1)  // uint8
                       );

  assign cfblk106_const_val_1 = 8'b00000000;



  assign cfblk158_out1 = 8'b00000000;



  assign cfblk78_const_val_1 = 8'b00000000;



  assign cfblk37_const_val_1 = 8'b00000000;



  assign cfblk91_const_val_1 = 8'b00000000;



  assign cfblk159_out1 = 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk159_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign cfblk121_const_val_1 = 8'b00000000;



  assign cfblk143_const_val_1 = 8'b00000000;



  assign cfblk157_out1 = 8'b00000001;



  assign cfblk65_out1 = cfblk164_out1 - cfblk157_out1;



  assign cfblk81_const_val_1 = 8'b00000000;



  assign cfblk59_const_val_1 = 8'b00000000;



  assign cfblk35_const_val_1 = 8'b00000000;



  assign bitMask_for_cfblk5 = 8'b11011001;



  assign cfblk57_const_val_1 = 8'b00000000;



  assign cfblk119_const_val_1 = 8'b00000000;



  assign bitMask_for_cfblk6 = 8'b11011001;



  assign cfblk99_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk42_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk27_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  DotProduct_block2 u_cfblk131_inst (.in1(cfblk103_out1),  // uint8
                                     .in2(cfblk62_out1),  // uint8
                                     .out1(cfblk131_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk131_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk81_out1 = cfblk101_out1 + cfblk81_const_val_1;



  assign cfblk85_out1 = cfblk65_out1 + cfblk130_out1;



  DotProduct_block8 u_cfblk73_inst (.in1(cfblk85_out1),  // uint8
                                    .in2(cfblk108_out1),  // uint8
                                    .out1(cfblk73_out1)  // uint8
                                    );

  always @(cfblk155_out1, cfblk73_out1) begin
    cfblk64_div_temp = 9'b000000000;
    cfblk64_t_0_0 = 9'b000000000;
    if (cfblk73_out1 == 8'b00000000) begin
      cfblk64_out1 = 8'b11111111;
    end
    else begin
      cfblk64_t_0_0 = {1'b0, cfblk155_out1};
      cfblk64_div_temp = cfblk64_t_0_0 / cfblk73_out1;
      if (cfblk64_div_temp[8] != 1'b0) begin
        cfblk64_out1 = 8'b11111111;
      end
      else begin
        cfblk64_out1 = cfblk64_div_temp[7:0];
      end
    end
  end



  assign dtc_out = cfblk64_out1;



  assign cfblk87_out1 = dtc_out;



  assign dtc_out_1 = cfblk6_out1;



  assign cfblk104_out1 = dtc_out_1;



  assign cfblk143_out1 = cfblk104_out1 + cfblk143_const_val_1;



  always @(cfblk143_out1, cfblk87_out1) begin
    cfblk118_div_temp = 9'b000000000;
    cfblk118_t_0_0 = 9'b000000000;
    if (cfblk87_out1 == 8'b00000000) begin
      cfblk118_out1 = 8'b11111111;
    end
    else begin
      cfblk118_t_0_0 = {1'b0, cfblk143_out1};
      cfblk118_div_temp = cfblk118_t_0_0 / cfblk87_out1;
      if (cfblk118_div_temp[8] != 1'b0) begin
        cfblk118_out1 = 8'b11111111;
      end
      else begin
        cfblk118_out1 = cfblk118_div_temp[7:0];
      end
    end
  end



  assign dtc_out_2 = cfblk118_out1;



  assign cfblk46_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk46_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk130_out1 = cfblk180_out1 + cfblk81_out1;



  assign cfblk59_out1 = cfblk130_out1 + cfblk59_const_val_1;



  assign cfblk35_out1 = cfblk59_out1 + cfblk35_const_val_1;



  always @(cfblk109_out1, cfblk35_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk109_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk35_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk109_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  assign cfblk5_out1 = cfblk44_out1 & bitMask_for_cfblk5;



  assign cfblk120_out1 = cfblk135_out1 - cfblk2_out1;



  assign cfblk27_out1 = cfblk120_out1 - cfblk6_out1;



  assign cfblk96_out1 = cfblk27_out1 + cfblk5_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk96_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk68_out1 = cfblk174_out1 + cfblk146_out1;



  DotProduct_block4 u_cfblk62_inst (.in1(cfblk68_out1),  // uint8
                                    .in2(cfblk176_out1),  // uint8
                                    .out1(cfblk62_out1)  // uint8
                                    );

  assign cfblk57_out1 = cfblk62_out1 + cfblk57_const_val_1;



  assign dtc_out_3 = cfblk57_out1;



  assign cfblk109_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk109_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk8_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  assign dtc_out_4 = cfblk108_out1;



  assign cfblk26_out1 = dtc_out_4;



  DotProduct u_cfblk105_inst (.in1(cfblk26_out1),  // uint8
                              .in2(cfblk16_out1),  // uint8
                              .out1(cfblk105_out1)  // uint8
                              );

  assign cfblk121_out1 = cfblk105_out1 + cfblk121_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk121_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk101_out1 = cfblk89_out1 + cfblk135_out1;



  always @(cfblk101_out1, cfblk119_out1) begin
    cfblk110_div_temp = 9'b000000000;
    cfblk110_t_0_0 = 9'b000000000;
    if (cfblk119_out1 == 8'b00000000) begin
      cfblk110_out1 = 8'b11111111;
    end
    else begin
      cfblk110_t_0_0 = {1'b0, cfblk101_out1};
      cfblk110_div_temp = cfblk110_t_0_0 / cfblk119_out1;
      if (cfblk110_div_temp[8] != 1'b0) begin
        cfblk110_out1 = 8'b11111111;
      end
      else begin
        cfblk110_out1 = cfblk110_div_temp[7:0];
      end
    end
  end



  cfblk160 u_cfblk160 (.In1(cfblk110_out1),  // uint8
                       .Out1(cfblk160_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk160_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign cfblk49_out1 = cfblk182_out1 + cfblk12_out1;



  assign cfblk9_out1 = cfblk49_out1 + cfblk171_out1;



  cfblk7 u_cfblk7 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk9_out1),  // uint8
                   .Y(cfblk7_out1)  // uint8
                   );

  assign cfblk77_out1 = cfblk164_out1 + cfblk7_out1;



  assign cfblk127_out1 = cfblk77_out1 + cfblk188_out1;



  assign dtc_out_5 = cfblk127_out1;



  assign cfblk11_out1 = dtc_out_5;



  assign cfblk107_out1 = cfblk11_out1 + cfblk175_out1;



  assign cfblk41_out1 = cfblk135_out1 - cfblk6_out1;



  assign cfblk112_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk112_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  assign cfblk126_out1 = cfblk179_out1 + cfblk107_out1;



  DotProduct_block5 u_cfblk63_inst (.in1(cfblk126_out1),  // uint8
                                    .in2(cfblk177_out1),  // uint8
                                    .out1(cfblk63_out1)  // uint8
                                    );

  assign cfblk119_out1 = cfblk63_out1 + cfblk119_const_val_1;



  assign cfblk100_out1 = cfblk6_out1 - cfblk34_out1;



  cfblk162 u_cfblk162 (.In1(cfblk100_out1),  // uint8
                       .Out1(cfblk162_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk194_process
      if (reset == 1'b1) begin
        cfblk194_reg[0] <= 8'b00000000;
        cfblk194_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk194_reg[0] <= cfblk194_reg_next[0];
          cfblk194_reg[1] <= cfblk194_reg_next[1];
        end
      end
    end

  assign cfblk194_out1 = cfblk194_reg[1];
  assign cfblk194_reg_next[0] = cfblk162_out1;
  assign cfblk194_reg_next[1] = cfblk194_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk45_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk39_out1 = cfblk38_out1 + cfblk181_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk58_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  assign cfblk135_out1 = cfblk25_out1 + cfblk185_out1;



  assign cfblk129_out1 = (cfblk37_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk102_out1 = (cfblk129_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk33_out1 = cfblk102_out1 + cfblk158_out1;



  assign dtc_out_6 = cfblk33_out1;



  assign cfblk138_out1 = dtc_out_6;



  assign cfblk56_out1 = cfblk37_out1 + cfblk21_out1;



  assign dtc_out_7 = cfblk56_out1;



  assign cfblk89_out1 = dtc_out_7;



  cfblk163 u_cfblk163 (.In1(cfblk89_out1),  // uint8
                       .Out1(cfblk163_out1)  // uint8
                       );

  assign cfblk134_out1 = cfblk163_out1 - cfblk138_out1;



  assign cfblk30_out1 = cfblk99_out1 - cfblk164_out1;



  assign dtc_out_8 = cfblk30_out1;



  assign cfblk113_out1 = dtc_out_8;



  assign cfblk108_out1 = cfblk113_out1 + cfblk6_out1;



  assign cfblk106_out1 = cfblk108_out1 + cfblk106_const_val_1;



  DotProduct_block7 u_cfblk72_inst (.in1(cfblk106_out1),  // uint8
                                    .in2(cfblk134_out1),  // uint8
                                    .out1(cfblk72_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk72_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  assign cfblk124_out1 = cfblk184_out1 + cfblk135_out1;



  assign cfblk78_out1 = cfblk124_out1 + cfblk78_const_val_1;



  assign cfblk47_out1 = cfblk78_out1 + cfblk17_out1;



  assign cfblk37_out1 = cfblk47_out1 + cfblk37_const_val_1;



  assign cfblk91_out1 = cfblk37_out1 + cfblk91_const_val_1;



  assign cfblk58_out1 = cfblk91_out1 + cfblk106_out1;



  assign dtc_out_9 = cfblk58_out1;



  assign cfblk84_out1 = dtc_out_9;



  DotProduct_block3 u_cfblk21_inst (.in1(cfblk84_out1),  // uint8
                                    .in2(cfblk67_out1),  // uint8
                                    .out1(cfblk21_out1)  // uint8
                                    );

  assign cfblk42_out1 = cfblk13_out1 - cfblk21_out1;



  DotProduct_block6 u_cfblk66_inst (.in1(cfblk155_out1),  // uint8
                                    .in2(cfblk94_out1),  // uint8
                                    .out1(cfblk66_out1)  // uint8
                                    );

  assign cfblk16_out1 = cfblk66_out1 - cfblk42_out1;



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk16_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  cfblk161 u_cfblk161 (.In1(cfblk3_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk161_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk136_out1 = cfblk173_out1 + cfblk39_out1;



  assign cfblk34_out1 = cfblk136_out1 - cfblk187_out1;



  assign dtc_out_10 = cfblk34_out1;



  assign cfblk82_out1 = dtc_out_10;



  assign cfblk24_out1 = cfblk82_out1 + cfblk194_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk6_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  DotProduct_block u_cfblk12_inst (.in1(cfblk191_out1),  // uint8
                                   .in2(cfblk24_out1),  // uint8
                                   .out1(cfblk12_out1)  // uint8
                                   );

  always @(cfblk12_out1, cfblk67_out1) begin
    cfblk123_div_temp = 9'b000000000;
    cfblk123_t_0_0 = 9'b000000000;
    if (cfblk12_out1 == 8'b00000000) begin
      cfblk123_out1 = 8'b11111111;
    end
    else begin
      cfblk123_t_0_0 = {1'b0, cfblk67_out1};
      cfblk123_div_temp = cfblk123_t_0_0 / cfblk12_out1;
      if (cfblk123_div_temp[8] != 1'b0) begin
        cfblk123_out1 = 8'b11111111;
      end
      else begin
        cfblk123_out1 = cfblk123_div_temp[7:0];
      end
    end
  end



  assign cfblk45_out1 = cfblk123_out1 + cfblk100_out1;



  assign cfblk146_out1 = (cfblk45_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk67_out1 = (cfblk94_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block9 u_cfblk8_inst (.in1(cfblk13_out1),  // uint8
                                   .in2(cfblk67_out1),  // uint8
                                   .out1(cfblk8_out1)  // uint8
                                   );

  cfblk4 u_cfblk4 (.u(cfblk8_out1),  // uint8
                   .y(cfblk4_out1)  // uint8
                   );

  always @(cfblk146_out1, cfblk4_out1) begin
    cfblk117_div_temp = 9'b000000000;
    cfblk117_t_0_0 = 9'b000000000;
    if (cfblk146_out1 == 8'b00000000) begin
      cfblk117_out1 = 8'b11111111;
    end
    else begin
      cfblk117_t_0_0 = {1'b0, cfblk4_out1};
      cfblk117_div_temp = cfblk117_t_0_0 / cfblk146_out1;
      if (cfblk117_div_temp[8] != 1'b0) begin
        cfblk117_out1 = 8'b11111111;
      end
      else begin
        cfblk117_out1 = cfblk117_div_temp[7:0];
      end
    end
  end



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk117_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign dtc_out_11 = cfblk2_out1;



  assign cfblk25_out1 = dtc_out_11;



  assign cfblk51_out1 = (cfblk25_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_12 = cfblk51_out1;



  assign cfblk132_out1 = dtc_out_12;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk132_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk94_out1 = cfblk178_out1 + cfblk13_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk94_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  DotProduct_block1 u_cfblk13_inst (.in1(cfblk170_out1),  // uint8
                                    .in2(cfblk119_out1),  // uint8
                                    .out1(cfblk13_out1)  // uint8
                                    );

  assign cfblk6_out1 = cfblk13_out1 & bitMask_for_cfblk6;



  assign cfblk99_out1 = cfblk6_out1 + cfblk99_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk99_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk190_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk38_out1 = cfblk1_out1 + cfblk183_out1;



  assign dtc_out_13 = cfblk38_out1;



  assign cfblk98_out1 = dtc_out_13;



  assign dtc_out_14 = cfblk98_out1;



  assign cfblk17_out1 = dtc_out_14;



  assign cfblk151 = cfblk17_out1;

  assign cfblk152 = cfblk24_out1;

  assign Hdl_out = cfblk13_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

