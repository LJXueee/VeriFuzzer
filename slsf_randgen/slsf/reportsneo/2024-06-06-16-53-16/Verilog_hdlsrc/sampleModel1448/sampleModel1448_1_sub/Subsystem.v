// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1448\sampleModel1448_1_sub\Subsystem.v
// Created: 2024-07-01 00:40:42
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1448_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk115_const_val_1;  // uint8
  wire [15:0] cfblk147_out1;  // uint16
  wire [7:0] cfblk211_out1;  // uint8
  wire [7:0] cfblk105_const_val_1;  // uint8
  wire [7:0] cfblk83_const_val_1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [15:0] Mysubsystem_42_out1;  // uint16
  wire [15:0] Mysubsystem_42_out2;  // uint16
  wire [7:0] Mysubsystem_21_out1;  // uint8
  wire [7:0] cfblk123_const_val_1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk140_const_val_1;  // uint8
  wire [7:0] cfblk67_const_val_1;  // uint8
  wire [7:0] cfblk131_const_val_1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  reg [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  reg [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  reg [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire cfblk5_relop1;
  reg  [0:1] cfblk160_reg;  // ufix1 [2]
  wire [0:1] cfblk160_reg_next;  // ufix1 [2]
  wire cfblk160_out1;
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [31:0] dtc_out_7;  // ufix32
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [31:0] cfblk92_add_temp;  // ufix32
  wire [31:0] cfblk92_1;  // ufix32
  wire [31:0] cfblk92_2;  // ufix32
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk127_out1;  // uint8
  wire signed [31:0] cfblk44_sub_temp;  // sfix32
  wire signed [31:0] cfblk44_1;  // sfix32
  wire signed [31:0] cfblk44_2;  // sfix32
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  reg [7:0] cfblk134_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire cfblk186_out1_is_not0;
  wire cfblk159_out1_is_not0;
  wire cfblk2_out1;
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] dtc_out_13;  // ufix8
  reg [8:0] cfblk37_div_temp;  // ufix9
  reg [8:0] cfblk37_t_0_0;  // ufix9
  reg [8:0] cfblk137_div_temp;  // ufix9
  reg [8:0] cfblk137_t_0_0;  // ufix9
  reg [8:0] cfblk74_div_temp;  // ufix9
  reg [8:0] cfblk74_t_0_0;  // ufix9
  reg [7:0] cfblk133_div_temp;  // ufix8
  reg [8:0] cfblk21_div_temp;  // ufix9
  reg [8:0] cfblk21_t_0_0;  // ufix9
  reg [8:0] cfblk27_div_temp;  // ufix9
  reg [8:0] cfblk27_t_0_0;  // ufix9
  reg [8:0] cfblk134_div_temp;  // ufix9
  reg [8:0] cfblk134_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk148_out1 = 8'b00000001;



  assign cfblk115_const_val_1 = 8'b00000000;



  cfblk147 u_cfblk147 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk147_out1)  // uint16
                       );

  assign cfblk211_out1 = cfblk147_out1[7:0];



  assign cfblk105_const_val_1 = 8'b00000000;



  assign cfblk83_const_val_1 = 8'b00000000;



  assign cfblk6_out1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk6_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk1_out1 = 8'b00000000;



  assign cfblk51_out1 = (cfblk1_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk4_out1 = cfblk51_out1 | 8'b00000001;



  Mysubsystem_42 u_Mysubsystem_42 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .y(Mysubsystem_42_out1),  // uint16
                                   .Out2(Mysubsystem_42_out2)  // uint16
                                   );

  Mysubsystem_21 u_Mysubsystem_21 (.In1(Mysubsystem_42_out2),  // uint16
                                   .Out1(Mysubsystem_21_out1)  // uint8
                                   );

  assign cfblk123_const_val_1 = 8'b00000000;



  assign cfblk149_out1 = 8'b00000000;



  assign cfblk53_out1 = (cfblk149_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk140_const_val_1 = 8'b00000000;



  assign cfblk67_const_val_1 = 8'b00000000;



  assign cfblk131_const_val_1 = 8'b00000000;



  assign cfblk8_out1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk67_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk16_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  assign cfblk93_out1 = cfblk8_out1 + cfblk179_out1;



  DotProduct_block3 u_cfblk129_inst (.in1(cfblk93_out1),  // uint8
                                     .in2(cfblk181_out1),  // uint8
                                     .out1(cfblk129_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk25_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign dtc_out = cfblk75_out1;



  assign cfblk141_out1 = dtc_out;



  assign cfblk25_out1 = cfblk141_out1 - cfblk177_out1;



  assign cfblk84_out1 = cfblk105_out1 - cfblk25_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk84_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  DotProduct_block9 u_cfblk70_inst (.in1(cfblk131_out1),  // uint8
                                    .in2(cfblk178_out1),  // uint8
                                    .out1(cfblk70_out1)  // uint8
                                    );

  assign cfblk138_out1 = cfblk6_out1 + cfblk70_out1;



  assign dtc_out_1 = cfblk138_out1;



  assign cfblk96_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk96_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk29_out1 = (cfblk64_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk29_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  always @(cfblk122_out1, cfblk162_out1) begin
    cfblk37_div_temp = 9'b000000000;
    cfblk37_t_0_0 = 9'b000000000;
    if (cfblk162_out1 == 8'b00000000) begin
      cfblk37_out1 = 8'b11111111;
    end
    else begin
      cfblk37_t_0_0 = {1'b0, cfblk122_out1};
      cfblk37_div_temp = cfblk37_t_0_0 / cfblk162_out1;
      if (cfblk37_div_temp[8] != 1'b0) begin
        cfblk37_out1 = 8'b11111111;
      end
      else begin
        cfblk37_out1 = cfblk37_div_temp[7:0];
      end
    end
  end



  assign cfblk100_out1 = cfblk18_out1 + cfblk27_out1;



  assign cfblk45_out1 = cfblk137_out1 + cfblk100_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk45_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  always @(cfblk171_out1, cfblk37_out1) begin
    cfblk137_div_temp = 9'b000000000;
    cfblk137_t_0_0 = 9'b000000000;
    if (cfblk37_out1 == 8'b00000000) begin
      cfblk137_out1 = 8'b11111111;
    end
    else begin
      cfblk137_t_0_0 = {1'b0, cfblk171_out1};
      cfblk137_div_temp = cfblk137_t_0_0 / cfblk37_out1;
      if (cfblk137_div_temp[8] != 1'b0) begin
        cfblk137_out1 = 8'b11111111;
      end
      else begin
        cfblk137_out1 = cfblk137_div_temp[7:0];
      end
    end
  end



  assign cfblk34_out1 = cfblk137_out1 + cfblk170_out1;



  assign cfblk131_out1 = cfblk34_out1 + cfblk131_const_val_1;



  cfblk152 u_cfblk152 (.In1(cfblk98_out1),  // uint8
                       .Out1(cfblk152_out1)  // uint8
                       );

  DotProduct_block10 u_cfblk75_inst (.in1(cfblk152_out1),  // uint8
                                     .in2(cfblk151_out1),  // uint8
                                     .out1(cfblk75_out1)  // uint8
                                     );

  assign dtc_out_2 = cfblk18_out1;



  assign cfblk24_out1 = dtc_out_2;



  assign dtc_out_3 = cfblk24_out1;



  assign cfblk33_out1 = dtc_out_3;



  assign cfblk140_out1 = cfblk14_out1 + cfblk140_const_val_1;



  DotProduct u_cfblk101_inst (.in1(cfblk140_out1),  // uint8
                              .in2(cfblk21_out1),  // uint8
                              .out1(cfblk101_out1)  // uint8
                              );

  always @(cfblk101_out1, cfblk39_out1) begin
    cfblk74_div_temp = 9'b000000000;
    cfblk74_t_0_0 = 9'b000000000;
    if (cfblk39_out1 == 8'b00000000) begin
      cfblk74_out1 = 8'b11111111;
    end
    else begin
      cfblk74_t_0_0 = {1'b0, cfblk101_out1};
      cfblk74_div_temp = cfblk74_t_0_0 / cfblk39_out1;
      if (cfblk74_div_temp[8] != 1'b0) begin
        cfblk74_out1 = 8'b11111111;
      end
      else begin
        cfblk74_out1 = cfblk74_div_temp[7:0];
      end
    end
  end



  DotProduct_block8 u_cfblk66_inst (.in1(cfblk133_out1),  // uint8
                                    .in2(cfblk74_out1),  // uint8
                                    .out1(cfblk66_out1)  // uint8
                                    );

  assign dtc_out_4 = cfblk66_out1;



  assign cfblk52_out1 = dtc_out_4;



  assign cfblk41_out1 = (cfblk52_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk41_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk117_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  DotProduct_block6 u_cfblk14_inst (.in1(cfblk136_out1),  // uint8
                                    .in2(Mysubsystem_21_out1),  // uint8
                                    .out1(cfblk14_out1)  // uint8
                                    );

  assign cfblk11_out1 = cfblk14_out1 - cfblk113_out1;



  assign cfblk126_out1 = cfblk11_out1 + cfblk39_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk126_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign dtc_out_5 = cfblk3_out1;



  assign cfblk113_out1 = dtc_out_5;



  cfblk153 u_cfblk153 (.In1(cfblk113_out1),  // uint8
                       .Out1(cfblk153_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk153_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 1'b0;
        cfblk160_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk5_relop1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(cfblk160_out1, cfblk4_out1) begin
    cfblk133_div_temp = 8'b00000000;
    if (cfblk4_out1 == 8'b00000000) begin
      cfblk133_out1 = 8'b11111111;
    end
    else begin
      cfblk133_div_temp = cfblk160_out1 / cfblk4_out1;
      cfblk133_out1 = cfblk133_div_temp;
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk110_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk80_out1 = cfblk174_out1 + cfblk133_out1;



  assign dtc_out_6 = cfblk92_out1;



  assign cfblk110_out1 = dtc_out_6;



  assign cfblk58_out1 = cfblk82_out1 + cfblk110_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk58_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk5_relop1 = cfblk175_out1 <= cfblk80_out1;



  assign dtc_out_7 = {31'b0, cfblk5_relop1};



  assign cfblk39_out1 = dtc_out_7[7:0];



  assign cfblk46_out1 = cfblk39_out1 + cfblk166_out1;



  assign dtc_out_8 = cfblk46_out1;



  assign cfblk81_out1 = dtc_out_8;



  cfblk10 u_cfblk10 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .U(cfblk81_out1),  // uint8
                     .Y(cfblk10_out1)  // uint8
                     );

  assign cfblk40_out1 = cfblk10_out1 - cfblk167_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk117_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk72_out1 = cfblk163_out1 + cfblk40_out1;



  assign dtc_out_9 = cfblk72_out1;



  assign cfblk30_out1 = dtc_out_9;



  DotProduct_block7 u_cfblk63_inst (.in1(cfblk30_out1),  // uint8
                                    .in2(cfblk164_out1),  // uint8
                                    .out1(cfblk63_out1)  // uint8
                                    );

  assign cfblk97_out1 = cfblk18_out1 - cfblk63_out1;



  cfblk154 u_cfblk154 (.In1(cfblk139_out1),  // uint8
                       .Out1(cfblk154_out1)  // uint8
                       );

  assign cfblk88_out1 = cfblk154_out1 - cfblk97_out1;



  assign cfblk92_1 = {24'b0, cfblk88_out1};
  assign cfblk92_2 = {16'b0, Mysubsystem_42_out1};
  assign cfblk92_add_temp = cfblk92_1 + cfblk92_2;
  assign cfblk92_out1 = cfblk92_add_temp[7:0];



  cfblk151 u_cfblk151 (.In1(cfblk92_out1),  // uint8
                       .Out1(cfblk151_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk151_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk139_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  cfblk3 u_cfblk3 (.u(cfblk102_out1),  // uint8
                   .y(cfblk3_out1)  // uint8
                   );

  assign cfblk83_out1 = cfblk3_out1 + cfblk83_const_val_1;



  assign cfblk47_out1 = cfblk83_out1 - cfblk90_out1;



  assign cfblk71_out1 = cfblk38_out1 + cfblk47_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk71_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk77_out1 = cfblk165_out1 - cfblk128_out1;



  assign cfblk17_out1 = cfblk77_out1 + cfblk184_out1;



  assign dtc_out_10 = cfblk17_out1;



  assign cfblk87_out1 = dtc_out_10;



  assign cfblk13_out1 = cfblk87_out1 + cfblk169_out1;



  assign cfblk64_out1 = cfblk13_out1 + cfblk176_out1;



  cfblk9 u_cfblk9 (.u(cfblk64_out1),  // uint8
                   .y(cfblk9_out1)  // uint8
                   );

  assign cfblk135_out1 = (cfblk9_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk105_out1 = cfblk98_out1 + cfblk105_const_val_1;



  assign cfblk124_out1 = cfblk105_out1 + cfblk135_out1;



  assign dtc_out_11 = cfblk124_out1;



  assign cfblk103_out1 = dtc_out_11;



  assign cfblk123_out1 = cfblk103_out1 + cfblk123_const_val_1;



  assign dtc_out_12 = cfblk123_out1;



  assign cfblk127_out1 = dtc_out_12;



  DotProduct_block5 u_cfblk139_inst (.in1(cfblk127_out1),  // uint8
                                     .in2(cfblk53_out1),  // uint8
                                     .out1(cfblk139_out1)  // uint8
                                     );

  DotProduct_block1 u_cfblk117_inst (.in1(cfblk139_out1),  // uint8
                                     .in2(cfblk172_out1),  // uint8
                                     .out1(cfblk117_out1)  // uint8
                                     );

  assign cfblk18_out1 = cfblk122_out1 + cfblk117_out1;



  assign cfblk44_1 = {24'b0, cfblk67_out1};
  assign cfblk44_2 = {16'b0, cfblk147_out1};
  assign cfblk44_sub_temp = cfblk44_1 - cfblk44_2;
  assign cfblk44_out1 = cfblk44_sub_temp[7:0];



  assign cfblk32_out1 = cfblk44_out1 + cfblk18_out1;



  always @(cfblk211_out1, cfblk32_out1) begin
    cfblk21_div_temp = 9'b000000000;
    cfblk21_t_0_0 = 9'b000000000;
    if (cfblk32_out1 == 8'b00000000) begin
      cfblk21_out1 = 8'b11111111;
    end
    else begin
      cfblk21_t_0_0 = {1'b0, cfblk211_out1};
      cfblk21_div_temp = cfblk21_t_0_0 / cfblk32_out1;
      if (cfblk21_div_temp[8] != 1'b0) begin
        cfblk21_out1 = 8'b11111111;
      end
      else begin
        cfblk21_out1 = cfblk21_div_temp[7:0];
      end
    end
  end



  DotProduct_block u_cfblk102_inst (.in1(cfblk21_out1),  // uint8
                                    .in2(cfblk33_out1),  // uint8
                                    .out1(cfblk102_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk102_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk134_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk155_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  assign cfblk186_out1_is_not0 = cfblk186_out1 != 8'b00000000;



  assign cfblk159_out1_is_not0 = cfblk38_out1 != 8'b00000000;



  assign cfblk2_out1 = cfblk159_out1_is_not0 & cfblk186_out1_is_not0;



  assign cfblk157_out1 = (cfblk2_out1 == 1'b0 ? cfblk148_out1 :
              cfblk185_out1);



  cfblk155 u_cfblk155 (.In1(cfblk157_out1),  // uint8
                       .Out1(cfblk155_out1)  // uint8
                       );

  assign cfblk115_out1 = cfblk155_out1 + cfblk115_const_val_1;



  assign cfblk98_out1 = (cfblk115_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block2 u_cfblk122_inst (.in1(cfblk98_out1),  // uint8
                                     .in2(cfblk168_out1),  // uint8
                                     .out1(cfblk122_out1)  // uint8
                                     );

  DotProduct_block11 u_cfblk82_inst (.in1(cfblk122_out1),  // uint8
                                     .in2(cfblk75_out1),  // uint8
                                     .out1(cfblk82_out1)  // uint8
                                     );

  assign cfblk16_out1 = (cfblk82_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk35_out1 = cfblk89_out1 + cfblk134_out1;



  assign cfblk128_out1 = (cfblk35_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk128_out1, cfblk16_out1) begin
    cfblk27_div_temp = 9'b000000000;
    cfblk27_t_0_0 = 9'b000000000;
    if (cfblk16_out1 == 8'b00000000) begin
      cfblk27_out1 = 8'b11111111;
    end
    else begin
      cfblk27_t_0_0 = {1'b0, cfblk128_out1};
      cfblk27_div_temp = cfblk27_t_0_0 / cfblk16_out1;
      if (cfblk27_div_temp[8] != 1'b0) begin
        cfblk27_out1 = 8'b11111111;
      end
      else begin
        cfblk27_out1 = cfblk27_div_temp[7:0];
      end
    end
  end



  assign cfblk67_out1 = cfblk27_out1 + cfblk67_const_val_1;



  assign cfblk31_out1 = cfblk67_out1 + cfblk131_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk31_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  always @(cfblk129_out1, cfblk180_out1) begin
    cfblk134_div_temp = 9'b000000000;
    cfblk134_t_0_0 = 9'b000000000;
    if (cfblk129_out1 == 8'b00000000) begin
      cfblk134_out1 = 8'b11111111;
    end
    else begin
      cfblk134_t_0_0 = {1'b0, cfblk180_out1};
      cfblk134_div_temp = cfblk134_t_0_0 / cfblk129_out1;
      if (cfblk134_div_temp[8] != 1'b0) begin
        cfblk134_out1 = 8'b11111111;
      end
      else begin
        cfblk134_out1 = cfblk134_div_temp[7:0];
      end
    end
  end



  assign cfblk89_out1 = (cfblk134_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk89_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  assign dtc_out_13 = cfblk161_out1;



  assign cfblk38_out1 = dtc_out_13;



  assign cfblk90_out1 = cfblk38_out1 + cfblk141_out1;



  DotProduct_block4 u_cfblk136_inst (.in1(cfblk90_out1),  // uint8
                                     .in2(cfblk53_out1),  // uint8
                                     .out1(cfblk136_out1)  // uint8
                                     );

  assign Hdl_out = cfblk136_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

