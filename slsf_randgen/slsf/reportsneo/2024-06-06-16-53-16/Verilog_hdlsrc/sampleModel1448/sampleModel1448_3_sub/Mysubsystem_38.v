// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1448\sampleModel1448_3_sub\Mysubsystem_38.v
// Created: 2024-08-12 06:44:13
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Mysubsystem_38
// Source Path: sampleModel1448_3_sub/Subsystem/Mysubsystem_38
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Mysubsystem_38
          (clk,
           reset,
           enb,
           In1,
           u,
           In3,
           Out1,
           Out2);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] In1;  // uint8
  input   [7:0] u;  // uint8
  input   [7:0] In3;  // uint8
  output  [7:0] Out1;  // uint8
  output  [7:0] Out2;  // uint8


  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire cfblk5_relop1;
  reg  [0:1] cfblk160_reg;  // ufix1 [2]
  wire [0:1] cfblk160_reg_next;  // ufix1 [2]
  wire cfblk160_out1;
  reg [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [31:0] dtc_out;  // ufix32
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk133_div_temp;  // ufix8


  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = In1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = In3;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk4_out1 = u | 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 1'b0;
        cfblk160_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk5_relop1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(cfblk160_out1, cfblk4_out1) begin
    cfblk133_div_temp = 8'b00000000;
    if (cfblk4_out1 == 8'b00000000) begin
      cfblk133_out1 = 8'b11111111;
    end
    else begin
      cfblk133_div_temp = cfblk160_out1 / cfblk4_out1;
      cfblk133_out1 = cfblk133_div_temp;
    end
  end



  assign cfblk80_out1 = cfblk174_out1 + cfblk133_out1;



  assign cfblk5_relop1 = cfblk175_out1 <= cfblk80_out1;



  assign dtc_out = {31'b0, cfblk5_relop1};



  assign cfblk39_out1 = dtc_out[7:0];



  assign Out1 = cfblk39_out1;

  assign Out2 = cfblk133_out1;

endmodule  // Mysubsystem_38

