// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1668\sampleModel1668_1_sub\Subsystem.v
// Created: 2024-08-13 11:40:10
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1668_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk65_const_val_1;  // uint8
  wire [7:0] cfblk130_const_val_1;  // uint8
  wire [7:0] cfblk126_const_val_1;  // uint8
  wire [15:0] Mysubsystem_12_out1;  // uint16
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk90_const_val_1;  // uint8
  wire [7:0] cfblk12_const_val_1;  // uint8
  wire [7:0] cfblk104_const_val_1;  // uint8
  wire [15:0] cfblk134_out1;  // uint16
  wire [7:0] cfblk45_const_val_1;  // uint8
  wire [7:0] cfblk55_const_val_1;  // uint8
  wire [7:0] cfblk61_const_val_1;  // uint8
  wire [7:0] cfblk83_const_val_1;  // uint8
  wire [7:0] cfblk131_const_val_1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  reg [7:0] cfblk40_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk17_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk59_out1;  // uint8
  reg [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk33_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  reg [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [31:0] cfblk69_add_temp;  // ufix32
  wire [31:0] cfblk69_1;  // ufix32
  wire [31:0] cfblk69_2;  // ufix32
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire Mysubsystem_29_out1;
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  reg [8:0] cfblk17_div_temp;  // ufix9
  reg [8:0] cfblk17_t_0_0;  // ufix9
  reg [8:0] cfblk25_div_temp;  // ufix9
  reg [8:0] cfblk25_t_0_0;  // ufix9
  reg [8:0] cfblk98_div_temp;  // ufix9
  reg [8:0] cfblk98_t_0_0;  // ufix9
  reg [15:0] cfblk67_varargout_1;  // ufix16
  reg [16:0] cfblk67_div_temp;  // ufix17
  reg [16:0] cfblk67_t_0_0;  // ufix17
  reg [8:0] cfblk132_div_temp;  // ufix9
  reg [8:0] cfblk132_t_0_0;  // ufix9
  reg [8:0] cfblk40_div_temp;  // ufix9
  reg [8:0] cfblk40_t_0_0;  // ufix9
  reg [8:0] cfblk117_div_temp;  // ufix9
  reg [8:0] cfblk117_t_0_0;  // ufix9
  reg [8:0] cfblk34_div_temp;  // ufix9
  reg [8:0] cfblk34_t_0_0;  // ufix9
  reg [8:0] cfblk30_div_temp;  // ufix9
  reg [8:0] cfblk30_t_0_0;  // ufix9
  reg [8:0] cfblk42_div_temp;  // ufix9
  reg [8:0] cfblk42_t_0_0;  // ufix9
  reg [8:0] cfblk33_div_temp;  // ufix9
  reg [8:0] cfblk33_t_0_0;  // ufix9


  assign cfblk65_const_val_1 = 8'b00000000;



  assign cfblk130_const_val_1 = 8'b00000000;



  assign cfblk126_const_val_1 = 8'b00000000;



  Mysubsystem_12 u_Mysubsystem_12 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_12_out1)  // uint16
                                   );

  assign enb = clk_enable;

  assign cfblk135_out1 = 8'b00000001;



  assign cfblk90_const_val_1 = 8'b00000000;



  assign cfblk12_const_val_1 = 8'b00000000;



  assign cfblk104_const_val_1 = 8'b00000000;



  cfblk134 u_cfblk134 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk134_out1)  // uint16
                       );

  assign cfblk45_const_val_1 = 8'b00000000;



  assign cfblk55_const_val_1 = 8'b00000000;



  assign cfblk61_const_val_1 = 8'b00000000;



  assign cfblk83_const_val_1 = 8'b00000000;



  assign cfblk131_const_val_1 = 8'b00000000;



  assign cfblk37_out1 = cfblk55_out1 + cfblk86_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk37_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk122_out1 = cfblk162_out1 + cfblk8_out1;



  assign dtc_out = cfblk106_out1;



  assign cfblk121_out1 = dtc_out;



  assign cfblk102_out1 = cfblk121_out1 + cfblk24_out1;



  assign dtc_out_1 = cfblk102_out1;



  assign cfblk46_out1 = dtc_out_1;



  cfblk6 u_cfblk6 (.u(cfblk30_out1),  // uint8
                   .y(cfblk6_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk30_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk86_out1 = cfblk89_out1 + cfblk40_out1;



  assign dtc_out_2 = cfblk86_out1;



  assign cfblk56_out1 = dtc_out_2;



  assign cfblk61_out1 = cfblk56_out1 + cfblk61_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk61_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk62_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk9_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  always @(cfblk106_out1, cfblk53_out1) begin
    cfblk17_div_temp = 9'b000000000;
    cfblk17_t_0_0 = 9'b000000000;
    if (cfblk53_out1 == 8'b00000000) begin
      cfblk17_out1 = 8'b11111111;
    end
    else begin
      cfblk17_t_0_0 = {1'b0, cfblk106_out1};
      cfblk17_div_temp = cfblk17_t_0_0 / cfblk53_out1;
      if (cfblk17_div_temp[8] != 1'b0) begin
        cfblk17_out1 = 8'b11111111;
      end
      else begin
        cfblk17_out1 = cfblk17_div_temp[7:0];
      end
    end
  end



  assign dtc_out_3 = cfblk17_out1;



  assign cfblk59_out1 = dtc_out_3;



  always @(cfblk59_out1, cfblk62_out1) begin
    cfblk25_div_temp = 9'b000000000;
    cfblk25_t_0_0 = 9'b000000000;
    if (cfblk62_out1 == 8'b00000000) begin
      cfblk25_out1 = 8'b11111111;
    end
    else begin
      cfblk25_t_0_0 = {1'b0, cfblk59_out1};
      cfblk25_div_temp = cfblk25_t_0_0 / cfblk62_out1;
      if (cfblk25_div_temp[8] != 1'b0) begin
        cfblk25_out1 = 8'b11111111;
      end
      else begin
        cfblk25_out1 = cfblk25_div_temp[7:0];
      end
    end
  end



  always @(cfblk19_out1, cfblk53_out1) begin
    cfblk98_div_temp = 9'b000000000;
    cfblk98_t_0_0 = 9'b000000000;
    if (cfblk19_out1 == 8'b00000000) begin
      cfblk98_out1 = 8'b11111111;
    end
    else begin
      cfblk98_t_0_0 = {1'b0, cfblk53_out1};
      cfblk98_div_temp = cfblk98_t_0_0 / cfblk19_out1;
      if (cfblk98_div_temp[8] != 1'b0) begin
        cfblk98_out1 = 8'b11111111;
      end
      else begin
        cfblk98_out1 = cfblk98_div_temp[7:0];
      end
    end
  end



  assign cfblk52_out1 = (cfblk98_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk45_out1 = cfblk52_out1 + cfblk45_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk45_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk8_out1 = cfblk159_out1 + cfblk132_out1;



  always @(cfblk134_out1, cfblk8_out1) begin
    cfblk67_div_temp = 17'b00000000000000000;
    cfblk67_t_0_0 = 17'b00000000000000000;
    if (cfblk8_out1 == 8'b00000000) begin
      cfblk67_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk67_t_0_0 = {1'b0, cfblk134_out1};
      cfblk67_div_temp = cfblk67_t_0_0 / cfblk8_out1;
      if (cfblk67_div_temp[16] != 1'b0) begin
        cfblk67_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk67_varargout_1 = cfblk67_div_temp[15:0];
      end
    end
    if (cfblk67_varargout_1[15:8] != 8'b00000000) begin
      cfblk67_out1 = 8'b11111111;
    end
    else begin
      cfblk67_out1 = cfblk67_varargout_1[7:0];
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk67_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  assign cfblk127_out1 = (cfblk24_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk112_out1 = cfblk65_out1 + cfblk35_out1;



  assign cfblk12_out1 = cfblk112_out1 + cfblk12_const_val_1;



  assign cfblk104_out1 = cfblk12_out1 + cfblk104_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk104_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk116_out1 = cfblk164_out1 + cfblk127_out1;



  always @(cfblk116_out1, cfblk160_out1) begin
    cfblk132_div_temp = 9'b000000000;
    cfblk132_t_0_0 = 9'b000000000;
    if (cfblk160_out1 == 8'b00000000) begin
      cfblk132_out1 = 8'b11111111;
    end
    else begin
      cfblk132_t_0_0 = {1'b0, cfblk116_out1};
      cfblk132_div_temp = cfblk132_t_0_0 / cfblk160_out1;
      if (cfblk132_div_temp[8] != 1'b0) begin
        cfblk132_out1 = 8'b11111111;
      end
      else begin
        cfblk132_out1 = cfblk132_div_temp[7:0];
      end
    end
  end



  assign cfblk11_out1 = cfblk132_out1 - cfblk109_out1;



  DotProduct_block1 u_cfblk38_inst (.in1(cfblk11_out1),  // uint8
                                    .in2(cfblk25_out1),  // uint8
                                    .out1(cfblk38_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk38_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  assign cfblk90_out1 = cfblk74_out1 + cfblk90_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk90_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk34_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk93_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk35_out1 = cfblk107_out1 - cfblk156_out1;



  assign cfblk91_out1 = cfblk35_out1 + cfblk161_out1;



  DotProduct u_cfblk120_inst (.in1(cfblk91_out1),  // uint8
                              .in2(cfblk149_out1),  // uint8
                              .out1(cfblk120_out1)  // uint8
                              );

  always @(cfblk120_out1, cfblk155_out1) begin
    cfblk40_div_temp = 9'b000000000;
    cfblk40_t_0_0 = 9'b000000000;
    if (cfblk155_out1 == 8'b00000000) begin
      cfblk40_out1 = 8'b11111111;
    end
    else begin
      cfblk40_t_0_0 = {1'b0, cfblk120_out1};
      cfblk40_div_temp = cfblk40_t_0_0 / cfblk155_out1;
      if (cfblk40_div_temp[8] != 1'b0) begin
        cfblk40_out1 = 8'b11111111;
      end
      else begin
        cfblk40_out1 = cfblk40_div_temp[7:0];
      end
    end
  end



  assign cfblk106_out1 = cfblk87_out1 + cfblk40_out1;



  assign cfblk72_out1 = cfblk15_out1 - cfblk135_out1;



  assign cfblk84_out1 = cfblk72_out1 - cfblk106_out1;



  assign cfblk55_out1 = cfblk84_out1 + cfblk55_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk111_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  assign cfblk9_out1 = cfblk33_out1 + cfblk33_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk9_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk10_out1 = cfblk81_out1 - cfblk71_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk10_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  always @(cfblk148_out1, cfblk33_out1) begin
    cfblk117_div_temp = 9'b000000000;
    cfblk117_t_0_0 = 9'b000000000;
    if (cfblk148_out1 == 8'b00000000) begin
      cfblk117_out1 = 8'b11111111;
    end
    else begin
      cfblk117_t_0_0 = {1'b0, cfblk33_out1};
      cfblk117_div_temp = cfblk117_t_0_0 / cfblk148_out1;
      if (cfblk117_div_temp[8] != 1'b0) begin
        cfblk117_out1 = 8'b11111111;
      end
      else begin
        cfblk117_out1 = cfblk117_div_temp[7:0];
      end
    end
  end



  always @(cfblk117_out1, cfblk135_out1) begin
    cfblk34_div_temp = 9'b000000000;
    cfblk34_t_0_0 = 9'b000000000;
    if (cfblk117_out1 == 8'b00000000) begin
      cfblk34_out1 = 8'b11111111;
    end
    else begin
      cfblk34_t_0_0 = {1'b0, cfblk135_out1};
      cfblk34_div_temp = cfblk34_t_0_0 / cfblk117_out1;
      if (cfblk34_div_temp[8] != 1'b0) begin
        cfblk34_out1 = 8'b11111111;
      end
      else begin
        cfblk34_out1 = cfblk34_div_temp[7:0];
      end
    end
  end



  assign cfblk53_out1 = cfblk34_out1 + cfblk152_out1;



  assign cfblk62_out1 = cfblk53_out1 - cfblk153_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk111_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk115_out1 = cfblk157_out1 - cfblk62_out1;



  assign cfblk79_out1 = cfblk115_out1 + cfblk55_out1;



  always @(cfblk151_out1, cfblk79_out1) begin
    cfblk30_div_temp = 9'b000000000;
    cfblk30_t_0_0 = 9'b000000000;
    if (cfblk151_out1 == 8'b00000000) begin
      cfblk30_out1 = 8'b11111111;
    end
    else begin
      cfblk30_t_0_0 = {1'b0, cfblk79_out1};
      cfblk30_div_temp = cfblk30_t_0_0 / cfblk151_out1;
      if (cfblk30_div_temp[8] != 1'b0) begin
        cfblk30_out1 = 8'b11111111;
      end
      else begin
        cfblk30_out1 = cfblk30_div_temp[7:0];
      end
    end
  end



  DotProduct_block2 u_cfblk50_inst (.in1(cfblk135_out1),  // uint8
                                    .in2(cfblk30_out1),  // uint8
                                    .out1(cfblk50_out1)  // uint8
                                    );

  assign dtc_out_4 = cfblk50_out1;



  assign cfblk119_out1 = dtc_out_4;



  assign cfblk54_out1 = (cfblk119_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk54_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  DotProduct_block u_cfblk14_inst (.in1(cfblk143_out1),  // uint8
                                   .in2(cfblk24_out1),  // uint8
                                   .out1(cfblk14_out1)  // uint8
                                   );

  assign cfblk100_out1 = cfblk14_out1 - cfblk19_out1;



  assign cfblk107_out1 = cfblk100_out1 - cfblk142_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk107_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk57_out1 = cfblk131_out1 + cfblk81_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk57_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk42_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk19_out1 = cfblk118_out1 - cfblk167_out1;



  assign cfblk71_out1 = cfblk19_out1 - cfblk147_out1;



  always @(cfblk126_out1, cfblk71_out1) begin
    cfblk42_div_temp = 9'b000000000;
    cfblk42_t_0_0 = 9'b000000000;
    if (cfblk126_out1 == 8'b00000000) begin
      cfblk42_out1 = 8'b11111111;
    end
    else begin
      cfblk42_t_0_0 = {1'b0, cfblk71_out1};
      cfblk42_div_temp = cfblk42_t_0_0 / cfblk126_out1;
      if (cfblk42_div_temp[8] != 1'b0) begin
        cfblk42_out1 = 8'b11111111;
      end
      else begin
        cfblk42_out1 = cfblk42_div_temp[7:0];
      end
    end
  end



  assign cfblk15_out1 = cfblk42_out1 + cfblk166_out1;



  DotProduct_block3 u_cfblk76_inst (.in1(cfblk15_out1),  // uint8
                                    .in2(cfblk165_out1),  // uint8
                                    .out1(cfblk76_out1)  // uint8
                                    );

  assign cfblk47_out1 = (cfblk76_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk28_out1 = cfblk47_out1 + cfblk144_out1;



  assign cfblk69_1 = {16'b0, Mysubsystem_12_out1};
  assign cfblk69_2 = {24'b0, cfblk28_out1};
  assign cfblk69_add_temp = cfblk69_1 + cfblk69_2;
  assign cfblk69_out1 = cfblk69_add_temp[7:0];



  assign dtc_out_5 = cfblk69_out1;



  assign cfblk24_out1 = dtc_out_5;



  assign cfblk89_out1 = (cfblk24_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk74_out1 = cfblk87_out1 - cfblk81_out1;



  assign cfblk23_out1 = cfblk74_out1 - cfblk89_out1;



  assign cfblk126_out1 = cfblk118_out1 + cfblk126_const_val_1;



  assign cfblk97_out1 = cfblk126_out1 + cfblk23_out1;



  assign cfblk111_out1 = (cfblk97_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk65_out1 = cfblk87_out1 + cfblk65_const_val_1;



  Mysubsystem_29 u_Mysubsystem_29 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk65_out1),  // uint8
                                   .y(Mysubsystem_29_out1)
                                   );

  assign cfblk171_out1 = {7'b0, Mysubsystem_29_out1};



  assign cfblk130_out1 = cfblk171_out1 + cfblk130_const_val_1;



  assign dtc_out_6 = cfblk130_out1;



  assign cfblk118_out1 = dtc_out_6;



  assign cfblk93_out1 = cfblk118_out1 + cfblk111_out1;



  cfblk3 u_cfblk3 (.u(cfblk93_out1),  // uint8
                   .y(cfblk3_out1)  // uint8
                   );

  assign cfblk109_out1 = (cfblk3_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk109_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk32_out1 = cfblk154_out1 - cfblk6_out1;



  assign cfblk83_out1 = cfblk32_out1 + cfblk83_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk83_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  always @(cfblk145_out1, cfblk46_out1) begin
    cfblk33_div_temp = 9'b000000000;
    cfblk33_t_0_0 = 9'b000000000;
    if (cfblk46_out1 == 8'b00000000) begin
      cfblk33_out1 = 8'b11111111;
    end
    else begin
      cfblk33_t_0_0 = {1'b0, cfblk145_out1};
      cfblk33_div_temp = cfblk33_t_0_0 / cfblk46_out1;
      if (cfblk33_div_temp[8] != 1'b0) begin
        cfblk33_out1 = 8'b11111111;
      end
      else begin
        cfblk33_out1 = cfblk33_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk33_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk81_out1 = cfblk150_out1 + cfblk32_out1;



  assign dtc_out_7 = cfblk81_out1;



  assign cfblk13_out1 = dtc_out_7;



  assign cfblk131_out1 = cfblk13_out1 + cfblk131_const_val_1;



  assign dtc_out_8 = cfblk131_out1;



  assign cfblk16_out1 = dtc_out_8;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk16_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  assign cfblk87_out1 = cfblk146_out1 + cfblk122_out1;



  assign Hdl_out = cfblk87_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

