// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1606\sampleModel1606_5_sub\Subsystem.v
// Created: 2024-06-10 08:33:29
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk130                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1606_5_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk130,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk130;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk91_const_val_1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk99_const_val_1;  // uint8
  wire [7:0] cfblk36_const_val_1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk111_const_val_1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk60_const_val_1;  // uint8
  wire [7:0] cfblk33_const_val_1;  // uint8
  wire [15:0] Mysubsystem_26_out1;  // uint16
  wire [15:0] Mysubsystem_43_out1;  // uint16
  wire [15:0] Mysubsystem_43_out2;  // uint16
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] bitMask_for_cfblk1;  // uint8
  wire [7:0] cfblk109_const_val_1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk50_const_val_1;  // uint8
  wire [7:0] cfblk22_const_val_1;  // uint8
  wire [7:0] Mysubsystem_7_out1;  // uint8
  reg [7:0] cfblk118_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] Mysubsystem_6_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  reg [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [15:0] cfblk5_out1;  // uint16
  wire [7:0] cfblk170_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] Mysubsystem_6_out2;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk75_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [15:0] cfblk6_out1;  // uint16
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] Mysubsystem_39_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] Mysubsystem_17_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] Mysubsystem_24_out1;  // uint8
  reg [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] dtc_out_9;  // ufix8
  reg [15:0] cfblk118_varargout_1;  // ufix16
  reg [15:0] cfblk118_div_temp;  // ufix16
  reg [8:0] cfblk76_div_temp;  // ufix9
  reg [8:0] cfblk76_t_0_0;  // ufix9
  reg [8:0] cfblk63_div_temp;  // ufix9
  reg [8:0] cfblk63_t_0_0;  // ufix9
  reg [8:0] cfblk103_div_temp;  // ufix9
  reg [8:0] cfblk103_t_0_0;  // ufix9
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9
  reg [8:0] cfblk105_div_temp;  // ufix9
  reg [8:0] cfblk105_t_0_0;  // ufix9
  reg [8:0] cfblk75_div_temp;  // ufix9
  reg [8:0] cfblk75_t_0_0;  // ufix9
  reg [8:0] cfblk108_div_temp;  // ufix9
  reg [8:0] cfblk108_t_0_0;  // ufix9
  reg [8:0] cfblk126_div_temp;  // ufix9
  reg [8:0] cfblk126_t_0_0;  // ufix9
  reg [8:0] cfblk57_div_temp;  // ufix9
  reg [8:0] cfblk57_t_0_0;  // ufix9


  assign cfblk91_const_val_1 = 8'b00000000;



  assign cfblk137_out1 = 8'b00000001;



  assign enb = clk_enable;

  assign cfblk99_const_val_1 = 8'b00000000;



  assign cfblk36_const_val_1 = 8'b00000000;



  assign cfblk36_out1 = cfblk137_out1 + cfblk36_const_val_1;



  assign dtc_out = cfblk36_out1;



  assign cfblk19_out1 = dtc_out;



  assign cfblk136_out1 = 8'b00000001;



  assign cfblk111_const_val_1 = 8'b00000000;



  assign cfblk135_out1 = 8'b00000000;



  assign dtc_out_1 = cfblk135_out1;



  assign cfblk82_out1 = dtc_out_1;



  assign cfblk60_const_val_1 = 8'b00000000;



  assign cfblk33_const_val_1 = 8'b00000000;



  Mysubsystem_26 u_Mysubsystem_26 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_26_out1)  // uint16
                                   );

  Mysubsystem_43 u_Mysubsystem_43 (.In1(Mysubsystem_26_out1),  // uint16
                                   .Out1(Mysubsystem_43_out1),  // uint16
                                   .Out2(Mysubsystem_43_out2)  // uint16
                                   );

  assign cfblk104_out1 = Mysubsystem_43_out1[7:0];



  assign bitMask_for_cfblk1 = 8'b11011001;



  assign cfblk109_const_val_1 = 8'b00000000;



  cfblk133 u_cfblk133 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk133_out1)  // uint8
                       );

  assign cfblk50_const_val_1 = 8'b00000000;



  assign cfblk22_const_val_1 = 8'b00000000;



  Mysubsystem_7 u_Mysubsystem_7 (.In1(cfblk82_out1),  // uint8
                                 .Out1(Mysubsystem_7_out1)  // uint8
                                 );

  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk118_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  always @(Mysubsystem_43_out2, cfblk156_out1) begin
    cfblk118_div_temp = 16'b0000000000000000;
    if (Mysubsystem_43_out2 == 16'b0000000000000000) begin
      cfblk118_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk118_div_temp = cfblk156_out1 / Mysubsystem_43_out2;
      cfblk118_varargout_1 = cfblk118_div_temp;
    end
    if (cfblk118_varargout_1[15:8] != 8'b00000000) begin
      cfblk118_out1 = 8'b11111111;
    end
    else begin
      cfblk118_out1 = cfblk118_varargout_1[7:0];
    end
  end



  assign cfblk122_out1 = (cfblk60_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk97_out1 = cfblk122_out1 + cfblk136_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk34_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  always @(cfblk118_out1, cfblk81_out1) begin
    cfblk76_div_temp = 9'b000000000;
    cfblk76_t_0_0 = 9'b000000000;
    if (cfblk118_out1 == 8'b00000000) begin
      cfblk76_out1 = 8'b11111111;
    end
    else begin
      cfblk76_t_0_0 = {1'b0, cfblk81_out1};
      cfblk76_div_temp = cfblk76_t_0_0 / cfblk118_out1;
      if (cfblk76_div_temp[8] != 1'b0) begin
        cfblk76_out1 = 8'b11111111;
      end
      else begin
        cfblk76_out1 = cfblk76_div_temp[7:0];
      end
    end
  end



  assign cfblk8_out1 = cfblk76_out1 + cfblk74_out1;



  DotProduct_block9 u_cfblk83_inst (.in1(cfblk8_out1),  // uint8
                                    .in2(cfblk150_out1),  // uint8
                                    .out1(cfblk83_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = Mysubsystem_6_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk109_out1 = cfblk126_out1 + cfblk109_const_val_1;



  always @(cfblk109_out1, cfblk133_out1) begin
    cfblk63_div_temp = 9'b000000000;
    cfblk63_t_0_0 = 9'b000000000;
    if (cfblk133_out1 == 8'b00000000) begin
      cfblk63_out1 = 8'b11111111;
    end
    else begin
      cfblk63_t_0_0 = {1'b0, cfblk109_out1};
      cfblk63_div_temp = cfblk63_t_0_0 / cfblk133_out1;
      if (cfblk63_div_temp[8] != 1'b0) begin
        cfblk63_out1 = 8'b11111111;
      end
      else begin
        cfblk63_out1 = cfblk63_div_temp[7:0];
      end
    end
  end



  assign cfblk81_out1 = cfblk63_out1 + cfblk107_out1;



  always @(cfblk107_out1, cfblk135_out1) begin
    cfblk103_div_temp = 9'b000000000;
    cfblk103_t_0_0 = 9'b000000000;
    if (cfblk135_out1 == 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk107_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk135_out1;
      if (cfblk103_div_temp[8] != 1'b0) begin
        cfblk103_out1 = 8'b11111111;
      end
      else begin
        cfblk103_out1 = cfblk103_div_temp[7:0];
      end
    end
  end



  assign cfblk5_out1 = {cfblk103_out1, cfblk10_out1};



  assign cfblk170_out1 = cfblk5_out1[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk170_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk57_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  Mysubsystem_6 u_Mysubsystem_6 (.In1(cfblk45_out1),  // uint8
                                 .In2(cfblk48_out1),  // uint8
                                 .Out1(Mysubsystem_6_out1),  // uint8
                                 .Out2(Mysubsystem_6_out2)  // uint8
                                 );

  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = Mysubsystem_6_out2;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk52_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  DotProduct_block6 u_cfblk32_inst (.in1(cfblk69_out1),  // uint8
                                    .in2(cfblk87_out1),  // uint8
                                    .out1(cfblk32_out1)  // uint8
                                    );

  assign cfblk44_out1 = cfblk74_out1 - cfblk32_out1;



  assign cfblk10_out1 = cfblk44_out1 + cfblk39_out1;



  assign cfblk56_out1 = cfblk10_out1 - cfblk149_out1;



  cfblk7 u_cfblk7 (.u(cfblk56_out1),  // uint8
                   .y(cfblk7_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk7_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk34_out1 = (cfblk96_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk60_out1 = cfblk99_out1 + cfblk60_const_val_1;



  assign cfblk33_out1 = cfblk60_out1 + cfblk33_const_val_1;



  assign cfblk67_out1 = cfblk33_out1 + cfblk34_out1;



  assign cfblk52_out1 = cfblk67_out1 + cfblk126_out1;



  always @(cfblk104_out1, cfblk52_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk104_out1 == 8'b00000000) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk52_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk104_out1;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  assign cfblk112_out1 = cfblk18_out1 + cfblk39_out1;



  assign cfblk26_out1 = cfblk112_out1 + cfblk87_out1;



  DotProduct_block5 u_cfblk29_inst (.in1(cfblk26_out1),  // uint8
                                    .in2(cfblk149_out1),  // uint8
                                    .out1(cfblk29_out1)  // uint8
                                    );

  DotProduct_block u_cfblk113_inst (.in1(cfblk29_out1),  // uint8
                                    .in2(cfblk19_out1),  // uint8
                                    .out1(cfblk113_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk113_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  assign cfblk111_out1 = cfblk55_out1 + cfblk111_const_val_1;



  assign cfblk45_out1 = cfblk96_out1 - cfblk70_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk45_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk115_out1 = cfblk25_out1 - cfblk147_out1;



  DotProduct_block1 u_cfblk20_inst (.in1(cfblk115_out1),  // uint8
                                    .in2(cfblk111_out1),  // uint8
                                    .out1(cfblk20_out1)  // uint8
                                    );

  DotProduct_block11 u_cfblk92_inst (.in1(cfblk20_out1),  // uint8
                                     .in2(cfblk82_out1),  // uint8
                                     .out1(cfblk92_out1)  // uint8
                                     );

  assign cfblk88_out1 = cfblk15_out1 + cfblk36_out1;



  assign cfblk80_out1 = cfblk88_out1 + cfblk57_out1;



  always @(cfblk136_out1, cfblk80_out1) begin
    cfblk105_div_temp = 9'b000000000;
    cfblk105_t_0_0 = 9'b000000000;
    if (cfblk80_out1 == 8'b00000000) begin
      cfblk105_out1 = 8'b11111111;
    end
    else begin
      cfblk105_t_0_0 = {1'b0, cfblk136_out1};
      cfblk105_div_temp = cfblk105_t_0_0 / cfblk80_out1;
      if (cfblk105_div_temp[8] != 1'b0) begin
        cfblk105_out1 = 8'b11111111;
      end
      else begin
        cfblk105_out1 = cfblk105_div_temp[7:0];
      end
    end
  end



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk105_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  always @(cfblk42_out1, cfblk4_out1) begin
    cfblk75_div_temp = 9'b000000000;
    cfblk75_t_0_0 = 9'b000000000;
    if (cfblk42_out1 == 8'b00000000) begin
      cfblk75_out1 = 8'b11111111;
    end
    else begin
      cfblk75_t_0_0 = {1'b0, cfblk4_out1};
      cfblk75_div_temp = cfblk75_t_0_0 / cfblk42_out1;
      if (cfblk75_div_temp[8] != 1'b0) begin
        cfblk75_out1 = 8'b11111111;
      end
      else begin
        cfblk75_out1 = cfblk75_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk75_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk68_out1 = cfblk152_out1 - cfblk92_out1;



  assign cfblk6_out1 = {cfblk68_out1, cfblk148_out1};



  assign cfblk162_out1 = cfblk6_out1[7:0];



  DotProduct_block7 u_cfblk74_inst (.in1(cfblk162_out1),  // uint8
                                    .in2(cfblk151_out1),  // uint8
                                    .out1(cfblk74_out1)  // uint8
                                    );

  assign dtc_out_2 = cfblk74_out1;



  assign cfblk70_out1 = dtc_out_2;



  assign cfblk123_out1 = cfblk70_out1 + cfblk1_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk123_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  assign cfblk1_out1 = cfblk143_out1 & bitMask_for_cfblk1;



  assign cfblk99_out1 = cfblk25_out1 + cfblk99_const_val_1;



  assign cfblk69_out1 = cfblk99_out1 + cfblk27_out1;



  assign cfblk71_out1 = cfblk55_out1 + cfblk69_out1;



  assign cfblk3_out1 = cfblk71_out1 | 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk3_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  Mysubsystem_39 u_Mysubsystem_39 (.In1(cfblk55_out1),  // uint8
                                   .Out1(Mysubsystem_39_out1)  // uint8
                                   );

  Mysubsystem_17 u_Mysubsystem_17 (.In1(cfblk100_out1),  // uint8
                                   .In2(Mysubsystem_39_out1),  // uint8
                                   .Out1(Mysubsystem_17_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = Mysubsystem_17_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk93_out1 = cfblk159_out1 + cfblk158_out1;



  DotProduct_block10 u_cfblk87_inst (.in1(cfblk93_out1),  // uint8
                                     .in2(cfblk19_out1),  // uint8
                                     .out1(cfblk87_out1)  // uint8
                                     );

  Mysubsystem_24 u_Mysubsystem_24 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk87_out1),  // uint8
                                   .Out1(Mysubsystem_24_out1)  // uint8
                                   );

  always @(Mysubsystem_24_out1, cfblk1_out1) begin
    cfblk108_div_temp = 9'b000000000;
    cfblk108_t_0_0 = 9'b000000000;
    if (cfblk1_out1 == 8'b00000000) begin
      cfblk108_out1 = 8'b11111111;
    end
    else begin
      cfblk108_t_0_0 = {1'b0, Mysubsystem_24_out1};
      cfblk108_div_temp = cfblk108_t_0_0 / cfblk1_out1;
      if (cfblk108_div_temp[8] != 1'b0) begin
        cfblk108_out1 = 8'b11111111;
      end
      else begin
        cfblk108_out1 = cfblk108_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk114_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk102_out1 = cfblk144_out1 + cfblk108_out1;



  DotProduct u_cfblk107_inst (.in1(cfblk137_out1),  // uint8
                              .in2(cfblk102_out1),  // uint8
                              .out1(cfblk107_out1)  // uint8
                              );

  always @(cfblk107_out1, cfblk146_out1) begin
    cfblk126_div_temp = 9'b000000000;
    cfblk126_t_0_0 = 9'b000000000;
    if (cfblk146_out1 == 8'b00000000) begin
      cfblk126_out1 = 8'b11111111;
    end
    else begin
      cfblk126_t_0_0 = {1'b0, cfblk107_out1};
      cfblk126_div_temp = cfblk126_t_0_0 / cfblk146_out1;
      if (cfblk126_div_temp[8] != 1'b0) begin
        cfblk126_out1 = 8'b11111111;
      end
      else begin
        cfblk126_out1 = cfblk126_div_temp[7:0];
      end
    end
  end



  assign dtc_out_3 = cfblk126_out1;



  assign cfblk15_out1 = dtc_out_3;



  DotProduct_block2 u_cfblk21_inst (.in1(cfblk15_out1),  // uint8
                                    .in2(cfblk161_out1),  // uint8
                                    .out1(cfblk21_out1)  // uint8
                                    );

  assign cfblk24_out1 = cfblk21_out1 - cfblk153_out1;



  always @(cfblk24_out1, cfblk81_out1) begin
    cfblk57_div_temp = 9'b000000000;
    cfblk57_t_0_0 = 9'b000000000;
    if (cfblk81_out1 == 8'b00000000) begin
      cfblk57_out1 = 8'b11111111;
    end
    else begin
      cfblk57_t_0_0 = {1'b0, cfblk24_out1};
      cfblk57_div_temp = cfblk57_t_0_0 / cfblk81_out1;
      if (cfblk57_div_temp[8] != 1'b0) begin
        cfblk57_out1 = 8'b11111111;
      end
      else begin
        cfblk57_out1 = cfblk57_div_temp[7:0];
      end
    end
  end



  assign cfblk127_out1 = (cfblk57_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_4 = cfblk127_out1;



  assign cfblk100_out1 = dtc_out_4;



  assign dtc_out_5 = cfblk17_out1;



  assign cfblk58_out1 = dtc_out_5;



  assign dtc_out_6 = cfblk58_out1;



  assign cfblk46_out1 = dtc_out_6;



  assign cfblk125_out1 = cfblk55_out1 + cfblk46_out1;



  assign cfblk91_out1 = cfblk125_out1 + cfblk91_const_val_1;



  assign cfblk48_out1 = cfblk91_out1 + cfblk100_out1;



  assign cfblk50_out1 = cfblk48_out1 + cfblk50_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk50_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  DotProduct_block8 u_cfblk78_inst (.in1(cfblk155_out1),  // uint8
                                    .in2(cfblk93_out1),  // uint8
                                    .out1(cfblk78_out1)  // uint8
                                    );

  assign dtc_out_7 = cfblk78_out1;



  assign cfblk114_out1 = dtc_out_7;



  assign cfblk22_out1 = cfblk114_out1 + cfblk22_const_val_1;



  assign cfblk85_out1 = cfblk22_out1 + Mysubsystem_7_out1;



  assign cfblk40_out1 = cfblk85_out1 + cfblk145_out1;



  DotProduct_block3 u_cfblk25_inst (.in1(cfblk40_out1),  // uint8
                                    .in2(cfblk136_out1),  // uint8
                                    .out1(cfblk25_out1)  // uint8
                                    );

  assign dtc_out_8 = cfblk25_out1;



  assign cfblk55_out1 = dtc_out_8;



  DotProduct_block4 u_cfblk27_inst (.in1(cfblk55_out1),  // uint8
                                    .in2(cfblk4_out1),  // uint8
                                    .out1(cfblk27_out1)  // uint8
                                    );

  assign cfblk96_out1 = cfblk27_out1 - cfblk83_out1;



  assign cfblk17_out1 = (cfblk96_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_9 = cfblk17_out1;



  assign cfblk39_out1 = dtc_out_9;



  assign cfblk42_out1 = cfblk39_out1 + cfblk97_out1;



  assign cfblk130 = cfblk42_out1;

  assign Hdl_out = cfblk118_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

