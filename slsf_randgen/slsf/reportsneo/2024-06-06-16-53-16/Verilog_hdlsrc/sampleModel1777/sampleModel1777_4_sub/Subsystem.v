// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1777\sampleModel1777_4_sub\Subsystem.v
// Created: 2024-08-14 07:14:25
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1777_4_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk122_const_val_1;  // uint8
  wire [7:0] cfblk124_const_val_1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk22_const_val_1;  // uint8
  wire [7:0] cfblk94_const_val_1;  // uint8
  wire [7:0] cfblk104_const_val_1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk59_const_val_1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk123_const_val_1;  // uint8
  wire [7:0] cfblk44_const_val_1;  // uint8
  wire [7:0] cfblk58_const_val_1;  // uint8
  wire [7:0] cfblk61_const_val_1;  // uint8
  wire [7:0] cfblk46_const_val_1;  // uint8
  wire [7:0] cfblk80_const_val_1;  // uint8
  wire [7:0] cfblk9_const_val_1;  // uint8
  wire [7:0] cfblk39_const_val_1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [3:0] cfblk4_out1;  // ufix4_E4
  wire signed [3:0] cfblk63_out1;  // sfix4
  wire signed [31:0] cfblk20_sub_temp;  // sfix32
  wire signed [31:0] cfblk20_1;  // sfix32
  wire signed [31:0] cfblk20_2;  // sfix32
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk127_out1;  // uint8
  reg [7:0] cfblk65_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk116_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk174_out1;  // uint8
  reg [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire cfblk6_relop1;
  reg [8:0] cfblk126_div_temp;  // ufix9
  reg [8:0] cfblk126_t_0_0;  // ufix9
  reg [8:0] cfblk103_div_temp;  // ufix9
  reg [8:0] cfblk103_t_0_0;  // ufix9
  reg [8:0] cfblk65_div_temp;  // ufix9
  reg [8:0] cfblk65_t_0_0;  // ufix9
  reg [8:0] cfblk95_div_temp;  // ufix9
  reg [8:0] cfblk95_t_0_0;  // ufix9


  assign cfblk122_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk124_const_val_1 = 8'b00000000;



  assign cfblk134_out1 = 8'b00000000;



  assign cfblk135_out1 = 8'b00000001;



  assign cfblk133_out1 = 8'b00000000;



  assign cfblk22_const_val_1 = 8'b00000000;



  assign cfblk94_const_val_1 = 8'b00000000;



  assign cfblk104_const_val_1 = 8'b00000000;



  cfblk136 u_cfblk136 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk136_out1)  // uint8
                       );

  assign cfblk59_const_val_1 = 8'b00000000;



  assign cfblk59_out1 = cfblk136_out1 + cfblk59_const_val_1;



  assign cfblk123_const_val_1 = 8'b00000000;



  assign cfblk44_const_val_1 = 8'b00000000;



  assign cfblk58_const_val_1 = 8'b00000000;



  assign cfblk61_const_val_1 = 8'b00000000;



  assign cfblk46_const_val_1 = 8'b00000000;



  assign cfblk80_const_val_1 = 8'b00000000;



  assign cfblk9_const_val_1 = 8'b00000000;



  assign cfblk39_const_val_1 = 8'b00000000;



  assign dtc_out = cfblk38_out1;



  assign cfblk85_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk85_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk110_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk160_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk8_out1 = (cfblk1_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk37_out1 = cfblk26_out1 - cfblk52_out1;



  cfblk140 u_cfblk140 (.In1(cfblk137_out1),  // uint8
                       .Out1(cfblk140_out1)  // uint8
                       );

  assign cfblk29_out1 = cfblk140_out1 + cfblk37_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk29_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk12_out1 = cfblk171_out1 - cfblk8_out1;



  assign dtc_out_1 = cfblk12_out1;



  assign cfblk23_out1 = dtc_out_1;



  assign dtc_out_2 = cfblk27_out1;



  assign cfblk75_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk60_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk54_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  cfblk141 u_cfblk141 (.In1(cfblk77_out1),  // uint8
                       .Out1(cfblk141_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk54_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk55_out1 = (cfblk96_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_3 = cfblk76_out1;



  assign cfblk121_out1 = dtc_out_3;



  always @(cfblk121_out1, cfblk16_out1) begin
    cfblk126_div_temp = 9'b000000000;
    cfblk126_t_0_0 = 9'b000000000;
    if (cfblk121_out1 == 8'b00000000) begin
      cfblk126_out1 = 8'b11111111;
    end
    else begin
      cfblk126_t_0_0 = {1'b0, cfblk16_out1};
      cfblk126_div_temp = cfblk126_t_0_0 / cfblk121_out1;
      if (cfblk126_div_temp[8] != 1'b0) begin
        cfblk126_out1 = 8'b11111111;
      end
      else begin
        cfblk126_out1 = cfblk126_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk110_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk27_out1 = cfblk46_out1 - cfblk169_out1;



  assign cfblk99_out1 = cfblk27_out1 + cfblk126_out1;



  assign cfblk51_out1 = (cfblk137_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk38_out1 = cfblk51_out1 + cfblk99_out1;



  assign cfblk33_out1 = cfblk76_out1 + cfblk115_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk33_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  assign cfblk58_out1 = cfblk26_out1 + cfblk58_const_val_1;



  assign cfblk42_out1 = cfblk58_out1 + cfblk161_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk9_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk77_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk52_out1 = cfblk122_out1 - cfblk56_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk52_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk123_out1 = cfblk61_out1 + cfblk123_const_val_1;



  DotProduct_block5 u_cfblk64_inst (.in1(cfblk59_out1),  // uint8
                                    .in2(cfblk123_out1),  // uint8
                                    .out1(cfblk64_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk64_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  always @(cfblk162_out1, cfblk67_out1) begin
    cfblk103_div_temp = 9'b000000000;
    cfblk103_t_0_0 = 9'b000000000;
    if (cfblk162_out1 == 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk67_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk162_out1;
      if (cfblk103_div_temp[8] != 1'b0) begin
        cfblk103_out1 = 8'b11111111;
      end
      else begin
        cfblk103_out1 = cfblk103_div_temp[7:0];
      end
    end
  end



  cfblk139 u_cfblk139 (.In1(cfblk103_out1),  // uint8
                       .Out1(cfblk139_out1)  // uint8
                       );

  assign cfblk44_out1 = cfblk139_out1 + cfblk44_const_val_1;



  assign dtc_out_4 = cfblk44_out1;



  assign cfblk113_out1 = dtc_out_4;



  DotProduct_block3 u_cfblk34_inst (.in1(cfblk17_out1),  // uint8
                                    .in2(cfblk91_out1),  // uint8
                                    .out1(cfblk34_out1)  // uint8
                                    );

  assign cfblk94_out1 = cfblk45_out1 + cfblk94_const_val_1;



  assign cfblk110_out1 = cfblk46_out1 + cfblk77_out1;



  assign cfblk43_out1 = cfblk135_out1 - cfblk110_out1;



  assign cfblk81_out1 = (cfblk43_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block8 u_cfblk76_inst (.in1(cfblk81_out1),  // uint8
                                    .in2(cfblk133_out1),  // uint8
                                    .out1(cfblk76_out1)  // uint8
                                    );

  assign cfblk22_out1 = cfblk76_out1 + cfblk22_const_val_1;



  assign cfblk92_out1 = (cfblk22_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block11 u_cfblk87_inst (.in1(cfblk134_out1),  // uint8
                                     .in2(cfblk92_out1),  // uint8
                                     .out1(cfblk87_out1)  // uint8
                                     );

  DotProduct_block2 u_cfblk120_inst (.in1(cfblk87_out1),  // uint8
                                     .in2(cfblk94_out1),  // uint8
                                     .out1(cfblk120_out1)  // uint8
                                     );

  assign cfblk47_out1 = cfblk114_out1 + cfblk120_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk47_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk4_out1 = cfblk150_out1[7:4];



  assign cfblk63_out1 = (cfblk4_out1 > 4'b0000 ? 4'sb0001 :
              4'sb0000);



  assign cfblk20_1 = {{28{cfblk63_out1[3]}}, cfblk63_out1};
  assign cfblk20_2 = {24'b0, cfblk34_out1};
  assign cfblk20_sub_temp = cfblk20_1 - cfblk20_2;
  assign cfblk20_out1 = cfblk20_sub_temp[7:0];



  assign cfblk104_out1 = cfblk20_out1 + cfblk104_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk104_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  DotProduct_block10 u_cfblk78_inst (.in1(cfblk151_out1),  // uint8
                                     .in2(cfblk113_out1),  // uint8
                                     .out1(cfblk78_out1)  // uint8
                                     );

  assign cfblk66_out1 = cfblk78_out1 + cfblk173_out1;



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk66_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  cfblk138 u_cfblk138 (.In1(cfblk5_out1),  // uint8
                       .Out1(cfblk138_out1)  // uint8
                       );

  assign cfblk124_out1 = cfblk91_out1 + cfblk124_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk124_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  DotProduct_block12 u_cfblk90_inst (.in1(cfblk149_out1),  // uint8
                                     .in2(cfblk138_out1),  // uint8
                                     .out1(cfblk90_out1)  // uint8
                                     );

  assign cfblk91_out1 = cfblk90_out1 + cfblk170_out1;



  assign cfblk88_out1 = cfblk91_out1 + cfblk159_out1;



  assign dtc_out_5 = cfblk88_out1;



  assign cfblk96_out1 = dtc_out_5;



  assign dtc_out_6 = cfblk96_out1;



  assign cfblk128_out1 = dtc_out_6;



  DotProduct u_cfblk10_inst (.in1(cfblk128_out1),  // uint8
                             .in2(cfblk42_out1),  // uint8
                             .out1(cfblk10_out1)  // uint8
                             );

  DotProduct_block4 u_cfblk41_inst (.in1(cfblk10_out1),  // uint8
                                    .in2(cfblk81_out1),  // uint8
                                    .out1(cfblk41_out1)  // uint8
                                    );

  assign cfblk54_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_7 = cfblk54_out1;



  assign cfblk114_out1 = dtc_out_7;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk114_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk26_out1 = cfblk56_out1 - cfblk163_out1;



  assign dtc_out_8 = cfblk26_out1;



  assign cfblk127_out1 = dtc_out_8;



  assign cfblk61_out1 = cfblk127_out1 + cfblk61_const_val_1;



  assign cfblk17_out1 = cfblk61_out1 + cfblk96_out1;



  always @(cfblk17_out1, cfblk38_out1) begin
    cfblk65_div_temp = 9'b000000000;
    cfblk65_t_0_0 = 9'b000000000;
    if (cfblk38_out1 == 8'b00000000) begin
      cfblk65_out1 = 8'b11111111;
    end
    else begin
      cfblk65_t_0_0 = {1'b0, cfblk17_out1};
      cfblk65_div_temp = cfblk65_t_0_0 / cfblk38_out1;
      if (cfblk65_div_temp[8] != 1'b0) begin
        cfblk65_out1 = 8'b11111111;
      end
      else begin
        cfblk65_out1 = cfblk65_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk65_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  assign cfblk35_out1 = cfblk155_out1 + cfblk55_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk117_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk31_out1 = cfblk172_out1 - cfblk35_out1;



  assign cfblk25_out1 = cfblk31_out1 - cfblk164_out1;



  assign cfblk46_out1 = cfblk25_out1 + cfblk46_const_val_1;



  DotProduct_block1 u_cfblk117_inst (.in1(cfblk46_out1),  // uint8
                                     .in2(cfblk137_out1),  // uint8
                                     .out1(cfblk117_out1)  // uint8
                                     );

  assign dtc_out_9 = cfblk117_out1;



  assign cfblk45_out1 = dtc_out_9;



  DotProduct_block u_cfblk116_inst (.in1(cfblk45_out1),  // uint8
                                    .in2(cfblk81_out1),  // uint8
                                    .out1(cfblk116_out1)  // uint8
                                    );

  assign cfblk115_out1 = cfblk116_out1 + cfblk141_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk115_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk122_out1 = cfblk174_out1 + cfblk122_const_val_1;



  DotProduct_block6 u_cfblk67_inst (.in1(cfblk122_out1),  // uint8
                                    .in2(cfblk167_out1),  // uint8
                                    .out1(cfblk67_out1)  // uint8
                                    );

  always @(cfblk42_out1, cfblk67_out1) begin
    cfblk95_div_temp = 9'b000000000;
    cfblk95_t_0_0 = 9'b000000000;
    if (cfblk42_out1 == 8'b00000000) begin
      cfblk95_out1 = 8'b11111111;
    end
    else begin
      cfblk95_t_0_0 = {1'b0, cfblk67_out1};
      cfblk95_div_temp = cfblk95_t_0_0 / cfblk42_out1;
      if (cfblk95_div_temp[8] != 1'b0) begin
        cfblk95_out1 = 8'b11111111;
      end
      else begin
        cfblk95_out1 = cfblk95_div_temp[7:0];
      end
    end
  end



  cfblk137 u_cfblk137 (.In1(cfblk95_out1),  // uint8
                       .Out1(cfblk137_out1)  // uint8
                       );

  assign cfblk80_out1 = cfblk137_out1 + cfblk80_const_val_1;



  assign cfblk125_out1 = (cfblk80_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block9 u_cfblk77_inst (.in1(cfblk125_out1),  // uint8
                                    .in2(cfblk165_out1),  // uint8
                                    .out1(cfblk77_out1)  // uint8
                                    );

  assign cfblk9_out1 = cfblk77_out1 + cfblk9_const_val_1;



  assign cfblk16_out1 = cfblk9_out1 - cfblk158_out1;



  DotProduct_block7 u_cfblk69_inst (.in1(cfblk16_out1),  // uint8
                                    .in2(cfblk126_out1),  // uint8
                                    .out1(cfblk69_out1)  // uint8
                                    );

  assign dtc_out_10 = cfblk69_out1;



  assign cfblk60_out1 = dtc_out_10;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk60_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk19_out1 = cfblk157_out1 + cfblk75_out1;



  assign cfblk39_out1 = cfblk19_out1 + cfblk39_const_val_1;



  assign cfblk56_out1 = cfblk39_out1 + cfblk122_out1;



  assign cfblk107_out1 = cfblk56_out1 - cfblk117_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk107_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk112_out1 = cfblk152_out1 + cfblk23_out1;



  assign cfblk6_relop1 = cfblk112_out1 <= cfblk154_out1;



  assign cfblk174_out1 = {7'b0, cfblk6_relop1};



  assign Hdl_out = cfblk174_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

