// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1427\sampleModel1427_3_sub\Subsystem.v
// Created: 2024-08-12 04:07:26
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1427_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [15:0] Mysubsystem_32_out1;  // ufix16_En7
  wire [7:0] Mysubsystem_32_out2;  // uint8
  wire [7:0] Mysubsystem_25_out1;  // uint8
  wire [7:0] Mysubsystem_26_out1;  // uint8
  wire [7:0] Mysubsystem_34_out1;  // uint8
  wire [7:0] Mysubsystem_35_out1;  // uint8
  wire [7:0] cfblk13_const_val_1;  // uint8
  wire [7:0] cfblk90_const_val_1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk120_const_val_1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk40_const_val_1;  // uint8
  wire [7:0] cfblk105_const_val_1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk114_const_val_1;  // uint8
  wire [7:0] cfblk56_const_val_1;  // uint8
  wire [15:0] cfblk140_out1;  // uint16
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] cfblk23_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk47_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  reg [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  reg [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] Mysubsystem_47_out1;  // uint8
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk65_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] Mysubsystem_2_out3;  // uint8
  wire Mysubsystem_19_out1;
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [15:0] Mysubsystem_2_out2;  // uint16
  reg [15:0] cfblk149_reg [0:1];  // ufix16 [2]
  wire [15:0] cfblk149_reg_next [0:1];  // ufix16 [2]
  wire [15:0] cfblk149_out1;  // uint16
  wire [31:0] cfblk107_add_temp;  // ufix32
  wire [31:0] cfblk107_1;  // ufix32
  wire [31:0] cfblk107_2;  // ufix32
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [15:0] Mysubsystem_2_out1;  // uint16
  wire [7:0] cfblk80_out1;  // uint8
  wire cfblk8_relop1;
  wire [31:0] cfblk134_add_temp;  // ufix32
  wire [31:0] cfblk134_1;  // ufix32
  wire [31:0] cfblk134_2;  // ufix32
  wire [7:0] Mysubsystem_16_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [31:0] cfblk122_add_temp;  // ufix32
  wire [31:0] cfblk122_1;  // ufix32
  wire [31:0] cfblk122_2;  // ufix32
  wire [7:0] cfblk122_out1;  // uint8
  wire [31:0] cfblk123_add_temp;  // ufix32
  wire [31:0] cfblk123_1;  // ufix32
  wire [31:0] cfblk123_2;  // ufix32
  reg [8:0] cfblk23_div_temp;  // ufix9
  reg [8:0] cfblk23_t_0_0;  // ufix9
  reg [8:0] cfblk35_div_temp;  // ufix9
  reg [8:0] cfblk35_t_0_0;  // ufix9
  reg [8:0] cfblk83_div_temp;  // ufix9
  reg [8:0] cfblk83_t_0_0;  // ufix9
  reg [8:0] cfblk20_div_temp;  // ufix9
  reg [8:0] cfblk20_t_0_0;  // ufix9
  reg [8:0] cfblk47_div_temp;  // ufix9
  reg [8:0] cfblk47_t_0_0;  // ufix9
  reg [8:0] cfblk133_div_temp;  // ufix9
  reg [8:0] cfblk133_t_0_0;  // ufix9
  reg [8:0] cfblk65_div_temp;  // ufix9
  reg [8:0] cfblk65_t_0_0;  // ufix9


  Mysubsystem_32 u_Mysubsystem_32 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_32_out1),  // ufix16_En7
                                   .Out2(Mysubsystem_32_out2)  // uint8
                                   );

  Mysubsystem_25 u_Mysubsystem_25 (.In1(Mysubsystem_32_out2),  // uint8
                                   .y(Mysubsystem_25_out1)  // uint8
                                   );

  Mysubsystem_26 u_Mysubsystem_26 (.In1(Mysubsystem_25_out1),  // uint8
                                   .Out1(Mysubsystem_26_out1)  // uint8
                                   );

  Mysubsystem_35 u_Mysubsystem_35 (.In1(Mysubsystem_34_out1),  // uint8
                                   .Out1(Mysubsystem_35_out1)  // uint8
                                   );

  Mysubsystem_34 u_Mysubsystem_34 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(Mysubsystem_35_out1),  // uint8
                                   .Out1(Mysubsystem_34_out1)  // uint8
                                   );

  assign cfblk13_const_val_1 = 8'b00000000;



  assign cfblk90_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk85_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  cfblk7 u_cfblk7 (.u(cfblk167_out1),  // uint8
                   .y(cfblk7_out1)  // uint8
                   );

  assign cfblk129_out1 = (cfblk7_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk85_out1 = Mysubsystem_34_out1 + cfblk129_out1;



  assign cfblk141_out1 = 8'b00000000;



  assign cfblk120_const_val_1 = 8'b00000000;



  assign cfblk120_out1 = cfblk141_out1 + cfblk120_const_val_1;



  assign cfblk40_const_val_1 = 8'b00000000;



  assign cfblk105_const_val_1 = 8'b00000000;



  cfblk2 u_cfblk2 (.u(Mysubsystem_32_out1),  // ufix16_En7
                   .y(cfblk2_out1)  // uint8
                   );

  assign cfblk11_out1 = Mysubsystem_34_out1 + Mysubsystem_34_out1;



  assign cfblk114_const_val_1 = 8'b00000000;



  assign cfblk56_const_val_1 = 8'b00000000;



  cfblk140 u_cfblk140 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk140_out1)  // uint16
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk69_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk105_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk95_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk49_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  assign dtc_out = cfblk74_out1;



  assign cfblk112_out1 = dtc_out;



  assign cfblk42_out1 = cfblk95_out1 + cfblk112_out1;



  assign cfblk114_out1 = cfblk123_out1 + cfblk114_const_val_1;



  assign cfblk44_out1 = cfblk114_out1 + cfblk42_out1;



  always @(cfblk44_out1, cfblk98_out1) begin
    cfblk23_div_temp = 9'b000000000;
    cfblk23_t_0_0 = 9'b000000000;
    if (cfblk44_out1 == 8'b00000000) begin
      cfblk23_out1 = 8'b11111111;
    end
    else begin
      cfblk23_t_0_0 = {1'b0, cfblk98_out1};
      cfblk23_div_temp = cfblk23_t_0_0 / cfblk44_out1;
      if (cfblk23_div_temp[8] != 1'b0) begin
        cfblk23_out1 = 8'b11111111;
      end
      else begin
        cfblk23_out1 = cfblk23_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk23_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk47_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk43_out1 = cfblk34_out1 + cfblk164_out1;



  assign cfblk63_out1 = cfblk91_out1 + cfblk20_out1;



  always @(cfblk41_out1, cfblk63_out1) begin
    cfblk35_div_temp = 9'b000000000;
    cfblk35_t_0_0 = 9'b000000000;
    if (cfblk41_out1 == 8'b00000000) begin
      cfblk35_out1 = 8'b11111111;
    end
    else begin
      cfblk35_t_0_0 = {1'b0, cfblk63_out1};
      cfblk35_div_temp = cfblk35_t_0_0 / cfblk41_out1;
      if (cfblk35_div_temp[8] != 1'b0) begin
        cfblk35_out1 = 8'b11111111;
      end
      else begin
        cfblk35_out1 = cfblk35_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk28_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk68_out1 = cfblk11_out1 + cfblk9_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk95_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk84_out1 = cfblk154_out1 - cfblk142_out1;



  assign cfblk87_out1 = cfblk2_out1 + cfblk84_out1;



  assign cfblk37_out1 = cfblk107_out1 + cfblk31_out1;



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk37_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk3_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk40_out1 = cfblk123_out1 + cfblk40_const_val_1;



  assign cfblk105_out1 = cfblk40_out1 + cfblk105_const_val_1;



  assign cfblk119_out1 = cfblk105_out1 + cfblk89_out1;



  assign cfblk69_out1 = cfblk119_out1 + cfblk95_out1;



  always @(cfblk129_out1, cfblk69_out1) begin
    cfblk83_div_temp = 9'b000000000;
    cfblk83_t_0_0 = 9'b000000000;
    if (cfblk129_out1 == 8'b00000000) begin
      cfblk83_out1 = 8'b11111111;
    end
    else begin
      cfblk83_t_0_0 = {1'b0, cfblk69_out1};
      cfblk83_div_temp = cfblk83_t_0_0 / cfblk129_out1;
      if (cfblk83_div_temp[8] != 1'b0) begin
        cfblk83_out1 = 8'b11111111;
      end
      else begin
        cfblk83_out1 = cfblk83_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk28_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk34_out1 = cfblk156_out1 + cfblk123_out1;



  assign cfblk126_out1 = cfblk56_out1 - cfblk34_out1;



  assign dtc_out_1 = cfblk126_out1;



  assign cfblk70_out1 = dtc_out_1;



  assign cfblk100_out1 = Mysubsystem_34_out1 - cfblk70_out1;



  assign cfblk106_out1 = cfblk100_out1 + cfblk7_out1;



  always @(cfblk106_out1, cfblk83_out1) begin
    cfblk20_div_temp = 9'b000000000;
    cfblk20_t_0_0 = 9'b000000000;
    if (cfblk83_out1 == 8'b00000000) begin
      cfblk20_out1 = 8'b11111111;
    end
    else begin
      cfblk20_t_0_0 = {1'b0, cfblk106_out1};
      cfblk20_div_temp = cfblk20_t_0_0 / cfblk83_out1;
      if (cfblk20_div_temp[8] != 1'b0) begin
        cfblk20_out1 = 8'b11111111;
      end
      else begin
        cfblk20_out1 = cfblk20_div_temp[7:0];
      end
    end
  end



  assign cfblk98_out1 = (cfblk45_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk98_out1;



  assign cfblk116_out1 = dtc_out_2;



  Mysubsystem_47 u_Mysubsystem_47 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk116_out1),  // uint8
                                   .Out1(Mysubsystem_47_out1)  // uint8
                                   );

  DotProduct_block u_cfblk102_inst (.in1(cfblk182_out1),  // uint8
                                    .in2(Mysubsystem_47_out1),  // uint8
                                    .out1(cfblk102_out1)  // uint8
                                    );

  cfblk142 u_cfblk142 (.In1(cfblk102_out1),  // uint8
                       .Out1(cfblk142_out1)  // uint8
                       );

  assign cfblk38_out1 = cfblk71_out1 - cfblk142_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk38_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk22_out1 = cfblk147_out1 + cfblk20_out1;



  assign dtc_out_3 = cfblk18_out1;



  assign cfblk89_out1 = dtc_out_3;



  always @(cfblk12_out1) begin
    cfblk47_div_temp = 9'b000000000;
    cfblk47_t_0_0 = 9'b000000000;
    if (cfblk12_out1 == 8'b00000000) begin
      cfblk47_out1 = 8'b11111111;
    end
    else begin
      cfblk47_t_0_0 = {1'b0, cfblk12_out1};
      cfblk47_div_temp = cfblk47_t_0_0 / cfblk12_out1;
      if (cfblk47_div_temp[8] != 1'b0) begin
        cfblk47_out1 = 8'b11111111;
      end
      else begin
        cfblk47_out1 = cfblk47_div_temp[7:0];
      end
    end
  end



  assign cfblk74_out1 = (cfblk47_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk73_out1 = cfblk74_out1 + cfblk89_out1;



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk73_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign cfblk125_out1 = cfblk4_out1 + cfblk22_out1;



  assign dtc_out_4 = cfblk65_out1;



  assign cfblk121_out1 = dtc_out_4;



  assign cfblk108_out1 = cfblk121_out1 - cfblk91_out1;



  DotProduct_block3 u_cfblk32_inst (.in1(cfblk108_out1),  // uint8
                                    .in2(cfblk120_out1),  // uint8
                                    .out1(cfblk32_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk32_out1;



  assign cfblk115_out1 = dtc_out_5;



  always @(cfblk115_out1, cfblk21_out1) begin
    cfblk133_div_temp = 9'b000000000;
    cfblk133_t_0_0 = 9'b000000000;
    if (cfblk115_out1 == 8'b00000000) begin
      cfblk133_out1 = 8'b11111111;
    end
    else begin
      cfblk133_t_0_0 = {1'b0, cfblk21_out1};
      cfblk133_div_temp = cfblk133_t_0_0 / cfblk115_out1;
      if (cfblk133_div_temp[8] != 1'b0) begin
        cfblk133_out1 = 8'b11111111;
      end
      else begin
        cfblk133_out1 = cfblk133_div_temp[7:0];
      end
    end
  end



  assign cfblk113_out1 = cfblk28_out1 + cfblk133_out1;



  Mysubsystem_19 u_Mysubsystem_19 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(Mysubsystem_2_out3),  // uint8
                                   .Out1(Mysubsystem_19_out1)
                                   );

  assign cfblk182_out1 = {7'b0, Mysubsystem_19_out1};



  assign dtc_out_6 = cfblk182_out1;



  assign cfblk91_out1 = dtc_out_6;



  DotProduct_block2 u_cfblk27_inst (.in1(cfblk91_out1),  // uint8
                                    .in2(cfblk113_out1),  // uint8
                                    .out1(cfblk27_out1)  // uint8
                                    );

  DotProduct_block4 u_cfblk46_inst (.in1(cfblk27_out1),  // uint8
                                    .in2(cfblk125_out1),  // uint8
                                    .out1(cfblk46_out1)  // uint8
                                    );

  assign cfblk71_out1 = cfblk46_out1 + cfblk150_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 16'b0000000000000000;
        cfblk149_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = Mysubsystem_2_out2;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk107_1 = {16'b0, cfblk149_out1};
  assign cfblk107_2 = {24'b0, cfblk71_out1};
  assign cfblk107_add_temp = cfblk107_1 + cfblk107_2;
  assign cfblk107_out1 = cfblk107_add_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk107_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  assign cfblk86_out1 = cfblk148_out1 + cfblk87_out1;



  assign dtc_out_7 = cfblk86_out1;



  assign cfblk132_out1 = dtc_out_7;



  assign cfblk14_out1 = (cfblk132_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk30_out1 = cfblk14_out1 - cfblk56_out1;



  always @(cfblk30_out1, cfblk68_out1) begin
    cfblk65_div_temp = 9'b000000000;
    cfblk65_t_0_0 = 9'b000000000;
    if (cfblk68_out1 == 8'b00000000) begin
      cfblk65_out1 = 8'b11111111;
    end
    else begin
      cfblk65_t_0_0 = {1'b0, cfblk30_out1};
      cfblk65_div_temp = cfblk65_t_0_0 / cfblk68_out1;
      if (cfblk65_div_temp[8] != 1'b0) begin
        cfblk65_out1 = 8'b11111111;
      end
      else begin
        cfblk65_out1 = cfblk65_div_temp[7:0];
      end
    end
  end



  assign cfblk13_out1 = cfblk95_out1 + cfblk13_const_val_1;



  assign dtc_out_8 = cfblk13_out1;



  assign cfblk28_out1 = dtc_out_8;



  assign cfblk90_out1 = cfblk28_out1 + cfblk90_const_val_1;



  DotProduct_block5 u_cfblk9_inst (.in1(cfblk134_out1),  // uint8
                                   .in2(cfblk90_out1),  // uint8
                                   .out1(cfblk9_out1)  // uint8
                                   );

  assign cfblk76_out1 = cfblk9_out1 - cfblk85_out1;



  assign cfblk49_out1 = cfblk76_out1 - cfblk65_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk49_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk45_out1 = cfblk159_out1 - cfblk4_out1;



  assign dtc_out_9 = cfblk45_out1;



  assign cfblk41_out1 = dtc_out_9;



  assign cfblk54_out1 = cfblk41_out1 + cfblk158_out1;



  assign cfblk95_out1 = cfblk54_out1 + cfblk73_out1;



  assign cfblk77_out1 = cfblk95_out1 - cfblk35_out1;



  DotProduct_block1 u_cfblk21_inst (.in1(cfblk77_out1),  // uint8
                                    .in2(cfblk35_out1),  // uint8
                                    .out1(cfblk21_out1)  // uint8
                                    );

  Mysubsystem_2 u_Mysubsystem_2 (.In1(cfblk21_out1),  // uint8
                                 .In2(cfblk107_out1),  // uint8
                                 .In3(cfblk100_out1),  // uint8
                                 .In4(cfblk134_out1),  // uint8
                                 .Out1(Mysubsystem_2_out1),  // uint16
                                 .Out2(Mysubsystem_2_out2),  // uint16
                                 .Out3(Mysubsystem_2_out3)  // uint8
                                 );

  assign cfblk31_out1 = cfblk80_out1 + Mysubsystem_34_out1;



  assign cfblk134_1 = {24'b0, cfblk31_out1};
  assign cfblk134_2 = {31'b0, cfblk8_relop1};
  assign cfblk134_add_temp = cfblk134_1 + cfblk134_2;
  assign cfblk134_out1 = cfblk134_add_temp[7:0];



  assign cfblk18_out1 = Mysubsystem_26_out1 + cfblk134_out1;



  Mysubsystem_16 u_Mysubsystem_16 (.In1(cfblk18_out1),  // uint8
                                   .u(Mysubsystem_2_out1),  // uint16
                                   .Out1(Mysubsystem_16_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = Mysubsystem_16_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  assign cfblk101_out1 = cfblk146_out1 + cfblk43_out1;



  assign cfblk19_out1 = (cfblk101_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk124_out1 = cfblk19_out1 + cfblk153_out1;



  assign cfblk56_out1 = cfblk124_out1 + cfblk56_const_val_1;



  assign dtc_out_10 = cfblk56_out1;



  assign cfblk110_out1 = dtc_out_10;



  assign cfblk12_out1 = cfblk110_out1 - cfblk160_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk12_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk127_out1 = cfblk152_out1 - cfblk14_out1;



  assign cfblk8_relop1 = cfblk127_out1 <= cfblk155_out1;



  assign cfblk122_1 = {31'b0, cfblk8_relop1};
  assign cfblk122_2 = {24'b0, cfblk165_out1};
  assign cfblk122_add_temp = cfblk122_1 + cfblk122_2;
  assign cfblk122_out1 = cfblk122_add_temp[7:0];



  assign cfblk80_out1 = cfblk122_out1 - cfblk161_out1;



  assign cfblk123_1 = {24'b0, cfblk80_out1};
  assign cfblk123_2 = {16'b0, cfblk140_out1};
  assign cfblk123_add_temp = cfblk123_1 + cfblk123_2;
  assign cfblk123_out1 = cfblk123_add_temp[7:0];



  assign Hdl_out = cfblk123_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

