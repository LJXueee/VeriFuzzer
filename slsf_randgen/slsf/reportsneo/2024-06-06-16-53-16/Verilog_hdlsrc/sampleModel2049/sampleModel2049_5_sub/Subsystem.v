// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel2049\sampleModel2049_5_sub\Subsystem.v
// Created: 2024-08-16 22:31:28
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel2049_5_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [15:0] cfblk152_out1;  // uint16
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk108_const_val_1;  // uint8
  wire [7:0] cfblk59_const_val_1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk123_const_val_1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk62_const_val_1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk53_const_val_1;  // uint8
  wire [7:0] cfblk150_const_val_1;  // uint8
  wire [7:0] cfblk58_const_val_1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk144_const_val_1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  reg [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk48_const_val_1;  // uint8
  wire [7:0] cfblk113_const_val_1;  // uint8
  wire [7:0] cfblk27_const_val_1;  // uint8
  wire [7:0] cfblk15_const_val_1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk95_const_val_1;  // uint8
  wire [7:0] cfblk100_const_val_1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  reg [7:0] cfblk96_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] Mysubsystem_18_out2;  // uint8
  wire [15:0] Mysubsystem_34_out1;  // uint16
  reg [15:0] cfblk163_reg [0:1];  // ufix16 [2]
  wire [15:0] cfblk163_reg_next [0:1];  // ufix16 [2]
  wire [15:0] cfblk163_out1;  // uint16
  reg [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  reg [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  reg [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] Mysubsystem_18_out1;  // uint8
  wire [31:0] Mysubsystem_20_out1;  // ufix32_En22
  wire [31:0] Mysubsystem_16_out1;  // ufix32_En22
  reg [31:0] cfblk162_reg [0:1];  // ufix32 [2]
  wire [31:0] cfblk162_reg_next [0:1];  // ufix32_En22 [2]
  wire [31:0] cfblk162_out1;  // ufix32_En22
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [31:0] cfblk38_add_cast;  // ufix32_En21
  wire [31:0] cfblk38_add_cast_1;  // ufix32_En21
  wire [31:0] cfblk38_add_temp;  // ufix32_En21
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] Mysubsystem_1_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  reg [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  reg [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk49_out1;  // uint8
  reg [8:0] cfblk80_div_temp;  // ufix9
  reg [8:0] cfblk80_t_0_0;  // ufix9
  reg [8:0] cfblk125_div_temp;  // ufix9
  reg [8:0] cfblk125_t_0_0;  // ufix9
  reg [15:0] cfblk64_varargout_1;  // ufix16
  reg [16:0] cfblk64_div_temp;  // ufix17
  reg [16:0] cfblk64_t_0_0;  // ufix17
  reg [8:0] cfblk56_div_temp;  // ufix9
  reg [8:0] cfblk56_t_0_0;  // ufix9
  reg [8:0] cfblk89_div_temp;  // ufix9
  reg [8:0] cfblk89_t_0_0;  // ufix9
  reg [8:0] cfblk96_div_temp;  // ufix9
  reg [8:0] cfblk96_t_0_0;  // ufix9
  reg [8:0] cfblk74_div_temp;  // ufix9
  reg [8:0] cfblk74_t_0_0;  // ufix9
  reg [8:0] cfblk99_div_temp;  // ufix9
  reg [8:0] cfblk99_t_0_0;  // ufix9
  reg [8:0] cfblk29_div_temp;  // ufix9
  reg [8:0] cfblk29_t_0_0;  // ufix9
  reg [8:0] cfblk77_div_temp;  // ufix9
  reg [8:0] cfblk77_t_0_0;  // ufix9
  reg [8:0] cfblk119_div_temp;  // ufix9
  reg [8:0] cfblk119_t_0_0;  // ufix9
  reg [8:0] cfblk142_div_temp;  // ufix9
  reg [8:0] cfblk142_t_0_0;  // ufix9
  reg [8:0] cfblk86_div_temp;  // ufix9
  reg [8:0] cfblk86_t_0_0;  // ufix9
  reg [15:0] cfblk49_varargout_1;  // ufix16
  reg [16:0] cfblk49_div_temp;  // ufix17
  reg [16:0] cfblk49_t_0_0;  // ufix17


  cfblk152 u_cfblk152 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk152_out1)  // uint16
                       );

  assign cfblk153_out1 = 8'b00000001;



  assign cfblk35_out1 = (cfblk153_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk35_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk2_out1 = cfblk1_out1 | 8'b00000001;



  assign cfblk140_out1 = (cfblk2_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk133_out1 = cfblk140_out1 + cfblk140_out1;



  assign dtc_out = cfblk133_out1;



  assign cfblk30_out1 = dtc_out;



  assign cfblk108_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk59_const_val_1 = 8'b00000000;



  assign cfblk131_out1 = (cfblk140_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk123_const_val_1 = 8'b00000000;



  assign cfblk123_out1 = cfblk131_out1 + cfblk123_const_val_1;



  assign cfblk62_const_val_1 = 8'b00000000;



  assign dtc_out_1 = cfblk1_out1;



  assign cfblk112_out1 = dtc_out_1;



  assign cfblk53_const_val_1 = 8'b00000000;



  assign cfblk150_const_val_1 = 8'b00000000;



  assign cfblk58_const_val_1 = 8'b00000000;



  assign dtc_out_2 = cfblk30_out1;



  assign cfblk147_out1 = dtc_out_2;



  assign cfblk144_const_val_1 = 8'b00000000;



  cfblk154 u_cfblk154 (.In1(cfblk153_out1),  // uint8
                       .Out1(cfblk154_out1)  // uint8
                       );

  always @(cfblk133_out1, cfblk154_out1) begin
    cfblk80_div_temp = 9'b000000000;
    cfblk80_t_0_0 = 9'b000000000;
    if (cfblk133_out1 == 8'b00000000) begin
      cfblk80_out1 = 8'b11111111;
    end
    else begin
      cfblk80_t_0_0 = {1'b0, cfblk154_out1};
      cfblk80_div_temp = cfblk80_t_0_0 / cfblk133_out1;
      if (cfblk80_div_temp[8] != 1'b0) begin
        cfblk80_out1 = 8'b11111111;
      end
      else begin
        cfblk80_out1 = cfblk80_div_temp[7:0];
      end
    end
  end



  assign cfblk48_const_val_1 = 8'b00000000;



  assign cfblk113_const_val_1 = 8'b00000000;



  assign cfblk27_const_val_1 = 8'b00000000;



  assign cfblk15_const_val_1 = 8'b00000000;



  assign cfblk93_out1 = cfblk140_out1 + cfblk140_out1;



  assign dtc_out_3 = cfblk140_out1;



  assign cfblk104_out1 = dtc_out_3;



  assign cfblk16_out1 = cfblk104_out1 + cfblk2_out1;



  assign cfblk66_out1 = cfblk93_out1 - cfblk16_out1;



  assign cfblk95_const_val_1 = 8'b00000000;



  assign cfblk100_const_val_1 = 8'b00000000;



  assign dtc_out_4 = cfblk91_out1;



  assign cfblk34_out1 = dtc_out_4;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk34_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign dtc_out_5 = cfblk122_out1;



  assign cfblk91_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk28_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign dtc_out_6 = cfblk96_out1;



  assign cfblk122_out1 = dtc_out_6;



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk122_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk142_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk127_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk32_out1 = cfblk72_out1 + cfblk35_out1;



  always @(cfblk32_out1, cfblk73_out1) begin
    cfblk125_div_temp = 9'b000000000;
    cfblk125_t_0_0 = 9'b000000000;
    if (cfblk73_out1 == 8'b00000000) begin
      cfblk125_out1 = 8'b11111111;
    end
    else begin
      cfblk125_t_0_0 = {1'b0, cfblk32_out1};
      cfblk125_div_temp = cfblk125_t_0_0 / cfblk73_out1;
      if (cfblk125_div_temp[8] != 1'b0) begin
        cfblk125_out1 = 8'b11111111;
      end
      else begin
        cfblk125_out1 = cfblk125_div_temp[7:0];
      end
    end
  end



  assign cfblk105_out1 = cfblk125_out1 - cfblk167_out1;



  assign cfblk58_out1 = cfblk40_out1 + cfblk58_const_val_1;



  Mysubsystem_34 u_Mysubsystem_34 (.In1(cfblk58_out1),  // uint8
                                   .In2(Mysubsystem_18_out2),  // uint8
                                   .In3(cfblk147_out1),  // uint8
                                   .Out1(Mysubsystem_34_out1)  // uint16
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 16'b0000000000000000;
        cfblk163_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = Mysubsystem_34_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  always @(cfblk105_out1, cfblk163_out1) begin
    cfblk64_div_temp = 17'b00000000000000000;
    cfblk64_t_0_0 = 17'b00000000000000000;
    if (cfblk105_out1 == 8'b00000000) begin
      cfblk64_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk64_t_0_0 = {1'b0, cfblk163_out1};
      cfblk64_div_temp = cfblk64_t_0_0 / cfblk105_out1;
      if (cfblk64_div_temp[16] != 1'b0) begin
        cfblk64_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk64_varargout_1 = cfblk64_div_temp[15:0];
      end
    end
    if (cfblk64_varargout_1[15:8] != 8'b00000000) begin
      cfblk64_out1 = 8'b11111111;
    end
    else begin
      cfblk64_out1 = cfblk64_varargout_1[7:0];
    end
  end



  always @(cfblk62_out1, cfblk79_out1) begin
    cfblk56_div_temp = 9'b000000000;
    cfblk56_t_0_0 = 9'b000000000;
    if (cfblk62_out1 == 8'b00000000) begin
      cfblk56_out1 = 8'b11111111;
    end
    else begin
      cfblk56_t_0_0 = {1'b0, cfblk79_out1};
      cfblk56_div_temp = cfblk56_t_0_0 / cfblk62_out1;
      if (cfblk56_div_temp[8] != 1'b0) begin
        cfblk56_out1 = 8'b11111111;
      end
      else begin
        cfblk56_out1 = cfblk56_div_temp[7:0];
      end
    end
  end



  assign cfblk126_out1 = cfblk56_out1 + cfblk72_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk100_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk53_out1 = cfblk19_out1 + cfblk53_const_val_1;



  assign cfblk150_out1 = cfblk53_out1 + cfblk150_const_val_1;



  assign cfblk62_out1 = cfblk99_out1 + cfblk62_const_val_1;



  DotProduct_block4 u_cfblk26_inst (.in1(cfblk62_out1),  // uint8
                                    .in2(cfblk121_out1),  // uint8
                                    .out1(cfblk26_out1)  // uint8
                                    );

  assign cfblk61_out1 = cfblk26_out1 - cfblk145_out1;



  assign cfblk116_out1 = cfblk61_out1 - cfblk112_out1;



  always @(cfblk116_out1, cfblk123_out1) begin
    cfblk89_div_temp = 9'b000000000;
    cfblk89_t_0_0 = 9'b000000000;
    if (cfblk116_out1 == 8'b00000000) begin
      cfblk89_out1 = 8'b11111111;
    end
    else begin
      cfblk89_t_0_0 = {1'b0, cfblk123_out1};
      cfblk89_div_temp = cfblk89_t_0_0 / cfblk116_out1;
      if (cfblk89_div_temp[8] != 1'b0) begin
        cfblk89_out1 = 8'b11111111;
      end
      else begin
        cfblk89_out1 = cfblk89_div_temp[7:0];
      end
    end
  end



  assign cfblk47_out1 = (cfblk89_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk50_out1 = cfblk47_out1 - cfblk94_out1;



  Mysubsystem_18 u_Mysubsystem_18 (.In1(cfblk50_out1),  // uint8
                                   .In2(cfblk150_out1),  // uint8
                                   .Out1(Mysubsystem_18_out1),  // uint8
                                   .Out2(Mysubsystem_18_out2)  // uint8
                                   );

  Mysubsystem_20 u_Mysubsystem_20 (.In1(Mysubsystem_18_out1),  // uint8
                                   .Out1(Mysubsystem_20_out1)  // ufix32_En22
                                   );

  Mysubsystem_16 u_Mysubsystem_16 (.In1(Mysubsystem_20_out1),  // ufix32_En22
                                   .Out1(Mysubsystem_16_out1)  // ufix32_En22
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 32'b00000000000000000000000000000000;
        cfblk162_reg[1] <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = Mysubsystem_16_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk82_out1 = cfblk63_out1 + cfblk95_out1;



  always @(cfblk82_out1, cfblk92_out1) begin
    cfblk96_div_temp = 9'b000000000;
    cfblk96_t_0_0 = 9'b000000000;
    if (cfblk92_out1 == 8'b00000000) begin
      cfblk96_out1 = 8'b11111111;
    end
    else begin
      cfblk96_t_0_0 = {1'b0, cfblk82_out1};
      cfblk96_div_temp = cfblk96_t_0_0 / cfblk92_out1;
      if (cfblk96_div_temp[8] != 1'b0) begin
        cfblk96_out1 = 8'b11111111;
      end
      else begin
        cfblk96_out1 = cfblk96_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk96_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk132_out1 = cfblk171_out1 - cfblk99_out1;



  assign cfblk38_add_cast = {3'b0, {cfblk132_out1, 21'b000000000000000000000}};
  assign cfblk38_add_cast_1 = {1'b0, cfblk162_out1[31:1]};
  assign cfblk38_add_temp = cfblk38_add_cast + cfblk38_add_cast_1;
  assign cfblk38_out1 = cfblk38_add_temp[28:21];



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk38_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk70_out1 = cfblk158_out1 + cfblk106_out1;



  assign cfblk33_out1 = cfblk70_out1 + cfblk170_out1;



  assign cfblk145_out1 = cfblk59_out1 + cfblk19_out1;



  cfblk155 u_cfblk155 (.In1(cfblk145_out1),  // uint8
                       .Out1(cfblk155_out1)  // uint8
                       );

  Mysubsystem_1 u_Mysubsystem_1 (.In1(cfblk155_out1),  // uint8
                                 .Out1(Mysubsystem_1_out1)  // uint8
                                 );

  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = Mysubsystem_1_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(cfblk161_out1, cfblk33_out1) begin
    cfblk74_div_temp = 9'b000000000;
    cfblk74_t_0_0 = 9'b000000000;
    if (cfblk33_out1 == 8'b00000000) begin
      cfblk74_out1 = 8'b11111111;
    end
    else begin
      cfblk74_t_0_0 = {1'b0, cfblk161_out1};
      cfblk74_div_temp = cfblk74_t_0_0 / cfblk33_out1;
      if (cfblk74_div_temp[8] != 1'b0) begin
        cfblk74_out1 = 8'b11111111;
      end
      else begin
        cfblk74_out1 = cfblk74_div_temp[7:0];
      end
    end
  end



  assign cfblk110_out1 = cfblk74_out1 + cfblk63_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk121_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  always @(cfblk110_out1, cfblk159_out1) begin
    cfblk99_div_temp = 9'b000000000;
    cfblk99_t_0_0 = 9'b000000000;
    if (cfblk110_out1 == 8'b00000000) begin
      cfblk99_out1 = 8'b11111111;
    end
    else begin
      cfblk99_t_0_0 = {1'b0, cfblk159_out1};
      cfblk99_div_temp = cfblk99_t_0_0 / cfblk110_out1;
      if (cfblk99_div_temp[8] != 1'b0) begin
        cfblk99_out1 = 8'b11111111;
      end
      else begin
        cfblk99_out1 = cfblk99_div_temp[7:0];
      end
    end
  end



  assign cfblk84_out1 = cfblk99_out1 + cfblk126_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk84_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk40_out1 = cfblk157_out1 - cfblk64_out1;



  assign cfblk144_out1 = cfblk40_out1 + cfblk144_const_val_1;



  assign cfblk106_out1 = cfblk144_out1 - cfblk165_out1;



  assign cfblk65_out1 = cfblk106_out1 - cfblk70_out1;



  DotProduct_block10 u_cfblk9_inst (.in1(cfblk65_out1),  // uint8
                                    .in2(cfblk47_out1),  // uint8
                                    .out1(cfblk9_out1)  // uint8
                                    );

  assign cfblk45_out1 = cfblk9_out1 + cfblk3_out1;



  always @(cfblk112_out1, cfblk45_out1) begin
    cfblk29_div_temp = 9'b000000000;
    cfblk29_t_0_0 = 9'b000000000;
    if (cfblk112_out1 == 8'b00000000) begin
      cfblk29_out1 = 8'b11111111;
    end
    else begin
      cfblk29_t_0_0 = {1'b0, cfblk45_out1};
      cfblk29_div_temp = cfblk29_t_0_0 / cfblk112_out1;
      if (cfblk29_div_temp[8] != 1'b0) begin
        cfblk29_out1 = 8'b11111111;
      end
      else begin
        cfblk29_out1 = cfblk29_div_temp[7:0];
      end
    end
  end



  DotProduct_block5 u_cfblk28_inst (.in1(cfblk29_out1),  // uint8
                                    .in2(cfblk80_out1),  // uint8
                                    .out1(cfblk28_out1)  // uint8
                                    );

  always @(cfblk28_out1, cfblk31_out1) begin
    cfblk77_div_temp = 9'b000000000;
    cfblk77_t_0_0 = 9'b000000000;
    if (cfblk28_out1 == 8'b00000000) begin
      cfblk77_out1 = 8'b11111111;
    end
    else begin
      cfblk77_t_0_0 = {1'b0, cfblk31_out1};
      cfblk77_div_temp = cfblk77_t_0_0 / cfblk28_out1;
      if (cfblk77_div_temp[8] != 1'b0) begin
        cfblk77_out1 = 8'b11111111;
      end
      else begin
        cfblk77_out1 = cfblk77_div_temp[7:0];
      end
    end
  end



  DotProduct_block6 u_cfblk36_inst (.in1(cfblk127_out1),  // uint8
                                    .in2(cfblk72_out1),  // uint8
                                    .out1(cfblk36_out1)  // uint8
                                    );

  assign cfblk97_out1 = cfblk95_out1 + cfblk36_out1;



  assign cfblk79_out1 = cfblk97_out1 - cfblk77_out1;



  assign cfblk108_out1 = cfblk59_out1 + cfblk108_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk108_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  assign cfblk68_out1 = cfblk160_out1 - cfblk146_out1;



  assign cfblk59_out1 = cfblk68_out1 + cfblk59_const_val_1;



  assign cfblk94_out1 = (cfblk59_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_7 = cfblk94_out1;



  assign cfblk111_out1 = dtc_out_7;



  always @(cfblk111_out1, cfblk79_out1) begin
    cfblk119_div_temp = 9'b000000000;
    cfblk119_t_0_0 = 9'b000000000;
    if (cfblk79_out1 == 8'b00000000) begin
      cfblk119_out1 = 8'b11111111;
    end
    else begin
      cfblk119_t_0_0 = {1'b0, cfblk111_out1};
      cfblk119_div_temp = cfblk119_t_0_0 / cfblk79_out1;
      if (cfblk119_div_temp[8] != 1'b0) begin
        cfblk119_out1 = 8'b11111111;
      end
      else begin
        cfblk119_out1 = cfblk119_div_temp[7:0];
      end
    end
  end



  always @(cfblk112_out1, cfblk119_out1) begin
    cfblk142_div_temp = 9'b000000000;
    cfblk142_t_0_0 = 9'b000000000;
    if (cfblk112_out1 == 8'b00000000) begin
      cfblk142_out1 = 8'b11111111;
    end
    else begin
      cfblk142_t_0_0 = {1'b0, cfblk119_out1};
      cfblk142_div_temp = cfblk142_t_0_0 / cfblk112_out1;
      if (cfblk142_div_temp[8] != 1'b0) begin
        cfblk142_out1 = 8'b11111111;
      end
      else begin
        cfblk142_out1 = cfblk142_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk142_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk120_out1 = cfblk19_out1 + cfblk166_out1;



  assign dtc_out_8 = cfblk120_out1;



  assign cfblk13_out1 = dtc_out_8;



  assign cfblk146_out1 = cfblk13_out1 + cfblk164_out1;



  assign dtc_out_9 = cfblk146_out1;



  assign cfblk107_out1 = dtc_out_9;



  assign cfblk48_out1 = cfblk107_out1 + cfblk48_const_val_1;



  assign cfblk138_out1 = cfblk48_out1 - cfblk91_out1;



  assign cfblk113_out1 = cfblk138_out1 + cfblk113_const_val_1;



  assign cfblk109_out1 = cfblk113_out1 + cfblk146_out1;



  assign cfblk27_out1 = cfblk109_out1 + cfblk27_const_val_1;



  DotProduct_block8 u_cfblk69_inst (.in1(cfblk27_out1),  // uint8
                                    .in2(cfblk62_out1),  // uint8
                                    .out1(cfblk69_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk69_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  DotProduct_block u_cfblk102_inst (.in1(cfblk168_out1),  // uint8
                                    .in2(cfblk38_out1),  // uint8
                                    .out1(cfblk102_out1)  // uint8
                                    );

  DotProduct_block1 u_cfblk121_inst (.in1(cfblk102_out1),  // uint8
                                     .in2(cfblk172_out1),  // uint8
                                     .out1(cfblk121_out1)  // uint8
                                     );

  always @(cfblk121_out1, cfblk73_out1) begin
    cfblk86_div_temp = 9'b000000000;
    cfblk86_t_0_0 = 9'b000000000;
    if (cfblk121_out1 == 8'b00000000) begin
      cfblk86_out1 = 8'b11111111;
    end
    else begin
      cfblk86_t_0_0 = {1'b0, cfblk73_out1};
      cfblk86_div_temp = cfblk86_t_0_0 / cfblk121_out1;
      if (cfblk86_div_temp[8] != 1'b0) begin
        cfblk86_out1 = 8'b11111111;
      end
      else begin
        cfblk86_out1 = cfblk86_div_temp[7:0];
      end
    end
  end



  assign cfblk15_out1 = cfblk86_out1 + cfblk15_const_val_1;



  DotProduct_block3 u_cfblk19_inst (.in1(cfblk15_out1),  // uint8
                                    .in2(cfblk66_out1),  // uint8
                                    .out1(cfblk19_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk19_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  DotProduct_block7 u_cfblk63_inst (.in1(cfblk140_out1),  // uint8
                                    .in2(cfblk169_out1),  // uint8
                                    .out1(cfblk63_out1)  // uint8
                                    );

  assign dtc_out_10 = cfblk63_out1;



  assign cfblk67_out1 = dtc_out_10;



  DotProduct_block9 u_cfblk72_inst (.in1(cfblk67_out1),  // uint8
                                    .in2(cfblk140_out1),  // uint8
                                    .out1(cfblk72_out1)  // uint8
                                    );

  assign cfblk134_out1 = cfblk133_out1 + cfblk72_out1;



  assign cfblk75_out1 = (cfblk134_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk95_out1 = cfblk75_out1 + cfblk95_const_val_1;



  assign dtc_out_11 = cfblk95_out1;



  assign cfblk73_out1 = dtc_out_11;



  assign cfblk31_out1 = cfblk73_out1 + cfblk15_out1;



  assign cfblk51_out1 = cfblk31_out1 + cfblk40_out1;



  assign cfblk100_out1 = cfblk51_out1 + cfblk100_const_val_1;



  assign cfblk92_out1 = cfblk30_out1 + cfblk100_out1;



  always @(cfblk152_out1, cfblk92_out1) begin
    cfblk49_div_temp = 17'b00000000000000000;
    cfblk49_t_0_0 = 17'b00000000000000000;
    if (cfblk92_out1 == 8'b00000000) begin
      cfblk49_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk49_t_0_0 = {1'b0, cfblk152_out1};
      cfblk49_div_temp = cfblk49_t_0_0 / cfblk92_out1;
      if (cfblk49_div_temp[16] != 1'b0) begin
        cfblk49_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk49_varargout_1 = cfblk49_div_temp[15:0];
      end
    end
    if (cfblk49_varargout_1[15:8] != 8'b00000000) begin
      cfblk49_out1 = 8'b11111111;
    end
    else begin
      cfblk49_out1 = cfblk49_varargout_1[7:0];
    end
  end



  DotProduct_block2 u_cfblk127_inst (.in1(cfblk49_out1),  // uint8
                                     .in2(cfblk27_out1),  // uint8
                                     .out1(cfblk127_out1)  // uint8
                                     );

  assign Hdl_out = cfblk127_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

