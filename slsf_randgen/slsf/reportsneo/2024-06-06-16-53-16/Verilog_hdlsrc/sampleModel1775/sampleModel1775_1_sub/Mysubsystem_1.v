// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1775\sampleModel1775_1_sub\Mysubsystem_1.v
// Created: 2024-08-14 06:18:57
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Mysubsystem_1
// Source Path: sampleModel1775_1_sub/Subsystem/Mysubsystem_1
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Mysubsystem_1
          (clk,
           reset,
           enb,
           In1,
           In2,
           Out1);


  input   clk;
  input   reset;
  input   enb;
  input   In1;
  input   [7:0] In2;  // uint8
  output  [7:0] Out1;  // uint8


  wire bitMask_for_cfblk3;
  wire cfblk3_out1;
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [31:0] cfblk131_add_temp;  // ufix32
  wire [31:0] cfblk131_1;  // ufix32
  wire [31:0] cfblk131_2;  // ufix32
  wire [7:0] cfblk131_out1;  // uint8


  assign bitMask_for_cfblk3 = 1'b1;



  assign cfblk3_out1 = In1 & bitMask_for_cfblk3;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = In2;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk131_1 = {31'b0, cfblk3_out1};
  assign cfblk131_2 = {24'b0, cfblk175_out1};
  assign cfblk131_add_temp = cfblk131_1 + cfblk131_2;
  assign cfblk131_out1 = cfblk131_add_temp[7:0];



  assign Out1 = cfblk131_out1;

endmodule  // Mysubsystem_1

