// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1395\sampleModel1395_sub\Subsystem.v
// Created: 2024-08-11 23:52:06
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// (no clock)    0
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk151                      (no clock)    inf
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1395_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk151,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk151;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [15:0] cfblk159_out1;  // uint16
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk130_const_val_1;  // uint8
  wire [7:0] cfblk125_const_val_1;  // uint8
  wire [7:0] cfblk70_const_val_1;  // uint8
  wire [7:0] cfblk68_const_val_1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk5_const_val_1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk96_const_val_1;  // uint8
  wire [7:0] cfblk77_const_val_1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk41_const_val_1;  // uint8
  wire [7:0] cfblk57_const_val_1;  // uint8
  wire [7:0] cfblk97_const_val_1;  // uint8
  wire [7:0] cfblk16_const_val_1;  // uint8
  wire cfblk40_out1_is_not0;
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk192_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk139_const_val_1;  // uint8
  wire [7:0] cfblk34_const_val_1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire cfblk98_out1_is_not0;
  wire cfblk3_out1;
  wire [7:0] cfblk86_out1;  // uint8
  wire [31:0] cfblk23_add_temp;  // ufix32
  wire [31:0] cfblk23_1;  // ufix32
  wire [31:0] cfblk23_2;  // ufix32
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk134_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire cfblk89_out1_is_not0;
  reg [7:0] cfblk135_out1;  // uint8
  wire cfblk43_out1_is_not0;
  wire cfblk2_out1;
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  wire [31:0] cfblk74_add_temp;  // ufix32
  wire [31:0] cfblk74_1;  // ufix32
  wire [31:0] cfblk74_2;  // ufix32
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  reg [7:0] cfblk103_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  reg [7:0] cfblk126_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  reg [7:0] cfblk24_out1;  // uint8
  reg [8:0] cfblk7_div_temp;  // ufix9
  reg [8:0] cfblk7_t_0_0;  // ufix9
  reg [8:0] cfblk135_div_temp;  // ufix9
  reg [8:0] cfblk135_t_0_0;  // ufix9
  reg [8:0] cfblk52_div_temp;  // ufix9
  reg [8:0] cfblk52_t_0_0;  // ufix9
  reg [8:0] cfblk71_div_temp;  // ufix9
  reg [8:0] cfblk71_t_0_0;  // ufix9
  reg [8:0] cfblk126_div_temp;  // ufix9
  reg [8:0] cfblk126_t_0_0;  // ufix9
  reg [8:0] cfblk87_div_temp;  // ufix9
  reg [8:0] cfblk87_t_0_0;  // ufix9
  reg [15:0] cfblk103_varargout_1;  // ufix16
  reg [16:0] cfblk103_div_temp;  // ufix17
  reg [16:0] cfblk103_t_0_0;  // ufix17
  reg [8:0] cfblk24_div_temp;  // ufix9
  reg [8:0] cfblk24_t_0_0;  // ufix9


  assign cfblk158_out1 = 8'b00000000;



  assign cfblk151 = cfblk158_out1;

  assign cfblk156_out1 = 8'b00000000;



  cfblk159 u_cfblk159 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk159_out1)  // uint16
                       );

  assign cfblk157_out1 = 8'b00000000;



  assign cfblk47_out1 = (cfblk157_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk99_out1 = cfblk158_out1 - cfblk47_out1;



  assign enb = clk_enable;

  assign cfblk154_out1 = 8'b00000001;



  assign cfblk130_const_val_1 = 8'b00000000;



  assign cfblk125_const_val_1 = 8'b00000000;



  assign cfblk70_const_val_1 = 8'b00000000;



  assign cfblk68_const_val_1 = 8'b00000000;



  assign cfblk155_out1 = 8'b00000001;



  assign cfblk5_const_val_1 = 8'b00000000;



  assign cfblk5_out1 = cfblk155_out1 + cfblk5_const_val_1;



  assign cfblk96_const_val_1 = 8'b00000000;



  assign cfblk77_const_val_1 = 8'b00000000;



  assign cfblk6_out1 = (cfblk157_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk41_const_val_1 = 8'b00000000;



  assign cfblk57_const_val_1 = 8'b00000000;



  assign cfblk97_const_val_1 = 8'b00000000;



  assign cfblk16_const_val_1 = 8'b00000000;



  assign cfblk40_out1_is_not0 = cfblk155_out1 != 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk192_process
      if (reset == 1'b1) begin
        cfblk192_reg[0] <= 8'b00000000;
        cfblk192_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk192_reg[0] <= cfblk192_reg_next[0];
          cfblk192_reg[1] <= cfblk192_reg_next[1];
        end
      end
    end

  assign cfblk192_out1 = cfblk192_reg[1];
  assign cfblk192_reg_next[0] = cfblk142_out1;
  assign cfblk192_reg_next[1] = cfblk192_reg[0];



  assign cfblk27_out1 = (cfblk192_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out = cfblk27_out1;



  assign cfblk142_out1 = dtc_out;



  assign cfblk139_const_val_1 = 8'b00000000;



  assign cfblk34_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk22_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk97_out1 = cfblk80_out1 + cfblk97_const_val_1;



  assign cfblk16_out1 = cfblk97_out1 + cfblk16_const_val_1;



  assign cfblk57_out1 = cfblk62_out1 + cfblk57_const_val_1;



  assign cfblk8_out1 = cfblk57_out1 - cfblk57_out1;



  assign cfblk111_out1 = cfblk8_out1 - cfblk16_out1;



  assign cfblk98_out1_is_not0 = cfblk111_out1 != 8'b00000000;



  assign cfblk3_out1 = cfblk98_out1_is_not0 & cfblk40_out1_is_not0;



  assign cfblk23_1 = {31'b0, cfblk3_out1};
  assign cfblk23_2 = {24'b0, cfblk86_out1};
  assign cfblk23_add_temp = cfblk23_1 + cfblk23_2;
  assign cfblk23_out1 = cfblk23_add_temp[7:0];



  assign cfblk146_out1 = cfblk23_out1 + cfblk142_out1;



  assign cfblk120_out1 = cfblk31_out1 + cfblk68_out1;



  DotProduct_block8 u_cfblk67_inst (.in1(cfblk120_out1),  // uint8
                                    .in2(cfblk15_out1),  // uint8
                                    .out1(cfblk67_out1)  // uint8
                                    );

  always @(cfblk15_out1, cfblk67_out1) begin
    cfblk7_div_temp = 9'b000000000;
    cfblk7_t_0_0 = 9'b000000000;
    if (cfblk15_out1 == 8'b00000000) begin
      cfblk7_out1 = 8'b11111111;
    end
    else begin
      cfblk7_t_0_0 = {1'b0, cfblk67_out1};
      cfblk7_div_temp = cfblk7_t_0_0 / cfblk15_out1;
      if (cfblk7_div_temp[8] != 1'b0) begin
        cfblk7_out1 = 8'b11111111;
      end
      else begin
        cfblk7_out1 = cfblk7_div_temp[7:0];
      end
    end
  end



  assign cfblk46_out1 = cfblk52_out1 + cfblk7_out1;



  assign cfblk77_out1 = cfblk15_out1 + cfblk77_const_val_1;



  assign cfblk85_out1 = cfblk77_out1 + cfblk6_out1;



  assign dtc_out_1 = cfblk85_out1;



  assign cfblk134_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk134_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk96_out1 = cfblk119_out1 + cfblk96_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk61_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk132_out1 = cfblk173_out1 - cfblk96_out1;



  assign cfblk89_out1_is_not0 = cfblk89_out1 != 8'b00000000;



  assign cfblk43_out1_is_not0 = cfblk135_out1 != 8'b00000000;



  assign cfblk2_out1 = cfblk43_out1_is_not0 & cfblk89_out1_is_not0;



  cfblk162 u_cfblk162 (.In1(cfblk34_out1),  // uint8
                       .Out1(cfblk162_out1)  // uint8
                       );

  assign cfblk74_1 = {24'b0, cfblk162_out1};
  assign cfblk74_2 = {31'b0, cfblk2_out1};
  assign cfblk74_add_temp = cfblk74_1 + cfblk74_2;
  assign cfblk74_out1 = cfblk74_add_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk74_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign dtc_out_2 = cfblk61_out1;



  assign cfblk42_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk135_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk123_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  assign dtc_out_3 = cfblk128_out1;



  assign cfblk80_out1 = dtc_out_3;



  assign dtc_out_4 = cfblk80_out1;



  assign cfblk32_out1 = dtc_out_4;



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk32_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign cfblk133_out1 = cfblk182_out1 + cfblk70_out1;



  assign cfblk144_out1 = cfblk133_out1 + cfblk188_out1;



  DotProduct_block1 u_cfblk119_inst (.in1(cfblk5_out1),  // uint8
                                     .in2(cfblk144_out1),  // uint8
                                     .out1(cfblk119_out1)  // uint8
                                     );

  assign cfblk9_out1 = cfblk158_out1 + cfblk33_out1;



  assign cfblk112_out1 = (cfblk9_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk56_out1 = cfblk112_out1 - cfblk119_out1;



  assign cfblk55_out1 = (cfblk63_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk95_out1 = cfblk34_out1 + cfblk160_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk95_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  assign cfblk81_out1 = cfblk158_out1 + cfblk45_out1;



  always @(cfblk81_out1, cfblk87_out1) begin
    cfblk135_div_temp = 9'b000000000;
    cfblk135_t_0_0 = 9'b000000000;
    if (cfblk87_out1 == 8'b00000000) begin
      cfblk135_out1 = 8'b11111111;
    end
    else begin
      cfblk135_t_0_0 = {1'b0, cfblk81_out1};
      cfblk135_div_temp = cfblk135_t_0_0 / cfblk87_out1;
      if (cfblk135_div_temp[8] != 1'b0) begin
        cfblk135_out1 = 8'b11111111;
      end
      else begin
        cfblk135_out1 = cfblk135_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk135_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  assign cfblk61_out1 = cfblk179_out1 + cfblk64_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk61_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign dtc_out_5 = cfblk103_out1;



  assign cfblk86_out1 = dtc_out_5;



  assign cfblk113_out1 = (cfblk86_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk45_out1 = cfblk113_out1 - cfblk101_out1;



  assign cfblk130_out1 = cfblk45_out1 + cfblk130_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk63_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign dtc_out_6 = cfblk183_out1;



  assign cfblk148_out1 = dtc_out_6;



  assign cfblk145_out1 = cfblk68_out1 + cfblk148_out1;



  assign dtc_out_7 = cfblk145_out1;



  assign cfblk128_out1 = dtc_out_7;



  DotProduct_block6 u_cfblk30_inst (.in1(cfblk128_out1),  // uint8
                                    .in2(cfblk130_out1),  // uint8
                                    .out1(cfblk30_out1)  // uint8
                                    );

  assign dtc_out_8 = cfblk30_out1;



  assign cfblk48_out1 = dtc_out_8;



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk48_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign cfblk31_out1 = cfblk68_out1 + cfblk181_out1;



  always @(cfblk174_out1, cfblk31_out1) begin
    cfblk52_div_temp = 9'b000000000;
    cfblk52_t_0_0 = 9'b000000000;
    if (cfblk174_out1 == 8'b00000000) begin
      cfblk52_out1 = 8'b11111111;
    end
    else begin
      cfblk52_t_0_0 = {1'b0, cfblk31_out1};
      cfblk52_div_temp = cfblk52_t_0_0 / cfblk174_out1;
      if (cfblk52_div_temp[8] != 1'b0) begin
        cfblk52_out1 = 8'b11111111;
      end
      else begin
        cfblk52_out1 = cfblk52_div_temp[7:0];
      end
    end
  end



  DotProduct_block7 u_cfblk64_inst (.in1(cfblk52_out1),  // uint8
                                    .in2(cfblk186_out1),  // uint8
                                    .out1(cfblk64_out1)  // uint8
                                    );

  assign cfblk13_out1 = cfblk64_out1 - cfblk55_out1;



  assign cfblk58_out1 = (cfblk70_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk13_out1, cfblk58_out1) begin
    cfblk71_div_temp = 9'b000000000;
    cfblk71_t_0_0 = 9'b000000000;
    if (cfblk13_out1 == 8'b00000000) begin
      cfblk71_out1 = 8'b11111111;
    end
    else begin
      cfblk71_t_0_0 = {1'b0, cfblk58_out1};
      cfblk71_div_temp = cfblk71_t_0_0 / cfblk13_out1;
      if (cfblk71_div_temp[8] != 1'b0) begin
        cfblk71_out1 = 8'b11111111;
      end
      else begin
        cfblk71_out1 = cfblk71_div_temp[7:0];
      end
    end
  end



  assign cfblk147_out1 = (cfblk71_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk147_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  DotProduct_block5 u_cfblk29_inst (.in1(cfblk172_out1),  // uint8
                                    .in2(cfblk94_out1),  // uint8
                                    .out1(cfblk29_out1)  // uint8
                                    );

  assign cfblk125_out1 = cfblk29_out1 + cfblk125_const_val_1;



  assign cfblk70_out1 = cfblk125_out1 + cfblk70_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk70_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk60_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  assign cfblk136_out1 = cfblk190_out1 + cfblk109_out1;



  DotProduct_block10 u_cfblk94_inst (.in1(cfblk136_out1),  // uint8
                                     .in2(cfblk191_out1),  // uint8
                                     .out1(cfblk94_out1)  // uint8
                                     );

  DotProduct_block u_cfblk106_inst (.in1(cfblk15_out1),  // uint8
                                    .in2(cfblk94_out1),  // uint8
                                    .out1(cfblk106_out1)  // uint8
                                    );

  assign cfblk89_out1 = (cfblk106_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk68_out1 = cfblk89_out1 + cfblk68_const_val_1;



  DotProduct u_cfblk105_inst (.in1(cfblk68_out1),  // uint8
                              .in2(cfblk89_out1),  // uint8
                              .out1(cfblk105_out1)  // uint8
                              );

  assign cfblk123_out1 = cfblk105_out1 - cfblk103_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk123_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk62_out1 = cfblk187_out1 + cfblk56_out1;



  assign cfblk114_out1 = (cfblk62_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk88_out1 = cfblk114_out1 + cfblk112_out1;



  DotProduct_block3 u_cfblk17_inst (.in1(cfblk88_out1),  // uint8
                                    .in2(cfblk178_out1),  // uint8
                                    .out1(cfblk17_out1)  // uint8
                                    );

  assign cfblk44_out1 = (cfblk17_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk161 u_cfblk161 (.In1(cfblk44_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk161_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk60_out1 = cfblk176_out1 + cfblk42_out1;



  always @(cfblk177_out1, cfblk60_out1) begin
    cfblk126_div_temp = 9'b000000000;
    cfblk126_t_0_0 = 9'b000000000;
    if (cfblk177_out1 == 8'b00000000) begin
      cfblk126_out1 = 8'b11111111;
    end
    else begin
      cfblk126_t_0_0 = {1'b0, cfblk60_out1};
      cfblk126_div_temp = cfblk126_t_0_0 / cfblk177_out1;
      if (cfblk126_div_temp[8] != 1'b0) begin
        cfblk126_out1 = 8'b11111111;
      end
      else begin
        cfblk126_out1 = cfblk126_div_temp[7:0];
      end
    end
  end



  assign dtc_out_9 = cfblk126_out1;



  assign cfblk33_out1 = dtc_out_9;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk33_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  DotProduct_block9 u_cfblk79_inst (.in1(cfblk175_out1),  // uint8
                                    .in2(cfblk132_out1),  // uint8
                                    .out1(cfblk79_out1)  // uint8
                                    );

  assign cfblk22_out1 = cfblk79_out1 - cfblk171_out1;



  assign cfblk15_out1 = cfblk154_out1 + cfblk22_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        cfblk189_reg[0] <= 8'b00000000;
        cfblk189_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk189_reg[0] <= cfblk189_reg_next[0];
          cfblk189_reg[1] <= cfblk189_reg_next[1];
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk108_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  assign cfblk92_out1 = cfblk99_out1 + cfblk189_out1;



  assign cfblk108_out1 = cfblk92_out1 + cfblk15_out1;



  always @(cfblk108_out1, cfblk46_out1) begin
    cfblk87_div_temp = 9'b000000000;
    cfblk87_t_0_0 = 9'b000000000;
    if (cfblk46_out1 == 8'b00000000) begin
      cfblk87_out1 = 8'b11111111;
    end
    else begin
      cfblk87_t_0_0 = {1'b0, cfblk108_out1};
      cfblk87_div_temp = cfblk87_t_0_0 / cfblk46_out1;
      if (cfblk87_div_temp[8] != 1'b0) begin
        cfblk87_out1 = 8'b11111111;
      end
      else begin
        cfblk87_out1 = cfblk87_div_temp[7:0];
      end
    end
  end



  always @(cfblk159_out1, cfblk87_out1) begin
    cfblk103_div_temp = 17'b00000000000000000;
    cfblk103_t_0_0 = 17'b00000000000000000;
    if (cfblk87_out1 == 8'b00000000) begin
      cfblk103_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk159_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk87_out1;
      if (cfblk103_div_temp[16] != 1'b0) begin
        cfblk103_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk103_varargout_1 = cfblk103_div_temp[15:0];
      end
    end
    if (cfblk103_varargout_1[15:8] != 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_out1 = cfblk103_varargout_1[7:0];
    end
  end



  assign cfblk41_out1 = cfblk103_out1 + cfblk41_const_val_1;



  cfblk160 u_cfblk160 (.In1(cfblk41_out1),  // uint8
                       .Out1(cfblk160_out1)  // uint8
                       );

  assign dtc_out_10 = cfblk160_out1;



  assign cfblk101_out1 = dtc_out_10;



  DotProduct_block2 u_cfblk12_inst (.in1(cfblk101_out1),  // uint8
                                    .in2(cfblk146_out1),  // uint8
                                    .out1(cfblk12_out1)  // uint8
                                    );

  assign cfblk139_out1 = cfblk12_out1 + cfblk139_const_val_1;



  DotProduct_block4 u_cfblk18_inst (.in1(cfblk139_out1),  // uint8
                                    .in2(cfblk108_out1),  // uint8
                                    .out1(cfblk18_out1)  // uint8
                                    );

  assign cfblk63_out1 = cfblk156_out1 - cfblk18_out1;



  assign cfblk38_out1 = cfblk63_out1 - cfblk95_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk38_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  assign cfblk109_out1 = cfblk66_out1 + cfblk184_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk109_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk169_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk34_out1 = cfblk1_out1 + cfblk34_const_val_1;



  always @(cfblk170_out1, cfblk34_out1) begin
    cfblk24_div_temp = 9'b000000000;
    cfblk24_t_0_0 = 9'b000000000;
    if (cfblk170_out1 == 8'b00000000) begin
      cfblk24_out1 = 8'b11111111;
    end
    else begin
      cfblk24_t_0_0 = {1'b0, cfblk34_out1};
      cfblk24_div_temp = cfblk24_t_0_0 / cfblk170_out1;
      if (cfblk24_div_temp[8] != 1'b0) begin
        cfblk24_out1 = 8'b11111111;
      end
      else begin
        cfblk24_out1 = cfblk24_div_temp[7:0];
      end
    end
  end



  assign cfblk66_out1 = (cfblk24_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign Hdl_out = cfblk66_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

