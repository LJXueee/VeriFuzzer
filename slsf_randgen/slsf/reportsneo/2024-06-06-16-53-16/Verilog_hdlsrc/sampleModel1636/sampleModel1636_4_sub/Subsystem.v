// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1636\sampleModel1636_4_sub\Subsystem.v
// Created: 2024-08-13 07:52:26
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1636_4_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk27_const_val_1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk65_const_val_1;  // uint8
  wire [7:0] Mysubsystem_20_out2;  // uint8
  wire [7:0] cfblk67_const_val_1;  // uint8
  wire [7:0] cfblk20_const_val_1;  // uint8
  wire [7:0] cfblk115_const_val_1;  // uint8
  wire [15:0] cfblk142_out1;  // uint16
  wire [7:0] cfblk109_const_val_1;  // uint8
  wire [7:0] cfblk41_const_val_1;  // uint8
  wire [7:0] cfblk97_const_val_1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  reg [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [15:0] cfblk3_out1;  // uint16
  wire [15:0] cfblk113_out1;  // uint16
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] Mysubsystem_34_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk42_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [15:0] cfblk1_out1;  // uint16
  wire [7:0] dtc_out_10;  // ufix8
  reg [8:0] cfblk43_div_temp;  // ufix9
  reg [8:0] cfblk43_t_0_0;  // ufix9
  reg [8:0] cfblk119_div_temp;  // ufix9
  reg [8:0] cfblk119_t_0_0;  // ufix9
  reg [8:0] cfblk98_div_temp;  // ufix9
  reg [8:0] cfblk98_t_0_0;  // ufix9
  reg [15:0] cfblk42_varargout_1;  // ufix16
  reg [15:0] cfblk42_div_temp;  // ufix16
  reg [8:0] cfblk15_div_temp;  // ufix9
  reg [8:0] cfblk15_t_0_0;  // ufix9


  assign cfblk141_out1 = 8'b00000001;



  assign cfblk27_const_val_1 = 8'b00000000;



  assign cfblk27_out1 = cfblk141_out1 + cfblk27_const_val_1;



  assign enb = clk_enable;

  assign cfblk65_const_val_1 = 8'b00000000;



  Mysubsystem_20 u_Mysubsystem_20 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out2(Mysubsystem_20_out2)  // uint8
                                   );

  assign cfblk67_const_val_1 = 8'b00000000;



  assign cfblk20_const_val_1 = 8'b00000000;



  assign cfblk115_const_val_1 = 8'b00000000;



  cfblk142 u_cfblk142 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk142_out1)  // uint16
                       );

  assign cfblk109_const_val_1 = 8'b00000000;



  assign cfblk41_const_val_1 = 8'b00000000;



  assign cfblk97_const_val_1 = 8'b00000000;



  always @(cfblk41_out1, cfblk62_out1) begin
    cfblk43_div_temp = 9'b000000000;
    cfblk43_t_0_0 = 9'b000000000;
    if (cfblk41_out1 == 8'b00000000) begin
      cfblk43_out1 = 8'b11111111;
    end
    else begin
      cfblk43_t_0_0 = {1'b0, cfblk62_out1};
      cfblk43_div_temp = cfblk43_t_0_0 / cfblk41_out1;
      if (cfblk43_div_temp[8] != 1'b0) begin
        cfblk43_out1 = 8'b11111111;
      end
      else begin
        cfblk43_out1 = cfblk43_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk43_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk109_out1 = cfblk119_out1 + cfblk109_const_val_1;



  always @(cfblk19_out1, cfblk49_out1) begin
    cfblk119_div_temp = 9'b000000000;
    cfblk119_t_0_0 = 9'b000000000;
    if (cfblk19_out1 == 8'b00000000) begin
      cfblk119_out1 = 8'b11111111;
    end
    else begin
      cfblk119_t_0_0 = {1'b0, cfblk49_out1};
      cfblk119_div_temp = cfblk119_t_0_0 / cfblk19_out1;
      if (cfblk119_div_temp[8] != 1'b0) begin
        cfblk119_out1 = 8'b11111111;
      end
      else begin
        cfblk119_out1 = cfblk119_div_temp[7:0];
      end
    end
  end



  assign cfblk66_out1 = cfblk119_out1 + cfblk84_out1;



  assign cfblk95_out1 = (cfblk28_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block2 u_cfblk30_inst (.in1(cfblk95_out1),  // uint8
                                    .in2(cfblk66_out1),  // uint8
                                    .out1(cfblk30_out1)  // uint8
                                    );

  assign cfblk105_out1 = cfblk27_out1 + cfblk125_out1;



  assign cfblk24_out1 = cfblk105_out1 + cfblk30_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk24_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk70_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk115_out1 = cfblk166_out1 + cfblk115_const_val_1;



  always @(cfblk115_out1, cfblk160_out1) begin
    cfblk98_div_temp = 9'b000000000;
    cfblk98_t_0_0 = 9'b000000000;
    if (cfblk160_out1 == 8'b00000000) begin
      cfblk98_out1 = 8'b11111111;
    end
    else begin
      cfblk98_t_0_0 = {1'b0, cfblk115_out1};
      cfblk98_div_temp = cfblk98_t_0_0 / cfblk160_out1;
      if (cfblk98_div_temp[8] != 1'b0) begin
        cfblk98_out1 = 8'b11111111;
      end
      else begin
        cfblk98_out1 = cfblk98_div_temp[7:0];
      end
    end
  end



  assign cfblk28_out1 = (cfblk98_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk108_out1 = cfblk126_out1 + cfblk179_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk108_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk11_out1 = cfblk170_out1 + cfblk28_out1;



  assign cfblk111_out1 = cfblk11_out1 - cfblk57_out1;



  assign dtc_out = cfblk50_out1;



  assign cfblk23_out1 = dtc_out;



  assign cfblk20_out1 = cfblk23_out1 + cfblk20_const_val_1;



  assign cfblk3_out1 = {cfblk20_out1, cfblk111_out1};



  assign cfblk113_out1 = (cfblk3_out1 > 16'b0000000000000000 ? 16'b0000000000000001 :
              16'b0000000000000000);



  assign cfblk191_out1 = cfblk113_out1[7:0];



  DotProduct u_cfblk101_inst (.in1(cfblk191_out1),  // uint8
                              .in2(cfblk122_out1),  // uint8
                              .out1(cfblk101_out1)  // uint8
                              );

  Mysubsystem_34 u_Mysubsystem_34 (.In1(cfblk101_out1),  // uint8
                                   .Out1(Mysubsystem_34_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = Mysubsystem_34_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  assign dtc_out_1 = cfblk42_out1;



  assign cfblk117_out1 = dtc_out_1;



  DotProduct_block4 u_cfblk91_inst (.in1(cfblk117_out1),  // uint8
                                    .in2(cfblk161_out1),  // uint8
                                    .out1(cfblk91_out1)  // uint8
                                    );

  cfblk147 u_cfblk147 (.In1(cfblk91_out1),  // uint8
                       .Out1(cfblk147_out1)  // uint8
                       );

  cfblk6 u_cfblk6 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk147_out1),  // uint8
                   .Y(cfblk6_out1)  // uint8
                   );

  assign cfblk126_out1 = cfblk50_out1 + cfblk84_out1;



  assign cfblk130_out1 = cfblk78_out1 - cfblk70_out1;



  cfblk148 u_cfblk148 (.In1(cfblk130_out1),  // uint8
                       .Out1(cfblk148_out1)  // uint8
                       );

  cfblk150 u_cfblk150 (.In1(cfblk148_out1),  // uint8
                       .Out1(cfblk150_out1)  // uint8
                       );

  assign dtc_out_2 = cfblk150_out1;



  assign cfblk84_out1 = dtc_out_2;



  assign cfblk116_out1 = cfblk84_out1 - cfblk124_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk122_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  DotProduct_block u_cfblk12_inst (.in1(cfblk167_out1),  // uint8
                                   .in2(cfblk116_out1),  // uint8
                                   .out1(cfblk12_out1)  // uint8
                                   );

  assign cfblk65_out1 = cfblk50_out1 + cfblk65_const_val_1;



  assign cfblk78_out1 = cfblk65_out1 + Mysubsystem_20_out2;



  assign cfblk67_out1 = cfblk78_out1 + cfblk67_const_val_1;



  assign dtc_out_3 = cfblk67_out1;



  assign cfblk135_out1 = dtc_out_3;



  assign dtc_out_4 = cfblk135_out1;



  assign cfblk44_out1 = dtc_out_4;



  cfblk145 u_cfblk145 (.In1(cfblk44_out1),  // uint8
                       .Out1(cfblk145_out1)  // uint8
                       );

  DotProduct_block1 u_cfblk122_inst (.in1(cfblk145_out1),  // uint8
                                     .in2(cfblk12_out1),  // uint8
                                     .out1(cfblk122_out1)  // uint8
                                     );

  assign cfblk121_out1 = cfblk122_out1 - cfblk35_out1;



  assign cfblk137_out1 = (cfblk121_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk133_out1 = cfblk137_out1 - cfblk50_out1;



  assign cfblk46_out1 = cfblk133_out1 + cfblk126_out1;



  DotProduct_block5 u_cfblk92_inst (.in1(cfblk46_out1),  // uint8
                                    .in2(cfblk6_out1),  // uint8
                                    .out1(cfblk92_out1)  // uint8
                                    );

  assign cfblk72_out1 = (cfblk92_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk129_out1 = (cfblk72_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk129_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk45_out1 = (cfblk164_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk142_out1, cfblk45_out1) begin
    cfblk42_div_temp = 16'b0000000000000000;
    if (cfblk142_out1 == 16'b0000000000000000) begin
      cfblk42_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk42_div_temp = cfblk45_out1 / cfblk142_out1;
      cfblk42_varargout_1 = cfblk42_div_temp;
    end
    if (cfblk42_varargout_1[15:8] != 8'b00000000) begin
      cfblk42_out1 = 8'b11111111;
    end
    else begin
      cfblk42_out1 = cfblk42_varargout_1[7:0];
    end
  end



  assign cfblk50_out1 = (cfblk42_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk50_out1, cfblk67_out1) begin
    cfblk15_div_temp = 9'b000000000;
    cfblk15_t_0_0 = 9'b000000000;
    if (cfblk67_out1 == 8'b00000000) begin
      cfblk15_out1 = 8'b11111111;
    end
    else begin
      cfblk15_t_0_0 = {1'b0, cfblk50_out1};
      cfblk15_div_temp = cfblk15_t_0_0 / cfblk67_out1;
      if (cfblk15_div_temp[8] != 1'b0) begin
        cfblk15_out1 = 8'b11111111;
      end
      else begin
        cfblk15_out1 = cfblk15_div_temp[7:0];
      end
    end
  end



  assign cfblk33_out1 = cfblk15_out1 + cfblk64_out1;



  assign cfblk19_out1 = cfblk33_out1 + cfblk78_out1;



  assign cfblk106_out1 = cfblk19_out1 - cfblk109_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk106_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk134_out1 = cfblk174_out1 - cfblk47_out1;



  assign cfblk22_out1 = cfblk144_out1 + cfblk134_out1;



  assign dtc_out_5 = cfblk22_out1;



  assign cfblk52_out1 = dtc_out_5;



  assign cfblk47_out1 = cfblk27_out1 + cfblk146_out1;



  cfblk144 u_cfblk144 (.In1(cfblk47_out1),  // uint8
                       .Out1(cfblk144_out1)  // uint8
                       );

  assign cfblk125_out1 = cfblk144_out1 + cfblk57_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk125_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk64_out1 = cfblk176_out1 + cfblk52_out1;



  assign cfblk57_out1 = (cfblk64_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk41_out1 = cfblk57_out1 + cfblk41_const_val_1;



  assign dtc_out_6 = cfblk41_out1;



  assign cfblk62_out1 = dtc_out_6;



  assign cfblk89_out1 = cfblk62_out1 - cfblk147_out1;



  assign cfblk97_out1 = cfblk89_out1 + cfblk97_const_val_1;



  DotProduct_block3 u_cfblk35_inst (.in1(cfblk97_out1),  // uint8
                                    .in2(cfblk98_out1),  // uint8
                                    .out1(cfblk35_out1)  // uint8
                                    );

  assign dtc_out_7 = cfblk35_out1;



  assign cfblk127_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk127_out1;



  assign cfblk70_out1 = dtc_out_8;



  assign dtc_out_9 = cfblk49_out1;



  assign cfblk51_out1 = dtc_out_9;



  assign cfblk124_out1 = cfblk51_out1 + cfblk70_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk124_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk1_out1 = {cfblk173_out1, cfblk159_out1};



  assign cfblk179_out1 = cfblk1_out1[7:0];



  assign dtc_out_10 = cfblk179_out1;



  assign cfblk49_out1 = dtc_out_10;



  cfblk146 u_cfblk146 (.In1(cfblk49_out1),  // uint8
                       .Out1(cfblk146_out1)  // uint8
                       );

  assign Hdl_out = cfblk146_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

