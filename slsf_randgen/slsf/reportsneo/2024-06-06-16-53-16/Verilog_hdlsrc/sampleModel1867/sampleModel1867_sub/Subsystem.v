// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1867\sampleModel1867_sub\Subsystem.v
// Created: 2024-08-14 23:02:47
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1867_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk93_const_val_1;  // uint8
  wire [7:0] cfblk68_const_val_1;  // uint8
  wire [7:0] cfblk117_const_val_1;  // uint8
  wire [7:0] cfblk96_const_val_1;  // uint8
  wire [7:0] cfblk19_const_val_1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk32_const_val_1;  // uint8
  wire [15:0] cfblk135_out1;  // uint16
  wire [7:0] cfblk71_const_val_1;  // uint8
  wire [7:0] cfblk99_const_val_1;  // uint8
  wire [7:0] cfblk41_const_val_1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  reg [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk108_out1;  // uint8
  wire signed [31:0] cfblk58_sub_temp;  // sfix32
  wire signed [31:0] cfblk58_1;  // sfix32
  wire signed [31:0] cfblk58_2;  // sfix32
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [3:0] cfblk2_out1;  // ufix4_E4
  reg [3:0] cfblk150_reg [0:1];  // ufix4 [2]
  wire [3:0] cfblk150_reg_next [0:1];  // ufix4_E4 [2]
  wire [3:0] cfblk150_out1;  // ufix4_E4
  wire [31:0] cfblk10_add_cast;  // ufix32
  wire [31:0] cfblk10_add_temp;  // ufix32
  wire [31:0] cfblk10_1;  // ufix32
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [31:0] cfblk87_add_cast;  // ufix32
  wire [31:0] cfblk87_add_temp;  // ufix32
  wire [31:0] cfblk87_1;  // ufix32
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk15_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  reg [8:0] cfblk113_div_temp;  // ufix9
  reg [8:0] cfblk113_t_0_0;  // ufix9
  reg [8:0] cfblk25_div_temp;  // ufix9
  reg [8:0] cfblk25_t_0_0;  // ufix9
  reg [8:0] cfblk123_div_temp;  // ufix9
  reg [8:0] cfblk123_t_0_0;  // ufix9
  reg [8:0] cfblk15_div_temp;  // ufix9
  reg [8:0] cfblk15_t_0_0;  // ufix9


  cfblk137 u_cfblk137 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk137_out1)  // uint8
                       );

  assign dtc_out = cfblk137_out1;



  assign cfblk50_out1 = dtc_out;



  assign cfblk93_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk68_const_val_1 = 8'b00000000;



  assign cfblk117_const_val_1 = 8'b00000000;



  assign cfblk96_const_val_1 = 8'b00000000;



  assign cfblk19_const_val_1 = 8'b00000000;



  cfblk138 u_cfblk138 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk138_out1)  // uint8
                       );

  cfblk139 u_cfblk139 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk139_out1)  // uint8
                       );

  assign cfblk136_out1 = 8'b00000001;



  cfblk142 u_cfblk142 (.In1(cfblk136_out1),  // uint8
                       .Out1(cfblk142_out1)  // uint8
                       );

  assign cfblk115_out1 = cfblk139_out1 + cfblk142_out1;



  assign cfblk32_const_val_1 = 8'b00000000;



  cfblk135 u_cfblk135 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk135_out1)  // uint16
                       );

  assign cfblk71_const_val_1 = 8'b00000000;



  assign cfblk99_const_val_1 = 8'b00000000;



  assign cfblk41_const_val_1 = 8'b00000000;



  assign cfblk134_out1 = 8'b00000000;



  assign cfblk66_out1 = (cfblk126_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk66_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk95_out1 = (cfblk140_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk141 u_cfblk141 (.In1(cfblk95_out1),  // uint8
                       .Out1(cfblk141_out1)  // uint8
                       );

  DotProduct_block3 u_cfblk81_inst (.in1(cfblk141_out1),  // uint8
                                    .in2(cfblk25_out1),  // uint8
                                    .out1(cfblk81_out1)  // uint8
                                    );

  assign cfblk100_out1 = cfblk134_out1 + cfblk81_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk100_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk62_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign dtc_out_1 = cfblk68_out1;



  assign cfblk122_out1 = dtc_out_1;



  assign dtc_out_2 = cfblk122_out1;



  assign cfblk27_out1 = dtc_out_2;



  assign cfblk29_out1 = (cfblk27_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk99_out1 = cfblk29_out1 + cfblk99_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk99_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  assign cfblk129_out1 = (cfblk89_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk42_out1 = cfblk74_out1 - cfblk19_out1;



  assign dtc_out_3 = cfblk42_out1;



  assign cfblk125_out1 = dtc_out_3;



  assign cfblk133_out1 = (cfblk125_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk3 u_cfblk3 (.u(cfblk133_out1),  // uint8
                   .y(cfblk3_out1)  // uint8
                   );

  assign cfblk71_out1 = cfblk3_out1 + cfblk71_const_val_1;



  assign cfblk69_out1 = cfblk71_out1 + cfblk129_out1;



  assign dtc_out_4 = cfblk5_out1;



  assign cfblk108_out1 = dtc_out_4;



  DotProduct_block u_cfblk126_inst (.in1(cfblk108_out1),  // uint8
                                    .in2(cfblk69_out1),  // uint8
                                    .out1(cfblk126_out1)  // uint8
                                    );

  assign cfblk58_1 = {16'b0, cfblk135_out1};
  assign cfblk58_2 = {24'b0, cfblk126_out1};
  assign cfblk58_sub_temp = cfblk58_1 - cfblk58_2;
  assign cfblk58_out1 = cfblk58_sub_temp[7:0];



  assign cfblk20_out1 = cfblk115_out1 + cfblk5_out1;



  assign cfblk32_out1 = cfblk20_out1 + cfblk32_const_val_1;



  DotProduct_block4 u_cfblk85_inst (.in1(cfblk138_out1),  // uint8
                                    .in2(cfblk32_out1),  // uint8
                                    .out1(cfblk85_out1)  // uint8
                                    );

  assign cfblk43_out1 = cfblk85_out1 - cfblk58_out1;



  always @(cfblk32_out1, cfblk43_out1) begin
    cfblk113_div_temp = 9'b000000000;
    cfblk113_t_0_0 = 9'b000000000;
    if (cfblk32_out1 == 8'b00000000) begin
      cfblk113_out1 = 8'b11111111;
    end
    else begin
      cfblk113_t_0_0 = {1'b0, cfblk43_out1};
      cfblk113_div_temp = cfblk113_t_0_0 / cfblk32_out1;
      if (cfblk113_div_temp[8] != 1'b0) begin
        cfblk113_out1 = 8'b11111111;
      end
      else begin
        cfblk113_out1 = cfblk113_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk113_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk5_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk19_out1 = cfblk151_out1 + cfblk19_const_val_1;



  assign cfblk54_out1 = cfblk19_out1 + cfblk153_out1;



  assign cfblk78_out1 = cfblk54_out1 - cfblk160_out1;



  assign cfblk39_out1 = cfblk88_out1 - cfblk10_out1;



  DotProduct_block2 u_cfblk8_inst (.in1(cfblk39_out1),  // uint8
                                   .in2(cfblk9_out1),  // uint8
                                   .out1(cfblk8_out1)  // uint8
                                   );

  DotProduct_block1 u_cfblk61_inst (.in1(cfblk8_out1),  // uint8
                                    .in2(cfblk78_out1),  // uint8
                                    .out1(cfblk61_out1)  // uint8
                                    );

  cfblk140 u_cfblk140 (.In1(cfblk61_out1),  // uint8
                       .Out1(cfblk140_out1)  // uint8
                       );

  assign cfblk76_out1 = cfblk140_out1 + cfblk50_out1;



  assign cfblk30_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_5 = cfblk30_out1;



  assign cfblk18_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk10_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  assign cfblk96_out1 = cfblk146_out1 + cfblk96_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 4'b0000;
        cfblk150_reg[1] <= 4'b0000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk2_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk10_add_cast = {24'b0, {cfblk150_out1, 4'b0000}};
  assign cfblk10_1 = {24'b0, cfblk96_out1};
  assign cfblk10_add_temp = cfblk10_add_cast + cfblk10_1;
  assign cfblk10_out1 = cfblk10_add_temp[7:0];



  assign cfblk109_out1 = (cfblk112_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk5_out1 = cfblk109_out1 | 8'b00000001;



  assign cfblk38_out1 = cfblk5_out1 - cfblk10_out1;



  assign cfblk87_add_cast = {24'b0, {cfblk2_out1, 4'b0000}};
  assign cfblk87_1 = {24'b0, cfblk38_out1};
  assign cfblk87_add_temp = cfblk87_add_cast + cfblk87_1;
  assign cfblk87_out1 = cfblk87_add_temp[7:0];



  DotProduct_block5 u_cfblk86_inst (.in1(cfblk87_out1),  // uint8
                                    .in2(cfblk18_out1),  // uint8
                                    .out1(cfblk86_out1)  // uint8
                                    );

  always @(cfblk146_out1, cfblk86_out1) begin
    cfblk25_div_temp = 9'b000000000;
    cfblk25_t_0_0 = 9'b000000000;
    if (cfblk146_out1 == 8'b00000000) begin
      cfblk25_out1 = 8'b11111111;
    end
    else begin
      cfblk25_t_0_0 = {1'b0, cfblk86_out1};
      cfblk25_div_temp = cfblk25_t_0_0 / cfblk146_out1;
      if (cfblk25_div_temp[8] != 1'b0) begin
        cfblk25_out1 = 8'b11111111;
      end
      else begin
        cfblk25_out1 = cfblk25_div_temp[7:0];
      end
    end
  end



  assign cfblk74_out1 = cfblk123_out1 + cfblk15_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk68_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk93_out1 = cfblk41_out1 + cfblk93_const_val_1;



  assign cfblk2_out1 = cfblk93_out1[7:4];



  assign cfblk59_out1 = {cfblk2_out1, 4'b0000};



  DotProduct u_cfblk112_inst (.in1(cfblk59_out1),  // uint8
                              .in2(cfblk158_out1),  // uint8
                              .out1(cfblk112_out1)  // uint8
                              );

  assign cfblk68_out1 = cfblk112_out1 + cfblk68_const_val_1;



  assign cfblk62_out1 = cfblk68_out1 + cfblk74_out1;



  assign cfblk89_out1 = cfblk50_out1 - cfblk62_out1;



  assign cfblk117_out1 = cfblk89_out1 + cfblk117_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk117_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(cfblk155_out1, cfblk25_out1) begin
    cfblk123_div_temp = 9'b000000000;
    cfblk123_t_0_0 = 9'b000000000;
    if (cfblk25_out1 == 8'b00000000) begin
      cfblk123_out1 = 8'b11111111;
    end
    else begin
      cfblk123_t_0_0 = {1'b0, cfblk155_out1};
      cfblk123_div_temp = cfblk123_t_0_0 / cfblk25_out1;
      if (cfblk123_div_temp[8] != 1'b0) begin
        cfblk123_out1 = 8'b11111111;
      end
      else begin
        cfblk123_out1 = cfblk123_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk123_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk34_out1 = cfblk154_out1 + cfblk76_out1;



  assign cfblk107_out1 = cfblk34_out1 + cfblk156_out1;



  assign cfblk41_out1 = cfblk107_out1 + cfblk41_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk41_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  DotProduct_block6 u_cfblk88_inst (.in1(cfblk161_out1),  // uint8
                                    .in2(cfblk10_out1),  // uint8
                                    .out1(cfblk88_out1)  // uint8
                                    );

  assign cfblk44_out1 = cfblk88_out1 + cfblk157_out1;



  assign cfblk26_out1 = (cfblk44_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk152_out1, cfblk26_out1) begin
    cfblk15_div_temp = 9'b000000000;
    cfblk15_t_0_0 = 9'b000000000;
    if (cfblk152_out1 == 8'b00000000) begin
      cfblk15_out1 = 8'b11111111;
    end
    else begin
      cfblk15_t_0_0 = {1'b0, cfblk26_out1};
      cfblk15_div_temp = cfblk15_t_0_0 / cfblk152_out1;
      if (cfblk15_div_temp[8] != 1'b0) begin
        cfblk15_out1 = 8'b11111111;
      end
      else begin
        cfblk15_out1 = cfblk15_div_temp[7:0];
      end
    end
  end



  assign cfblk9_out1 = cfblk15_out1 + cfblk138_out1;



  assign Hdl_out = cfblk9_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

