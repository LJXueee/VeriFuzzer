// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1811\sampleModel1811_3_sub\Subsystem.v
// Created: 2024-08-14 12:44:17
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1811_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk42_const_val_1;  // uint8
  wire [15:0] cfblk128_out1;  // uint16
  wire [7:0] cfblk75_const_val_1;  // uint8
  wire [7:0] cfblk106_const_val_1;  // uint8
  wire [7:0] cfblk90_const_val_1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk24_const_val_1;  // uint8
  wire [7:0] cfblk98_const_val_1;  // uint8
  wire [7:0] cfblk9_const_val_1;  // uint8
  wire [7:0] bitMask_for_cfblk5;  // uint8
  wire [7:0] cfblk69_const_val_1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk102_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  reg [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  reg [7:0] cfblk89_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  reg [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  reg [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  reg [7:0] cfblk72_out1;  // uint8
  wire cfblk3_relop1;
  wire [7:0] cfblk70_out1;  // uint8
  wire [31:0] cfblk65_add_temp;  // ufix32
  wire [31:0] cfblk65_1;  // ufix32
  wire [31:0] cfblk65_2;  // ufix32
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [3:0] cfblk8_out1;  // ufix4_E4
  wire [31:0] cfblk16_add_cast;  // ufix32
  wire [31:0] cfblk16_add_temp;  // ufix32
  wire [31:0] cfblk16_1;  // ufix32
  reg [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire signed [31:0] cfblk84_sub_temp;  // sfix32
  wire signed [31:0] cfblk84_1;  // sfix32
  wire signed [31:0] cfblk84_2;  // sfix32
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  reg [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  reg [8:0] cfblk102_div_temp;  // ufix9
  reg [8:0] cfblk102_t_0_0;  // ufix9
  reg [8:0] cfblk39_div_temp;  // ufix9
  reg [8:0] cfblk39_t_0_0;  // ufix9
  reg [8:0] cfblk19_div_temp;  // ufix9
  reg [8:0] cfblk19_t_0_0;  // ufix9
  reg [8:0] cfblk89_div_temp;  // ufix9
  reg [8:0] cfblk89_t_0_0;  // ufix9
  reg [8:0] cfblk86_div_temp;  // ufix9
  reg [8:0] cfblk86_t_0_0;  // ufix9
  reg [8:0] cfblk53_div_temp;  // ufix9
  reg [8:0] cfblk53_t_0_0;  // ufix9
  reg [8:0] cfblk20_div_temp;  // ufix9
  reg [8:0] cfblk20_t_0_0;  // ufix9
  reg [8:0] cfblk123_div_temp;  // ufix9
  reg [8:0] cfblk123_t_0_0;  // ufix9
  reg [8:0] cfblk43_div_temp;  // ufix9
  reg [8:0] cfblk43_t_0_0;  // ufix9
  reg [8:0] cfblk119_div_temp;  // ufix9
  reg [8:0] cfblk119_t_0_0;  // ufix9
  reg [8:0] cfblk93_div_temp;  // ufix9
  reg [8:0] cfblk93_t_0_0;  // ufix9
  reg [8:0] cfblk36_div_temp;  // ufix9
  reg [8:0] cfblk36_t_0_0;  // ufix9
  reg [8:0] cfblk72_div_temp;  // ufix9
  reg [8:0] cfblk72_t_0_0;  // ufix9
  reg [8:0] cfblk115_div_temp;  // ufix9
  reg [8:0] cfblk115_t_0_0;  // ufix9
  reg [8:0] cfblk15_div_temp;  // ufix9
  reg [8:0] cfblk15_t_0_0;  // ufix9


  assign cfblk42_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  cfblk128 u_cfblk128 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk128_out1)  // uint16
                       );

  assign cfblk75_const_val_1 = 8'b00000000;



  assign cfblk106_const_val_1 = 8'b00000000;



  assign cfblk90_const_val_1 = 8'b00000000;



  assign cfblk130_out1 = 8'b00000001;



  assign cfblk24_const_val_1 = 8'b00000000;



  assign cfblk98_const_val_1 = 8'b00000000;



  assign cfblk9_const_val_1 = 8'b00000000;



  assign bitMask_for_cfblk5 = 8'b11011001;



  assign cfblk69_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk68_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk44_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk37_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk37_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  always @(cfblk30_out1, cfblk36_out1) begin
    cfblk102_div_temp = 9'b000000000;
    cfblk102_t_0_0 = 9'b000000000;
    if (cfblk36_out1 == 8'b00000000) begin
      cfblk102_out1 = 8'b11111111;
    end
    else begin
      cfblk102_t_0_0 = {1'b0, cfblk30_out1};
      cfblk102_div_temp = cfblk102_t_0_0 / cfblk36_out1;
      if (cfblk102_div_temp[8] != 1'b0) begin
        cfblk102_out1 = 8'b11111111;
      end
      else begin
        cfblk102_out1 = cfblk102_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk102_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk59_out1 = cfblk152_out1 + cfblk42_out1;



  assign cfblk101_out1 = cfblk59_out1 + cfblk147_out1;



  cfblk132 u_cfblk132 (.In1(cfblk101_out1),  // uint8
                       .Out1(cfblk132_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk32_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  assign dtc_out = cfblk71_out1;



  assign cfblk35_out1 = dtc_out;



  assign cfblk73_out1 = (cfblk44_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk73_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk83_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  DotProduct_block2 u_cfblk18_inst (.in1(cfblk42_out1),  // uint8
                                    .in2(cfblk104_out1),  // uint8
                                    .out1(cfblk18_out1)  // uint8
                                    );

  always @(cfblk16_out1, cfblk18_out1) begin
    cfblk39_div_temp = 9'b000000000;
    cfblk39_t_0_0 = 9'b000000000;
    if (cfblk16_out1 == 8'b00000000) begin
      cfblk39_out1 = 8'b11111111;
    end
    else begin
      cfblk39_t_0_0 = {1'b0, cfblk18_out1};
      cfblk39_div_temp = cfblk39_t_0_0 / cfblk16_out1;
      if (cfblk39_div_temp[8] != 1'b0) begin
        cfblk39_out1 = 8'b11111111;
      end
      else begin
        cfblk39_out1 = cfblk39_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk9_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  assign cfblk103_out1 = cfblk38_out1 - cfblk2_out1;



  assign cfblk37_out1 = cfblk122_out1 + cfblk17_out1;



  always @(cfblk37_out1, cfblk91_out1) begin
    cfblk19_div_temp = 9'b000000000;
    cfblk19_t_0_0 = 9'b000000000;
    if (cfblk37_out1 == 8'b00000000) begin
      cfblk19_out1 = 8'b11111111;
    end
    else begin
      cfblk19_t_0_0 = {1'b0, cfblk91_out1};
      cfblk19_div_temp = cfblk19_t_0_0 / cfblk37_out1;
      if (cfblk19_div_temp[8] != 1'b0) begin
        cfblk19_out1 = 8'b11111111;
      end
      else begin
        cfblk19_out1 = cfblk19_div_temp[7:0];
      end
    end
  end



  assign cfblk44_out1 = cfblk19_out1 - cfblk103_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk44_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk24_out1 = cfblk114_out1 + cfblk24_const_val_1;



  always @(cfblk1_out1, cfblk24_out1) begin
    cfblk89_div_temp = 9'b000000000;
    cfblk89_t_0_0 = 9'b000000000;
    if (cfblk1_out1 == 8'b00000000) begin
      cfblk89_out1 = 8'b11111111;
    end
    else begin
      cfblk89_t_0_0 = {1'b0, cfblk24_out1};
      cfblk89_div_temp = cfblk89_t_0_0 / cfblk1_out1;
      if (cfblk89_div_temp[8] != 1'b0) begin
        cfblk89_out1 = 8'b11111111;
      end
      else begin
        cfblk89_out1 = cfblk89_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk89_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk10_out1 = (cfblk2_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk10_out1, cfblk97_out1) begin
    cfblk86_div_temp = 9'b000000000;
    cfblk86_t_0_0 = 9'b000000000;
    if (cfblk97_out1 == 8'b00000000) begin
      cfblk86_out1 = 8'b11111111;
    end
    else begin
      cfblk86_t_0_0 = {1'b0, cfblk10_out1};
      cfblk86_div_temp = cfblk86_t_0_0 / cfblk97_out1;
      if (cfblk86_div_temp[8] != 1'b0) begin
        cfblk86_out1 = 8'b11111111;
      end
      else begin
        cfblk86_out1 = cfblk86_div_temp[7:0];
      end
    end
  end



  assign cfblk55_out1 = cfblk86_out1 + cfblk154_out1;



  always @(cfblk40_out1, cfblk55_out1) begin
    cfblk53_div_temp = 9'b000000000;
    cfblk53_t_0_0 = 9'b000000000;
    if (cfblk55_out1 == 8'b00000000) begin
      cfblk53_out1 = 8'b11111111;
    end
    else begin
      cfblk53_t_0_0 = {1'b0, cfblk40_out1};
      cfblk53_div_temp = cfblk53_t_0_0 / cfblk55_out1;
      if (cfblk53_div_temp[8] != 1'b0) begin
        cfblk53_out1 = 8'b11111111;
      end
      else begin
        cfblk53_out1 = cfblk53_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk53_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  assign cfblk32_out1 = cfblk138_out1 + cfblk144_out1;



  DotProduct_block9 u_cfblk97_inst (.in1(cfblk32_out1),  // uint8
                                    .in2(cfblk137_out1),  // uint8
                                    .out1(cfblk97_out1)  // uint8
                                    );

  always @(cfblk100_out1, cfblk119_out1) begin
    cfblk20_div_temp = 9'b000000000;
    cfblk20_t_0_0 = 9'b000000000;
    if (cfblk100_out1 == 8'b00000000) begin
      cfblk20_out1 = 8'b11111111;
    end
    else begin
      cfblk20_t_0_0 = {1'b0, cfblk119_out1};
      cfblk20_div_temp = cfblk20_t_0_0 / cfblk100_out1;
      if (cfblk20_div_temp[8] != 1'b0) begin
        cfblk20_out1 = 8'b11111111;
      end
      else begin
        cfblk20_out1 = cfblk20_div_temp[7:0];
      end
    end
  end



  assign cfblk23_out1 = (cfblk20_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk6 u_cfblk6 (.u(cfblk9_out1),  // uint8
                   .y(cfblk6_out1)  // uint8
                   );

  assign cfblk104_out1 = cfblk6_out1 + cfblk23_out1;



  assign cfblk56_out1 = cfblk104_out1 + cfblk97_out1;



  assign cfblk68_out1 = cfblk56_out1 - cfblk39_out1;



  assign cfblk98_out1 = cfblk68_out1 + cfblk98_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk98_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  assign cfblk116_out1 = cfblk142_out1 + cfblk97_out1;



  cfblk7 u_cfblk7 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk116_out1),  // uint8
                   .Y(cfblk7_out1)  // uint8
                   );

  assign cfblk9_out1 = cfblk7_out1 + cfblk9_const_val_1;



  always @(cfblk140_out1, cfblk9_out1) begin
    cfblk123_div_temp = 9'b000000000;
    cfblk123_t_0_0 = 9'b000000000;
    if (cfblk140_out1 == 8'b00000000) begin
      cfblk123_out1 = 8'b11111111;
    end
    else begin
      cfblk123_t_0_0 = {1'b0, cfblk9_out1};
      cfblk123_div_temp = cfblk123_t_0_0 / cfblk140_out1;
      if (cfblk123_div_temp[8] != 1'b0) begin
        cfblk123_out1 = 8'b11111111;
      end
      else begin
        cfblk123_out1 = cfblk123_div_temp[7:0];
      end
    end
  end



  assign cfblk99_out1 = cfblk123_out1 + cfblk146_out1;



  assign cfblk2_out1 = cfblk99_out1 | 8'b00000001;



  assign cfblk11_out1 = (cfblk2_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk91_out1 = cfblk11_out1 + cfblk31_out1;



  DotProduct_block u_cfblk114_inst (.in1(cfblk4_out1),  // uint8
                                    .in2(cfblk83_out1),  // uint8
                                    .out1(cfblk114_out1)  // uint8
                                    );

  assign cfblk75_out1 = cfblk114_out1 + cfblk75_const_val_1;



  assign dtc_out_1 = cfblk75_out1;



  assign cfblk40_out1 = dtc_out_1;



  assign cfblk106_out1 = cfblk40_out1 + cfblk106_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk106_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk3_relop1 = cfblk157_out1 <= cfblk72_out1;



  assign cfblk65_1 = {31'b0, cfblk3_relop1};
  assign cfblk65_2 = {24'b0, cfblk70_out1};
  assign cfblk65_add_temp = cfblk65_1 + cfblk65_2;
  assign cfblk65_out1 = cfblk65_add_temp[7:0];



  assign dtc_out_2 = cfblk65_out1;



  assign cfblk25_out1 = dtc_out_2;



  assign cfblk90_out1 = cfblk25_out1 + cfblk90_const_val_1;



  assign cfblk8_out1 = cfblk90_out1[7:4];



  assign cfblk16_add_cast = {24'b0, {cfblk8_out1, 4'b0000}};
  assign cfblk16_1 = {24'b0, cfblk130_out1};
  assign cfblk16_add_temp = cfblk16_add_cast + cfblk16_1;
  assign cfblk16_out1 = cfblk16_add_temp[7:0];



  always @(cfblk16_out1, cfblk91_out1) begin
    cfblk43_div_temp = 9'b000000000;
    cfblk43_t_0_0 = 9'b000000000;
    if (cfblk91_out1 == 8'b00000000) begin
      cfblk43_out1 = 8'b11111111;
    end
    else begin
      cfblk43_t_0_0 = {1'b0, cfblk16_out1};
      cfblk43_div_temp = cfblk43_t_0_0 / cfblk91_out1;
      if (cfblk43_div_temp[8] != 1'b0) begin
        cfblk43_out1 = 8'b11111111;
      end
      else begin
        cfblk43_out1 = cfblk43_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk43_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  assign cfblk28_out1 = cfblk141_out1 - cfblk35_out1;



  always @(cfblk28_out1, cfblk93_out1) begin
    cfblk119_div_temp = 9'b000000000;
    cfblk119_t_0_0 = 9'b000000000;
    if (cfblk28_out1 == 8'b00000000) begin
      cfblk119_out1 = 8'b11111111;
    end
    else begin
      cfblk119_t_0_0 = {1'b0, cfblk93_out1};
      cfblk119_div_temp = cfblk119_t_0_0 / cfblk28_out1;
      if (cfblk119_div_temp[8] != 1'b0) begin
        cfblk119_out1 = 8'b11111111;
      end
      else begin
        cfblk119_out1 = cfblk119_div_temp[7:0];
      end
    end
  end



  assign dtc_out_3 = cfblk107_out1;



  assign cfblk100_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk100_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  assign cfblk107_out1 = cfblk153_out1 + cfblk119_out1;



  assign dtc_out_4 = cfblk83_out1;



  assign cfblk67_out1 = dtc_out_4;



  assign cfblk71_out1 = (cfblk67_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk22_out1 = (cfblk15_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk22_out1, cfblk71_out1) begin
    cfblk93_div_temp = 9'b000000000;
    cfblk93_t_0_0 = 9'b000000000;
    if (cfblk71_out1 == 8'b00000000) begin
      cfblk93_out1 = 8'b11111111;
    end
    else begin
      cfblk93_t_0_0 = {1'b0, cfblk22_out1};
      cfblk93_div_temp = cfblk93_t_0_0 / cfblk71_out1;
      if (cfblk93_div_temp[8] != 1'b0) begin
        cfblk93_out1 = 8'b11111111;
      end
      else begin
        cfblk93_out1 = cfblk93_div_temp[7:0];
      end
    end
  end



  always @(cfblk66_out1, cfblk93_out1) begin
    cfblk36_div_temp = 9'b000000000;
    cfblk36_t_0_0 = 9'b000000000;
    if (cfblk93_out1 == 8'b00000000) begin
      cfblk36_out1 = 8'b11111111;
    end
    else begin
      cfblk36_t_0_0 = {1'b0, cfblk66_out1};
      cfblk36_div_temp = cfblk36_t_0_0 / cfblk93_out1;
      if (cfblk36_div_temp[8] != 1'b0) begin
        cfblk36_out1 = 8'b11111111;
      end
      else begin
        cfblk36_out1 = cfblk36_div_temp[7:0];
      end
    end
  end



  cfblk131 u_cfblk131 (.In1(cfblk36_out1),  // uint8
                       .Out1(cfblk131_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk131_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  DotProduct_block3 u_cfblk26_inst (.in1(cfblk151_out1),  // uint8
                                    .in2(cfblk107_out1),  // uint8
                                    .out1(cfblk26_out1)  // uint8
                                    );

  assign cfblk84_1 = {16'b0, cfblk128_out1};
  assign cfblk84_2 = {24'b0, cfblk26_out1};
  assign cfblk84_sub_temp = cfblk84_1 - cfblk84_2;
  assign cfblk84_out1 = cfblk84_sub_temp[7:0];



  DotProduct_block7 u_cfblk66_inst (.in1(cfblk84_out1),  // uint8
                                    .in2(cfblk114_out1),  // uint8
                                    .out1(cfblk66_out1)  // uint8
                                    );

  DotProduct_block5 u_cfblk31_inst (.in1(cfblk66_out1),  // uint8
                                    .in2(cfblk103_out1),  // uint8
                                    .out1(cfblk31_out1)  // uint8
                                    );

  DotProduct u_cfblk105_inst (.in1(cfblk31_out1),  // uint8
                              .in2(cfblk106_out1),  // uint8
                              .out1(cfblk105_out1)  // uint8
                              );

  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk94_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  DotProduct_block1 u_cfblk122_inst (.in1(cfblk149_out1),  // uint8
                                     .in2(cfblk105_out1),  // uint8
                                     .out1(cfblk122_out1)  // uint8
                                     );

  assign cfblk94_out1 = (cfblk122_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk94_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk83_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk76_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk160_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk52_out1 = (cfblk1_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk70_out1 = cfblk52_out1 + cfblk139_out1;



  assign cfblk42_out1 = cfblk58_out1 + cfblk42_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk42_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk13_out1 = cfblk158_out1 - cfblk70_out1;



  assign cfblk14_out1 = cfblk13_out1 - cfblk150_out1;



  always @(cfblk14_out1, cfblk161_out1) begin
    cfblk72_div_temp = 9'b000000000;
    cfblk72_t_0_0 = 9'b000000000;
    if (cfblk161_out1 == 8'b00000000) begin
      cfblk72_out1 = 8'b11111111;
    end
    else begin
      cfblk72_t_0_0 = {1'b0, cfblk14_out1};
      cfblk72_div_temp = cfblk72_t_0_0 / cfblk161_out1;
      if (cfblk72_div_temp[8] != 1'b0) begin
        cfblk72_out1 = 8'b11111111;
      end
      else begin
        cfblk72_out1 = cfblk72_div_temp[7:0];
      end
    end
  end



  assign dtc_out_5 = cfblk72_out1;



  assign cfblk38_out1 = dtc_out_5;



  always @(cfblk10_out1, cfblk38_out1) begin
    cfblk115_div_temp = 9'b000000000;
    cfblk115_t_0_0 = 9'b000000000;
    if (cfblk10_out1 == 8'b00000000) begin
      cfblk115_out1 = 8'b11111111;
    end
    else begin
      cfblk115_t_0_0 = {1'b0, cfblk38_out1};
      cfblk115_div_temp = cfblk115_t_0_0 / cfblk10_out1;
      if (cfblk115_div_temp[8] != 1'b0) begin
        cfblk115_out1 = 8'b11111111;
      end
      else begin
        cfblk115_out1 = cfblk115_div_temp[7:0];
      end
    end
  end



  assign cfblk58_out1 = cfblk115_out1 + cfblk55_out1;



  assign cfblk5_out1 = cfblk58_out1 & bitMask_for_cfblk5;



  assign cfblk17_out1 = (cfblk5_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_6 = cfblk17_out1;



  assign cfblk76_out1 = dtc_out_6;



  assign dtc_out_7 = cfblk76_out1;



  assign cfblk117_out1 = dtc_out_7;



  assign cfblk27_out1 = (cfblk117_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk132_out1, cfblk27_out1) begin
    cfblk15_div_temp = 9'b000000000;
    cfblk15_t_0_0 = 9'b000000000;
    if (cfblk132_out1 == 8'b00000000) begin
      cfblk15_out1 = 8'b11111111;
    end
    else begin
      cfblk15_t_0_0 = {1'b0, cfblk27_out1};
      cfblk15_div_temp = cfblk15_t_0_0 / cfblk132_out1;
      if (cfblk15_div_temp[8] != 1'b0) begin
        cfblk15_out1 = 8'b11111111;
      end
      else begin
        cfblk15_out1 = cfblk15_div_temp[7:0];
      end
    end
  end



  assign cfblk4_out1 = cfblk15_out1 | 8'b00000001;



  DotProduct_block6 u_cfblk34_inst (.in1(cfblk4_out1),  // uint8
                                    .in2(cfblk148_out1),  // uint8
                                    .out1(cfblk34_out1)  // uint8
                                    );

  assign cfblk69_out1 = cfblk34_out1 + cfblk69_const_val_1;



  DotProduct_block4 u_cfblk30_inst (.in1(cfblk69_out1),  // uint8
                                    .in2(cfblk145_out1),  // uint8
                                    .out1(cfblk30_out1)  // uint8
                                    );

  assign cfblk111_out1 = (cfblk30_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block8 u_cfblk83_inst (.in1(cfblk111_out1),  // uint8
                                    .in2(cfblk143_out1),  // uint8
                                    .out1(cfblk83_out1)  // uint8
                                    );

  assign Hdl_out = cfblk83_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

