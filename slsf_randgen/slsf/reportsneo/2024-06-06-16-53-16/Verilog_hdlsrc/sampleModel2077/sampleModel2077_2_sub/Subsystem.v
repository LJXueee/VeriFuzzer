// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel2077\sampleModel2077_2_sub\Subsystem.v
// Created: 2024-06-10 22:14:31
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// (no clock)    0
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk143                      ce_out        1
// Hdl_out                       (no clock)    inf
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel2077_2_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk143,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk143;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk44_const_val_1;  // uint8
  wire [7:0] cfblk42_const_val_1;  // uint8
  wire [7:0] cfblk78_const_val_1;  // uint8
  wire [7:0] cfblk134_const_val_1;  // uint8
  wire [15:0] cfblk148_out1;  // uint16
  wire [31:0] dtc_out;  // ufix32
  wire [7:0] cfblk130_out1;  // uint8
  wire [63:0] Mysubsystem_31_out1;  // ufix64
  real Mysubsystem_31_out1_double;  // double
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk30_const_val_1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk12_const_val_1;  // uint8
  wire [7:0] cfblk115_const_val_1;  // uint8
  wire [7:0] cfblk99_const_val_1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  reg [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  reg [7:0] cfblk54_out1;  // uint8
  reg [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  reg [7:0] cfblk72_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [15:0] Mysubsystem_33_out1;  // ufix16_En7
  wire [7:0] Mysubsystem_5_out1;  // ufix8_En7
  wire [7:0] Mysubsystem_34_out1;  // ufix8_En7
  wire signed [31:0] cfblk117_sub_cast;  // sfix32_En7
  wire signed [31:0] cfblk117_sub_cast_1;  // sfix32_En7
  wire signed [31:0] cfblk117_sub_temp;  // sfix32_En7
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  reg [7:0] cfblk61_out1;  // uint8
  wire [7:0] TmpGroundAtHdl_outInport1_out1;  // uint8
  reg [15:0] cfblk132_varargout_1;  // ufix16
  reg [16:0] cfblk132_div_temp;  // ufix17
  reg [16:0] cfblk132_t_0_0;  // ufix17
  reg [8:0] cfblk32_div_temp;  // ufix9
  reg [8:0] cfblk32_t_0_0;  // ufix9
  reg [8:0] cfblk131_div_temp;  // ufix9
  reg [8:0] cfblk131_t_0_0;  // ufix9
  reg [8:0] cfblk80_div_temp;  // ufix9
  reg [8:0] cfblk80_t_0_0;  // ufix9
  reg [8:0] cfblk54_div_temp;  // ufix9
  reg [8:0] cfblk54_t_0_0;  // ufix9
  reg [15:0] cfblk56_varargout_1;  // ufix16
  reg [15:0] cfblk56_div_temp;  // ufix16
  reg [8:0] cfblk72_div_temp;  // ufix9
  reg [8:0] cfblk72_t_0_0;  // ufix9
  reg [8:0] cfblk53_div_temp;  // ufix9
  reg [8:0] cfblk53_t_0_0;  // ufix9
  reg [8:0] cfblk104_div_temp;  // ufix9
  reg [8:0] cfblk104_t_0_0;  // ufix9
  reg [8:0] cfblk61_div_temp;  // ufix9
  reg [8:0] cfblk61_t_0_0;  // ufix9


  assign cfblk44_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk42_const_val_1 = 8'b00000000;



  assign cfblk78_const_val_1 = 8'b00000000;



  assign cfblk134_const_val_1 = 8'b00000000;



  cfblk148 u_cfblk148 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk148_out1)  // uint16
                       );

  assign dtc_out = {16'b0, cfblk148_out1};



  assign cfblk130_out1 = dtc_out[7:0];



  Mysubsystem_31 u_Mysubsystem_31 (.Out1(Mysubsystem_31_out1)  // double
                                   );

  always @* Mysubsystem_31_out1_double = $bitstoreal(Mysubsystem_31_out1);

  assign cfblk129_out1 = $rtoi(Mysubsystem_31_out1_double);



  assign cfblk30_const_val_1 = 8'b00000000;



  cfblk151 u_cfblk151 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk151_out1)  // uint8
                       );

  assign cfblk12_const_val_1 = 8'b00000000;



  assign cfblk115_const_val_1 = 8'b00000000;



  assign cfblk99_const_val_1 = 8'b00000000;



  assign cfblk150_out1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk92_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  DotProduct_block4 u_cfblk76_inst (.in1(cfblk2_out1),  // uint8
                                    .in2(cfblk78_out1),  // uint8
                                    .out1(cfblk76_out1)  // uint8
                                    );

  assign cfblk34_out1 = cfblk76_out1 - cfblk14_out1;



  cfblk155 u_cfblk155 (.In1(cfblk34_out1),  // uint8
                       .Out1(cfblk155_out1)  // uint8
                       );

  assign cfblk64_out1 = cfblk108_out1 + cfblk38_out1;



  always @(cfblk117_out1, cfblk148_out1) begin
    cfblk132_div_temp = 17'b00000000000000000;
    cfblk132_t_0_0 = 17'b00000000000000000;
    if (cfblk117_out1 == 8'b00000000) begin
      cfblk132_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk132_t_0_0 = {1'b0, cfblk148_out1};
      cfblk132_div_temp = cfblk132_t_0_0 / cfblk117_out1;
      if (cfblk132_div_temp[16] != 1'b0) begin
        cfblk132_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk132_varargout_1 = cfblk132_div_temp[15:0];
      end
    end
    if (cfblk132_varargout_1[15:8] != 8'b00000000) begin
      cfblk132_out1 = 8'b11111111;
    end
    else begin
      cfblk132_out1 = cfblk132_varargout_1[7:0];
    end
  end



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk134_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign cfblk118_out1 = cfblk127_out1 + cfblk2_out1;



  assign dtc_out_1 = cfblk10_out1;



  assign cfblk70_out1 = dtc_out_1;



  always @(cfblk106_out1, cfblk70_out1) begin
    cfblk32_div_temp = 9'b000000000;
    cfblk32_t_0_0 = 9'b000000000;
    if (cfblk70_out1 == 8'b00000000) begin
      cfblk32_out1 = 8'b11111111;
    end
    else begin
      cfblk32_t_0_0 = {1'b0, cfblk106_out1};
      cfblk32_div_temp = cfblk32_t_0_0 / cfblk70_out1;
      if (cfblk32_div_temp[8] != 1'b0) begin
        cfblk32_out1 = 8'b11111111;
      end
      else begin
        cfblk32_out1 = cfblk32_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk32_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk22_out1 = (cfblk104_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk5_out1 = cfblk22_out1 + cfblk152_out1;



  always @(cfblk166_out1, cfblk5_out1) begin
    cfblk131_div_temp = 9'b000000000;
    cfblk131_t_0_0 = 9'b000000000;
    if (cfblk166_out1 == 8'b00000000) begin
      cfblk131_out1 = 8'b11111111;
    end
    else begin
      cfblk131_t_0_0 = {1'b0, cfblk5_out1};
      cfblk131_div_temp = cfblk131_t_0_0 / cfblk166_out1;
      if (cfblk131_div_temp[8] != 1'b0) begin
        cfblk131_out1 = 8'b11111111;
      end
      else begin
        cfblk131_out1 = cfblk131_div_temp[7:0];
      end
    end
  end



  assign cfblk12_out1 = cfblk131_out1 + cfblk12_const_val_1;



  assign cfblk10_out1 = (cfblk12_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk120_out1 = cfblk67_out1 + cfblk10_out1;



  assign cfblk115_out1 = cfblk120_out1 + cfblk115_const_val_1;



  DotProduct_block6 u_cfblk83_inst (.in1(cfblk115_out1),  // uint8
                                    .in2(cfblk118_out1),  // uint8
                                    .out1(cfblk83_out1)  // uint8
                                    );

  assign cfblk51_out1 = cfblk83_out1 + cfblk132_out1;



  always @(cfblk51_out1, cfblk64_out1) begin
    cfblk80_div_temp = 9'b000000000;
    cfblk80_t_0_0 = 9'b000000000;
    if (cfblk64_out1 == 8'b00000000) begin
      cfblk80_out1 = 8'b11111111;
    end
    else begin
      cfblk80_t_0_0 = {1'b0, cfblk51_out1};
      cfblk80_div_temp = cfblk80_t_0_0 / cfblk64_out1;
      if (cfblk80_div_temp[8] != 1'b0) begin
        cfblk80_out1 = 8'b11111111;
      end
      else begin
        cfblk80_out1 = cfblk80_div_temp[7:0];
      end
    end
  end



  assign cfblk7_out1 = cfblk80_out1 + cfblk40_out1;



  assign cfblk140_out1 = cfblk7_out1 + cfblk117_out1;



  always @(cfblk127_out1, cfblk140_out1) begin
    cfblk54_div_temp = 9'b000000000;
    cfblk54_t_0_0 = 9'b000000000;
    if (cfblk140_out1 == 8'b00000000) begin
      cfblk54_out1 = 8'b11111111;
    end
    else begin
      cfblk54_t_0_0 = {1'b0, cfblk127_out1};
      cfblk54_div_temp = cfblk54_t_0_0 / cfblk140_out1;
      if (cfblk54_div_temp[8] != 1'b0) begin
        cfblk54_out1 = 8'b11111111;
      end
      else begin
        cfblk54_out1 = cfblk54_div_temp[7:0];
      end
    end
  end



  always @(cfblk148_out1, cfblk54_out1) begin
    cfblk56_div_temp = 16'b0000000000000000;
    if (cfblk148_out1 == 16'b0000000000000000) begin
      cfblk56_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk56_div_temp = cfblk54_out1 / cfblk148_out1;
      cfblk56_varargout_1 = cfblk56_div_temp;
    end
    if (cfblk56_varargout_1[15:8] != 8'b00000000) begin
      cfblk56_out1 = 8'b11111111;
    end
    else begin
      cfblk56_out1 = cfblk56_varargout_1[7:0];
    end
  end



  cfblk156 u_cfblk156 (.In1(cfblk56_out1),  // uint8
                       .Out1(cfblk156_out1)  // uint8
                       );

  assign cfblk21_out1 = cfblk156_out1 + cfblk155_out1;



  DotProduct_block5 u_cfblk82_inst (.in1(cfblk21_out1),  // uint8
                                    .in2(cfblk117_out1),  // uint8
                                    .out1(cfblk82_out1)  // uint8
                                    );

  DotProduct_block7 u_cfblk98_inst (.in1(cfblk151_out1),  // uint8
                                    .in2(cfblk82_out1),  // uint8
                                    .out1(cfblk98_out1)  // uint8
                                    );

  assign dtc_out_2 = cfblk98_out1;



  assign cfblk107_out1 = dtc_out_2;



  assign cfblk99_out1 = cfblk107_out1 + cfblk99_const_val_1;



  assign cfblk119_out1 = cfblk99_out1 - cfblk106_out1;



  always @(cfblk119_out1, cfblk47_out1) begin
    cfblk72_div_temp = 9'b000000000;
    cfblk72_t_0_0 = 9'b000000000;
    if (cfblk47_out1 == 8'b00000000) begin
      cfblk72_out1 = 8'b11111111;
    end
    else begin
      cfblk72_t_0_0 = {1'b0, cfblk119_out1};
      cfblk72_div_temp = cfblk72_t_0_0 / cfblk47_out1;
      if (cfblk72_div_temp[8] != 1'b0) begin
        cfblk72_out1 = 8'b11111111;
      end
      else begin
        cfblk72_out1 = cfblk72_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk72_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk39_out1 = cfblk130_out1 + cfblk92_out1;



  assign dtc_out_3 = cfblk39_out1;



  assign cfblk40_out1 = dtc_out_3;



  assign cfblk46_out1 = (cfblk73_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk13_out1 = cfblk46_out1 + cfblk40_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk13_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk100_out1 = cfblk38_out1 + cfblk47_out1;



  assign cfblk16_out1 = cfblk25_out1 + cfblk42_out1;



  assign cfblk30_out1 = cfblk16_out1 + cfblk30_const_val_1;



  DotProduct_block3 u_cfblk73_inst (.in1(cfblk30_out1),  // uint8
                                    .in2(cfblk58_out1),  // uint8
                                    .out1(cfblk73_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk73_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk78_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  cfblk154 u_cfblk154 (.In1(cfblk127_out1),  // uint8
                       .Out1(cfblk154_out1)  // uint8
                       );

  assign dtc_out_4 = cfblk47_out1;



  assign cfblk128_out1 = dtc_out_4;



  assign cfblk78_out1 = cfblk128_out1 + cfblk78_const_val_1;



  assign cfblk47_out1 = cfblk127_out1 + cfblk38_out1;



  assign cfblk37_out1 = cfblk47_out1 - cfblk78_out1;



  assign cfblk134_out1 = cfblk37_out1 + cfblk134_const_val_1;



  assign cfblk25_out1 = cfblk134_out1 + cfblk130_out1;



  assign cfblk42_out1 = cfblk66_out1 + cfblk42_const_val_1;



  assign cfblk26_out1 = (cfblk42_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk152 u_cfblk152 (.In1(cfblk26_out1),  // uint8
                       .Out1(cfblk152_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk68_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk85_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk44_out1 = cfblk23_out1 + cfblk44_const_val_1;



  assign cfblk106_out1 = (cfblk44_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk106_out1, cfblk85_out1) begin
    cfblk53_div_temp = 9'b000000000;
    cfblk53_t_0_0 = 9'b000000000;
    if (cfblk85_out1 == 8'b00000000) begin
      cfblk53_out1 = 8'b11111111;
    end
    else begin
      cfblk53_t_0_0 = {1'b0, cfblk106_out1};
      cfblk53_div_temp = cfblk53_t_0_0 / cfblk85_out1;
      if (cfblk53_div_temp[8] != 1'b0) begin
        cfblk53_out1 = 8'b11111111;
      end
      else begin
        cfblk53_out1 = cfblk53_div_temp[7:0];
      end
    end
  end



  assign cfblk38_out1 = cfblk53_out1 + cfblk8_out1;



  Mysubsystem_33 u_Mysubsystem_33 (.In1(cfblk38_out1),  // uint8
                                   .Out1(Mysubsystem_33_out1)  // ufix16_En7
                                   );

  Mysubsystem_5 u_Mysubsystem_5 (.clk(clk),
                                 .reset(reset),
                                 .enb(clk_enable),
                                 .In1(Mysubsystem_33_out1),  // ufix16_En7
                                 .In2(cfblk127_out1),  // uint8
                                 .Out1(Mysubsystem_5_out1)  // ufix8_En7
                                 );

  Mysubsystem_34 u_Mysubsystem_34 (.In1(Mysubsystem_5_out1),  // ufix8_En7
                                   .Out1(Mysubsystem_34_out1)  // ufix8_En7
                                   );

  assign cfblk117_sub_cast = {24'b0, Mysubsystem_34_out1};
  assign cfblk117_sub_cast_1 = {17'b0, {cfblk165_out1, 7'b0000000}};
  assign cfblk117_sub_temp = cfblk117_sub_cast - cfblk117_sub_cast_1;
  assign cfblk117_out1 = cfblk117_sub_temp[14:7];



  DotProduct u_cfblk127_inst (.in1(cfblk117_out1),  // uint8
                              .in2(cfblk167_out1),  // uint8
                              .out1(cfblk127_out1)  // uint8
                              );

  assign cfblk102_out1 = (cfblk127_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk68_out1 = cfblk102_out1 + cfblk23_out1;



  always @(cfblk23_out1, cfblk68_out1) begin
    cfblk104_div_temp = 9'b000000000;
    cfblk104_t_0_0 = 9'b000000000;
    if (cfblk23_out1 == 8'b00000000) begin
      cfblk104_out1 = 8'b11111111;
    end
    else begin
      cfblk104_t_0_0 = {1'b0, cfblk68_out1};
      cfblk104_div_temp = cfblk104_t_0_0 / cfblk23_out1;
      if (cfblk104_div_temp[8] != 1'b0) begin
        cfblk104_out1 = 8'b11111111;
      end
      else begin
        cfblk104_out1 = cfblk104_div_temp[7:0];
      end
    end
  end



  assign cfblk62_out1 = (cfblk104_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk55_out1 = cfblk62_out1 + cfblk152_out1;



  assign cfblk19_out1 = (cfblk55_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk67_out1 = cfblk19_out1 + cfblk25_out1;



  assign cfblk63_out1 = (cfblk67_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk153 u_cfblk153 (.In1(cfblk63_out1),  // uint8
                       .Out1(cfblk153_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk153_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk23_out1 = cfblk163_out1 + cfblk154_out1;



  assign cfblk126_out1 = cfblk23_out1 + cfblk164_out1;



  assign cfblk66_out1 = cfblk126_out1 - cfblk129_out1;



  assign cfblk8_out1 = (cfblk66_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_5 = cfblk8_out1;



  assign cfblk15_out1 = dtc_out_5;



  assign cfblk85_out1 = cfblk15_out1 + cfblk161_out1;



  assign cfblk108_out1 = (cfblk85_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block1 u_cfblk18_inst (.in1(cfblk108_out1),  // uint8
                                    .in2(cfblk47_out1),  // uint8
                                    .out1(cfblk18_out1)  // uint8
                                    );

  DotProduct_block u_cfblk14_inst (.in1(cfblk18_out1),  // uint8
                                   .in2(cfblk100_out1),  // uint8
                                   .out1(cfblk14_out1)  // uint8
                                   );

  assign cfblk45_out1 = cfblk14_out1 - cfblk159_out1;



  DotProduct_block2 u_cfblk58_inst (.in1(cfblk45_out1),  // uint8
                                    .in2(cfblk158_out1),  // uint8
                                    .out1(cfblk58_out1)  // uint8
                                    );

  assign cfblk112_out1 = cfblk58_out1 + cfblk150_out1;



  assign cfblk135_out1 = cfblk112_out1 + cfblk160_out1;



  assign cfblk92_out1 = cfblk135_out1 + cfblk135_out1;



  always @(cfblk100_out1, cfblk92_out1) begin
    cfblk61_div_temp = 9'b000000000;
    cfblk61_t_0_0 = 9'b000000000;
    if (cfblk100_out1 == 8'b00000000) begin
      cfblk61_out1 = 8'b11111111;
    end
    else begin
      cfblk61_t_0_0 = {1'b0, cfblk92_out1};
      cfblk61_div_temp = cfblk61_t_0_0 / cfblk100_out1;
      if (cfblk61_div_temp[8] != 1'b0) begin
        cfblk61_out1 = 8'b11111111;
      end
      else begin
        cfblk61_out1 = cfblk61_div_temp[7:0];
      end
    end
  end



  assign cfblk143 = cfblk61_out1;

  assign TmpGroundAtHdl_outInport1_out1 = 8'b00000000;



  assign Hdl_out = TmpGroundAtHdl_outInport1_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

