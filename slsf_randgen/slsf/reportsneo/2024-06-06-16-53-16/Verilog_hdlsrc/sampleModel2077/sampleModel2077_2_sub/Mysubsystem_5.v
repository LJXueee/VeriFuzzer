// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel2077\sampleModel2077_2_sub\Mysubsystem_5.v
// Created: 2024-06-10 22:14:31
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Mysubsystem_5
// Source Path: sampleModel2077_2_sub/Subsystem/Mysubsystem_5
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Mysubsystem_5
          (clk,
           reset,
           enb,
           In1,
           In2,
           Out1);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In1;  // ufix16_En7
  input   [7:0] In2;  // uint8
  output  [7:0] Out1;  // ufix8_En7


  reg [15:0] cfblk162_reg [0:1];  // ufix16 [2]
  wire [15:0] cfblk162_reg_next [0:1];  // ufix16_En7 [2]
  wire [15:0] cfblk162_out1;  // ufix16_En7
  wire cfblk162_out1_is_not0;
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire cfblk168_out1_is_not0;
  wire cfblk1_out1;
  wire [7:0] cfblk105_out1;  // ufix8_En7
  wire [8:0] cfblk43_y;  // ufix9_En7
  wire [7:0] cfblk43_out1;  // ufix8_En7


  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 16'b0000000000000000;
        cfblk162_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = In1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk162_out1_is_not0 = cfblk162_out1 != 16'b0000000000000000;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = In2;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk168_out1_is_not0 = cfblk168_out1 != 8'b00000000;



  assign cfblk1_out1 = cfblk162_out1_is_not0 & cfblk168_out1_is_not0;



  assign cfblk105_out1 = {cfblk1_out1, 7'b0000000};



  assign cfblk43_y = {1'b0, cfblk105_out1};
  assign cfblk43_out1 = cfblk43_y[7:0];



  assign Out1 = cfblk43_out1;

endmodule  // Mysubsystem_5

