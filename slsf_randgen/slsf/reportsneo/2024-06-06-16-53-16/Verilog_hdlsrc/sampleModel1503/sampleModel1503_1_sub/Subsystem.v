// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1503\sampleModel1503_1_sub\Subsystem.v
// Created: 2024-08-12 12:10:51
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk139                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1503_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk139,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk139;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk21_const_val_1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk69_const_val_1;  // uint8
  wire [15:0] cfblk141_out1;  // uint16
  wire [7:0] cfblk123_const_val_1;  // uint8
  wire [7:0] cfblk126_const_val_1;  // uint8
  wire [7:0] cfblk28_const_val_1;  // uint8
  wire [7:0] cfblk135_const_val_1;  // uint8
  wire [7:0] cfblk46_const_val_1;  // uint8
  wire [7:0] cfblk107_const_val_1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  reg [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  reg [7:0] cfblk132_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  reg [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [31:0] cfblk26_add_temp;  // ufix32
  wire [31:0] cfblk26_1;  // ufix32
  wire [31:0] cfblk26_2;  // ufix32
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire cfblk4_relop1;
  wire [31:0] cfblk8_add_temp;  // ufix32
  wire [31:0] cfblk8_1;  // ufix32
  wire [31:0] cfblk8_2;  // ufix32
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  reg [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  reg [7:0] cfblk12_out1;  // uint8
  wire [7:0] Mysubsystem_36_out1;  // uint8
  wire [15:0] cfblk3_out1;  // uint16
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk82_out1;  // uint8
  reg [8:0] cfblk116_div_temp;  // ufix9
  reg [8:0] cfblk116_t_0_0;  // ufix9
  reg [8:0] cfblk36_div_temp;  // ufix9
  reg [8:0] cfblk36_t_0_0;  // ufix9
  reg [8:0] cfblk90_div_temp;  // ufix9
  reg [8:0] cfblk90_t_0_0;  // ufix9
  reg [8:0] cfblk48_div_temp;  // ufix9
  reg [8:0] cfblk48_t_0_0;  // ufix9
  reg [8:0] cfblk53_div_temp;  // ufix9
  reg [8:0] cfblk53_t_0_0;  // ufix9
  reg [7:0] cfblk29_div_temp;  // ufix8
  reg [8:0] cfblk132_div_temp;  // ufix9
  reg [8:0] cfblk132_t_0_0;  // ufix9
  reg [8:0] cfblk12_div_temp;  // ufix9
  reg [8:0] cfblk12_t_0_0;  // ufix9


  assign cfblk21_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk140_out1 = 8'b00000001;



  assign cfblk69_const_val_1 = 8'b00000000;



  cfblk141 u_cfblk141 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk141_out1)  // uint16
                       );

  assign cfblk123_const_val_1 = 8'b00000000;



  assign cfblk126_const_val_1 = 8'b00000000;



  assign cfblk28_const_val_1 = 8'b00000000;



  assign cfblk135_const_val_1 = 8'b00000000;



  assign cfblk46_const_val_1 = 8'b00000000;



  assign cfblk107_const_val_1 = 8'b00000000;



  assign cfblk135_out1 = cfblk113_out1 + cfblk135_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk5_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk53_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk57_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  always @(cfblk174_out1, cfblk80_out1) begin
    cfblk116_div_temp = 9'b000000000;
    cfblk116_t_0_0 = 9'b000000000;
    if (cfblk174_out1 == 8'b00000000) begin
      cfblk116_out1 = 8'b11111111;
    end
    else begin
      cfblk116_t_0_0 = {1'b0, cfblk80_out1};
      cfblk116_div_temp = cfblk116_t_0_0 / cfblk174_out1;
      if (cfblk116_div_temp[8] != 1'b0) begin
        cfblk116_out1 = 8'b11111111;
      end
      else begin
        cfblk116_out1 = cfblk116_div_temp[7:0];
      end
    end
  end



  assign cfblk52_out1 = cfblk116_out1 + cfblk148_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk45_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk43_out1 = cfblk167_out1 + cfblk52_out1;



  assign cfblk127_out1 = cfblk43_out1 - cfblk163_out1;



  assign cfblk126_out1 = cfblk7_out1 + cfblk126_const_val_1;



  assign dtc_out = cfblk126_out1;



  assign cfblk80_out1 = dtc_out;



  assign dtc_out_1 = cfblk132_out1;



  assign cfblk33_out1 = dtc_out_1;



  DotProduct_block u_cfblk130_inst (.in1(cfblk28_out1),  // uint8
                                    .in2(cfblk115_out1),  // uint8
                                    .out1(cfblk130_out1)  // uint8
                                    );

  assign cfblk131_out1 = (cfblk130_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk28_out1;



  assign cfblk87_out1 = dtc_out_2;



  assign cfblk104_out1 = (cfblk87_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block4 u_cfblk23_inst (.in1(cfblk104_out1),  // uint8
                                    .in2(cfblk131_out1),  // uint8
                                    .out1(cfblk23_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk89_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk54_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk48_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk46_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign dtc_out_3 = cfblk5_out1;



  assign cfblk108_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk108_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk121_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk24_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk99_out1 = cfblk74_out1 - cfblk132_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk99_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk47_out1 = (cfblk62_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk5_out1 = cfblk47_out1 + cfblk178_out1;



  assign cfblk120_out1 = cfblk107_out1 - cfblk36_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk120_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk129_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk69_out1 = cfblk76_out1 + cfblk69_const_val_1;



  assign cfblk26_1 = {24'b0, cfblk69_out1};
  assign cfblk26_2 = {16'b0, cfblk141_out1};
  assign cfblk26_add_temp = cfblk26_1 + cfblk26_2;
  assign cfblk26_out1 = cfblk26_add_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk55_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk38_out1 = cfblk166_out1 + cfblk101_out1;



  assign dtc_out_4 = cfblk38_out1;



  assign cfblk55_out1 = dtc_out_4;



  assign cfblk65_out1 = cfblk21_out1 - cfblk55_out1;



  assign cfblk113_out1 = cfblk76_out1 - cfblk65_out1;



  cfblk2 u_cfblk2 (.u(cfblk27_out1),  // uint8
                   .y(cfblk2_out1)  // uint8
                   );

  assign cfblk101_out1 = (cfblk2_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk17_out1 = (cfblk101_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk11_out1 = (cfblk17_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk109_out1 = cfblk11_out1 + cfblk113_out1;



  assign cfblk88_out1 = cfblk76_out1 + cfblk118_out1;



  DotProduct_block2 u_cfblk16_inst (.in1(cfblk88_out1),  // uint8
                                    .in2(cfblk109_out1),  // uint8
                                    .out1(cfblk16_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk16_out1;



  assign cfblk75_out1 = dtc_out_5;



  assign cfblk20_out1 = cfblk75_out1 - cfblk26_out1;



  assign cfblk8_1 = {24'b0, cfblk20_out1};
  assign cfblk8_2 = {31'b0, cfblk4_relop1};
  assign cfblk8_add_temp = cfblk8_1 + cfblk8_2;
  assign cfblk8_out1 = cfblk8_add_temp[7:0];



  DotProduct_block3 u_cfblk22_inst (.in1(cfblk8_out1),  // uint8
                                    .in2(cfblk151_out1),  // uint8
                                    .out1(cfblk22_out1)  // uint8
                                    );

  DotProduct_block1 u_cfblk137_inst (.in1(cfblk22_out1),  // uint8
                                     .in2(cfblk154_out1),  // uint8
                                     .out1(cfblk137_out1)  // uint8
                                     );

  always @(cfblk137_out1, cfblk5_out1) begin
    cfblk36_div_temp = 9'b000000000;
    cfblk36_t_0_0 = 9'b000000000;
    if (cfblk5_out1 == 8'b00000000) begin
      cfblk36_out1 = 8'b11111111;
    end
    else begin
      cfblk36_t_0_0 = {1'b0, cfblk137_out1};
      cfblk36_div_temp = cfblk36_t_0_0 / cfblk5_out1;
      if (cfblk36_div_temp[8] != 1'b0) begin
        cfblk36_out1 = 8'b11111111;
      end
      else begin
        cfblk36_out1 = cfblk36_div_temp[7:0];
      end
    end
  end



  assign dtc_out_6 = cfblk36_out1;



  assign cfblk129_out1 = dtc_out_6;



  assign cfblk41_out1 = (cfblk129_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk100_out1 = cfblk128_out1 - cfblk41_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk100_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk128_out1 = cfblk57_out1 + cfblk149_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk76_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  DotProduct_block8 u_cfblk96_inst (.in1(cfblk156_out1),  // uint8
                                    .in2(cfblk128_out1),  // uint8
                                    .out1(cfblk96_out1)  // uint8
                                    );

  assign cfblk19_out1 = cfblk96_out1 + cfblk150_out1;



  DotProduct u_cfblk114_inst (.in1(cfblk19_out1),  // uint8
                              .in2(cfblk140_out1),  // uint8
                              .out1(cfblk114_out1)  // uint8
                              );

  assign cfblk62_out1 = cfblk114_out1 + cfblk157_out1;



  assign cfblk74_out1 = (cfblk62_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk57_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk90_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(cfblk160_out1, cfblk51_out1) begin
    cfblk90_div_temp = 9'b000000000;
    cfblk90_t_0_0 = 9'b000000000;
    if (cfblk160_out1 == 8'b00000000) begin
      cfblk90_out1 = 8'b11111111;
    end
    else begin
      cfblk90_t_0_0 = {1'b0, cfblk51_out1};
      cfblk90_div_temp = cfblk90_t_0_0 / cfblk160_out1;
      if (cfblk90_div_temp[8] != 1'b0) begin
        cfblk90_out1 = 8'b11111111;
      end
      else begin
        cfblk90_out1 = cfblk90_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk90_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  assign cfblk57_out1 = cfblk15_out1 + cfblk161_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk57_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk27_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  always @(cfblk24_out1, cfblk28_out1) begin
    cfblk48_div_temp = 9'b000000000;
    cfblk48_t_0_0 = 9'b000000000;
    if (cfblk24_out1 == 8'b00000000) begin
      cfblk48_out1 = 8'b11111111;
    end
    else begin
      cfblk48_t_0_0 = {1'b0, cfblk28_out1};
      cfblk48_div_temp = cfblk48_t_0_0 / cfblk24_out1;
      if (cfblk48_div_temp[8] != 1'b0) begin
        cfblk48_out1 = 8'b11111111;
      end
      else begin
        cfblk48_out1 = cfblk48_div_temp[7:0];
      end
    end
  end



  Mysubsystem_36 u_Mysubsystem_36 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk12_out1),  // uint8
                                   .Out1(Mysubsystem_36_out1)  // uint8
                                   );

  assign cfblk3_out1 = {Mysubsystem_36_out1, cfblk48_out1};



  assign cfblk178_out1 = cfblk3_out1[7:0];



  DotProduct_block5 u_cfblk27_inst (.in1(cfblk178_out1),  // uint8
                                    .in2(cfblk84_out1),  // uint8
                                    .out1(cfblk27_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk27_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk21_out1 = cfblk28_out1 + cfblk21_const_val_1;



  assign cfblk112_out1 = cfblk21_out1 + cfblk164_out1;



  assign cfblk68_out1 = cfblk112_out1 + cfblk165_out1;



  always @(cfblk176_out1, cfblk68_out1) begin
    cfblk53_div_temp = 9'b000000000;
    cfblk53_t_0_0 = 9'b000000000;
    if (cfblk176_out1 == 8'b00000000) begin
      cfblk53_out1 = 8'b11111111;
    end
    else begin
      cfblk53_t_0_0 = {1'b0, cfblk68_out1};
      cfblk53_div_temp = cfblk53_t_0_0 / cfblk176_out1;
      if (cfblk53_div_temp[8] != 1'b0) begin
        cfblk53_out1 = 8'b11111111;
      end
      else begin
        cfblk53_out1 = cfblk53_div_temp[7:0];
      end
    end
  end



  assign cfblk15_out1 = cfblk53_out1 - cfblk175_out1;



  cfblk142 u_cfblk142 (.In1(cfblk15_out1),  // uint8
                       .Out1(cfblk142_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk142_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  cfblk1 u_cfblk1 (.u(cfblk177_out1),  // uint8
                   .y(cfblk1_out1)  // uint8
                   );

  assign cfblk7_out1 = cfblk1_out1 + cfblk140_out1;



  assign cfblk136_out1 = cfblk7_out1 + cfblk74_out1;



  assign cfblk60_out1 = cfblk136_out1 + cfblk155_out1;



  cfblk143 u_cfblk143 (.In1(cfblk60_out1),  // uint8
                       .Out1(cfblk143_out1)  // uint8
                       );

  DotProduct_block7 u_cfblk67_inst (.in1(cfblk143_out1),  // uint8
                                    .in2(cfblk162_out1),  // uint8
                                    .out1(cfblk67_out1)  // uint8
                                    );

  assign dtc_out_7 = cfblk67_out1;



  assign cfblk84_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk84_out1;



  assign cfblk118_out1 = dtc_out_8;



  assign cfblk123_out1 = cfblk118_out1 + cfblk123_const_val_1;



  assign cfblk121_out1 = cfblk123_out1 - cfblk169_out1;



  assign cfblk76_out1 = cfblk121_out1 + cfblk171_out1;



  assign cfblk24_out1 = cfblk76_out1 + cfblk158_out1;



  assign cfblk51_out1 = cfblk24_out1 + cfblk159_out1;



  assign cfblk40_out1 = (cfblk51_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_9 = cfblk40_out1;



  assign cfblk54_out1 = dtc_out_9;



  assign cfblk115_out1 = cfblk54_out1 + cfblk118_out1;



  assign cfblk70_out1 = (cfblk115_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk98_out1 = cfblk70_out1 - cfblk65_out1;



  assign cfblk50_out1 = (cfblk98_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block6 u_cfblk34_inst (.in1(cfblk50_out1),  // uint8
                                    .in2(cfblk50_out1),  // uint8
                                    .out1(cfblk34_out1)  // uint8
                                    );

  assign cfblk4_relop1 = cfblk34_out1 <= cfblk23_out1;



  always @(cfblk33_out1, cfblk4_relop1) begin
    cfblk29_div_temp = 8'b00000000;
    if (cfblk33_out1 == 8'b00000000) begin
      cfblk29_out1 = 8'b11111111;
    end
    else begin
      cfblk29_div_temp = cfblk4_relop1 / cfblk33_out1;
      cfblk29_out1 = cfblk29_div_temp;
    end
  end



  assign cfblk73_out1 = cfblk29_out1 - cfblk80_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk73_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  always @(cfblk127_out1, cfblk147_out1) begin
    cfblk132_div_temp = 9'b000000000;
    cfblk132_t_0_0 = 9'b000000000;
    if (cfblk127_out1 == 8'b00000000) begin
      cfblk132_out1 = 8'b11111111;
    end
    else begin
      cfblk132_t_0_0 = {1'b0, cfblk147_out1};
      cfblk132_div_temp = cfblk132_t_0_0 / cfblk127_out1;
      if (cfblk132_div_temp[8] != 1'b0) begin
        cfblk132_out1 = 8'b11111111;
      end
      else begin
        cfblk132_out1 = cfblk132_div_temp[7:0];
      end
    end
  end



  assign cfblk28_out1 = cfblk132_out1 + cfblk28_const_val_1;



  assign cfblk45_out1 = cfblk28_out1 - cfblk135_out1;



  always @(cfblk45_out1, cfblk84_out1) begin
    cfblk12_div_temp = 9'b000000000;
    cfblk12_t_0_0 = 9'b000000000;
    if (cfblk84_out1 == 8'b00000000) begin
      cfblk12_out1 = 8'b11111111;
    end
    else begin
      cfblk12_t_0_0 = {1'b0, cfblk45_out1};
      cfblk12_div_temp = cfblk12_t_0_0 / cfblk84_out1;
      if (cfblk12_div_temp[8] != 1'b0) begin
        cfblk12_out1 = 8'b11111111;
      end
      else begin
        cfblk12_out1 = cfblk12_div_temp[7:0];
      end
    end
  end



  assign cfblk46_out1 = cfblk12_out1 + cfblk46_const_val_1;



  assign cfblk107_out1 = cfblk46_out1 + cfblk107_const_val_1;



  assign cfblk89_out1 = cfblk107_out1 + cfblk90_out1;



  assign dtc_out_10 = cfblk89_out1;



  assign cfblk82_out1 = dtc_out_10;



  assign cfblk139 = cfblk82_out1;

  assign Hdl_out = cfblk20_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

