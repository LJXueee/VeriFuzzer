// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1652\sampleModel1652_4_sub\Mysubsystem_13.v
// Created: 2024-08-13 09:12:17
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Mysubsystem_13
// Source Path: sampleModel1652_4_sub/Subsystem/Mysubsystem_13
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Mysubsystem_13
          (clk,
           reset,
           enb,
           In1,
           In2,
           In3,
           Out1);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] In1;  // uint8
  input   [7:0] In2;  // uint8
  input   [7:0] In3;  // uint8
  output  [15:0] Out1;  // uint16


  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [15:0] cfblk104_out1;  // uint16
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  reg [15:0] cfblk103_out1;  // uint16
  reg [16:0] cfblk103_div_temp;  // ufix17
  reg [16:0] cfblk103_t_0_0;  // ufix17


  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = In3;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  DotProduct u_cfblk104_inst (.in1(In1),  // uint8
                              .in2(cfblk160_out1),  // uint8
                              .out1(cfblk104_out1)  // uint16
                              );

  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = In2;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  always @(cfblk104_out1, cfblk150_out1) begin
    cfblk103_div_temp = 17'b00000000000000000;
    cfblk103_t_0_0 = 17'b00000000000000000;
    if (cfblk150_out1 == 8'b00000000) begin
      cfblk103_out1 = 16'b1111111111111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk104_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk150_out1;
      if (cfblk103_div_temp[16] != 1'b0) begin
        cfblk103_out1 = 16'b1111111111111111;
      end
      else begin
        cfblk103_out1 = cfblk103_div_temp[15:0];
      end
    end
  end



  assign Out1 = cfblk103_out1;

endmodule  // Mysubsystem_13

