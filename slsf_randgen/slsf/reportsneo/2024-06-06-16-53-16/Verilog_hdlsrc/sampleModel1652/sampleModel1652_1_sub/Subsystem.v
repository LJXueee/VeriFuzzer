// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1652\sampleModel1652_1_sub\Subsystem.v
// Created: 2024-08-13 08:55:37
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk140                      ce_out        1
// cfblk141                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1652_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk140,
           cfblk141,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk140;  // uint8
  output  [7:0] cfblk141;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk130_const_val_1;  // uint8
  wire [7:0] cfblk27_const_val_1;  // uint8
  wire [7:0] cfblk106_const_val_1;  // uint8
  wire [7:0] cfblk108_const_val_1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk135_const_val_1;  // uint8
  wire [7:0] cfblk89_const_val_1;  // uint8
  wire [7:0] cfblk80_const_val_1;  // uint8
  wire [7:0] cfblk73_const_val_1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk138_const_val_1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  reg [7:0] cfblk107_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk112_out1;  // uint8
  reg [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  reg [7:0] cfblk86_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  reg [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk124_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  reg [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [3:0] cfblk2_out1;  // ufix4_E4
  wire [31:0] dtc_out_11;  // ufix32_E4
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] dtc_out_13;  // ufix8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [15:0] cfblk3_out1;  // uint16
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk39_out1;  // uint8
  wire [7:0] dtc_out_14;  // ufix8
  wire [7:0] Mysubsystem_31_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] dtc_out_15;  // ufix8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] Mysubsystem_15_out1;  // uint8
  reg [8:0] cfblk107_div_temp;  // ufix9
  reg [8:0] cfblk107_t_0_0;  // ufix9
  reg [8:0] cfblk131_div_temp;  // ufix9
  reg [8:0] cfblk131_t_0_0;  // ufix9
  reg [8:0] cfblk103_div_temp;  // ufix9
  reg [8:0] cfblk103_t_0_0;  // ufix9
  reg [8:0] cfblk86_div_temp;  // ufix9
  reg [8:0] cfblk86_t_0_0;  // ufix9
  reg [8:0] cfblk124_div_temp;  // ufix9
  reg [8:0] cfblk124_t_0_0;  // ufix9
  reg [8:0] cfblk126_div_temp;  // ufix9
  reg [8:0] cfblk126_t_0_0;  // ufix9
  reg [8:0] cfblk57_div_temp;  // ufix9
  reg [8:0] cfblk57_t_0_0;  // ufix9
  reg [8:0] cfblk30_div_temp;  // ufix9
  reg [8:0] cfblk30_t_0_0;  // ufix9
  reg [8:0] cfblk77_div_temp;  // ufix9
  reg [8:0] cfblk77_t_0_0;  // ufix9
  reg [8:0] cfblk39_div_temp;  // ufix9
  reg [8:0] cfblk39_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk130_const_val_1 = 8'b00000000;



  assign cfblk27_const_val_1 = 8'b00000000;



  assign cfblk106_const_val_1 = 8'b00000000;



  assign cfblk108_const_val_1 = 8'b00000000;



  assign cfblk144_out1 = 8'b00000001;



  assign cfblk135_const_val_1 = 8'b00000000;



  assign cfblk89_const_val_1 = 8'b00000000;



  assign cfblk80_const_val_1 = 8'b00000000;



  assign cfblk73_const_val_1 = 8'b00000000;



  assign cfblk145_out1 = 8'b00000000;



  assign cfblk138_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk138_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  always @(cfblk149_out1, cfblk88_out1) begin
    cfblk107_div_temp = 9'b000000000;
    cfblk107_t_0_0 = 9'b000000000;
    if (cfblk88_out1 == 8'b00000000) begin
      cfblk107_out1 = 8'b11111111;
    end
    else begin
      cfblk107_t_0_0 = {1'b0, cfblk149_out1};
      cfblk107_div_temp = cfblk107_t_0_0 / cfblk88_out1;
      if (cfblk107_div_temp[8] != 1'b0) begin
        cfblk107_out1 = 8'b11111111;
      end
      else begin
        cfblk107_out1 = cfblk107_div_temp[7:0];
      end
    end
  end



  assign dtc_out = cfblk107_out1;



  assign cfblk121_out1 = dtc_out;



  always @(cfblk121_out1, cfblk132_out1) begin
    cfblk131_div_temp = 9'b000000000;
    cfblk131_t_0_0 = 9'b000000000;
    if (cfblk132_out1 == 8'b00000000) begin
      cfblk131_out1 = 8'b11111111;
    end
    else begin
      cfblk131_t_0_0 = {1'b0, cfblk121_out1};
      cfblk131_div_temp = cfblk131_t_0_0 / cfblk132_out1;
      if (cfblk131_div_temp[8] != 1'b0) begin
        cfblk131_out1 = 8'b11111111;
      end
      else begin
        cfblk131_out1 = cfblk131_div_temp[7:0];
      end
    end
  end



  assign cfblk13_out1 = cfblk139_out1 - cfblk131_out1;



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk13_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  assign cfblk138_out1 = cfblk5_out1 + cfblk138_const_val_1;



  assign cfblk26_out1 = cfblk19_out1 - cfblk138_out1;



  assign cfblk71_out1 = (cfblk26_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk117_out1 = (cfblk71_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk10_out1 = cfblk25_out1 - cfblk101_out1;



  assign cfblk60_out1 = cfblk10_out1 - cfblk117_out1;



  assign dtc_out_1 = cfblk60_out1;



  assign cfblk14_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk14_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk85_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  DotProduct_block u_cfblk104_inst (.in1(cfblk145_out1),  // uint8
                                    .in2(cfblk160_out1),  // uint8
                                    .out1(cfblk104_out1)  // uint8
                                    );

  always @(cfblk104_out1, cfblk150_out1) begin
    cfblk103_div_temp = 9'b000000000;
    cfblk103_t_0_0 = 9'b000000000;
    if (cfblk150_out1 == 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk104_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk150_out1;
      if (cfblk103_div_temp[8] != 1'b0) begin
        cfblk103_out1 = 8'b11111111;
      end
      else begin
        cfblk103_out1 = cfblk103_div_temp[7:0];
      end
    end
  end



  DotProduct_block6 u_cfblk56_inst (.in1(cfblk106_out1),  // uint8
                                    .in2(cfblk90_out1),  // uint8
                                    .out1(cfblk56_out1)  // uint8
                                    );

  assign cfblk80_out1 = cfblk35_out1 + cfblk80_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk58_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk94_out1 = cfblk127_out1 + cfblk100_out1;



  cfblk6 u_cfblk6 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk55_out1),  // uint8
                   .Y(cfblk6_out1)  // uint8
                   );

  DotProduct_block4 u_cfblk34_inst (.in1(cfblk6_out1),  // uint8
                                    .in2(cfblk94_out1),  // uint8
                                    .out1(cfblk34_out1)  // uint8
                                    );

  assign cfblk68_out1 = (cfblk34_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk68_out1;



  assign cfblk112_out1 = dtc_out_2;



  DotProduct_block2 u_cfblk15_inst (.in1(cfblk112_out1),  // uint8
                                    .in2(cfblk77_out1),  // uint8
                                    .out1(cfblk15_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk15_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk118_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk7_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk98_out1 = cfblk118_out1 - cfblk97_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk98_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk36_out1 = (cfblk123_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk44_out1 = cfblk36_out1 - cfblk165_out1;



  assign cfblk46_out1 = (cfblk44_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk91_out1 = cfblk46_out1 + cfblk154_out1;



  assign cfblk97_out1 = cfblk91_out1 + cfblk166_out1;



  assign cfblk101_out1 = cfblk97_out1 + cfblk159_out1;



  assign cfblk89_out1 = cfblk101_out1 + cfblk89_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk90_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk125_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk148_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk127_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk85_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(cfblk135_out1, cfblk57_out1) begin
    cfblk86_div_temp = 9'b000000000;
    cfblk86_t_0_0 = 9'b000000000;
    if (cfblk135_out1 == 8'b00000000) begin
      cfblk86_out1 = 8'b11111111;
    end
    else begin
      cfblk86_t_0_0 = {1'b0, cfblk57_out1};
      cfblk86_div_temp = cfblk86_t_0_0 / cfblk135_out1;
      if (cfblk86_div_temp[8] != 1'b0) begin
        cfblk86_out1 = 8'b11111111;
      end
      else begin
        cfblk86_out1 = cfblk86_div_temp[7:0];
      end
    end
  end



  assign cfblk139_out1 = cfblk86_out1 + cfblk35_out1;



  assign dtc_out_3 = cfblk139_out1;



  assign cfblk37_out1 = dtc_out_3;



  assign cfblk7_out1 = cfblk37_out1 & 8'b11111110;



  assign dtc_out_4 = cfblk73_out1;



  assign cfblk29_out1 = dtc_out_4;



  assign cfblk114_out1 = cfblk29_out1 + cfblk7_out1;



  assign cfblk20_out1 = cfblk73_out1 + cfblk114_out1;



  cfblk8 u_cfblk8 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk20_out1),  // uint8
                   .Y(cfblk8_out1)  // uint8
                   );

  assign cfblk129_out1 = (cfblk8_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk148 u_cfblk148 (.In1(cfblk129_out1),  // uint8
                       .Out1(cfblk148_out1)  // uint8
                       );

  DotProduct_block8 u_cfblk69_inst (.in1(cfblk148_out1),  // uint8
                                    .in2(cfblk99_out1),  // uint8
                                    .out1(cfblk69_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk33_out1;



  assign cfblk90_out1 = dtc_out_5;



  assign cfblk106_out1 = cfblk30_out1 + cfblk106_const_val_1;



  assign cfblk127_out1 = cfblk106_out1 - cfblk90_out1;



  assign cfblk105_out1 = cfblk127_out1 + cfblk27_out1;



  assign cfblk18_out1 = cfblk105_out1 + cfblk69_out1;



  assign cfblk22_out1 = cfblk135_out1 + cfblk18_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk22_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign dtc_out_6 = cfblk118_out1;



  assign cfblk41_out1 = dtc_out_6;



  always @(cfblk41_out1, cfblk63_out1) begin
    cfblk124_div_temp = 9'b000000000;
    cfblk124_t_0_0 = 9'b000000000;
    if (cfblk63_out1 == 8'b00000000) begin
      cfblk124_out1 = 8'b11111111;
    end
    else begin
      cfblk124_t_0_0 = {1'b0, cfblk41_out1};
      cfblk124_div_temp = cfblk124_t_0_0 / cfblk63_out1;
      if (cfblk124_div_temp[8] != 1'b0) begin
        cfblk124_out1 = 8'b11111111;
      end
      else begin
        cfblk124_out1 = cfblk124_div_temp[7:0];
      end
    end
  end



  assign dtc_out_7 = cfblk124_out1;



  assign cfblk84_out1 = dtc_out_7;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk84_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign dtc_out_8 = cfblk77_out1;



  assign cfblk25_out1 = dtc_out_8;



  assign cfblk27_out1 = cfblk25_out1 + cfblk27_const_val_1;



  DotProduct_block7 u_cfblk58_inst (.in1(cfblk27_out1),  // uint8
                                    .in2(cfblk164_out1),  // uint8
                                    .out1(cfblk58_out1)  // uint8
                                    );

  assign cfblk40_out1 = cfblk58_out1 - cfblk152_out1;



  assign cfblk92_out1 = (cfblk40_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk108_out1 = cfblk92_out1 + cfblk108_const_val_1;



  assign cfblk65_out1 = cfblk108_out1 - cfblk25_out1;



  always @(cfblk161_out1, cfblk65_out1) begin
    cfblk126_div_temp = 9'b000000000;
    cfblk126_t_0_0 = 9'b000000000;
    if (cfblk161_out1 == 8'b00000000) begin
      cfblk126_out1 = 8'b11111111;
    end
    else begin
      cfblk126_t_0_0 = {1'b0, cfblk65_out1};
      cfblk126_div_temp = cfblk126_t_0_0 / cfblk161_out1;
      if (cfblk126_div_temp[8] != 1'b0) begin
        cfblk126_out1 = 8'b11111111;
      end
      else begin
        cfblk126_out1 = cfblk126_div_temp[7:0];
      end
    end
  end



  assign cfblk52_out1 = cfblk126_out1 + cfblk158_out1;



  DotProduct_block1 u_cfblk119_inst (.in1(cfblk52_out1),  // uint8
                                     .in2(cfblk153_out1),  // uint8
                                     .out1(cfblk119_out1)  // uint8
                                     );

  assign cfblk100_out1 = (cfblk119_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk99_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk19_out1 = cfblk167_out1 - cfblk100_out1;



  DotProduct_block5 u_cfblk35_inst (.in1(cfblk19_out1),  // uint8
                                    .in2(cfblk144_out1),  // uint8
                                    .out1(cfblk35_out1)  // uint8
                                    );

  always @(cfblk184_out1, cfblk35_out1) begin
    cfblk57_div_temp = 9'b000000000;
    cfblk57_t_0_0 = 9'b000000000;
    if (cfblk184_out1 == 8'b00000000) begin
      cfblk57_out1 = 8'b11111111;
    end
    else begin
      cfblk57_t_0_0 = {1'b0, cfblk35_out1};
      cfblk57_div_temp = cfblk57_t_0_0 / cfblk184_out1;
      if (cfblk57_div_temp[8] != 1'b0) begin
        cfblk57_out1 = 8'b11111111;
      end
      else begin
        cfblk57_out1 = cfblk57_div_temp[7:0];
      end
    end
  end



  assign cfblk99_out1 = (cfblk57_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_9 = cfblk99_out1;



  assign cfblk74_out1 = dtc_out_9;



  assign cfblk63_out1 = cfblk74_out1 + cfblk156_out1;



  assign dtc_out_10 = cfblk63_out1;



  assign cfblk118_out1 = dtc_out_10;



  DotProduct_block3 u_cfblk21_inst (.in1(cfblk118_out1),  // uint8
                                    .in2(cfblk157_out1),  // uint8
                                    .out1(cfblk21_out1)  // uint8
                                    );

  assign cfblk130_out1 = cfblk73_out1 + cfblk130_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk130_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  always @(cfblk162_out1, cfblk21_out1) begin
    cfblk30_div_temp = 9'b000000000;
    cfblk30_t_0_0 = 9'b000000000;
    if (cfblk21_out1 == 8'b00000000) begin
      cfblk30_out1 = 8'b11111111;
    end
    else begin
      cfblk30_t_0_0 = {1'b0, cfblk162_out1};
      cfblk30_div_temp = cfblk30_t_0_0 / cfblk21_out1;
      if (cfblk30_div_temp[8] != 1'b0) begin
        cfblk30_out1 = 8'b11111111;
      end
      else begin
        cfblk30_out1 = cfblk30_div_temp[7:0];
      end
    end
  end



  assign cfblk2_out1 = cfblk30_out1[7:4];



  assign dtc_out_11 = {28'b0, cfblk2_out1};



  assign cfblk82_out1 = {dtc_out_11[3:0], 4'b0000};



  assign cfblk135_out1 = cfblk82_out1 + cfblk135_const_val_1;



  assign cfblk95_out1 = cfblk102_out1 + cfblk135_out1;



  assign dtc_out_12 = cfblk95_out1;



  assign cfblk33_out1 = dtc_out_12;



  assign cfblk125_out1 = cfblk33_out1 - cfblk130_out1;



  assign dtc_out_13 = cfblk125_out1;



  assign cfblk132_out1 = dtc_out_13;



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk132_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  assign cfblk3_out1 = {cfblk155_out1, cfblk89_out1};



  assign cfblk184_out1 = cfblk3_out1[7:0];



  always @(cfblk169_out1, cfblk184_out1) begin
    cfblk77_div_temp = 9'b000000000;
    cfblk77_t_0_0 = 9'b000000000;
    if (cfblk169_out1 == 8'b00000000) begin
      cfblk77_out1 = 8'b11111111;
    end
    else begin
      cfblk77_t_0_0 = {1'b0, cfblk184_out1};
      cfblk77_div_temp = cfblk77_t_0_0 / cfblk169_out1;
      if (cfblk77_div_temp[8] != 1'b0) begin
        cfblk77_out1 = 8'b11111111;
      end
      else begin
        cfblk77_out1 = cfblk77_div_temp[7:0];
      end
    end
  end



  assign cfblk12_out1 = cfblk77_out1 + cfblk21_out1;



  DotProduct u_cfblk102_inst (.in1(cfblk12_out1),  // uint8
                              .in2(cfblk80_out1),  // uint8
                              .out1(cfblk102_out1)  // uint8
                              );

  assign cfblk87_out1 = cfblk102_out1 + cfblk21_out1;



  assign cfblk85_out1 = cfblk87_out1 + cfblk56_out1;



  always @(cfblk108_out1, cfblk85_out1) begin
    cfblk39_div_temp = 9'b000000000;
    cfblk39_t_0_0 = 9'b000000000;
    if (cfblk108_out1 == 8'b00000000) begin
      cfblk39_out1 = 8'b11111111;
    end
    else begin
      cfblk39_t_0_0 = {1'b0, cfblk85_out1};
      cfblk39_div_temp = cfblk39_t_0_0 / cfblk108_out1;
      if (cfblk39_div_temp[8] != 1'b0) begin
        cfblk39_out1 = 8'b11111111;
      end
      else begin
        cfblk39_out1 = cfblk39_div_temp[7:0];
      end
    end
  end



  assign dtc_out_14 = cfblk39_out1;



  assign cfblk55_out1 = dtc_out_14;



  assign cfblk73_out1 = cfblk55_out1 + cfblk73_const_val_1;



  Mysubsystem_31 u_Mysubsystem_31 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk73_out1),  // uint8
                                   .Out1(Mysubsystem_31_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = Mysubsystem_31_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk88_out1 = cfblk163_out1 + cfblk103_out1;



  assign dtc_out_15 = cfblk146_out1;



  assign cfblk123_out1 = dtc_out_15;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk123_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk93_out1 = cfblk170_out1 + cfblk88_out1;



  cfblk146 u_cfblk146 (.In1(cfblk93_out1),  // uint8
                       .Out1(cfblk146_out1)  // uint8
                       );

  assign cfblk140 = cfblk146_out1;

  Mysubsystem_15 u_Mysubsystem_15 (.In1(cfblk132_out1),  // uint8
                                   .cfblk141(Mysubsystem_15_out1)  // uint8
                                   );

  assign cfblk141 = Mysubsystem_15_out1;

  assign Hdl_out = cfblk18_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

