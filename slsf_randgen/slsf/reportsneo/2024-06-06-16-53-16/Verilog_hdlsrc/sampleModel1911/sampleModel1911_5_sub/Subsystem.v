// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1911\sampleModel1911_5_sub\Subsystem.v
// Created: 2024-08-15 12:31:00
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1911_5_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk9_const_val_1;  // uint8
  wire [7:0] cfblk72_const_val_1;  // uint8
  wire [7:0] cfblk80_const_val_1;  // uint8
  wire [7:0] Mysubsystem_19_out1;  // uint8
  wire [7:0] cfblk65_const_val_1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk120_const_val_1;  // uint8
  wire [7:0] cfblk63_const_val_1;  // uint8
  wire [7:0] cfblk39_const_val_1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk136_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk28_const_val_1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] Mysubsystem_23_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk114_const_val_1;  // uint8
  reg [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk47_const_val_1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk45_const_val_1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk68_const_val_1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk77_const_val_1;  // uint8
  wire [7:0] cfblk6_const_val_1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk62_const_val_1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk121_const_val_1;  // uint8
  wire [7:0] cfblk105_const_val_1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  reg [7:0] cfblk135_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  reg [7:0] cfblk132_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk132_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  reg [7:0] cfblk133_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk133_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  reg [8:0] cfblk24_div_temp;  // ufix9
  reg [8:0] cfblk24_t_0_0;  // ufix9
  reg [8:0] cfblk110_div_temp;  // ufix9
  reg [8:0] cfblk110_t_0_0;  // ufix9
  reg [8:0] cfblk55_div_temp;  // ufix9
  reg [8:0] cfblk55_t_0_0;  // ufix9
  reg [8:0] cfblk12_div_temp;  // ufix9
  reg [8:0] cfblk12_t_0_0;  // ufix9
  reg [8:0] cfblk38_div_temp;  // ufix9
  reg [8:0] cfblk38_t_0_0;  // ufix9
  reg [8:0] cfblk20_div_temp;  // ufix9
  reg [8:0] cfblk20_t_0_0;  // ufix9


  assign cfblk9_const_val_1 = 8'b00000000;



  assign cfblk72_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk80_const_val_1 = 8'b00000000;



  Mysubsystem_19 u_Mysubsystem_19 (.Out1(Mysubsystem_19_out1)  // uint8
                                   );

  assign cfblk65_const_val_1 = 8'b00000000;



  assign cfblk65_out1 = Mysubsystem_19_out1 + cfblk65_const_val_1;



  assign cfblk120_const_val_1 = 8'b00000000;



  assign cfblk63_const_val_1 = 8'b00000000;



  assign cfblk39_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk84_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk140_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk84_out1 = (cfblk80_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk51_out1 = (cfblk84_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out = cfblk51_out1;



  assign cfblk22_out1 = dtc_out;



  DotProduct_block2 u_cfblk111_inst (.in1(cfblk22_out1),  // uint8
                                     .in2(cfblk65_out1),  // uint8
                                     .out1(cfblk111_out1)  // uint8
                                     );

  cfblk129 u_cfblk129 (.In1(cfblk72_out1),  // uint8
                       .Out1(cfblk129_out1)  // uint8
                       );

  assign cfblk103_out1 = cfblk117_out1 + cfblk129_out1;



  assign cfblk80_out1 = cfblk117_out1 + cfblk80_const_val_1;



  assign cfblk70_out1 = cfblk80_out1 + cfblk103_out1;



  DotProduct u_cfblk10_inst (.in1(cfblk70_out1),  // uint8
                             .in2(cfblk111_out1),  // uint8
                             .out1(cfblk10_out1)  // uint8
                             );

  assign cfblk96_out1 = (cfblk10_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk123_out1 = cfblk96_out1 + cfblk33_out1;



  DotProduct_block4 u_cfblk13_inst (.in1(cfblk120_out1),  // uint8
                                    .in2(cfblk123_out1),  // uint8
                                    .out1(cfblk13_out1)  // uint8
                                    );

  assign cfblk106_out1 = cfblk13_out1 + cfblk1_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk106_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  DotProduct_block8 u_cfblk98_inst (.in1(cfblk137_out1),  // uint8
                                    .in2(cfblk123_out1),  // uint8
                                    .out1(cfblk98_out1)  // uint8
                                    );

  assign cfblk4_out1 = cfblk98_out1 & 8'b11111110;



  assign cfblk120_out1 = cfblk4_out1 + cfblk120_const_val_1;



  assign cfblk63_out1 = cfblk120_out1 + cfblk63_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk63_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  assign cfblk104_out1 = cfblk138_out1 + cfblk1_out1;



  assign cfblk9_out1 = cfblk33_out1 + cfblk9_const_val_1;



  assign cfblk72_out1 = cfblk9_out1 + cfblk72_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk136_process
      if (reset == 1'b1) begin
        cfblk136_reg[0] <= 8'b00000000;
        cfblk136_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk136_reg[0] <= cfblk136_reg_next[0];
          cfblk136_reg[1] <= cfblk136_reg_next[1];
        end
      end
    end

  assign cfblk136_out1 = cfblk136_reg[1];
  assign cfblk136_reg_next[0] = cfblk72_out1;
  assign cfblk136_reg_next[1] = cfblk136_reg[0];



  assign cfblk33_out1 = cfblk136_out1 + cfblk104_out1;



  assign cfblk39_out1 = cfblk33_out1 + cfblk39_const_val_1;



  assign cfblk117_out1 = (cfblk39_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk28_const_val_1 = 8'b00000000;



  assign cfblk28_out1 = cfblk1_out1 + cfblk28_const_val_1;



  assign cfblk78_out1 = (cfblk28_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  Mysubsystem_23 u_Mysubsystem_23 (.In1(cfblk51_out1),  // uint8
                                   .In2(cfblk101_out1),  // uint8
                                   .Out1(Mysubsystem_23_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = Mysubsystem_23_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  DotProduct_block u_cfblk101_inst (.in1(cfblk139_out1),  // uint8
                                    .in2(cfblk117_out1),  // uint8
                                    .out1(cfblk101_out1)  // uint8
                                    );

  assign cfblk114_const_val_1 = 8'b00000000;



  always @(cfblk101_out1, cfblk106_out1) begin
    cfblk24_div_temp = 9'b000000000;
    cfblk24_t_0_0 = 9'b000000000;
    if (cfblk101_out1 == 8'b00000000) begin
      cfblk24_out1 = 8'b11111111;
    end
    else begin
      cfblk24_t_0_0 = {1'b0, cfblk106_out1};
      cfblk24_div_temp = cfblk24_t_0_0 / cfblk101_out1;
      if (cfblk24_div_temp[8] != 1'b0) begin
        cfblk24_out1 = 8'b11111111;
      end
      else begin
        cfblk24_out1 = cfblk24_div_temp[7:0];
      end
    end
  end



  assign cfblk114_out1 = cfblk22_out1 + cfblk114_const_val_1;



  assign cfblk40_out1 = cfblk24_out1 + cfblk114_out1;



  assign cfblk35_out1 = (cfblk101_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk47_const_val_1 = 8'b00000000;



  assign cfblk47_out1 = cfblk35_out1 + cfblk47_const_val_1;



  assign cfblk45_const_val_1 = 8'b00000000;



  assign cfblk45_out1 = cfblk47_out1 + cfblk45_const_val_1;



  assign cfblk68_const_val_1 = 8'b00000000;



  assign cfblk68_out1 = cfblk45_out1 + cfblk68_const_val_1;



  assign dtc_out_1 = cfblk120_out1;



  assign cfblk82_out1 = dtc_out_1;



  DotProduct_block7 u_cfblk97_inst (.in1(cfblk82_out1),  // uint8
                                    .in2(cfblk63_out1),  // uint8
                                    .out1(cfblk97_out1)  // uint8
                                    );

  always @(cfblk68_out1, cfblk97_out1) begin
    cfblk110_div_temp = 9'b000000000;
    cfblk110_t_0_0 = 9'b000000000;
    if (cfblk97_out1 == 8'b00000000) begin
      cfblk110_out1 = 8'b11111111;
    end
    else begin
      cfblk110_t_0_0 = {1'b0, cfblk68_out1};
      cfblk110_div_temp = cfblk110_t_0_0 / cfblk97_out1;
      if (cfblk110_div_temp[8] != 1'b0) begin
        cfblk110_out1 = 8'b11111111;
      end
      else begin
        cfblk110_out1 = cfblk110_div_temp[7:0];
      end
    end
  end



  assign cfblk77_const_val_1 = 8'b00000000;



  assign cfblk6_const_val_1 = 8'b00000000;



  assign cfblk6_out1 = cfblk35_out1 + cfblk6_const_val_1;



  assign cfblk126_out1 = 8'b00000000;



  assign cfblk62_const_val_1 = 8'b00000000;



  assign cfblk62_out1 = cfblk70_out1 + cfblk62_const_val_1;



  assign cfblk44_out1 = cfblk62_out1 + cfblk126_out1;



  assign cfblk121_const_val_1 = 8'b00000000;



  assign cfblk105_const_val_1 = 8'b00000000;



  assign cfblk121_out1 = cfblk16_out1 + cfblk121_const_val_1;



  assign cfblk36_out1 = (cfblk121_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk113_out1 = (cfblk36_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block3 u_cfblk115_inst (.in1(cfblk20_out1),  // uint8
                                     .in2(cfblk113_out1),  // uint8
                                     .out1(cfblk115_out1)  // uint8
                                     );

  assign cfblk31_out1 = (cfblk115_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk135_process
      if (reset == 1'b1) begin
        cfblk135_reg[0] <= 8'b00000000;
        cfblk135_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk135_reg[0] <= cfblk135_reg_next[0];
          cfblk135_reg[1] <= cfblk135_reg_next[1];
        end
      end
    end

  assign cfblk135_out1 = cfblk135_reg[1];
  assign cfblk135_reg_next[0] = cfblk31_out1;
  assign cfblk135_reg_next[1] = cfblk135_reg[0];



  assign cfblk16_out1 = cfblk128_out1 + cfblk44_out1;



  assign cfblk54_out1 = cfblk126_out1 + cfblk16_out1;



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk54_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  assign cfblk19_out1 = cfblk89_out1 + cfblk40_out1;



  assign dtc_out_2 = cfblk19_out1;



  assign cfblk30_out1 = dtc_out_2;



  assign cfblk102_out1 = cfblk30_out1 + cfblk110_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk132_process
      if (reset == 1'b1) begin
        cfblk132_reg[0] <= 8'b00000000;
        cfblk132_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk132_reg[0] <= cfblk132_reg_next[0];
          cfblk132_reg[1] <= cfblk132_reg_next[1];
        end
      end
    end

  assign cfblk132_out1 = cfblk132_reg[1];
  assign cfblk132_reg_next[0] = cfblk102_out1;
  assign cfblk132_reg_next[1] = cfblk132_reg[0];



  DotProduct_block6 u_cfblk90_inst (.in1(cfblk38_out1),  // uint8
                                    .in2(cfblk132_out1),  // uint8
                                    .out1(cfblk90_out1)  // uint8
                                    );

  assign cfblk71_out1 = (cfblk90_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk118_out1 = (cfblk71_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk77_out1 = cfblk118_out1 + cfblk77_const_val_1;



  always @(cfblk6_out1, cfblk77_out1) begin
    cfblk55_div_temp = 9'b000000000;
    cfblk55_t_0_0 = 9'b000000000;
    if (cfblk6_out1 == 8'b00000000) begin
      cfblk55_out1 = 8'b11111111;
    end
    else begin
      cfblk55_t_0_0 = {1'b0, cfblk77_out1};
      cfblk55_div_temp = cfblk55_t_0_0 / cfblk6_out1;
      if (cfblk55_div_temp[8] != 1'b0) begin
        cfblk55_out1 = 8'b11111111;
      end
      else begin
        cfblk55_out1 = cfblk55_div_temp[7:0];
      end
    end
  end



  DotProduct_block1 u_cfblk108_inst (.in1(cfblk70_out1),  // uint8
                                     .in2(cfblk55_out1),  // uint8
                                     .out1(cfblk108_out1)  // uint8
                                     );

  assign dtc_out_3 = cfblk108_out1;



  assign cfblk73_out1 = dtc_out_3;



  assign cfblk89_out1 = cfblk73_out1 + cfblk5_out1;



  assign cfblk86_out1 = cfblk89_out1 + cfblk51_out1;



  DotProduct_block5 u_cfblk79_inst (.in1(cfblk111_out1),  // uint8
                                    .in2(cfblk86_out1),  // uint8
                                    .out1(cfblk79_out1)  // uint8
                                    );

  assign cfblk69_out1 = cfblk79_out1 + cfblk101_out1;



  assign cfblk50_out1 = cfblk69_out1 + cfblk103_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk133_process
      if (reset == 1'b1) begin
        cfblk133_reg[0] <= 8'b00000000;
        cfblk133_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk133_reg[0] <= cfblk133_reg_next[0];
          cfblk133_reg[1] <= cfblk133_reg_next[1];
        end
      end
    end

  assign cfblk133_out1 = cfblk133_reg[1];
  assign cfblk133_reg_next[0] = cfblk50_out1;
  assign cfblk133_reg_next[1] = cfblk133_reg[0];



  assign cfblk92_out1 = cfblk78_out1 - cfblk133_out1;



  assign cfblk32_out1 = (cfblk92_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk135_out1, cfblk32_out1) begin
    cfblk12_div_temp = 9'b000000000;
    cfblk12_t_0_0 = 9'b000000000;
    if (cfblk135_out1 == 8'b00000000) begin
      cfblk12_out1 = 8'b11111111;
    end
    else begin
      cfblk12_t_0_0 = {1'b0, cfblk32_out1};
      cfblk12_div_temp = cfblk12_t_0_0 / cfblk135_out1;
      if (cfblk12_div_temp[8] != 1'b0) begin
        cfblk12_out1 = 8'b11111111;
      end
      else begin
        cfblk12_out1 = cfblk12_div_temp[7:0];
      end
    end
  end



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk12_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  assign cfblk105_out1 = cfblk3_out1 + cfblk105_const_val_1;



  assign cfblk49_out1 = cfblk105_out1 + cfblk35_out1;



  always @(cfblk49_out1, cfblk84_out1) begin
    cfblk38_div_temp = 9'b000000000;
    cfblk38_t_0_0 = 9'b000000000;
    if (cfblk84_out1 == 8'b00000000) begin
      cfblk38_out1 = 8'b11111111;
    end
    else begin
      cfblk38_t_0_0 = {1'b0, cfblk49_out1};
      cfblk38_div_temp = cfblk38_t_0_0 / cfblk84_out1;
      if (cfblk38_div_temp[8] != 1'b0) begin
        cfblk38_out1 = 8'b11111111;
      end
      else begin
        cfblk38_out1 = cfblk38_div_temp[7:0];
      end
    end
  end



  cfblk127 u_cfblk127 (.In1(cfblk38_out1),  // uint8
                       .Out1(cfblk127_out1)  // uint8
                       );

  cfblk128 u_cfblk128 (.In1(cfblk127_out1),  // uint8
                       .Out1(cfblk128_out1)  // uint8
                       );

  always @(cfblk117_out1, cfblk128_out1) begin
    cfblk20_div_temp = 9'b000000000;
    cfblk20_t_0_0 = 9'b000000000;
    if (cfblk128_out1 == 8'b00000000) begin
      cfblk20_out1 = 8'b11111111;
    end
    else begin
      cfblk20_t_0_0 = {1'b0, cfblk117_out1};
      cfblk20_div_temp = cfblk20_t_0_0 / cfblk128_out1;
      if (cfblk20_div_temp[8] != 1'b0) begin
        cfblk20_out1 = 8'b11111111;
      end
      else begin
        cfblk20_out1 = cfblk20_div_temp[7:0];
      end
    end
  end



  assign Hdl_out = cfblk20_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

