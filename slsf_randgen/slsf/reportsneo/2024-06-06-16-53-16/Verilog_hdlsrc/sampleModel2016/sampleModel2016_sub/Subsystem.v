// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel2016\sampleModel2016_sub\Subsystem.v
// Created: 2024-08-16 15:28:25
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel2016_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk46_const_val_1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [15:0] cfblk163_out1;  // uint16
  wire [7:0] cfblk134_const_val_1;  // uint8
  wire [7:0] cfblk121_const_val_1;  // uint8
  wire [7:0] cfblk126_const_val_1;  // uint8
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk138_const_val_1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk54_const_val_1;  // uint8
  wire [7:0] cfblk132_const_val_1;  // uint8
  wire [7:0] cfblk128_const_val_1;  // uint8
  wire [7:0] cfblk30_const_val_1;  // uint8
  wire [7:0] bitMask_for_cfblk2;  // uint8
  wire [7:0] cfblk10_const_val_1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk17_const_val_1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  reg [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  reg [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  reg [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk100_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  reg [7:0] cfblk135_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  reg [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [31:0] cfblk133_add_temp;  // ufix32
  wire [31:0] cfblk133_1;  // ufix32
  wire [31:0] cfblk133_2;  // ufix32
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  reg [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  reg [8:0] cfblk49_div_temp;  // ufix9
  reg [8:0] cfblk49_t_0_0;  // ufix9
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9
  reg [8:0] cfblk16_div_temp;  // ufix9
  reg [8:0] cfblk16_t_0_0;  // ufix9
  reg [8:0] cfblk100_div_temp;  // ufix9
  reg [8:0] cfblk100_t_0_0;  // ufix9
  reg [8:0] cfblk83_div_temp;  // ufix9
  reg [8:0] cfblk83_t_0_0;  // ufix9
  reg [8:0] cfblk135_div_temp;  // ufix9
  reg [8:0] cfblk135_t_0_0;  // ufix9
  reg [8:0] cfblk70_div_temp;  // ufix9
  reg [8:0] cfblk70_t_0_0;  // ufix9
  reg [8:0] cfblk69_div_temp;  // ufix9
  reg [8:0] cfblk69_t_0_0;  // ufix9
  reg [8:0] cfblk31_div_temp;  // ufix9
  reg [8:0] cfblk31_t_0_0;  // ufix9


  cfblk164 u_cfblk164 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk164_out1)  // uint8
                       );

  assign cfblk3_out1 = 8'b00000000;



  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk3_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  cfblk1 u_cfblk1 (.u(cfblk181_out1),  // uint8
                   .y(cfblk1_out1)  // uint8
                   );

  assign cfblk46_const_val_1 = 8'b00000000;



  assign cfblk46_out1 = cfblk1_out1 + cfblk46_const_val_1;



  cfblk163 u_cfblk163 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk163_out1)  // uint16
                       );

  assign cfblk134_const_val_1 = 8'b00000000;



  assign cfblk121_const_val_1 = 8'b00000000;



  assign cfblk126_const_val_1 = 8'b00000000;



  cfblk165 u_cfblk165 (.In1(cfblk46_out1),  // uint8
                       .Out1(cfblk165_out1)  // uint8
                       );

  assign cfblk138_const_val_1 = 8'b00000000;



  assign cfblk138_out1 = cfblk164_out1 + cfblk138_const_val_1;



  assign cfblk54_const_val_1 = 8'b00000000;



  assign cfblk132_const_val_1 = 8'b00000000;



  assign cfblk128_const_val_1 = 8'b00000000;



  assign cfblk30_const_val_1 = 8'b00000000;



  assign bitMask_for_cfblk2 = 8'b11011001;



  assign cfblk10_const_val_1 = 8'b00000000;



  assign cfblk162_out1 = 8'b00000001;



  assign cfblk17_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk71_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk36_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk18_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk146_out1 = cfblk126_out1 + cfblk36_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk146_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign cfblk117_out1 = cfblk126_out1 - cfblk183_out1;



  assign cfblk10_out1 = cfblk117_out1 + cfblk10_const_val_1;



  assign cfblk90_out1 = cfblk152_out1 + cfblk83_out1;



  assign cfblk155_out1 = cfblk89_out1 + cfblk40_out1;



  assign dtc_out = cfblk96_out1;



  assign cfblk92_out1 = dtc_out;



  assign cfblk22_out1 = cfblk92_out1 + cfblk3_out1;



  cfblk166 u_cfblk166 (.In1(cfblk22_out1),  // uint8
                       .Out1(cfblk166_out1)  // uint8
                       );

  assign cfblk36_out1 = cfblk166_out1 - cfblk126_out1;



  assign cfblk141_out1 = cfblk36_out1 + cfblk133_out1;



  always @(cfblk141_out1, cfblk25_out1) begin
    cfblk49_div_temp = 9'b000000000;
    cfblk49_t_0_0 = 9'b000000000;
    if (cfblk141_out1 == 8'b00000000) begin
      cfblk49_out1 = 8'b11111111;
    end
    else begin
      cfblk49_t_0_0 = {1'b0, cfblk25_out1};
      cfblk49_div_temp = cfblk49_t_0_0 / cfblk141_out1;
      if (cfblk49_div_temp[8] != 1'b0) begin
        cfblk49_out1 = 8'b11111111;
      end
      else begin
        cfblk49_out1 = cfblk49_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk49_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk132_out1 = cfblk83_out1 + cfblk132_const_val_1;



  assign cfblk128_out1 = cfblk132_out1 + cfblk128_const_val_1;



  assign cfblk95_out1 = cfblk148_out1 - cfblk128_out1;



  assign cfblk30_out1 = cfblk95_out1 + cfblk30_const_val_1;



  always @(cfblk30_out1, cfblk62_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk62_out1 == 8'b00000000) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk30_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk62_out1;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  assign cfblk131_out1 = (cfblk18_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk131_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  always @(cfblk123_out1, cfblk1_out1) begin
    cfblk16_div_temp = 9'b000000000;
    cfblk16_t_0_0 = 9'b000000000;
    if (cfblk123_out1 == 8'b00000000) begin
      cfblk16_out1 = 8'b11111111;
    end
    else begin
      cfblk16_t_0_0 = {1'b0, cfblk1_out1};
      cfblk16_div_temp = cfblk16_t_0_0 / cfblk123_out1;
      if (cfblk16_div_temp[8] != 1'b0) begin
        cfblk16_out1 = 8'b11111111;
      end
      else begin
        cfblk16_out1 = cfblk16_div_temp[7:0];
      end
    end
  end



  assign cfblk103_out1 = cfblk16_out1 - cfblk138_out1;



  always @(cfblk103_out1, cfblk25_out1) begin
    cfblk100_div_temp = 9'b000000000;
    cfblk100_t_0_0 = 9'b000000000;
    if (cfblk25_out1 == 8'b00000000) begin
      cfblk100_out1 = 8'b11111111;
    end
    else begin
      cfblk100_t_0_0 = {1'b0, cfblk103_out1};
      cfblk100_div_temp = cfblk100_t_0_0 / cfblk25_out1;
      if (cfblk100_div_temp[8] != 1'b0) begin
        cfblk100_out1 = 8'b11111111;
      end
      else begin
        cfblk100_out1 = cfblk100_div_temp[7:0];
      end
    end
  end



  assign dtc_out_1 = cfblk100_out1;



  assign cfblk140_out1 = dtc_out_1;



  assign cfblk154_out1 = (cfblk140_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk152_out1 = (cfblk154_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk152_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk37_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  assign cfblk127_out1 = cfblk165_out1 + cfblk185_out1;



  assign dtc_out_2 = cfblk127_out1;



  assign cfblk39_out1 = dtc_out_2;



  always @(cfblk188_out1, cfblk39_out1) begin
    cfblk83_div_temp = 9'b000000000;
    cfblk83_t_0_0 = 9'b000000000;
    if (cfblk188_out1 == 8'b00000000) begin
      cfblk83_out1 = 8'b11111111;
    end
    else begin
      cfblk83_t_0_0 = {1'b0, cfblk39_out1};
      cfblk83_div_temp = cfblk83_t_0_0 / cfblk188_out1;
      if (cfblk83_div_temp[8] != 1'b0) begin
        cfblk83_out1 = 8'b11111111;
      end
      else begin
        cfblk83_out1 = cfblk83_div_temp[7:0];
      end
    end
  end



  assign cfblk42_out1 = (cfblk83_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk8_out1 = cfblk73_out1 + cfblk42_out1;



  assign cfblk54_out1 = cfblk8_out1 + cfblk54_const_val_1;



  assign cfblk137_out1 = cfblk54_out1 - cfblk98_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk137_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  always @(cfblk123_out1, cfblk144_out1) begin
    cfblk135_div_temp = 9'b000000000;
    cfblk135_t_0_0 = 9'b000000000;
    if (cfblk144_out1 == 8'b00000000) begin
      cfblk135_out1 = 8'b11111111;
    end
    else begin
      cfblk135_t_0_0 = {1'b0, cfblk123_out1};
      cfblk135_div_temp = cfblk135_t_0_0 / cfblk144_out1;
      if (cfblk135_div_temp[8] != 1'b0) begin
        cfblk135_out1 = 8'b11111111;
      end
      else begin
        cfblk135_out1 = cfblk135_div_temp[7:0];
      end
    end
  end



  assign dtc_out_3 = cfblk135_out1;



  assign cfblk84_out1 = dtc_out_3;



  assign cfblk81_out1 = cfblk55_out1 - cfblk84_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk81_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk89_out1 = cfblk26_out1 - cfblk1_out1;



  assign cfblk126_out1 = cfblk89_out1 + cfblk126_const_val_1;



  assign cfblk106_out1 = cfblk130_out1 + cfblk126_out1;



  assign cfblk93_out1 = cfblk31_out1 - cfblk71_out1;



  assign cfblk62_out1 = cfblk93_out1 + cfblk157_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk62_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk48_out1 = (cfblk27_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_4 = cfblk48_out1;



  assign cfblk73_out1 = dtc_out_4;



  assign dtc_out_5 = cfblk73_out1;



  assign cfblk26_out1 = dtc_out_5;



  assign cfblk134_out1 = cfblk123_out1 + cfblk134_const_val_1;



  assign cfblk121_out1 = cfblk134_out1 + cfblk121_const_val_1;



  DotProduct_block9 u_cfblk78_inst (.in1(cfblk121_out1),  // uint8
                                    .in2(cfblk109_out1),  // uint8
                                    .out1(cfblk78_out1)  // uint8
                                    );

  assign cfblk129_out1 = cfblk78_out1 + cfblk26_out1;



  assign cfblk61_out1 = cfblk129_out1 - cfblk27_out1;



  DotProduct_block4 u_cfblk25_inst (.in1(cfblk61_out1),  // uint8
                                    .in2(cfblk180_out1),  // uint8
                                    .out1(cfblk25_out1)  // uint8
                                    );

  assign cfblk96_out1 = (cfblk25_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block1 u_cfblk13_inst (.in1(cfblk156_out1),  // uint8
                                    .in2(cfblk96_out1),  // uint8
                                    .out1(cfblk13_out1)  // uint8
                                    );

  assign cfblk4_out1 = cfblk13_out1 | 8'b00000001;



  assign cfblk148_out1 = cfblk4_out1 - cfblk106_out1;



  DotProduct u_cfblk113_inst (.in1(cfblk148_out1),  // uint8
                              .in2(cfblk41_out1),  // uint8
                              .out1(cfblk113_out1)  // uint8
                              );

  assign cfblk43_out1 = cfblk113_out1 + cfblk48_out1;



  assign cfblk77_out1 = (cfblk43_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_6 = cfblk77_out1;



  assign cfblk98_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk98_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk104_out1 = cfblk171_out1 + cfblk80_out1;



  assign cfblk60_out1 = cfblk104_out1 + cfblk173_out1;



  assign cfblk50_out1 = cfblk60_out1 + cfblk172_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk59_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign cfblk144_out1 = cfblk177_out1 + cfblk50_out1;



  always @(cfblk144_out1, cfblk169_out1) begin
    cfblk70_div_temp = 9'b000000000;
    cfblk70_t_0_0 = 9'b000000000;
    if (cfblk169_out1 == 8'b00000000) begin
      cfblk70_out1 = 8'b11111111;
    end
    else begin
      cfblk70_t_0_0 = {1'b0, cfblk144_out1};
      cfblk70_div_temp = cfblk70_t_0_0 / cfblk169_out1;
      if (cfblk70_div_temp[8] != 1'b0) begin
        cfblk70_out1 = 8'b11111111;
      end
      else begin
        cfblk70_out1 = cfblk70_div_temp[7:0];
      end
    end
  end



  DotProduct_block3 u_cfblk156_inst (.in1(cfblk70_out1),  // uint8
                                     .in2(cfblk176_out1),  // uint8
                                     .out1(cfblk156_out1)  // uint8
                                     );

  assign cfblk40_out1 = (cfblk2_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk139_out1 = (cfblk40_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_7 = cfblk139_out1;



  assign cfblk66_out1 = dtc_out_7;



  assign cfblk29_out1 = (cfblk66_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block7 u_cfblk59_inst (.in1(cfblk29_out1),  // uint8
                                    .in2(cfblk53_out1),  // uint8
                                    .out1(cfblk59_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk59_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk63_out1 = cfblk178_out1 - cfblk156_out1;



  assign cfblk2_out1 = cfblk63_out1 & bitMask_for_cfblk2;



  DotProduct_block2 u_cfblk130_inst (.in1(cfblk2_out1),  // uint8
                                     .in2(cfblk138_out1),  // uint8
                                     .out1(cfblk130_out1)  // uint8
                                     );

  assign cfblk133_1 = {16'b0, cfblk163_out1};
  assign cfblk133_2 = {24'b0, cfblk130_out1};
  assign cfblk133_add_temp = cfblk133_1 + cfblk133_2;
  assign cfblk133_out1 = cfblk133_add_temp[7:0];



  assign cfblk68_out1 = cfblk133_out1 + cfblk155_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk68_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk80_out1 = cfblk175_out1 + cfblk90_out1;



  assign cfblk52_out1 = cfblk80_out1 - cfblk135_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk52_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  always @(cfblk10_out1, cfblk187_out1) begin
    cfblk69_div_temp = 9'b000000000;
    cfblk69_t_0_0 = 9'b000000000;
    if (cfblk10_out1 == 8'b00000000) begin
      cfblk69_out1 = 8'b11111111;
    end
    else begin
      cfblk69_t_0_0 = {1'b0, cfblk187_out1};
      cfblk69_div_temp = cfblk69_t_0_0 / cfblk10_out1;
      if (cfblk69_div_temp[8] != 1'b0) begin
        cfblk69_out1 = 8'b11111111;
      end
      else begin
        cfblk69_out1 = cfblk69_div_temp[7:0];
      end
    end
  end



  assign cfblk94_out1 = (cfblk69_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk109_out1 = cfblk94_out1 - cfblk162_out1;



  always @(cfblk109_out1, cfblk70_out1) begin
    cfblk31_div_temp = 9'b000000000;
    cfblk31_t_0_0 = 9'b000000000;
    if (cfblk70_out1 == 8'b00000000) begin
      cfblk31_out1 = 8'b11111111;
    end
    else begin
      cfblk31_t_0_0 = {1'b0, cfblk109_out1};
      cfblk31_div_temp = cfblk31_t_0_0 / cfblk70_out1;
      if (cfblk31_div_temp[8] != 1'b0) begin
        cfblk31_out1 = 8'b11111111;
      end
      else begin
        cfblk31_out1 = cfblk31_div_temp[7:0];
      end
    end
  end



  assign cfblk41_out1 = cfblk46_out1 - cfblk31_out1;



  DotProduct_block6 u_cfblk55_inst (.in1(cfblk41_out1),  // uint8
                                    .in2(cfblk156_out1),  // uint8
                                    .out1(cfblk55_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk55_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk107_out1 = cfblk174_out1 + cfblk42_out1;



  assign cfblk124_out1 = cfblk107_out1 + cfblk170_out1;



  DotProduct_block u_cfblk123_inst (.in1(cfblk124_out1),  // uint8
                                    .in2(cfblk182_out1),  // uint8
                                    .out1(cfblk123_out1)  // uint8
                                    );

  assign cfblk27_out1 = cfblk123_out1 + cfblk42_out1;



  assign cfblk53_out1 = cfblk157_out1 + cfblk27_out1;



  assign cfblk108_out1 = cfblk53_out1 + cfblk90_out1;



  DotProduct_block5 u_cfblk37_inst (.in1(cfblk108_out1),  // uint8
                                    .in2(cfblk42_out1),  // uint8
                                    .out1(cfblk37_out1)  // uint8
                                    );

  assign cfblk125_out1 = cfblk164_out1 + cfblk37_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk125_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  assign cfblk24_out1 = cfblk186_out1 + cfblk146_out1;



  DotProduct_block8 u_cfblk71_inst (.in1(cfblk24_out1),  // uint8
                                    .in2(cfblk184_out1),  // uint8
                                    .out1(cfblk71_out1)  // uint8
                                    );

  assign cfblk17_out1 = cfblk71_out1 + cfblk17_const_val_1;



  assign cfblk157_out1 = cfblk17_out1 - cfblk165_out1;



  assign Hdl_out = cfblk157_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

