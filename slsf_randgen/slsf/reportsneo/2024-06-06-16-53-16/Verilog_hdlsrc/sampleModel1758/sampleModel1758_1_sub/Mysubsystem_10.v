// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1758\sampleModel1758_1_sub\Mysubsystem_10.v
// Created: 2024-08-14 03:54:14
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Mysubsystem_10
// Source Path: sampleModel1758_1_sub/Subsystem/Mysubsystem_10
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Mysubsystem_10
          (clk,
           reset,
           enb,
           In1,
           In2,
           In3,
           In4,
           Out1,
           Out2);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] In1;  // uint8
  input   [7:0] In2;  // uint8
  input   [7:0] In3;  // uint8
  input   [7:0] In4;  // uint8
  output  [7:0] Out1;  // uint8
  output  [7:0] Out2;  // uint8


  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  wire cfblk191_out1_is_not0;
  wire In3_is_not0;
  wire cfblk1_out1;
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [31:0] cfblk81_add_temp;  // ufix32
  wire [31:0] cfblk81_1;  // ufix32
  wire [31:0] cfblk81_2;  // ufix32
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] cfblk5_out1;  // uint8
  reg [8:0] cfblk5_div_temp;  // ufix9
  reg [8:0] cfblk5_t_0_0;  // ufix9


  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = In1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  assign cfblk191_out1_is_not0 = cfblk191_out1 != 8'b00000000;



  assign In3_is_not0 = In3 != 8'b00000000;



  assign cfblk1_out1 = cfblk191_out1_is_not0 & In3_is_not0;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = In2;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk81_1 = {31'b0, cfblk1_out1};
  assign cfblk81_2 = {24'b0, cfblk176_out1};
  assign cfblk81_add_temp = cfblk81_1 + cfblk81_2;
  assign cfblk81_out1 = cfblk81_add_temp[7:0];



  assign Out1 = cfblk81_out1;

  always @(In4, cfblk81_out1) begin
    cfblk5_div_temp = 9'b000000000;
    cfblk5_t_0_0 = 9'b000000000;
    if (In4 == 8'b00000000) begin
      cfblk5_out1 = 8'b11111111;
    end
    else begin
      cfblk5_t_0_0 = {1'b0, cfblk81_out1};
      cfblk5_div_temp = cfblk5_t_0_0 / In4;
      if (cfblk5_div_temp[8] != 1'b0) begin
        cfblk5_out1 = 8'b11111111;
      end
      else begin
        cfblk5_out1 = cfblk5_div_temp[7:0];
      end
    end
  end



  assign Out2 = cfblk5_out1;

endmodule  // Mysubsystem_10

