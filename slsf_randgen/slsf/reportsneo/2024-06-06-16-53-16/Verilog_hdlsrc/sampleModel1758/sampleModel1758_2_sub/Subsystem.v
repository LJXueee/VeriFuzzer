// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1758\sampleModel1758_2_sub\Subsystem.v
// Created: 2024-06-10 12:44:01
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1758_2_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [15:0] cfblk157_out1;  // uint16
  reg [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk192_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_out1;  // uint8
  wire [7:0] Mysubsystem_10_out1;  // uint8
  wire Mysubsystem_10_out1_is_not0;
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk141_const_val_1;  // uint8
  wire [7:0] cfblk13_const_val_1;  // uint8
  wire [7:0] cfblk133_const_val_1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk128_const_val_1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk93_const_val_1;  // uint8
  wire [7:0] cfblk40_const_val_1;  // uint8
  wire [7:0] cfblk66_const_val_1;  // uint8
  wire [7:0] cfblk84_const_val_1;  // uint8
  wire [7:0] cfblk137_const_val_1;  // uint8
  wire [7:0] cfblk139_const_val_1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  reg [7:0] cfblk5_out1;  // uint8
  reg [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk163_out1;  // uint8
  reg [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk140_out1;  // uint8
  wire signed [31:0] cfblk24_sub_temp;  // sfix32
  wire signed [31:0] cfblk24_1;  // sfix32
  wire signed [31:0] cfblk24_2;  // sfix32
  wire [7:0] Mysubsystem_32_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk101_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  wire cfblk191_out1_is_not0;
  wire cfblk1_out1;
  wire [31:0] cfblk81_add_temp;  // ufix32
  wire [31:0] cfblk81_1;  // ufix32
  wire [31:0] cfblk81_2;  // ufix32
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  reg [15:0] cfblk103_varargout_1;  // ufix16
  reg [15:0] cfblk103_div_temp;  // ufix16
  reg [8:0] cfblk73_div_temp;  // ufix9
  reg [8:0] cfblk73_t_0_0;  // ufix9
  reg [8:0] cfblk50_div_temp;  // ufix9
  reg [8:0] cfblk50_t_0_0;  // ufix9
  reg [8:0] cfblk145_div_temp;  // ufix9
  reg [8:0] cfblk145_t_0_0;  // ufix9
  reg [8:0] cfblk27_div_temp;  // ufix9
  reg [8:0] cfblk27_t_0_0;  // ufix9
  reg [8:0] cfblk48_div_temp;  // ufix9
  reg [8:0] cfblk48_t_0_0;  // ufix9
  reg [8:0] cfblk5_div_temp;  // ufix9
  reg [8:0] cfblk5_t_0_0;  // ufix9
  reg [8:0] cfblk35_div_temp;  // ufix9
  reg [8:0] cfblk35_t_0_0;  // ufix9


  assign enb = clk_enable;

  cfblk157 u_cfblk157 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk157_out1)  // uint16
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk192_process
      if (reset == 1'b1) begin
        cfblk192_reg[0] <= 8'b00000000;
        cfblk192_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk192_reg[0] <= cfblk192_reg_next[0];
          cfblk192_reg[1] <= cfblk192_reg_next[1];
        end
      end
    end

  assign cfblk192_out1 = cfblk192_reg[1];
  assign cfblk192_reg_next[0] = cfblk103_out1;
  assign cfblk192_reg_next[1] = cfblk192_reg[0];



  always @(cfblk157_out1, cfblk192_out1) begin
    cfblk103_div_temp = 16'b0000000000000000;
    if (cfblk157_out1 == 16'b0000000000000000) begin
      cfblk103_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk103_div_temp = cfblk192_out1 / cfblk157_out1;
      cfblk103_varargout_1 = cfblk103_div_temp;
    end
    if (cfblk103_varargout_1[15:8] != 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_out1 = cfblk103_varargout_1[7:0];
    end
  end



  Mysubsystem_10 u_Mysubsystem_10 (.Out1(Mysubsystem_10_out1)  // uint8
                                   );

  assign Mysubsystem_10_out1_is_not0 = Mysubsystem_10_out1 != 8'b00000000;



  assign cfblk55_out1 = (cfblk103_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk141_const_val_1 = 8'b00000000;



  assign cfblk13_const_val_1 = 8'b00000000;



  assign cfblk133_const_val_1 = 8'b00000000;



  assign cfblk156_out1 = 8'b00000001;



  assign cfblk159_out1 = 8'b00000000;



  assign cfblk142_out1 = (cfblk159_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk128_const_val_1 = 8'b00000000;



  cfblk155 u_cfblk155 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk155_out1)  // uint8
                       );

  assign cfblk93_const_val_1 = 8'b00000000;



  assign cfblk40_const_val_1 = 8'b00000000;



  assign cfblk66_const_val_1 = 8'b00000000;



  assign cfblk84_const_val_1 = 8'b00000000;



  assign cfblk137_const_val_1 = 8'b00000000;



  assign cfblk139_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        cfblk189_reg[0] <= 8'b00000000;
        cfblk189_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk189_reg[0] <= cfblk189_reg_next[0];
          cfblk189_reg[1] <= cfblk189_reg_next[1];
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk78_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  assign cfblk83_out1 = cfblk42_out1 + cfblk134_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk83_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk74_out1 = (cfblk49_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block7 u_cfblk29_inst (.in1(cfblk74_out1),  // uint8
                                    .in2(cfblk159_out1),  // uint8
                                    .out1(cfblk29_out1)  // uint8
                                    );

  assign cfblk25_out1 = cfblk13_out1 + cfblk29_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk162_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign cfblk80_out1 = (cfblk104_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk137_out1 = cfblk93_out1 + cfblk137_const_val_1;



  assign cfblk20_out1 = cfblk137_out1 + cfblk80_out1;



  assign cfblk77_out1 = cfblk142_out1 - cfblk52_out1;



  cfblk165 u_cfblk165 (.In1(cfblk77_out1),  // uint8
                       .Out1(cfblk165_out1)  // uint8
                       );

  assign cfblk87_out1 = cfblk129_out1 - cfblk44_out1;



  DotProduct_block13 u_cfblk90_inst (.in1(cfblk87_out1),  // uint8
                                     .in2(cfblk165_out1),  // uint8
                                     .out1(cfblk90_out1)  // uint8
                                     );

  assign cfblk68_out1 = cfblk4_out1 - cfblk118_out1;



  assign cfblk130_out1 = cfblk6_out1 + cfblk112_out1;



  assign cfblk11_out1 = cfblk75_out1 + cfblk130_out1;



  assign cfblk40_out1 = cfblk11_out1 + cfblk40_const_val_1;



  assign cfblk66_out1 = cfblk40_out1 + cfblk66_const_val_1;



  cfblk161 u_cfblk161 (.In1(cfblk66_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  assign cfblk84_out1 = cfblk161_out1 + cfblk84_const_val_1;



  assign cfblk38_out1 = cfblk84_out1 + cfblk33_out1;



  assign cfblk135_out1 = (cfblk38_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out = cfblk135_out1;



  assign cfblk147_out1 = dtc_out;



  assign cfblk105_out1 = cfblk96_out1 - cfblk39_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk16_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  assign cfblk75_out1 = (cfblk143_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk120_out1 = cfblk75_out1 + cfblk143_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk120_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  always @(cfblk127_out1, cfblk5_out1) begin
    cfblk73_div_temp = 9'b000000000;
    cfblk73_t_0_0 = 9'b000000000;
    if (cfblk5_out1 == 8'b00000000) begin
      cfblk73_out1 = 8'b11111111;
    end
    else begin
      cfblk73_t_0_0 = {1'b0, cfblk127_out1};
      cfblk73_div_temp = cfblk73_t_0_0 / cfblk5_out1;
      if (cfblk73_div_temp[8] != 1'b0) begin
        cfblk73_out1 = 8'b11111111;
      end
      else begin
        cfblk73_out1 = cfblk73_div_temp[7:0];
      end
    end
  end



  assign cfblk112_out1 = cfblk155_out1 + cfblk162_out1;



  always @(cfblk112_out1, cfblk73_out1) begin
    cfblk50_div_temp = 9'b000000000;
    cfblk50_t_0_0 = 9'b000000000;
    if (cfblk73_out1 == 8'b00000000) begin
      cfblk50_out1 = 8'b11111111;
    end
    else begin
      cfblk50_t_0_0 = {1'b0, cfblk112_out1};
      cfblk50_div_temp = cfblk50_t_0_0 / cfblk73_out1;
      if (cfblk50_div_temp[8] != 1'b0) begin
        cfblk50_out1 = 8'b11111111;
      end
      else begin
        cfblk50_out1 = cfblk50_div_temp[7:0];
      end
    end
  end



  assign cfblk65_out1 = cfblk50_out1 - cfblk85_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk65_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign cfblk88_out1 = cfblk177_out1 + cfblk164_out1;



  DotProduct_block9 u_cfblk41_inst (.in1(cfblk88_out1),  // uint8
                                    .in2(cfblk186_out1),  // uint8
                                    .out1(cfblk41_out1)  // uint8
                                    );

  assign cfblk96_out1 = cfblk41_out1 + cfblk190_out1;



  assign cfblk89_out1 = cfblk78_out1 + cfblk3_out1;



  DotProduct_block10 u_cfblk42_inst (.in1(cfblk131_out1),  // uint8
                                     .in2(cfblk115_out1),  // uint8
                                     .out1(cfblk42_out1)  // uint8
                                     );

  assign dtc_out_1 = cfblk98_out1;



  assign cfblk36_out1 = dtc_out_1;



  assign cfblk92_out1 = (cfblk36_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk138_out1 = cfblk163_out1 + cfblk145_out1;



  DotProduct_block2 u_cfblk115_inst (.in1(cfblk138_out1),  // uint8
                                     .in2(cfblk24_out1),  // uint8
                                     .out1(cfblk115_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk115_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  assign cfblk45_out1 = cfblk185_out1 - cfblk141_out1;



  assign cfblk108_out1 = (cfblk35_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block5 u_cfblk129_inst (.in1(cfblk108_out1),  // uint8
                                     .in2(cfblk45_out1),  // uint8
                                     .out1(cfblk129_out1)  // uint8
                                     );

  assign cfblk23_out1 = (cfblk129_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk39_out1 = cfblk156_out1 - cfblk62_out1;



  assign cfblk133_out1 = cfblk144_out1 + cfblk133_const_val_1;



  cfblk163 u_cfblk163 (.In1(cfblk133_out1),  // uint8
                       .Out1(cfblk163_out1)  // uint8
                       );

  assign cfblk78_out1 = (cfblk4_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk43_out1 = cfblk78_out1 - cfblk163_out1;



  assign cfblk136_out1 = cfblk43_out1 + cfblk39_out1;



  assign cfblk63_out1 = cfblk136_out1 + cfblk142_out1;



  assign cfblk146_out1 = cfblk63_out1 - cfblk162_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk146_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk17_out1 = cfblk178_out1 + cfblk23_out1;



  DotProduct_block12 u_cfblk9_inst (.in1(cfblk46_out1),  // uint8
                                    .in2(cfblk58_out1),  // uint8
                                    .out1(cfblk9_out1)  // uint8
                                    );

  cfblk162 u_cfblk162 (.In1(cfblk9_out1),  // uint8
                       .Out1(cfblk162_out1)  // uint8
                       );

  assign cfblk3_out1 = cfblk162_out1 & 8'b11111110;



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk3_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  always @(cfblk179_out1, cfblk17_out1) begin
    cfblk145_div_temp = 9'b000000000;
    cfblk145_t_0_0 = 9'b000000000;
    if (cfblk17_out1 == 8'b00000000) begin
      cfblk145_out1 = 8'b11111111;
    end
    else begin
      cfblk145_t_0_0 = {1'b0, cfblk179_out1};
      cfblk145_div_temp = cfblk145_t_0_0 / cfblk17_out1;
      if (cfblk145_div_temp[8] != 1'b0) begin
        cfblk145_out1 = 8'b11111111;
      end
      else begin
        cfblk145_out1 = cfblk145_div_temp[7:0];
      end
    end
  end



  assign cfblk104_out1 = (cfblk145_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk85_out1 = cfblk8_out1 + cfblk104_out1;



  assign cfblk128_out1 = cfblk85_out1 + cfblk128_const_val_1;



  DotProduct_block11 u_cfblk46_inst (.in1(cfblk128_out1),  // uint8
                                     .in2(cfblk100_out1),  // uint8
                                     .out1(cfblk46_out1)  // uint8
                                     );

  DotProduct u_cfblk10_inst (.in1(cfblk46_out1),  // uint8
                             .in2(cfblk92_out1),  // uint8
                             .out1(cfblk10_out1)  // uint8
                             );

  assign cfblk134_out1 = cfblk10_out1 - cfblk42_out1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk134_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk2_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk102_out1 = cfblk106_out1 - cfblk174_out1;



  assign dtc_out_2 = cfblk102_out1;



  assign cfblk82_out1 = dtc_out_2;



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk61_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign dtc_out_3 = cfblk4_out1;



  assign cfblk52_out1 = dtc_out_3;



  assign cfblk13_out1 = cfblk52_out1 + cfblk13_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk13_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk49_out1 = cfblk187_out1 - cfblk82_out1;



  assign cfblk8_out1 = cfblk109_out1 + cfblk55_out1;



  assign cfblk131_out1 = cfblk139_out1 + cfblk35_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk131_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk53_out1 = cfblk125_out1 + cfblk173_out1;



  DotProduct_block1 u_cfblk109_inst (.in1(cfblk53_out1),  // uint8
                                     .in2(cfblk19_out1),  // uint8
                                     .out1(cfblk109_out1)  // uint8
                                     );

  DotProduct_block3 u_cfblk117_inst (.in1(cfblk109_out1),  // uint8
                                     .in2(cfblk8_out1),  // uint8
                                     .out1(cfblk117_out1)  // uint8
                                     );

  assign dtc_out_4 = cfblk117_out1;



  assign cfblk140_out1 = dtc_out_4;



  assign cfblk6_out1 = (cfblk140_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk143_out1 = cfblk6_out1 + cfblk103_out1;



  assign cfblk141_out1 = cfblk143_out1 + cfblk141_const_val_1;



  assign cfblk24_1 = {16'b0, cfblk157_out1};
  assign cfblk24_2 = {24'b0, cfblk141_out1};
  assign cfblk24_sub_temp = cfblk24_1 - cfblk24_2;
  assign cfblk24_out1 = cfblk24_sub_temp[7:0];



  assign cfblk33_out1 = cfblk24_out1 - cfblk49_out1;



  Mysubsystem_32 u_Mysubsystem_32 (.In1(cfblk33_out1),  // uint8
                                   .In2(cfblk89_out1),  // uint8
                                   .Out1(Mysubsystem_32_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = Mysubsystem_32_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  DotProduct_block u_cfblk106_inst (.in1(cfblk180_out1),  // uint8
                                    .in2(cfblk96_out1),  // uint8
                                    .out1(cfblk106_out1)  // uint8
                                    );

  assign cfblk93_out1 = cfblk106_out1 + cfblk93_const_val_1;



  assign cfblk19_out1 = cfblk93_out1 + cfblk105_out1;



  assign cfblk44_out1 = (cfblk19_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk69_out1 = cfblk44_out1 - cfblk127_out1;



  assign cfblk47_out1 = (cfblk69_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk64_out1 = (cfblk47_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk64_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  DotProduct_block6 u_cfblk16_inst (.in1(cfblk171_out1),  // uint8
                                    .in2(cfblk184_out1),  // uint8
                                    .out1(cfblk16_out1)  // uint8
                                    );

  assign cfblk98_out1 = cfblk188_out1 + cfblk16_out1;



  DotProduct_block4 u_cfblk125_inst (.in1(cfblk98_out1),  // uint8
                                     .in2(cfblk81_out1),  // uint8
                                     .out1(cfblk125_out1)  // uint8
                                     );

  assign cfblk118_out1 = cfblk125_out1 - cfblk147_out1;



  assign cfblk148_out1 = cfblk118_out1 - cfblk68_out1;



  assign dtc_out_5 = cfblk148_out1;



  assign cfblk101_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk101_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk58_out1 = cfblk114_out1 + cfblk127_out1;



  assign cfblk107_out1 = (cfblk58_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk107_out1, cfblk171_out1) begin
    cfblk27_div_temp = 9'b000000000;
    cfblk27_t_0_0 = 9'b000000000;
    if (cfblk171_out1 == 8'b00000000) begin
      cfblk27_out1 = 8'b11111111;
    end
    else begin
      cfblk27_t_0_0 = {1'b0, cfblk107_out1};
      cfblk27_div_temp = cfblk27_t_0_0 / cfblk171_out1;
      if (cfblk27_div_temp[8] != 1'b0) begin
        cfblk27_out1 = 8'b11111111;
      end
      else begin
        cfblk27_out1 = cfblk27_div_temp[7:0];
      end
    end
  end



  always @(cfblk27_out1, cfblk90_out1) begin
    cfblk48_div_temp = 9'b000000000;
    cfblk48_t_0_0 = 9'b000000000;
    if (cfblk90_out1 == 8'b00000000) begin
      cfblk48_out1 = 8'b11111111;
    end
    else begin
      cfblk48_t_0_0 = {1'b0, cfblk27_out1};
      cfblk48_div_temp = cfblk48_t_0_0 / cfblk90_out1;
      if (cfblk48_div_temp[8] != 1'b0) begin
        cfblk48_out1 = 8'b11111111;
      end
      else begin
        cfblk48_out1 = cfblk48_div_temp[7:0];
      end
    end
  end



  DotProduct_block8 u_cfblk30_inst (.in1(cfblk48_out1),  // uint8
                                    .in2(cfblk159_out1),  // uint8
                                    .out1(cfblk30_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk30_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign cfblk127_out1 = cfblk182_out1 + cfblk20_out1;



  assign cfblk34_out1 = cfblk127_out1 + cfblk181_out1;



  assign cfblk139_out1 = cfblk34_out1 + cfblk139_const_val_1;



  assign cfblk114_out1 = (cfblk139_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk116_out1 = cfblk114_out1 + cfblk33_out1;



  assign cfblk56_out1 = cfblk116_out1 - cfblk117_out1;



  assign cfblk111_out1 = cfblk56_out1 - cfblk6_out1;



  assign cfblk100_out1 = cfblk111_out1 + cfblk25_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk100_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk97_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  assign cfblk191_out1_is_not0 = cfblk191_out1 != 8'b00000000;



  assign cfblk1_out1 = cfblk191_out1_is_not0 & Mysubsystem_10_out1_is_not0;



  assign cfblk81_1 = {31'b0, cfblk1_out1};
  assign cfblk81_2 = {24'b0, cfblk176_out1};
  assign cfblk81_add_temp = cfblk81_1 + cfblk81_2;
  assign cfblk81_out1 = cfblk81_add_temp[7:0];



  always @(cfblk175_out1, cfblk81_out1) begin
    cfblk5_div_temp = 9'b000000000;
    cfblk5_t_0_0 = 9'b000000000;
    if (cfblk175_out1 == 8'b00000000) begin
      cfblk5_out1 = 8'b11111111;
    end
    else begin
      cfblk5_t_0_0 = {1'b0, cfblk81_out1};
      cfblk5_div_temp = cfblk5_t_0_0 / cfblk175_out1;
      if (cfblk5_div_temp[8] != 1'b0) begin
        cfblk5_out1 = 8'b11111111;
      end
      else begin
        cfblk5_out1 = cfblk5_div_temp[7:0];
      end
    end
  end



  DotProduct_block14 u_cfblk94_inst (.in1(cfblk5_out1),  // uint8
                                     .in2(cfblk189_out1),  // uint8
                                     .out1(cfblk94_out1)  // uint8
                                     );

  assign cfblk62_out1 = (cfblk94_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk164 u_cfblk164 (.In1(cfblk62_out1),  // uint8
                       .Out1(cfblk164_out1)  // uint8
                       );

  assign cfblk97_out1 = cfblk103_out1 + cfblk164_out1;



  assign cfblk61_out1 = cfblk97_out1 + cfblk109_out1;



  always @(cfblk13_out1, cfblk61_out1) begin
    cfblk35_div_temp = 9'b000000000;
    cfblk35_t_0_0 = 9'b000000000;
    if (cfblk13_out1 == 8'b00000000) begin
      cfblk35_out1 = 8'b11111111;
    end
    else begin
      cfblk35_t_0_0 = {1'b0, cfblk61_out1};
      cfblk35_div_temp = cfblk35_t_0_0 / cfblk13_out1;
      if (cfblk35_div_temp[8] != 1'b0) begin
        cfblk35_out1 = 8'b11111111;
      end
      else begin
        cfblk35_out1 = cfblk35_div_temp[7:0];
      end
    end
  end



  assign dtc_out_6 = cfblk35_out1;



  assign cfblk144_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk144_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  assign Hdl_out = cfblk188_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

