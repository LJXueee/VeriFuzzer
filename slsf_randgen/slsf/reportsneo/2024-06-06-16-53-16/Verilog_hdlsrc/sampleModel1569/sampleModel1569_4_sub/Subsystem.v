// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1569\sampleModel1569_4_sub\Subsystem.v
// Created: 2024-08-12 20:00:17
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1569_4_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk19_const_val_1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk111_const_val_1;  // uint8
  wire [15:0] cfblk134_out1;  // uint16
  wire [7:0] cfblk50_const_val_1;  // uint8
  wire [7:0] cfblk48_const_val_1;  // uint8
  wire [7:0] cfblk40_const_val_1;  // uint8
  wire [7:0] cfblk54_const_val_1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [63:0] Mysubsystem_22_out1;  // ufix64
  real Mysubsystem_22_out1_double;  // double
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk103_const_val_1;  // uint8
  wire [7:0] cfblk129_const_val_1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] Mysubsystem_4_out2;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  reg [7:0] cfblk12_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  reg [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk72_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  reg [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk118_out1;  // uint8
  reg [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk35_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  reg [8:0] cfblk99_div_temp;  // ufix9
  reg [8:0] cfblk99_t_0_0;  // ufix9
  reg [8:0] cfblk108_div_temp;  // ufix9
  reg [8:0] cfblk108_t_0_0;  // ufix9
  reg [8:0] cfblk46_div_temp;  // ufix9
  reg [8:0] cfblk46_t_0_0;  // ufix9
  reg [8:0] cfblk12_div_temp;  // ufix9
  reg [8:0] cfblk12_t_0_0;  // ufix9
  reg [8:0] cfblk92_div_temp;  // ufix9
  reg [8:0] cfblk92_t_0_0;  // ufix9
  reg [8:0] cfblk36_div_temp;  // ufix9
  reg [8:0] cfblk36_t_0_0;  // ufix9
  reg [8:0] cfblk55_div_temp;  // ufix9
  reg [8:0] cfblk55_t_0_0;  // ufix9
  reg [8:0] cfblk87_div_temp;  // ufix9
  reg [8:0] cfblk87_t_0_0;  // ufix9
  reg [8:0] cfblk21_div_temp;  // ufix9
  reg [8:0] cfblk21_t_0_0;  // ufix9
  reg [8:0] cfblk35_div_temp;  // ufix9
  reg [8:0] cfblk35_t_0_0;  // ufix9
  reg [8:0] cfblk128_div_temp;  // ufix9
  reg [8:0] cfblk128_t_0_0;  // ufix9
  reg [15:0] cfblk118_varargout_1;  // ufix16
  reg [16:0] cfblk118_div_temp;  // ufix17
  reg [16:0] cfblk118_t_0_0;  // ufix17


  assign cfblk1_out1 = 8'b00000000;



  assign cfblk19_const_val_1 = 8'b00000000;



  assign cfblk19_out1 = cfblk1_out1 + cfblk19_const_val_1;



  assign cfblk111_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  cfblk134 u_cfblk134 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk134_out1)  // uint16
                       );

  assign cfblk50_const_val_1 = 8'b00000000;



  assign cfblk48_const_val_1 = 8'b00000000;



  assign cfblk40_const_val_1 = 8'b00000000;



  assign cfblk54_const_val_1 = 8'b00000000;



  assign cfblk136_out1 = 8'b00000001;



  Mysubsystem_22 u_Mysubsystem_22 (.Out1(Mysubsystem_22_out1)  // double
                                   );

  always @* Mysubsystem_22_out1_double = $bitstoreal(Mysubsystem_22_out1);

  assign cfblk98_out1 = $rtoi(Mysubsystem_22_out1_double);



  assign dtc_out = cfblk98_out1;



  assign cfblk57_out1 = dtc_out;



  assign cfblk103_const_val_1 = 8'b00000000;



  assign cfblk129_const_val_1 = 8'b00000000;



  assign cfblk135_out1 = 8'b00000000;



  always @(cfblk135_out1, cfblk86_out1) begin
    cfblk99_div_temp = 9'b000000000;
    cfblk99_t_0_0 = 9'b000000000;
    if (cfblk135_out1 == 8'b00000000) begin
      cfblk99_out1 = 8'b11111111;
    end
    else begin
      cfblk99_t_0_0 = {1'b0, cfblk86_out1};
      cfblk99_div_temp = cfblk99_t_0_0 / cfblk135_out1;
      if (cfblk99_div_temp[8] != 1'b0) begin
        cfblk99_out1 = 8'b11111111;
      end
      else begin
        cfblk99_out1 = cfblk99_div_temp[7:0];
      end
    end
  end



  assign cfblk129_out1 = cfblk103_out1 + cfblk129_const_val_1;



  assign cfblk3_out1 = cfblk129_out1 & 8'b11111110;



  assign cfblk32_out1 = cfblk3_out1 - cfblk137_out1;



  assign cfblk42_out1 = (cfblk32_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk70_out1 = cfblk46_out1 + cfblk71_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk70_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  Mysubsystem_4 u_Mysubsystem_4 (.In1(cfblk54_out1),  // uint8
                                 .In3(cfblk41_out1),  // uint8
                                 .Out2(Mysubsystem_4_out2)  // uint8
                                 );

  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = Mysubsystem_4_out2;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk80_out1 = (cfblk103_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk125_out1 = cfblk80_out1 - cfblk108_out1;



  always @(cfblk2_out1, cfblk91_out1) begin
    cfblk108_div_temp = 9'b000000000;
    cfblk108_t_0_0 = 9'b000000000;
    if (cfblk2_out1 == 8'b00000000) begin
      cfblk108_out1 = 8'b11111111;
    end
    else begin
      cfblk108_t_0_0 = {1'b0, cfblk91_out1};
      cfblk108_div_temp = cfblk108_t_0_0 / cfblk2_out1;
      if (cfblk108_div_temp[8] != 1'b0) begin
        cfblk108_out1 = 8'b11111111;
      end
      else begin
        cfblk108_out1 = cfblk108_div_temp[7:0];
      end
    end
  end



  always @(cfblk108_out1, cfblk125_out1) begin
    cfblk46_div_temp = 9'b000000000;
    cfblk46_t_0_0 = 9'b000000000;
    if (cfblk125_out1 == 8'b00000000) begin
      cfblk46_out1 = 8'b11111111;
    end
    else begin
      cfblk46_t_0_0 = {1'b0, cfblk108_out1};
      cfblk46_div_temp = cfblk46_t_0_0 / cfblk125_out1;
      if (cfblk46_div_temp[8] != 1'b0) begin
        cfblk46_out1 = 8'b11111111;
      end
      else begin
        cfblk46_out1 = cfblk46_div_temp[7:0];
      end
    end
  end



  assign dtc_out_1 = cfblk46_out1;



  assign cfblk123_out1 = dtc_out_1;



  assign cfblk105_out1 = cfblk123_out1 + cfblk100_out1;



  assign cfblk89_out1 = (cfblk105_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk12_out1;



  assign cfblk101_out1 = dtc_out_2;



  assign cfblk107_out1 = (cfblk101_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk117_out1 = (cfblk107_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk117_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  always @(cfblk157_out1, cfblk89_out1) begin
    cfblk12_div_temp = 9'b000000000;
    cfblk12_t_0_0 = 9'b000000000;
    if (cfblk89_out1 == 8'b00000000) begin
      cfblk12_out1 = 8'b11111111;
    end
    else begin
      cfblk12_t_0_0 = {1'b0, cfblk157_out1};
      cfblk12_div_temp = cfblk12_t_0_0 / cfblk89_out1;
      if (cfblk12_div_temp[8] != 1'b0) begin
        cfblk12_out1 = 8'b11111111;
      end
      else begin
        cfblk12_out1 = cfblk12_div_temp[7:0];
      end
    end
  end



  assign cfblk31_out1 = (cfblk12_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk90_out1 = (cfblk31_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk90_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk77_out1 = cfblk57_out1 + cfblk84_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk77_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk28_out1 = cfblk163_out1 + cfblk55_out1;



  always @(cfblk63_out1, cfblk65_out1) begin
    cfblk92_div_temp = 9'b000000000;
    cfblk92_t_0_0 = 9'b000000000;
    if (cfblk63_out1 == 8'b00000000) begin
      cfblk92_out1 = 8'b11111111;
    end
    else begin
      cfblk92_t_0_0 = {1'b0, cfblk65_out1};
      cfblk92_div_temp = cfblk92_t_0_0 / cfblk63_out1;
      if (cfblk92_div_temp[8] != 1'b0) begin
        cfblk92_out1 = 8'b11111111;
      end
      else begin
        cfblk92_out1 = cfblk92_div_temp[7:0];
      end
    end
  end



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk63_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  DotProduct_block u_cfblk20_inst (.in1(cfblk2_out1),  // uint8
                                   .in2(cfblk92_out1),  // uint8
                                   .out1(cfblk20_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk20_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  assign cfblk43_out1 = (cfblk4_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_3 = cfblk33_out1;



  assign cfblk72_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk72_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  always @(cfblk162_out1, cfblk43_out1) begin
    cfblk36_div_temp = 9'b000000000;
    cfblk36_t_0_0 = 9'b000000000;
    if (cfblk43_out1 == 8'b00000000) begin
      cfblk36_out1 = 8'b11111111;
    end
    else begin
      cfblk36_t_0_0 = {1'b0, cfblk162_out1};
      cfblk36_div_temp = cfblk36_t_0_0 / cfblk43_out1;
      if (cfblk36_div_temp[8] != 1'b0) begin
        cfblk36_out1 = 8'b11111111;
      end
      else begin
        cfblk36_out1 = cfblk36_div_temp[7:0];
      end
    end
  end



  always @(cfblk153_out1, cfblk36_out1) begin
    cfblk55_div_temp = 9'b000000000;
    cfblk55_t_0_0 = 9'b000000000;
    if (cfblk153_out1 == 8'b00000000) begin
      cfblk55_out1 = 8'b11111111;
    end
    else begin
      cfblk55_t_0_0 = {1'b0, cfblk36_out1};
      cfblk55_div_temp = cfblk55_t_0_0 / cfblk153_out1;
      if (cfblk55_div_temp[8] != 1'b0) begin
        cfblk55_out1 = 8'b11111111;
      end
      else begin
        cfblk55_out1 = cfblk55_div_temp[7:0];
      end
    end
  end



  always @(cfblk118_out1, cfblk55_out1) begin
    cfblk87_div_temp = 9'b000000000;
    cfblk87_t_0_0 = 9'b000000000;
    if (cfblk55_out1 == 8'b00000000) begin
      cfblk87_out1 = 8'b11111111;
    end
    else begin
      cfblk87_t_0_0 = {1'b0, cfblk118_out1};
      cfblk87_div_temp = cfblk87_t_0_0 / cfblk55_out1;
      if (cfblk87_div_temp[8] != 1'b0) begin
        cfblk87_out1 = 8'b11111111;
      end
      else begin
        cfblk87_out1 = cfblk87_div_temp[7:0];
      end
    end
  end



  always @(cfblk10_out1, cfblk87_out1) begin
    cfblk21_div_temp = 9'b000000000;
    cfblk21_t_0_0 = 9'b000000000;
    if (cfblk10_out1 == 8'b00000000) begin
      cfblk21_out1 = 8'b11111111;
    end
    else begin
      cfblk21_t_0_0 = {1'b0, cfblk87_out1};
      cfblk21_div_temp = cfblk21_t_0_0 / cfblk10_out1;
      if (cfblk21_div_temp[8] != 1'b0) begin
        cfblk21_out1 = 8'b11111111;
      end
      else begin
        cfblk21_out1 = cfblk21_div_temp[7:0];
      end
    end
  end



  always @(cfblk21_out1, cfblk65_out1) begin
    cfblk35_div_temp = 9'b000000000;
    cfblk35_t_0_0 = 9'b000000000;
    if (cfblk65_out1 == 8'b00000000) begin
      cfblk35_out1 = 8'b11111111;
    end
    else begin
      cfblk35_t_0_0 = {1'b0, cfblk21_out1};
      cfblk35_div_temp = cfblk35_t_0_0 / cfblk65_out1;
      if (cfblk35_div_temp[8] != 1'b0) begin
        cfblk35_out1 = 8'b11111111;
      end
      else begin
        cfblk35_out1 = cfblk35_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk35_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk96_out1 = cfblk149_out1 + cfblk28_out1;



  assign cfblk103_out1 = cfblk96_out1 + cfblk103_const_val_1;



  assign dtc_out_4 = cfblk103_out1;



  assign cfblk78_out1 = dtc_out_4;



  assign cfblk79_out1 = cfblk78_out1 + cfblk114_out1;



  DotProduct u_cfblk100_inst (.in1(cfblk114_out1),  // uint8
                              .in2(cfblk79_out1),  // uint8
                              .out1(cfblk100_out1)  // uint8
                              );

  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk54_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk81_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(cfblk161_out1, cfblk71_out1) begin
    cfblk128_div_temp = 9'b000000000;
    cfblk128_t_0_0 = 9'b000000000;
    if (cfblk71_out1 == 8'b00000000) begin
      cfblk128_out1 = 8'b11111111;
    end
    else begin
      cfblk128_t_0_0 = {1'b0, cfblk161_out1};
      cfblk128_div_temp = cfblk128_t_0_0 / cfblk71_out1;
      if (cfblk128_div_temp[8] != 1'b0) begin
        cfblk128_out1 = 8'b11111111;
      end
      else begin
        cfblk128_out1 = cfblk128_div_temp[7:0];
      end
    end
  end



  assign cfblk10_out1 = cfblk128_out1 + cfblk160_out1;



  assign cfblk59_out1 = cfblk136_out1 - cfblk10_out1;



  assign cfblk52_out1 = (cfblk59_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk27_out1 = cfblk136_out1 + cfblk52_out1;



  assign cfblk74_out1 = (cfblk27_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk82_out1 = cfblk74_out1 + cfblk10_out1;



  assign cfblk22_out1 = cfblk82_out1 + cfblk100_out1;



  assign cfblk113_out1 = (cfblk22_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk113_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk11_out1 = (cfblk63_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk50_out1 = cfblk41_out1 + cfblk50_const_val_1;



  always @(cfblk134_out1, cfblk50_out1) begin
    cfblk118_div_temp = 17'b00000000000000000;
    cfblk118_t_0_0 = 17'b00000000000000000;
    if (cfblk50_out1 == 8'b00000000) begin
      cfblk118_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk118_t_0_0 = {1'b0, cfblk134_out1};
      cfblk118_div_temp = cfblk118_t_0_0 / cfblk50_out1;
      if (cfblk118_div_temp[16] != 1'b0) begin
        cfblk118_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk118_varargout_1 = cfblk118_div_temp[15:0];
      end
    end
    if (cfblk118_varargout_1[15:8] != 8'b00000000) begin
      cfblk118_out1 = 8'b11111111;
    end
    else begin
      cfblk118_out1 = cfblk118_varargout_1[7:0];
    end
  end



  assign cfblk91_out1 = (cfblk118_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk48_out1 = cfblk91_out1 + cfblk48_const_val_1;



  assign cfblk81_out1 = cfblk48_out1 + cfblk11_out1;



  assign cfblk40_out1 = cfblk81_out1 + cfblk40_const_val_1;



  assign cfblk54_out1 = cfblk40_out1 + cfblk54_const_val_1;



  assign cfblk86_out1 = cfblk54_out1 - cfblk136_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk86_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk30_out1 = cfblk65_out1 + cfblk65_out1;



  assign cfblk111_out1 = cfblk30_out1 + cfblk111_const_val_1;



  assign dtc_out_5 = cfblk111_out1;



  assign cfblk64_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk64_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk24_out1 = cfblk19_out1 + cfblk154_out1;



  assign cfblk63_out1 = cfblk24_out1 + cfblk159_out1;



  cfblk137 u_cfblk137 (.In1(cfblk63_out1),  // uint8
                       .Out1(cfblk137_out1)  // uint8
                       );

  cfblk4 u_cfblk4 (.u(cfblk137_out1),  // uint8
                   .y(cfblk4_out1)  // uint8
                   );

  assign cfblk124_out1 = cfblk84_out1 - cfblk4_out1;



  assign dtc_out_6 = cfblk124_out1;



  assign cfblk102_out1 = dtc_out_6;



  assign cfblk17_out1 = cfblk102_out1 - cfblk150_out1;



  assign cfblk37_out1 = cfblk17_out1 + cfblk156_out1;



  assign cfblk13_out1 = cfblk37_out1 + cfblk152_out1;



  cfblk138 u_cfblk138 (.In1(cfblk13_out1),  // uint8
                       .Out1(cfblk138_out1)  // uint8
                       );

  assign cfblk116_out1 = cfblk138_out1 + cfblk147_out1;



  assign dtc_out_7 = cfblk116_out1;



  assign cfblk71_out1 = dtc_out_7;



  assign cfblk29_out1 = cfblk71_out1 + cfblk71_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk29_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  DotProduct_block2 u_cfblk84_inst (.in1(cfblk145_out1),  // uint8
                                    .in2(cfblk42_out1),  // uint8
                                    .out1(cfblk84_out1)  // uint8
                                    );

  assign dtc_out_8 = cfblk84_out1;



  assign cfblk119_out1 = dtc_out_8;



  assign cfblk65_out1 = cfblk119_out1 + cfblk99_out1;



  assign dtc_out_9 = cfblk65_out1;



  assign cfblk114_out1 = dtc_out_9;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk114_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  DotProduct_block1 u_cfblk41_inst (.in1(cfblk158_out1),  // uint8
                                    .in2(cfblk27_out1),  // uint8
                                    .out1(cfblk41_out1)  // uint8
                                    );

  assign dtc_out_10 = cfblk41_out1;



  assign cfblk33_out1 = dtc_out_10;



  assign Hdl_out = cfblk33_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

