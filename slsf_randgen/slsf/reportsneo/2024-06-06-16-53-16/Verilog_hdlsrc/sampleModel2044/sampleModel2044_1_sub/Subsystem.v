// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel2044\sampleModel2044_1_sub\Subsystem.v
// Created: 2024-08-16 21:28:52
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel2044_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk105_const_val_1;  // uint8
  wire [7:0] cfblk80_const_val_1;  // uint8
  wire [7:0] cfblk74_const_val_1;  // uint8
  wire [7:0] cfblk71_const_val_1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk81_const_val_1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk22_const_val_1;  // uint8
  wire [7:0] cfblk76_const_val_1;  // uint8
  wire [7:0] cfblk107_const_val_1;  // uint8
  wire [7:0] cfblk92_const_val_1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [15:0] cfblk124_out1;  // uint16
  wire [15:0] cfblk31_out1;  // uint16
  wire [7:0] cfblk75_const_val_1;  // uint8
  wire [7:0] cfblk117_const_val_1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk133_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk133_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk134_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk134_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk135_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk136_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  reg [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire signed [31:0] cfblk29_sub_temp;  // sfix32
  wire signed [31:0] cfblk29_1;  // sfix32
  wire signed [31:0] cfblk29_2;  // sfix32
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk32_out1;  // uint8
  reg [8:0] cfblk48_div_temp;  // ufix9
  reg [8:0] cfblk48_t_0_0;  // ufix9
  reg [8:0] cfblk8_div_temp;  // ufix9
  reg [8:0] cfblk8_t_0_0;  // ufix9
  reg [8:0] cfblk37_div_temp;  // ufix9
  reg [8:0] cfblk37_t_0_0;  // ufix9
  reg [8:0] cfblk62_div_temp;  // ufix9
  reg [8:0] cfblk62_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk122_out1 = 8'b00000001;



  assign cfblk1_out1 = 8'b00000000;



  assign cfblk105_const_val_1 = 8'b00000000;



  assign cfblk80_const_val_1 = 8'b00000000;



  assign cfblk74_const_val_1 = 8'b00000000;



  assign cfblk71_const_val_1 = 8'b00000000;



  assign cfblk123_out1 = 8'b00000001;



  assign cfblk81_const_val_1 = 8'b00000000;



  assign cfblk81_out1 = cfblk123_out1 + cfblk81_const_val_1;



  assign cfblk22_const_val_1 = 8'b00000000;



  assign cfblk76_const_val_1 = 8'b00000000;



  assign cfblk107_const_val_1 = 8'b00000000;



  assign cfblk92_const_val_1 = 8'b00000000;



  assign cfblk125_out1 = 8'b00000000;



  cfblk124 u_cfblk124 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk124_out1)  // uint16
                       );

  assign cfblk31_out1 = (cfblk124_out1 > 16'b0000000000000000 ? 16'b0000000000000001 :
              16'b0000000000000000);



  assign cfblk75_const_val_1 = 8'b00000000;



  assign cfblk117_const_val_1 = 8'b00000000;



  assign cfblk15_out1 = cfblk63_out1 + cfblk95_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk92_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  DotProduct_block6 u_cfblk87_inst (.in1(cfblk59_out1),  // uint8
                                    .in2(cfblk12_out1),  // uint8
                                    .out1(cfblk87_out1)  // uint8
                                    );

  assign cfblk103_out1 = cfblk87_out1 - cfblk109_out1;



  assign cfblk50_out1 = cfblk103_out1 + cfblk35_out1;



  cfblk128 u_cfblk128 (.In1(cfblk50_out1),  // uint8
                       .Out1(cfblk128_out1)  // uint8
                       );

  assign dtc_out = cfblk128_out1;



  assign cfblk66_out1 = dtc_out;



  assign cfblk26_out1 = (cfblk66_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk126 u_cfblk126 (.In1(cfblk26_out1),  // uint8
                       .Out1(cfblk126_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk126_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk80_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk35_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk29_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk90_out1 = (cfblk18_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk133_process
      if (reset == 1'b1) begin
        cfblk133_reg[0] <= 8'b00000000;
        cfblk133_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk133_reg[0] <= cfblk133_reg_next[0];
          cfblk133_reg[1] <= cfblk133_reg_next[1];
        end
      end
    end

  assign cfblk133_out1 = cfblk133_reg[1];
  assign cfblk133_reg_next[0] = cfblk90_out1;
  assign cfblk133_reg_next[1] = cfblk133_reg[0];



  assign cfblk35_out1 = cfblk95_out1 - cfblk62_out1;



  assign cfblk93_out1 = cfblk35_out1 + cfblk105_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk93_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk63_out1 = cfblk144_out1 - cfblk35_out1;



  assign cfblk72_out1 = (cfblk63_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk107_out1 = cfblk72_out1 + cfblk107_const_val_1;



  assign cfblk92_out1 = cfblk107_out1 + cfblk92_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk92_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  assign cfblk116_out1 = cfblk33_out1 + cfblk148_out1;



  assign cfblk89_out1 = cfblk116_out1 - cfblk133_out1;



  assign cfblk106_out1 = cfblk89_out1 + cfblk24_out1;



  DotProduct u_cfblk108_inst (.in1(cfblk106_out1),  // uint8
                              .in2(cfblk125_out1),  // uint8
                              .out1(cfblk108_out1)  // uint8
                              );

  assign dtc_out_1 = cfblk108_out1;



  assign cfblk27_out1 = dtc_out_1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk139_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign dtc_out_2 = cfblk2_out1;



  assign cfblk13_out1 = dtc_out_2;



  assign cfblk85_out1 = cfblk13_out1 - cfblk81_out1;



  assign cfblk71_out1 = cfblk29_out1 + cfblk71_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk74_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  assign cfblk94_out1 = cfblk153_out1 + cfblk71_out1;



  assign cfblk56_out1 = cfblk91_out1 - cfblk94_out1;



  assign cfblk6_out1 = cfblk7_out1 - cfblk117_out1;



  always @(cfblk56_out1, cfblk6_out1) begin
    cfblk48_div_temp = 9'b000000000;
    cfblk48_t_0_0 = 9'b000000000;
    if (cfblk56_out1 == 8'b00000000) begin
      cfblk48_out1 = 8'b11111111;
    end
    else begin
      cfblk48_t_0_0 = {1'b0, cfblk6_out1};
      cfblk48_div_temp = cfblk48_t_0_0 / cfblk56_out1;
      if (cfblk48_div_temp[8] != 1'b0) begin
        cfblk48_out1 = 8'b11111111;
      end
      else begin
        cfblk48_out1 = cfblk48_div_temp[7:0];
      end
    end
  end



  assign cfblk97_out1 = cfblk48_out1 - cfblk85_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk97_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  assign dtc_out_3 = cfblk139_out1;



  assign cfblk45_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk134_process
      if (reset == 1'b1) begin
        cfblk134_reg[0] <= 8'b00000000;
        cfblk134_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk134_reg[0] <= cfblk134_reg_next[0];
          cfblk134_reg[1] <= cfblk134_reg_next[1];
        end
      end
    end

  assign cfblk134_out1 = cfblk134_reg[1];
  assign cfblk134_reg_next[0] = cfblk45_out1;
  assign cfblk134_reg_next[1] = cfblk134_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk96_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  assign cfblk21_out1 = cfblk79_out1 + cfblk22_out1;



  assign cfblk74_out1 = cfblk21_out1 + cfblk74_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk74_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk135_process
      if (reset == 1'b1) begin
        cfblk135_reg[0] <= 8'b00000000;
        cfblk135_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk135_reg[0] <= cfblk135_reg_next[0];
          cfblk135_reg[1] <= cfblk135_reg_next[1];
        end
      end
    end

  assign cfblk135_out1 = cfblk135_reg[1];
  assign cfblk135_reg_next[0] = cfblk19_out1;
  assign cfblk135_reg_next[1] = cfblk135_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk20_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign dtc_out_4 = cfblk83_out1;



  assign cfblk24_out1 = dtc_out_4;



  assign cfblk34_out1 = cfblk39_out1 + cfblk24_out1;



  assign cfblk80_out1 = cfblk34_out1 + cfblk80_const_val_1;



  assign cfblk105_out1 = cfblk96_out1 + cfblk105_const_val_1;



  assign cfblk20_out1 = cfblk105_out1 + cfblk80_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk20_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  assign cfblk25_out1 = cfblk1_out1 + cfblk146_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk3_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk28_out1 = cfblk149_out1 + cfblk25_out1;



  DotProduct_block2 u_cfblk47_inst (.in1(cfblk28_out1),  // uint8
                                    .in2(cfblk145_out1),  // uint8
                                    .out1(cfblk47_out1)  // uint8
                                    );

  assign cfblk104_out1 = cfblk47_out1 + cfblk135_out1;



  DotProduct_block5 u_cfblk83_inst (.in1(cfblk104_out1),  // uint8
                                    .in2(cfblk154_out1),  // uint8
                                    .out1(cfblk83_out1)  // uint8
                                    );

  assign cfblk16_out1 = cfblk83_out1 + cfblk143_out1;



  assign cfblk33_out1 = cfblk16_out1 - cfblk134_out1;



  always @(cfblk33_out1, cfblk94_out1) begin
    cfblk8_div_temp = 9'b000000000;
    cfblk8_t_0_0 = 9'b000000000;
    if (cfblk94_out1 == 8'b00000000) begin
      cfblk8_out1 = 8'b11111111;
    end
    else begin
      cfblk8_t_0_0 = {1'b0, cfblk33_out1};
      cfblk8_div_temp = cfblk8_t_0_0 / cfblk94_out1;
      if (cfblk8_div_temp[8] != 1'b0) begin
        cfblk8_out1 = 8'b11111111;
      end
      else begin
        cfblk8_out1 = cfblk8_div_temp[7:0];
      end
    end
  end



  assign cfblk73_out1 = cfblk8_out1 + cfblk39_out1;



  assign cfblk22_out1 = cfblk73_out1 + cfblk22_const_val_1;



  assign cfblk76_out1 = cfblk22_out1 + cfblk76_const_val_1;



  assign cfblk60_out1 = cfblk95_out1 + cfblk76_out1;



  DotProduct_block3 u_cfblk57_inst (.in1(cfblk60_out1),  // uint8
                                    .in2(cfblk100_out1),  // uint8
                                    .out1(cfblk57_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk57_out1;



  assign cfblk115_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk136_process
      if (reset == 1'b1) begin
        cfblk136_reg[0] <= 8'b00000000;
        cfblk136_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk136_reg[0] <= cfblk136_reg_next[0];
          cfblk136_reg[1] <= cfblk136_reg_next[1];
        end
      end
    end

  assign cfblk136_out1 = cfblk136_reg[1];
  assign cfblk136_reg_next[0] = cfblk115_out1;
  assign cfblk136_reg_next[1] = cfblk136_reg[0];



  assign cfblk79_out1 = cfblk136_out1 + cfblk27_out1;



  DotProduct_block4 u_cfblk59_inst (.in1(cfblk79_out1),  // uint8
                                    .in2(cfblk150_out1),  // uint8
                                    .out1(cfblk59_out1)  // uint8
                                    );

  assign cfblk18_out1 = cfblk59_out1 + cfblk138_out1;



  assign dtc_out_6 = cfblk43_out1;



  assign cfblk100_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk100_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  always @(cfblk141_out1, cfblk18_out1) begin
    cfblk37_div_temp = 9'b000000000;
    cfblk37_t_0_0 = 9'b000000000;
    if (cfblk18_out1 == 8'b00000000) begin
      cfblk37_out1 = 8'b11111111;
    end
    else begin
      cfblk37_t_0_0 = {1'b0, cfblk141_out1};
      cfblk37_div_temp = cfblk37_t_0_0 / cfblk18_out1;
      if (cfblk37_div_temp[8] != 1'b0) begin
        cfblk37_out1 = 8'b11111111;
      end
      else begin
        cfblk37_out1 = cfblk37_div_temp[7:0];
      end
    end
  end



  assign cfblk91_out1 = cfblk37_out1 + cfblk155_out1;



  assign cfblk41_out1 = cfblk91_out1 - cfblk137_out1;



  assign cfblk39_out1 = cfblk41_out1 + cfblk47_out1;



  assign cfblk109_out1 = cfblk84_out1 + cfblk39_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk109_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  assign cfblk112_out1 = cfblk142_out1 + cfblk139_out1;



  assign cfblk12_out1 = (cfblk112_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block u_cfblk19_inst (.in1(cfblk12_out1),  // uint8
                                   .in2(cfblk147_out1),  // uint8
                                   .out1(cfblk19_out1)  // uint8
                                   );

  always @(cfblk122_out1, cfblk19_out1) begin
    cfblk62_div_temp = 9'b000000000;
    cfblk62_t_0_0 = 9'b000000000;
    if (cfblk19_out1 == 8'b00000000) begin
      cfblk62_out1 = 8'b11111111;
    end
    else begin
      cfblk62_t_0_0 = {1'b0, cfblk122_out1};
      cfblk62_div_temp = cfblk62_t_0_0 / cfblk19_out1;
      if (cfblk62_div_temp[8] != 1'b0) begin
        cfblk62_out1 = 8'b11111111;
      end
      else begin
        cfblk62_out1 = cfblk62_div_temp[7:0];
      end
    end
  end



  assign cfblk29_1 = {24'b0, cfblk62_out1};
  assign cfblk29_2 = {16'b0, cfblk31_out1};
  assign cfblk29_sub_temp = cfblk29_1 - cfblk29_2;
  assign cfblk29_out1 = cfblk29_sub_temp[7:0];



  assign cfblk75_out1 = cfblk29_out1 + cfblk75_const_val_1;



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk75_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk23_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  assign cfblk95_out1 = cfblk140_out1 - cfblk3_out1;



  assign cfblk52_out1 = cfblk95_out1 + cfblk41_out1;



  assign cfblk110_out1 = cfblk52_out1 + cfblk35_out1;



  assign dtc_out_7 = cfblk110_out1;



  assign cfblk114_out1 = dtc_out_7;



  assign cfblk7_out1 = cfblk114_out1 + cfblk15_out1;



  assign cfblk23_out1 = cfblk7_out1 + cfblk75_out1;



  assign dtc_out_8 = cfblk23_out1;



  assign cfblk96_out1 = dtc_out_8;



  assign cfblk117_out1 = cfblk96_out1 + cfblk117_const_val_1;



  assign dtc_out_9 = cfblk117_out1;



  assign cfblk32_out1 = dtc_out_9;



  DotProduct_block1 u_cfblk43_inst (.in1(cfblk32_out1),  // uint8
                                    .in2(cfblk125_out1),  // uint8
                                    .out1(cfblk43_out1)  // uint8
                                    );

  assign cfblk84_out1 = cfblk43_out1 + cfblk27_out1;



  assign Hdl_out = cfblk84_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

