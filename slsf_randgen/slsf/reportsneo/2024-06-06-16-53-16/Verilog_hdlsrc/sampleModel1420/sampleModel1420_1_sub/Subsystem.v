// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1420\sampleModel1420_1_sub\Subsystem.v
// Created: 2024-08-12 03:16:24
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk154                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1420_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk154,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk154;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk38_const_val_1;  // uint8
  wire [7:0] cfblk101_const_val_1;  // uint8
  wire [7:0] cfblk63_const_val_1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk136_const_val_1;  // uint8
  wire [7:0] cfblk129_const_val_1;  // uint8
  wire [7:0] cfblk116_const_val_1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk50_const_val_1;  // uint8
  wire [7:0] cfblk121_const_val_1;  // uint8
  wire [7:0] cfblk128_const_val_1;  // uint8
  wire [15:0] cfblk158_out1;  // uint16
  wire [7:0] Mysubsystem_37_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk140_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  reg [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire signed [31:0] cfblk139_sub_temp;  // sfix32
  wire signed [31:0] cfblk139_1;  // sfix32
  wire signed [31:0] cfblk139_2;  // sfix32
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk200_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk200_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk200_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk199_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk199_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk199_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] cfblk194_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  reg [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  reg [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk192_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk22_out1;  // uint8
  reg [7:0] cfblk86_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  reg [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  reg [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk193_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  reg [7:0] cfblk127_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  reg [7:0] cfblk195_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  reg [7:0] cfblk147_out1;  // uint8
  wire [7:0] Mysubsystem_36_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk162_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  reg [8:0] cfblk98_div_temp;  // ufix9
  reg [8:0] cfblk98_t_0_0;  // ufix9
  reg [8:0] cfblk107_div_temp;  // ufix9
  reg [8:0] cfblk107_t_0_0;  // ufix9
  reg [8:0] cfblk138_div_temp;  // ufix9
  reg [8:0] cfblk138_t_0_0;  // ufix9
  reg [8:0] cfblk132_div_temp;  // ufix9
  reg [8:0] cfblk132_t_0_0;  // ufix9
  reg [8:0] cfblk35_div_temp;  // ufix9
  reg [8:0] cfblk35_t_0_0;  // ufix9
  reg [8:0] cfblk86_div_temp;  // ufix9
  reg [8:0] cfblk86_t_0_0;  // ufix9
  reg [8:0] cfblk124_div_temp;  // ufix9
  reg [8:0] cfblk124_t_0_0;  // ufix9
  reg [8:0] cfblk130_div_temp;  // ufix9
  reg [8:0] cfblk130_t_0_0;  // ufix9
  reg [8:0] cfblk36_div_temp;  // ufix9
  reg [8:0] cfblk36_t_0_0;  // ufix9
  reg [8:0] cfblk127_div_temp;  // ufix9
  reg [8:0] cfblk127_t_0_0;  // ufix9
  reg [8:0] cfblk88_div_temp;  // ufix9
  reg [8:0] cfblk88_t_0_0;  // ufix9
  reg [8:0] cfblk22_div_temp;  // ufix9
  reg [8:0] cfblk22_t_0_0;  // ufix9
  reg [8:0] cfblk147_div_temp;  // ufix9
  reg [8:0] cfblk147_t_0_0;  // ufix9
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk38_const_val_1 = 8'b00000000;



  assign cfblk101_const_val_1 = 8'b00000000;



  assign cfblk63_const_val_1 = 8'b00000000;



  cfblk157 u_cfblk157 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk157_out1)  // uint8
                       );

  assign dtc_out = cfblk157_out1;



  assign cfblk8_out1 = dtc_out;



  assign cfblk136_const_val_1 = 8'b00000000;



  assign cfblk129_const_val_1 = 8'b00000000;



  assign cfblk116_const_val_1 = 8'b00000000;



  assign cfblk156_out1 = 8'b00000001;



  assign cfblk50_const_val_1 = 8'b00000000;



  assign cfblk121_const_val_1 = 8'b00000000;



  assign cfblk128_const_val_1 = 8'b00000000;



  cfblk158 u_cfblk158 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk158_out1)  // uint16
                       );

  Mysubsystem_37 u_Mysubsystem_37 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .U(cfblk8_out1),  // uint8
                                   .Out1(Mysubsystem_37_out1)  // uint8
                                   );

  assign dtc_out_1 = cfblk146_out1;



  assign cfblk140_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk140_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk17_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk159_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  cfblk160 u_cfblk160 (.In1(cfblk18_out1),  // uint8
                       .Out1(cfblk160_out1)  // uint8
                       );

  assign cfblk139_1 = {16'b0, cfblk158_out1};
  assign cfblk139_2 = {24'b0, cfblk160_out1};
  assign cfblk139_sub_temp = cfblk139_1 - cfblk139_2;
  assign cfblk139_out1 = cfblk139_sub_temp[7:0];



  assign cfblk115_out1 = cfblk139_out1 - cfblk67_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk200_process
      if (reset == 1'b1) begin
        cfblk200_reg[0] <= 8'b00000000;
        cfblk200_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk200_reg[0] <= cfblk200_reg_next[0];
          cfblk200_reg[1] <= cfblk200_reg_next[1];
        end
      end
    end

  assign cfblk200_out1 = cfblk200_reg[1];
  assign cfblk200_reg_next[0] = cfblk136_out1;
  assign cfblk200_reg_next[1] = cfblk200_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk48_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk199_process
      if (reset == 1'b1) begin
        cfblk199_reg[0] <= 8'b00000000;
        cfblk199_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk199_reg[0] <= cfblk199_reg_next[0];
          cfblk199_reg[1] <= cfblk199_reg_next[1];
        end
      end
    end

  assign cfblk199_out1 = cfblk199_reg[1];
  assign cfblk199_reg_next[0] = cfblk53_out1;
  assign cfblk199_reg_next[1] = cfblk199_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk194_process
      if (reset == 1'b1) begin
        cfblk194_reg[0] <= 8'b00000000;
        cfblk194_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk194_reg[0] <= cfblk194_reg_next[0];
          cfblk194_reg[1] <= cfblk194_reg_next[1];
        end
      end
    end

  assign cfblk194_out1 = cfblk194_reg[1];
  assign cfblk194_reg_next[0] = cfblk69_out1;
  assign cfblk194_reg_next[1] = cfblk194_reg[0];



  assign cfblk79_out1 = cfblk194_out1 + cfblk84_out1;



  assign cfblk17_out1 = cfblk79_out1 + cfblk199_out1;



  always @(cfblk136_out1, cfblk141_out1) begin
    cfblk98_div_temp = 9'b000000000;
    cfblk98_t_0_0 = 9'b000000000;
    if (cfblk141_out1 == 8'b00000000) begin
      cfblk98_out1 = 8'b11111111;
    end
    else begin
      cfblk98_t_0_0 = {1'b0, cfblk136_out1};
      cfblk98_div_temp = cfblk98_t_0_0 / cfblk141_out1;
      if (cfblk98_div_temp[8] != 1'b0) begin
        cfblk98_out1 = 8'b11111111;
      end
      else begin
        cfblk98_out1 = cfblk98_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk87_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk141_out1 = cfblk26_out1 + cfblk175_out1;



  assign cfblk128_out1 = cfblk141_out1 + cfblk128_const_val_1;



  assign cfblk106_out1 = cfblk128_out1 - cfblk105_out1;



  DotProduct_block1 u_cfblk114_inst (.in1(cfblk104_out1),  // uint8
                                     .in2(cfblk105_out1),  // uint8
                                     .out1(cfblk114_out1)  // uint8
                                     );

  always @(cfblk105_out1, cfblk38_out1) begin
    cfblk107_div_temp = 9'b000000000;
    cfblk107_t_0_0 = 9'b000000000;
    if (cfblk38_out1 == 8'b00000000) begin
      cfblk107_out1 = 8'b11111111;
    end
    else begin
      cfblk107_t_0_0 = {1'b0, cfblk105_out1};
      cfblk107_div_temp = cfblk107_t_0_0 / cfblk38_out1;
      if (cfblk107_div_temp[8] != 1'b0) begin
        cfblk107_out1 = 8'b11111111;
      end
      else begin
        cfblk107_out1 = cfblk107_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk107_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk116_out1 = cfblk68_out1 + cfblk116_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk116_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  assign cfblk129_out1 = cfblk18_out1 + cfblk129_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk129_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  DotProduct_block7 u_cfblk84_inst (.in1(cfblk186_out1),  // uint8
                                    .in2(cfblk191_out1),  // uint8
                                    .out1(cfblk84_out1)  // uint8
                                    );

  assign cfblk136_out1 = cfblk52_out1 + cfblk136_const_val_1;



  assign dtc_out_2 = cfblk136_out1;



  assign cfblk16_out1 = dtc_out_2;



  assign cfblk53_out1 = cfblk16_out1 - cfblk26_out1;



  DotProduct_block5 u_cfblk56_inst (.in1(cfblk53_out1),  // uint8
                                    .in2(cfblk89_out1),  // uint8
                                    .out1(cfblk56_out1)  // uint8
                                    );

  assign cfblk90_out1 = cfblk56_out1 + cfblk84_out1;



  DotProduct_block3 u_cfblk41_inst (.in1(cfblk10_out1),  // uint8
                                    .in2(cfblk144_out1),  // uint8
                                    .out1(cfblk41_out1)  // uint8
                                    );

  always @(cfblk132_out1, cfblk146_out1) begin
    cfblk138_div_temp = 9'b000000000;
    cfblk138_t_0_0 = 9'b000000000;
    if (cfblk132_out1 == 8'b00000000) begin
      cfblk138_out1 = 8'b11111111;
    end
    else begin
      cfblk138_t_0_0 = {1'b0, cfblk146_out1};
      cfblk138_div_temp = cfblk138_t_0_0 / cfblk132_out1;
      if (cfblk138_div_temp[8] != 1'b0) begin
        cfblk138_out1 = 8'b11111111;
      end
      else begin
        cfblk138_out1 = cfblk138_div_temp[7:0];
      end
    end
  end



  assign cfblk82_out1 = (cfblk138_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk133_out1 = cfblk82_out1 + cfblk41_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk133_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  always @(cfblk172_out1, cfblk90_out1) begin
    cfblk132_div_temp = 9'b000000000;
    cfblk132_t_0_0 = 9'b000000000;
    if (cfblk90_out1 == 8'b00000000) begin
      cfblk132_out1 = 8'b11111111;
    end
    else begin
      cfblk132_t_0_0 = {1'b0, cfblk172_out1};
      cfblk132_div_temp = cfblk132_t_0_0 / cfblk90_out1;
      if (cfblk132_div_temp[8] != 1'b0) begin
        cfblk132_out1 = 8'b11111111;
      end
      else begin
        cfblk132_out1 = cfblk132_div_temp[7:0];
      end
    end
  end



  assign cfblk131_out1 = cfblk132_out1 + cfblk156_out1;



  assign cfblk78_out1 = cfblk8_out1 + cfblk131_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk78_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  cfblk159 u_cfblk159 (.In1(cfblk99_out1),  // uint8
                       .Out1(cfblk159_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk159_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign dtc_out_3 = cfblk67_out1;



  assign cfblk37_out1 = dtc_out_3;



  assign cfblk101_out1 = cfblk37_out1 + cfblk101_const_val_1;



  assign cfblk142_out1 = (cfblk101_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk192_process
      if (reset == 1'b1) begin
        cfblk192_reg[0] <= 8'b00000000;
        cfblk192_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk192_reg[0] <= cfblk192_reg_next[0];
          cfblk192_reg[1] <= cfblk192_reg_next[1];
        end
      end
    end

  assign cfblk192_out1 = cfblk192_reg[1];
  assign cfblk192_reg_next[0] = cfblk142_out1;
  assign cfblk192_reg_next[1] = cfblk192_reg[0];



  always @(cfblk69_out1, cfblk9_out1) begin
    cfblk35_div_temp = 9'b000000000;
    cfblk35_t_0_0 = 9'b000000000;
    if (cfblk69_out1 == 8'b00000000) begin
      cfblk35_out1 = 8'b11111111;
    end
    else begin
      cfblk35_t_0_0 = {1'b0, cfblk9_out1};
      cfblk35_div_temp = cfblk35_t_0_0 / cfblk69_out1;
      if (cfblk35_div_temp[8] != 1'b0) begin
        cfblk35_out1 = 8'b11111111;
      end
      else begin
        cfblk35_out1 = cfblk35_div_temp[7:0];
      end
    end
  end



  assign cfblk89_out1 = cfblk35_out1 + cfblk87_out1;



  assign cfblk32_out1 = cfblk89_out1 - cfblk118_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk32_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk38_out1 = cfblk149_out1 + cfblk38_const_val_1;



  DotProduct_block10 u_cfblk97_inst (.in1(cfblk38_out1),  // uint8
                                     .in2(cfblk88_out1),  // uint8
                                     .out1(cfblk97_out1)  // uint8
                                     );

  assign dtc_out_4 = cfblk97_out1;



  assign cfblk76_out1 = dtc_out_4;



  assign cfblk68_out1 = cfblk121_out1 + cfblk19_out1;



  always @(cfblk22_out1, cfblk68_out1) begin
    cfblk86_div_temp = 9'b000000000;
    cfblk86_t_0_0 = 9'b000000000;
    if (cfblk22_out1 == 8'b00000000) begin
      cfblk86_out1 = 8'b11111111;
    end
    else begin
      cfblk86_t_0_0 = {1'b0, cfblk68_out1};
      cfblk86_div_temp = cfblk86_t_0_0 / cfblk22_out1;
      if (cfblk86_div_temp[8] != 1'b0) begin
        cfblk86_out1 = 8'b11111111;
      end
      else begin
        cfblk86_out1 = cfblk86_div_temp[7:0];
      end
    end
  end



  assign dtc_out_5 = cfblk86_out1;



  assign cfblk47_out1 = dtc_out_5;



  assign cfblk13_out1 = cfblk47_out1 + cfblk76_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk13_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk1_out1 = cfblk180_out1 & 8'b11111110;



  always @(cfblk176_out1, cfblk1_out1) begin
    cfblk124_div_temp = 9'b000000000;
    cfblk124_t_0_0 = 9'b000000000;
    if (cfblk176_out1 == 8'b00000000) begin
      cfblk124_out1 = 8'b11111111;
    end
    else begin
      cfblk124_t_0_0 = {1'b0, cfblk1_out1};
      cfblk124_div_temp = cfblk124_t_0_0 / cfblk176_out1;
      if (cfblk124_div_temp[8] != 1'b0) begin
        cfblk124_out1 = 8'b11111111;
      end
      else begin
        cfblk124_out1 = cfblk124_div_temp[7:0];
      end
    end
  end



  assign cfblk80_out1 = (cfblk124_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk93_out1 = (cfblk80_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block2 u_cfblk23_inst (.in1(cfblk93_out1),  // uint8
                                    .in2(cfblk192_out1),  // uint8
                                    .out1(cfblk23_out1)  // uint8
                                    );

  assign cfblk144_out1 = cfblk23_out1 + cfblk181_out1;



  assign dtc_out_6 = cfblk144_out1;



  assign cfblk33_out1 = dtc_out_6;



  assign cfblk63_out1 = cfblk33_out1 + cfblk63_const_val_1;



  cfblk161 u_cfblk161 (.In1(cfblk63_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  assign dtc_out_7 = cfblk161_out1;



  assign cfblk10_out1 = dtc_out_7;



  always @(cfblk10_out1, cfblk171_out1) begin
    cfblk130_div_temp = 9'b000000000;
    cfblk130_t_0_0 = 9'b000000000;
    if (cfblk171_out1 == 8'b00000000) begin
      cfblk130_out1 = 8'b11111111;
    end
    else begin
      cfblk130_t_0_0 = {1'b0, cfblk10_out1};
      cfblk130_div_temp = cfblk130_t_0_0 / cfblk171_out1;
      if (cfblk130_div_temp[8] != 1'b0) begin
        cfblk130_out1 = 8'b11111111;
      end
      else begin
        cfblk130_out1 = cfblk130_div_temp[7:0];
      end
    end
  end



  assign cfblk26_out1 = cfblk130_out1 + cfblk187_out1;



  assign cfblk52_out1 = cfblk26_out1 - cfblk114_out1;



  assign cfblk83_out1 = (cfblk52_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk34_out1, cfblk83_out1) begin
    cfblk36_div_temp = 9'b000000000;
    cfblk36_t_0_0 = 9'b000000000;
    if (cfblk34_out1 == 8'b00000000) begin
      cfblk36_out1 = 8'b11111111;
    end
    else begin
      cfblk36_t_0_0 = {1'b0, cfblk83_out1};
      cfblk36_div_temp = cfblk36_t_0_0 / cfblk34_out1;
      if (cfblk36_div_temp[8] != 1'b0) begin
        cfblk36_out1 = 8'b11111111;
      end
      else begin
        cfblk36_out1 = cfblk36_div_temp[7:0];
      end
    end
  end



  assign cfblk50_out1 = cfblk36_out1 + cfblk50_const_val_1;



  assign cfblk85_out1 = cfblk50_out1 + cfblk71_out1;



  assign cfblk121_out1 = cfblk85_out1 + cfblk121_const_val_1;



  assign cfblk67_out1 = cfblk121_out1 + cfblk130_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk193_process
      if (reset == 1'b1) begin
        cfblk193_reg[0] <= 8'b00000000;
        cfblk193_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk193_reg[0] <= cfblk193_reg_next[0];
          cfblk193_reg[1] <= cfblk193_reg_next[1];
        end
      end
    end

  assign cfblk193_out1 = cfblk193_reg[1];
  assign cfblk193_reg_next[0] = cfblk67_out1;
  assign cfblk193_reg_next[1] = cfblk193_reg[0];



  assign cfblk120_out1 = cfblk102_out1 + cfblk193_out1;



  assign cfblk9_out1 = cfblk120_out1 + cfblk157_out1;



  assign dtc_out_8 = cfblk73_out1;



  assign cfblk69_out1 = dtc_out_8;



  always @(cfblk69_out1, cfblk9_out1) begin
    cfblk127_div_temp = 9'b000000000;
    cfblk127_t_0_0 = 9'b000000000;
    if (cfblk9_out1 == 8'b00000000) begin
      cfblk127_out1 = 8'b11111111;
    end
    else begin
      cfblk127_t_0_0 = {1'b0, cfblk69_out1};
      cfblk127_div_temp = cfblk127_t_0_0 / cfblk9_out1;
      if (cfblk127_div_temp[8] != 1'b0) begin
        cfblk127_out1 = 8'b11111111;
      end
      else begin
        cfblk127_out1 = cfblk127_div_temp[7:0];
      end
    end
  end



  DotProduct_block8 u_cfblk87_inst (.in1(cfblk127_out1),  // uint8
                                    .in2(cfblk106_out1),  // uint8
                                    .out1(cfblk87_out1)  // uint8
                                    );

  assign dtc_out_9 = cfblk87_out1;



  assign cfblk19_out1 = dtc_out_9;



  assign cfblk125_out1 = cfblk19_out1 - cfblk98_out1;



  DotProduct_block6 u_cfblk71_inst (.in1(cfblk125_out1),  // uint8
                                    .in2(cfblk34_out1),  // uint8
                                    .out1(cfblk71_out1)  // uint8
                                    );

  DotProduct_block4 u_cfblk48_inst (.in1(cfblk71_out1),  // uint8
                                    .in2(cfblk156_out1),  // uint8
                                    .out1(cfblk48_out1)  // uint8
                                    );

  always @(cfblk104_out1, cfblk48_out1) begin
    cfblk88_div_temp = 9'b000000000;
    cfblk88_t_0_0 = 9'b000000000;
    if (cfblk104_out1 == 8'b00000000) begin
      cfblk88_out1 = 8'b11111111;
    end
    else begin
      cfblk88_t_0_0 = {1'b0, cfblk48_out1};
      cfblk88_div_temp = cfblk88_t_0_0 / cfblk104_out1;
      if (cfblk88_div_temp[8] != 1'b0) begin
        cfblk88_out1 = 8'b11111111;
      end
      else begin
        cfblk88_out1 = cfblk88_div_temp[7:0];
      end
    end
  end



  assign cfblk149_out1 = (cfblk118_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk149_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  assign dtc_out_10 = cfblk18_out1;



  assign cfblk99_out1 = dtc_out_10;



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk99_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign cfblk14_out1 = (cfblk31_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk148_out1 = cfblk14_out1 + cfblk183_out1;



  assign cfblk104_out1 = cfblk148_out1 + cfblk188_out1;



  assign cfblk103_out1 = cfblk104_out1 - cfblk88_out1;



  DotProduct_block9 u_cfblk91_inst (.in1(cfblk103_out1),  // uint8
                                    .in2(cfblk47_out1),  // uint8
                                    .out1(cfblk91_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        cfblk189_reg[0] <= 8'b00000000;
        cfblk189_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk189_reg[0] <= cfblk189_reg_next[0];
          cfblk189_reg[1] <= cfblk189_reg_next[1];
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk91_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  assign cfblk73_out1 = cfblk189_out1 + cfblk104_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk195_process
      if (reset == 1'b1) begin
        cfblk195_reg[0] <= 8'b00000000;
        cfblk195_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk195_reg[0] <= cfblk195_reg_next[0];
          cfblk195_reg[1] <= cfblk195_reg_next[1];
        end
      end
    end

  assign cfblk195_out1 = cfblk195_reg[1];
  assign cfblk195_reg_next[0] = cfblk73_out1;
  assign cfblk195_reg_next[1] = cfblk195_reg[0];



  assign cfblk146_out1 = cfblk195_out1 + cfblk17_out1;



  assign cfblk21_out1 = cfblk146_out1 - cfblk190_out1;



  assign cfblk31_out1 = cfblk21_out1 + cfblk200_out1;



  assign cfblk7_out1 = cfblk31_out1 + cfblk115_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk7_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  always @(cfblk185_out1, cfblk71_out1) begin
    cfblk22_div_temp = 9'b000000000;
    cfblk22_t_0_0 = 9'b000000000;
    if (cfblk71_out1 == 8'b00000000) begin
      cfblk22_out1 = 8'b11111111;
    end
    else begin
      cfblk22_t_0_0 = {1'b0, cfblk185_out1};
      cfblk22_div_temp = cfblk22_t_0_0 / cfblk71_out1;
      if (cfblk22_div_temp[8] != 1'b0) begin
        cfblk22_out1 = 8'b11111111;
      end
      else begin
        cfblk22_out1 = cfblk22_div_temp[7:0];
      end
    end
  end



  assign dtc_out_11 = cfblk22_out1;



  assign cfblk118_out1 = dtc_out_11;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk118_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  always @(cfblk112_out1, cfblk178_out1) begin
    cfblk147_div_temp = 9'b000000000;
    cfblk147_t_0_0 = 9'b000000000;
    if (cfblk112_out1 == 8'b00000000) begin
      cfblk147_out1 = 8'b11111111;
    end
    else begin
      cfblk147_t_0_0 = {1'b0, cfblk178_out1};
      cfblk147_div_temp = cfblk147_t_0_0 / cfblk112_out1;
      if (cfblk147_div_temp[8] != 1'b0) begin
        cfblk147_out1 = 8'b11111111;
      end
      else begin
        cfblk147_out1 = cfblk147_div_temp[7:0];
      end
    end
  end



  DotProduct_block u_cfblk102_inst (.in1(cfblk147_out1),  // uint8
                                    .in2(cfblk182_out1),  // uint8
                                    .out1(cfblk102_out1)  // uint8
                                    );

  Mysubsystem_36 u_Mysubsystem_36 (.In1(cfblk102_out1),  // uint8
                                   .In2(Mysubsystem_37_out1),  // uint8
                                   .Out1(Mysubsystem_36_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = Mysubsystem_36_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk105_out1 = cfblk170_out1 + cfblk173_out1;



  assign cfblk112_out1 = cfblk105_out1 + cfblk174_out1;



  assign dtc_out_12 = cfblk112_out1;



  assign cfblk34_out1 = dtc_out_12;



  always @(cfblk13_out1, cfblk34_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk13_out1 == 8'b00000000) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk34_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk13_out1;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  assign cfblk154 = cfblk18_out1;

  cfblk162 u_cfblk162 (.In1(cfblk115_out1),  // uint8
                       .Out1(cfblk162_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk162_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  assign Hdl_out = cfblk184_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

