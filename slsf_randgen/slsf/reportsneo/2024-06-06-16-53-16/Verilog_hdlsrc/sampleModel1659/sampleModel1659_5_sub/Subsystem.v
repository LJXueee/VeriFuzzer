// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1659\sampleModel1659_5_sub\Subsystem.v
// Created: 2024-08-13 10:23:42
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1659_5_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] bitMask_for_cfblk3;  // uint8
  wire [7:0] cfblk42_const_val_1;  // uint8
  wire [15:0] cfblk148_out1;  // uint16
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk84_const_val_1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk68_const_val_1;  // uint8
  wire [7:0] cfblk99_const_val_1;  // uint8
  wire [7:0] cfblk23_const_val_1;  // uint8
  wire [7:0] Mysubsystem_10_out1;  // uint8
  wire [7:0] cfblk9_const_val_1;  // uint8
  wire [7:0] cfblk65_const_val_1;  // uint8
  wire [7:0] cfblk91_const_val_1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  reg [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire cfblk123_out1_is_not0;
  wire cfblk89_out1_is_not0;
  wire cfblk4_out1;
  wire [7:0] cfblk124_out1;  // uint8
  wire signed [31:0] cfblk51_sub_temp;  // sfix32
  wire signed [31:0] cfblk51_1;  // sfix32
  wire signed [31:0] cfblk51_2;  // sfix32
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk181_out1;  // uint8
  reg [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  reg [7:0] cfblk115_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] dtc_out_7;  // ufix8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  reg [8:0] cfblk55_div_temp;  // ufix9
  reg [8:0] cfblk55_t_0_0;  // ufix9
  reg [8:0] cfblk29_div_temp;  // ufix9
  reg [8:0] cfblk29_t_0_0;  // ufix9
  reg [8:0] cfblk139_div_temp;  // ufix9
  reg [8:0] cfblk139_t_0_0;  // ufix9
  reg [8:0] cfblk25_div_temp;  // ufix9
  reg [8:0] cfblk25_t_0_0;  // ufix9
  reg [8:0] cfblk141_div_temp;  // ufix9
  reg [8:0] cfblk141_t_0_0;  // ufix9
  reg [8:0] cfblk144_div_temp;  // ufix9
  reg [8:0] cfblk144_t_0_0;  // ufix9
  reg [8:0] cfblk19_div_temp;  // ufix9
  reg [8:0] cfblk19_t_0_0;  // ufix9
  reg [8:0] cfblk136_div_temp;  // ufix9
  reg [8:0] cfblk136_t_0_0;  // ufix9
  reg [8:0] cfblk129_div_temp;  // ufix9
  reg [8:0] cfblk129_t_0_0;  // ufix9
  reg [8:0] cfblk117_div_temp;  // ufix9
  reg [8:0] cfblk117_t_0_0;  // ufix9
  reg [8:0] cfblk115_div_temp;  // ufix9
  reg [8:0] cfblk115_t_0_0;  // ufix9


  cfblk149 u_cfblk149 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk149_out1)  // uint8
                       );

  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk138_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk138_out1 = (cfblk187_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk45_out1 = cfblk149_out1 - cfblk138_out1;



  assign dtc_out = cfblk45_out1;



  assign cfblk111_out1 = dtc_out;



  assign dtc_out_1 = cfblk111_out1;



  assign cfblk92_out1 = dtc_out_1;



  assign cfblk46_out1 = (cfblk92_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block2 u_cfblk75_inst (.in1(cfblk46_out1),  // uint8
                                    .in2(cfblk187_out1),  // uint8
                                    .out1(cfblk75_out1)  // uint8
                                    );

  assign cfblk147_out1 = 8'b00000001;



  assign bitMask_for_cfblk3 = 8'b11011001;



  assign cfblk42_const_val_1 = 8'b00000000;



  cfblk148 u_cfblk148 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk148_out1)  // uint16
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk148_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk84_const_val_1 = 8'b00000000;



  assign cfblk18_out1 = cfblk149_out1 + cfblk75_out1;



  assign cfblk44_out1 = cfblk45_out1 + cfblk45_out1;



  assign cfblk69_out1 = cfblk18_out1 - cfblk44_out1;



  assign cfblk68_const_val_1 = 8'b00000000;



  assign cfblk99_const_val_1 = 8'b00000000;



  assign cfblk23_const_val_1 = 8'b00000000;



  Mysubsystem_10 u_Mysubsystem_10 (.Out1(Mysubsystem_10_out1)  // uint8
                                   );

  assign cfblk9_const_val_1 = 8'b00000000;



  assign cfblk65_const_val_1 = 8'b00000000;



  assign cfblk91_const_val_1 = 8'b00000000;



  DotProduct_block5 u_cfblk96_inst (.in1(cfblk126_out1),  // uint8
                                    .in2(cfblk80_out1),  // uint8
                                    .out1(cfblk96_out1)  // uint8
                                    );

  assign cfblk20_out1 = (cfblk96_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk105_out1 = cfblk129_out1 - cfblk20_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk105_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk91_out1 = cfblk134_out1 + cfblk91_const_val_1;



  DotProduct u_cfblk102_inst (.in1(cfblk42_out1),  // uint8
                              .in2(cfblk108_out1),  // uint8
                              .out1(cfblk102_out1)  // uint8
                              );

  assign cfblk65_out1 = cfblk55_out1 + cfblk65_const_val_1;



  assign cfblk140_out1 = cfblk65_out1 + cfblk102_out1;



  assign dtc_out_2 = cfblk154_out1;



  assign cfblk31_out1 = dtc_out_2;



  assign dtc_out_3 = cfblk31_out1;



  assign cfblk61_out1 = dtc_out_3;



  assign cfblk68_out1 = cfblk61_out1 + cfblk68_const_val_1;



  assign cfblk99_out1 = cfblk68_out1 + cfblk99_const_val_1;



  assign cfblk37_out1 = cfblk99_out1 - cfblk1_out1;



  assign cfblk9_out1 = cfblk37_out1 + cfblk9_const_val_1;



  assign cfblk10_out1 = Mysubsystem_10_out1 + cfblk9_out1;



  cfblk5 u_cfblk5 (.u(cfblk10_out1),  // uint8
                   .y(cfblk5_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk152_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk63_out1 = cfblk42_out1 + cfblk171_out1;



  DotProduct_block u_cfblk108_inst (.in1(cfblk69_out1),  // uint8
                                    .in2(cfblk117_out1),  // uint8
                                    .out1(cfblk108_out1)  // uint8
                                    );

  always @(cfblk108_out1, cfblk149_out1) begin
    cfblk55_div_temp = 9'b000000000;
    cfblk55_t_0_0 = 9'b000000000;
    if (cfblk149_out1 == 8'b00000000) begin
      cfblk55_out1 = 8'b11111111;
    end
    else begin
      cfblk55_t_0_0 = {1'b0, cfblk108_out1};
      cfblk55_div_temp = cfblk55_t_0_0 / cfblk149_out1;
      if (cfblk55_div_temp[8] != 1'b0) begin
        cfblk55_out1 = 8'b11111111;
      end
      else begin
        cfblk55_out1 = cfblk55_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk55_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk117_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk86_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk47_out1 = cfblk121_out1 + cfblk88_out1;



  assign cfblk17_out1 = cfblk126_out1 - cfblk84_out1;



  assign cfblk119_out1 = cfblk17_out1 - cfblk47_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk119_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk175_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk125_out1 = cfblk45_out1 + cfblk1_out1;



  always @(cfblk125_out1, cfblk163_out1) begin
    cfblk29_div_temp = 9'b000000000;
    cfblk29_t_0_0 = 9'b000000000;
    if (cfblk163_out1 == 8'b00000000) begin
      cfblk29_out1 = 8'b11111111;
    end
    else begin
      cfblk29_t_0_0 = {1'b0, cfblk125_out1};
      cfblk29_div_temp = cfblk29_t_0_0 / cfblk163_out1;
      if (cfblk29_div_temp[8] != 1'b0) begin
        cfblk29_out1 = 8'b11111111;
      end
      else begin
        cfblk29_out1 = cfblk29_div_temp[7:0];
      end
    end
  end



  assign cfblk110_out1 = cfblk29_out1 - cfblk185_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk42_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  assign cfblk123_out1_is_not0 = cfblk93_out1 != 8'b00000000;



  assign cfblk89_out1_is_not0 = cfblk126_out1 != 8'b00000000;



  assign cfblk4_out1 = cfblk89_out1_is_not0 & cfblk123_out1_is_not0;



  assign cfblk51_1 = {24'b0, cfblk124_out1};
  assign cfblk51_2 = {31'b0, cfblk4_out1};
  assign cfblk51_sub_temp = cfblk51_1 - cfblk51_2;
  assign cfblk51_out1 = cfblk51_sub_temp[7:0];



  always @(cfblk129_out1, cfblk138_out1) begin
    cfblk139_div_temp = 9'b000000000;
    cfblk139_t_0_0 = 9'b000000000;
    if (cfblk138_out1 == 8'b00000000) begin
      cfblk139_out1 = 8'b11111111;
    end
    else begin
      cfblk139_t_0_0 = {1'b0, cfblk129_out1};
      cfblk139_div_temp = cfblk139_t_0_0 / cfblk138_out1;
      if (cfblk139_div_temp[8] != 1'b0) begin
        cfblk139_out1 = 8'b11111111;
      end
      else begin
        cfblk139_out1 = cfblk139_div_temp[7:0];
      end
    end
  end



  cfblk152 u_cfblk152 (.In1(cfblk139_out1),  // uint8
                       .Out1(cfblk152_out1)  // uint8
                       );

  assign cfblk113_out1 = cfblk152_out1 + cfblk51_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk113_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk56_out1 = cfblk87_out1 + cfblk117_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk56_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk3_out1 = cfblk66_out1 & bitMask_for_cfblk3;



  assign cfblk42_out1 = cfblk3_out1 + cfblk42_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk42_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk59_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  always @(cfblk164_out1, cfblk27_out1) begin
    cfblk25_div_temp = 9'b000000000;
    cfblk25_t_0_0 = 9'b000000000;
    if (cfblk164_out1 == 8'b00000000) begin
      cfblk25_out1 = 8'b11111111;
    end
    else begin
      cfblk25_t_0_0 = {1'b0, cfblk27_out1};
      cfblk25_div_temp = cfblk25_t_0_0 / cfblk164_out1;
      if (cfblk25_div_temp[8] != 1'b0) begin
        cfblk25_out1 = 8'b11111111;
      end
      else begin
        cfblk25_out1 = cfblk25_div_temp[7:0];
      end
    end
  end



  assign cfblk32_out1 = (cfblk25_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk114_out1 = cfblk32_out1 + cfblk183_out1;



  assign dtc_out_4 = cfblk114_out1;



  assign cfblk58_out1 = dtc_out_4;



  always @(cfblk166_out1, cfblk58_out1) begin
    cfblk141_div_temp = 9'b000000000;
    cfblk141_t_0_0 = 9'b000000000;
    if (cfblk166_out1 == 8'b00000000) begin
      cfblk141_out1 = 8'b11111111;
    end
    else begin
      cfblk141_t_0_0 = {1'b0, cfblk58_out1};
      cfblk141_div_temp = cfblk141_t_0_0 / cfblk166_out1;
      if (cfblk141_div_temp[8] != 1'b0) begin
        cfblk141_out1 = 8'b11111111;
      end
      else begin
        cfblk141_out1 = cfblk141_div_temp[7:0];
      end
    end
  end



  assign cfblk86_out1 = cfblk141_out1 - cfblk165_out1;



  cfblk154 u_cfblk154 (.In1(cfblk86_out1),  // uint8
                       .Out1(cfblk154_out1)  // uint8
                       );

  assign cfblk59_out1 = cfblk154_out1 + cfblk168_out1;



  always @(cfblk181_out1, cfblk59_out1) begin
    cfblk144_div_temp = 9'b000000000;
    cfblk144_t_0_0 = 9'b000000000;
    if (cfblk59_out1 == 8'b00000000) begin
      cfblk144_out1 = 8'b11111111;
    end
    else begin
      cfblk144_t_0_0 = {1'b0, cfblk181_out1};
      cfblk144_div_temp = cfblk144_t_0_0 / cfblk59_out1;
      if (cfblk144_div_temp[8] != 1'b0) begin
        cfblk144_out1 = 8'b11111111;
      end
      else begin
        cfblk144_out1 = cfblk144_div_temp[7:0];
      end
    end
  end



  assign cfblk30_out1 = cfblk144_out1 + cfblk144_out1;



  assign cfblk130_out1 = cfblk30_out1 + cfblk184_out1;



  always @(cfblk110_out1, cfblk130_out1) begin
    cfblk19_div_temp = 9'b000000000;
    cfblk19_t_0_0 = 9'b000000000;
    if (cfblk110_out1 == 8'b00000000) begin
      cfblk19_out1 = 8'b11111111;
    end
    else begin
      cfblk19_t_0_0 = {1'b0, cfblk130_out1};
      cfblk19_div_temp = cfblk19_t_0_0 / cfblk110_out1;
      if (cfblk19_div_temp[8] != 1'b0) begin
        cfblk19_out1 = 8'b11111111;
      end
      else begin
        cfblk19_out1 = cfblk19_div_temp[7:0];
      end
    end
  end



  assign cfblk84_out1 = cfblk19_out1 + cfblk84_const_val_1;



  assign cfblk87_out1 = cfblk84_out1 - cfblk30_out1;



  always @(cfblk179_out1, cfblk87_out1) begin
    cfblk136_div_temp = 9'b000000000;
    cfblk136_t_0_0 = 9'b000000000;
    if (cfblk179_out1 == 8'b00000000) begin
      cfblk136_out1 = 8'b11111111;
    end
    else begin
      cfblk136_t_0_0 = {1'b0, cfblk87_out1};
      cfblk136_div_temp = cfblk136_t_0_0 / cfblk179_out1;
      if (cfblk136_div_temp[8] != 1'b0) begin
        cfblk136_out1 = 8'b11111111;
      end
      else begin
        cfblk136_out1 = cfblk136_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk129_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk48_out1 = cfblk170_out1 - cfblk136_out1;



  assign cfblk93_out1 = (cfblk48_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk127_out1 = cfblk93_out1 + cfblk18_out1;



  cfblk6 u_cfblk6 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk127_out1),  // uint8
                   .Y(cfblk6_out1)  // uint8
                   );

  cfblk2 u_cfblk2 (.u(cfblk6_out1),  // uint8
                   .y(cfblk2_out1)  // uint8
                   );

  assign cfblk35_out1 = cfblk2_out1 + cfblk149_out1;



  DotProduct_block4 u_cfblk88_inst (.in1(cfblk147_out1),  // uint8
                                    .in2(cfblk35_out1),  // uint8
                                    .out1(cfblk88_out1)  // uint8
                                    );

  assign cfblk85_out1 = cfblk88_out1 - cfblk32_out1;



  assign cfblk81_out1 = cfblk85_out1 + cfblk63_out1;



  cfblk153 u_cfblk153 (.In1(cfblk81_out1),  // uint8
                       .Out1(cfblk153_out1)  // uint8
                       );

  assign cfblk23_out1 = cfblk153_out1 + cfblk23_const_val_1;



  assign dtc_out_5 = cfblk23_out1;



  assign cfblk132_out1 = dtc_out_5;



  assign cfblk121_out1 = cfblk132_out1 + cfblk5_out1;



  always @(cfblk121_out1, cfblk140_out1) begin
    cfblk129_div_temp = 9'b000000000;
    cfblk129_t_0_0 = 9'b000000000;
    if (cfblk140_out1 == 8'b00000000) begin
      cfblk129_out1 = 8'b11111111;
    end
    else begin
      cfblk129_t_0_0 = {1'b0, cfblk121_out1};
      cfblk129_div_temp = cfblk129_t_0_0 / cfblk140_out1;
      if (cfblk129_div_temp[8] != 1'b0) begin
        cfblk129_out1 = 8'b11111111;
      end
      else begin
        cfblk129_out1 = cfblk129_div_temp[7:0];
      end
    end
  end



  assign cfblk118_out1 = cfblk129_out1 - cfblk91_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk118_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk27_out1 = cfblk169_out1 + cfblk110_out1;



  assign cfblk124_out1 = cfblk27_out1 + cfblk42_out1;



  always @(cfblk124_out1, cfblk187_out1) begin
    cfblk117_div_temp = 9'b000000000;
    cfblk117_t_0_0 = 9'b000000000;
    if (cfblk124_out1 == 8'b00000000) begin
      cfblk117_out1 = 8'b11111111;
    end
    else begin
      cfblk117_t_0_0 = {1'b0, cfblk187_out1};
      cfblk117_div_temp = cfblk117_t_0_0 / cfblk124_out1;
      if (cfblk117_div_temp[8] != 1'b0) begin
        cfblk117_out1 = 8'b11111111;
      end
      else begin
        cfblk117_out1 = cfblk117_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk117_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  always @(cfblk148_out1, cfblk186_out1) begin
    cfblk115_div_temp = 9'b000000000;
    cfblk115_t_0_0 = 9'b000000000;
    if (cfblk148_out1 == 8'b00000000) begin
      cfblk115_out1 = 8'b11111111;
    end
    else begin
      cfblk115_t_0_0 = {1'b0, cfblk186_out1};
      cfblk115_div_temp = cfblk115_t_0_0 / cfblk148_out1;
      if (cfblk115_div_temp[8] != 1'b0) begin
        cfblk115_out1 = 8'b11111111;
      end
      else begin
        cfblk115_out1 = cfblk115_div_temp[7:0];
      end
    end
  end



  DotProduct_block1 u_cfblk126_inst (.in1(cfblk115_out1),  // uint8
                                     .in2(cfblk174_out1),  // uint8
                                     .out1(cfblk126_out1)  // uint8
                                     );

  assign dtc_out_6 = cfblk126_out1;



  assign cfblk66_out1 = dtc_out_6;



  assign dtc_out_7 = cfblk66_out1;



  assign cfblk134_out1 = dtc_out_7;



  DotProduct_block3 u_cfblk80_inst (.in1(cfblk75_out1),  // uint8
                                    .in2(cfblk134_out1),  // uint8
                                    .out1(cfblk80_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk80_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign Hdl_out = cfblk181_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

