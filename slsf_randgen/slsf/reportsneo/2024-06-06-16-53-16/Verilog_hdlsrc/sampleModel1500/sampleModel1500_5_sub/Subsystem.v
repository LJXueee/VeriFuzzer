// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1500\sampleModel1500_5_sub\Subsystem.v
// Created: 2024-07-01 03:24:27
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk142                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1500_5_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk142,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk142;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk112_const_val_1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk81_const_val_1;  // uint8
  wire [7:0] cfblk36_const_val_1;  // uint8
  wire [7:0] cfblk114_const_val_1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk91_const_val_1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  reg [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk35_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  reg [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk26_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  reg [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk12_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  reg [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [15:0] cfblk4_out1;  // uint16
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk29_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] Mysubsystem_26_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  reg [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  reg [8:0] cfblk19_div_temp;  // ufix9
  reg [8:0] cfblk19_t_0_0;  // ufix9
  reg [8:0] cfblk50_div_temp;  // ufix9
  reg [8:0] cfblk50_t_0_0;  // ufix9
  reg [8:0] cfblk85_div_temp;  // ufix9
  reg [8:0] cfblk85_t_0_0;  // ufix9
  reg [8:0] cfblk82_div_temp;  // ufix9
  reg [8:0] cfblk82_t_0_0;  // ufix9
  reg [8:0] cfblk26_div_temp;  // ufix9
  reg [8:0] cfblk26_t_0_0;  // ufix9
  reg [8:0] cfblk35_div_temp;  // ufix9
  reg [8:0] cfblk35_t_0_0;  // ufix9
  reg [8:0] cfblk103_div_temp;  // ufix9
  reg [8:0] cfblk103_t_0_0;  // ufix9
  reg [8:0] cfblk88_div_temp;  // ufix9
  reg [8:0] cfblk88_t_0_0;  // ufix9
  reg [8:0] cfblk29_div_temp;  // ufix9
  reg [8:0] cfblk29_t_0_0;  // ufix9
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9
  reg [8:0] cfblk27_div_temp;  // ufix9
  reg [8:0] cfblk27_t_0_0;  // ufix9


  assign cfblk146_out1 = 8'b00000000;



  cfblk9 u_cfblk9 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk146_out1),  // uint8
                   .Y(cfblk9_out1)  // uint8
                   );

  cfblk7 u_cfblk7 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk9_out1),  // uint8
                   .Y(cfblk7_out1)  // uint8
                   );

  assign cfblk144_out1 = 8'b00000001;



  assign enb = clk_enable;

  assign cfblk112_const_val_1 = 8'b00000000;



  assign cfblk145_out1 = 8'b00000001;



  assign cfblk81_const_val_1 = 8'b00000000;



  assign cfblk36_const_val_1 = 8'b00000000;



  assign cfblk114_const_val_1 = 8'b00000000;



  assign dtc_out = cfblk7_out1;



  assign cfblk28_out1 = dtc_out;



  assign cfblk91_const_val_1 = 8'b00000000;



  cfblk148 u_cfblk148 (.In1(cfblk135_out1),  // uint8
                       .Out1(cfblk148_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk103_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  DotProduct_block4 u_cfblk42_inst (.in1(cfblk155_out1),  // uint8
                                    .in2(cfblk148_out1),  // uint8
                                    .out1(cfblk42_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk74_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  DotProduct u_cfblk105_inst (.in1(cfblk160_out1),  // uint8
                              .in2(cfblk68_out1),  // uint8
                              .out1(cfblk105_out1)  // uint8
                              );

  assign cfblk113_out1 = (cfblk14_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk35_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk138_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk59_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  DotProduct_block8 u_cfblk71_inst (.in1(cfblk156_out1),  // uint8
                                    .in2(cfblk65_out1),  // uint8
                                    .out1(cfblk71_out1)  // uint8
                                    );

  assign cfblk59_out1 = cfblk71_out1 + cfblk158_out1;



  always @(cfblk167_out1, cfblk59_out1) begin
    cfblk19_div_temp = 9'b000000000;
    cfblk19_t_0_0 = 9'b000000000;
    if (cfblk167_out1 == 8'b00000000) begin
      cfblk19_out1 = 8'b11111111;
    end
    else begin
      cfblk19_t_0_0 = {1'b0, cfblk59_out1};
      cfblk19_div_temp = cfblk19_t_0_0 / cfblk167_out1;
      if (cfblk19_div_temp[8] != 1'b0) begin
        cfblk19_out1 = 8'b11111111;
      end
      else begin
        cfblk19_out1 = cfblk19_div_temp[7:0];
      end
    end
  end



  cfblk151 u_cfblk151 (.In1(cfblk19_out1),  // uint8
                       .Out1(cfblk151_out1)  // uint8
                       );

  assign cfblk126_out1 = cfblk151_out1 + cfblk113_out1;



  assign cfblk23_out1 = (cfblk126_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk76_out1 = cfblk23_out1 - cfblk97_out1;



  assign cfblk38_out1 = cfblk76_out1 + cfblk105_out1;



  assign cfblk6_out1 = cfblk38_out1 | 8'b00000001;



  always @(cfblk81_out1, cfblk85_out1) begin
    cfblk50_div_temp = 9'b000000000;
    cfblk50_t_0_0 = 9'b000000000;
    if (cfblk85_out1 == 8'b00000000) begin
      cfblk50_out1 = 8'b11111111;
    end
    else begin
      cfblk50_t_0_0 = {1'b0, cfblk81_out1};
      cfblk50_div_temp = cfblk50_t_0_0 / cfblk85_out1;
      if (cfblk50_div_temp[8] != 1'b0) begin
        cfblk50_out1 = 8'b11111111;
      end
      else begin
        cfblk50_out1 = cfblk50_div_temp[7:0];
      end
    end
  end



  cfblk150 u_cfblk150 (.In1(cfblk50_out1),  // uint8
                       .Out1(cfblk150_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk150_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk31_out1 = cfblk28_out1 - cfblk110_out1;



  assign cfblk48_out1 = (cfblk31_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk63_out1 = cfblk127_out1 + cfblk48_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk74_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk1_out1 = cfblk159_out1 & 8'b11111110;



  assign cfblk114_out1 = cfblk96_out1 + cfblk114_const_val_1;



  assign cfblk128_out1 = cfblk100_out1 + cfblk114_out1;



  cfblk8 u_cfblk8 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk128_out1),  // uint8
                   .Y(cfblk8_out1)  // uint8
                   );

  assign cfblk122_out1 = cfblk8_out1 + cfblk20_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk18_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  DotProduct_block5 u_cfblk44_inst (.in1(cfblk116_out1),  // uint8
                                    .in2(cfblk175_out1),  // uint8
                                    .out1(cfblk44_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk26_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk36_out1 = cfblk82_out1 + cfblk36_const_val_1;



  assign cfblk43_out1 = (cfblk36_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk81_out1 = cfblk45_out1 + cfblk81_const_val_1;



  assign cfblk15_out1 = (cfblk81_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk15_out1, cfblk82_out1) begin
    cfblk85_div_temp = 9'b000000000;
    cfblk85_t_0_0 = 9'b000000000;
    if (cfblk82_out1 == 8'b00000000) begin
      cfblk85_out1 = 8'b11111111;
    end
    else begin
      cfblk85_t_0_0 = {1'b0, cfblk15_out1};
      cfblk85_div_temp = cfblk85_t_0_0 / cfblk82_out1;
      if (cfblk85_div_temp[8] != 1'b0) begin
        cfblk85_out1 = 8'b11111111;
      end
      else begin
        cfblk85_out1 = cfblk85_div_temp[7:0];
      end
    end
  end



  assign cfblk34_out1 = (cfblk85_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block7 u_cfblk62_inst (.in1(cfblk145_out1),  // uint8
                                    .in2(cfblk34_out1),  // uint8
                                    .out1(cfblk62_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk62_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk102_out1 = cfblk173_out1 + cfblk43_out1;



  assign cfblk97_out1 = cfblk102_out1 + cfblk100_out1;



  assign dtc_out_1 = cfblk97_out1;



  assign cfblk127_out1 = dtc_out_1;



  assign cfblk40_out1 = cfblk135_out1 + cfblk127_out1;



  assign cfblk104_out1 = cfblk40_out1 + cfblk66_out1;



  DotProduct_block6 u_cfblk57_inst (.in1(cfblk82_out1),  // uint8
                                    .in2(cfblk104_out1),  // uint8
                                    .out1(cfblk57_out1)  // uint8
                                    );

  assign cfblk138_out1 = cfblk74_out1 + cfblk57_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk138_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk116_out1 = cfblk157_out1 + cfblk100_out1;



  assign dtc_out_2 = cfblk116_out1;



  assign cfblk139_out1 = dtc_out_2;



  cfblk149 u_cfblk149 (.In1(cfblk66_out1),  // uint8
                       .Out1(cfblk149_out1)  // uint8
                       );

  assign cfblk106_out1 = cfblk89_out1 - cfblk149_out1;



  assign cfblk13_out1 = cfblk106_out1 + cfblk18_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk13_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk108_out1 = cfblk96_out1 - cfblk18_out1;



  assign dtc_out_3 = cfblk108_out1;



  assign cfblk45_out1 = dtc_out_3;



  DotProduct_block9 u_cfblk72_inst (.in1(cfblk45_out1),  // uint8
                                    .in2(cfblk161_out1),  // uint8
                                    .out1(cfblk72_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk72_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk137_out1 = cfblk35_out1 + cfblk69_out1;



  assign dtc_out_4 = cfblk137_out1;



  assign cfblk73_out1 = dtc_out_4;



  cfblk147 u_cfblk147 (.In1(cfblk73_out1),  // uint8
                       .Out1(cfblk147_out1)  // uint8
                       );

  assign cfblk112_out1 = cfblk147_out1 + cfblk112_const_val_1;



  assign dtc_out_5 = cfblk112_out1;



  assign cfblk12_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk12_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk107_out1 = cfblk88_out1 + cfblk100_out1;



  assign cfblk92_out1 = (cfblk107_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk101_out1 = cfblk92_out1 + cfblk88_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk18_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk20_out1 = cfblk174_out1 - cfblk101_out1;



  assign cfblk64_out1 = cfblk20_out1 + cfblk100_out1;



  assign cfblk4_out1 = {cfblk64_out1, cfblk166_out1};



  assign cfblk189_out1 = cfblk4_out1[7:0];



  always @(cfblk169_out1, cfblk189_out1) begin
    cfblk82_div_temp = 9'b000000000;
    cfblk82_t_0_0 = 9'b000000000;
    if (cfblk169_out1 == 8'b00000000) begin
      cfblk82_out1 = 8'b11111111;
    end
    else begin
      cfblk82_t_0_0 = {1'b0, cfblk189_out1};
      cfblk82_div_temp = cfblk82_t_0_0 / cfblk169_out1;
      if (cfblk82_div_temp[8] != 1'b0) begin
        cfblk82_out1 = 8'b11111111;
      end
      else begin
        cfblk82_out1 = cfblk82_div_temp[7:0];
      end
    end
  end



  assign cfblk96_out1 = cfblk146_out1 + cfblk100_out1;



  assign cfblk46_out1 = cfblk96_out1 + cfblk82_out1;



  assign cfblk110_out1 = cfblk144_out1 + cfblk46_out1;



  assign cfblk74_out1 = cfblk84_out1 + cfblk110_out1;



  assign cfblk66_out1 = (cfblk74_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk66_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(cfblk161_out1, cfblk83_out1) begin
    cfblk26_div_temp = 9'b000000000;
    cfblk26_t_0_0 = 9'b000000000;
    if (cfblk83_out1 == 8'b00000000) begin
      cfblk26_out1 = 8'b11111111;
    end
    else begin
      cfblk26_t_0_0 = {1'b0, cfblk161_out1};
      cfblk26_div_temp = cfblk26_t_0_0 / cfblk83_out1;
      if (cfblk26_div_temp[8] != 1'b0) begin
        cfblk26_out1 = 8'b11111111;
      end
      else begin
        cfblk26_out1 = cfblk26_div_temp[7:0];
      end
    end
  end



  always @(cfblk162_out1, cfblk26_out1) begin
    cfblk35_div_temp = 9'b000000000;
    cfblk35_t_0_0 = 9'b000000000;
    if (cfblk162_out1 == 8'b00000000) begin
      cfblk35_out1 = 8'b11111111;
    end
    else begin
      cfblk35_t_0_0 = {1'b0, cfblk26_out1};
      cfblk35_div_temp = cfblk35_t_0_0 / cfblk162_out1;
      if (cfblk35_div_temp[8] != 1'b0) begin
        cfblk35_out1 = 8'b11111111;
      end
      else begin
        cfblk35_out1 = cfblk35_div_temp[7:0];
      end
    end
  end



  assign cfblk68_out1 = cfblk35_out1 - cfblk139_out1;



  assign cfblk39_out1 = (cfblk68_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk39_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  always @(cfblk165_out1, cfblk87_out1) begin
    cfblk103_div_temp = 9'b000000000;
    cfblk103_t_0_0 = 9'b000000000;
    if (cfblk165_out1 == 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk87_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk165_out1;
      if (cfblk103_div_temp[8] != 1'b0) begin
        cfblk103_out1 = 8'b11111111;
      end
      else begin
        cfblk103_out1 = cfblk103_div_temp[7:0];
      end
    end
  end



  always @(cfblk103_out1, cfblk168_out1) begin
    cfblk88_div_temp = 9'b000000000;
    cfblk88_t_0_0 = 9'b000000000;
    if (cfblk168_out1 == 8'b00000000) begin
      cfblk88_out1 = 8'b11111111;
    end
    else begin
      cfblk88_t_0_0 = {1'b0, cfblk103_out1};
      cfblk88_div_temp = cfblk88_t_0_0 / cfblk168_out1;
      if (cfblk88_div_temp[8] != 1'b0) begin
        cfblk88_out1 = 8'b11111111;
      end
      else begin
        cfblk88_out1 = cfblk88_div_temp[7:0];
      end
    end
  end



  always @(cfblk18_out1, cfblk88_out1) begin
    cfblk29_div_temp = 9'b000000000;
    cfblk29_t_0_0 = 9'b000000000;
    if (cfblk88_out1 == 8'b00000000) begin
      cfblk29_out1 = 8'b11111111;
    end
    else begin
      cfblk29_t_0_0 = {1'b0, cfblk18_out1};
      cfblk29_div_temp = cfblk29_t_0_0 / cfblk88_out1;
      if (cfblk29_div_temp[8] != 1'b0) begin
        cfblk29_out1 = 8'b11111111;
      end
      else begin
        cfblk29_out1 = cfblk29_div_temp[7:0];
      end
    end
  end



  assign dtc_out_6 = cfblk29_out1;



  assign cfblk83_out1 = dtc_out_6;



  assign dtc_out_7 = cfblk83_out1;



  assign cfblk14_out1 = dtc_out_7;



  assign cfblk75_out1 = cfblk25_out1 + cfblk14_out1;



  assign cfblk30_out1 = (cfblk75_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk30_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk87_out1 = cfblk171_out1 - cfblk44_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk87_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  DotProduct_block2 u_cfblk135_inst (.in1(cfblk93_out1),  // uint8
                                     .in2(cfblk176_out1),  // uint8
                                     .out1(cfblk135_out1)  // uint8
                                     );

  Mysubsystem_26 u_Mysubsystem_26 (.In1(cfblk135_out1),  // uint8
                                   .In2(cfblk122_out1),  // uint8
                                   .Out1(Mysubsystem_26_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = Mysubsystem_26_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  DotProduct_block11 u_cfblk93_inst (.in1(cfblk154_out1),  // uint8
                                     .in2(cfblk1_out1),  // uint8
                                     .out1(cfblk93_out1)  // uint8
                                     );

  DotProduct_block1 u_cfblk129_inst (.in1(cfblk93_out1),  // uint8
                                     .in2(cfblk63_out1),  // uint8
                                     .out1(cfblk129_out1)  // uint8
                                     );

  always @(cfblk129_out1, cfblk172_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk172_out1 == 8'b00000000) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk129_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk172_out1;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  always @(cfblk12_out1, cfblk18_out1) begin
    cfblk27_div_temp = 9'b000000000;
    cfblk27_t_0_0 = 9'b000000000;
    if (cfblk12_out1 == 8'b00000000) begin
      cfblk27_out1 = 8'b11111111;
    end
    else begin
      cfblk27_t_0_0 = {1'b0, cfblk18_out1};
      cfblk27_div_temp = cfblk27_t_0_0 / cfblk12_out1;
      if (cfblk27_div_temp[8] != 1'b0) begin
        cfblk27_out1 = 8'b11111111;
      end
      else begin
        cfblk27_out1 = cfblk27_div_temp[7:0];
      end
    end
  end



  DotProduct_block u_cfblk123_inst (.in1(cfblk27_out1),  // uint8
                                    .in2(cfblk6_out1),  // uint8
                                    .out1(cfblk123_out1)  // uint8
                                    );

  DotProduct_block10 u_cfblk84_inst (.in1(cfblk123_out1),  // uint8
                                     .in2(cfblk6_out1),  // uint8
                                     .out1(cfblk84_out1)  // uint8
                                     );

  assign dtc_out_8 = cfblk77_out1;



  assign cfblk65_out1 = dtc_out_8;



  assign cfblk69_out1 = cfblk7_out1 - cfblk65_out1;



  assign cfblk89_out1 = cfblk69_out1 + cfblk84_out1;



  assign cfblk91_out1 = cfblk89_out1 + cfblk91_const_val_1;



  assign dtc_out_9 = cfblk91_out1;



  assign cfblk131_out1 = dtc_out_9;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk131_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk77_out1 = cfblk163_out1 + cfblk63_out1;



  assign cfblk25_out1 = cfblk77_out1 + cfblk189_out1;



  assign cfblk67_out1 = cfblk25_out1 - cfblk96_out1;



  DotProduct_block3 u_cfblk24_inst (.in1(cfblk67_out1),  // uint8
                                    .in2(cfblk69_out1),  // uint8
                                    .out1(cfblk24_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk24_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk100_out1 = cfblk170_out1 + cfblk42_out1;



  assign cfblk142 = cfblk100_out1;

  assign Hdl_out = cfblk46_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

