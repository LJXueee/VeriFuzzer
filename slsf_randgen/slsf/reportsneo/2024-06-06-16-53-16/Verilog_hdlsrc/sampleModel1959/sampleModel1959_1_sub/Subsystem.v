// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1959\sampleModel1959_1_sub\Subsystem.v
// Created: 2024-08-16 00:28:12
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk134                      ce_out        1
// cfblk135                      ce_out        1
// cfblk136                      ce_out        1
// cfblk138                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1959_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk134,
           cfblk135,
           cfblk136,
           cfblk138,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk134;  // uint8
  output  [7:0] cfblk135;  // uint8
  output  [7:0] cfblk136;  // uint8
  output  [7:0] cfblk138;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] Mysubsystem_37_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk41_const_val_1;  // uint8
  wire [7:0] cfblk66_const_val_1;  // uint8
  wire [7:0] cfblk28_const_val_1;  // uint8
  wire [7:0] Mysubsystem_42_out1;  // uint8
  wire [7:0] cfblk60_const_val_1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [15:0] cfblk139_out1;  // uint16
  wire [7:0] cfblk49_const_val_1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  reg [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk122_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [31:0] cfblk25_add_temp;  // ufix32
  wire [31:0] cfblk25_1;  // ufix32
  wire [31:0] cfblk25_2;  // ufix32
  wire [7:0] cfblk25_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  reg [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk114_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  reg [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] Mysubsystem_27_out1;  // uint8
  reg [8:0] cfblk96_div_temp;  // ufix9
  reg [8:0] cfblk96_t_0_0;  // ufix9
  reg [8:0] cfblk37_div_temp;  // ufix9
  reg [8:0] cfblk37_t_0_0;  // ufix9
  reg [8:0] cfblk122_div_temp;  // ufix9
  reg [8:0] cfblk122_t_0_0;  // ufix9
  reg [8:0] cfblk50_div_temp;  // ufix9
  reg [8:0] cfblk50_t_0_0;  // ufix9
  reg [8:0] cfblk80_div_temp;  // ufix9
  reg [8:0] cfblk80_t_0_0;  // ufix9
  reg [8:0] cfblk114_div_temp;  // ufix9
  reg [8:0] cfblk114_t_0_0;  // ufix9
  reg [8:0] cfblk91_div_temp;  // ufix9
  reg [8:0] cfblk91_t_0_0;  // ufix9
  reg [8:0] cfblk121_div_temp;  // ufix9
  reg [8:0] cfblk121_t_0_0;  // ufix9
  reg [8:0] cfblk55_div_temp;  // ufix9
  reg [8:0] cfblk55_t_0_0;  // ufix9


  Mysubsystem_37 u_Mysubsystem_37 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .cfblk134(Mysubsystem_37_out1)  // uint8
                                   );

  assign cfblk134 = Mysubsystem_37_out1;

  assign cfblk141_out1 = 8'b00000001;



  assign cfblk41_const_val_1 = 8'b00000000;



  assign cfblk66_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk28_const_val_1 = 8'b00000000;



  Mysubsystem_42 u_Mysubsystem_42 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_42_out1)  // uint8
                                   );

  assign cfblk60_const_val_1 = 8'b00000000;



  assign cfblk140_out1 = 8'b00000001;



  cfblk139 u_cfblk139 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk139_out1)  // uint16
                       );

  assign cfblk49_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk72_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk144_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk72_out1 = cfblk87_out1 + cfblk115_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk72_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk41_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign dtc_out = cfblk31_out1;



  assign cfblk32_out1 = dtc_out;



  DotProduct_block5 u_cfblk26_inst (.in1(cfblk32_out1),  // uint8
                                    .in2(cfblk169_out1),  // uint8
                                    .out1(cfblk26_out1)  // uint8
                                    );

  DotProduct_block u_cfblk111_inst (.in1(cfblk26_out1),  // uint8
                                    .in2(cfblk173_out1),  // uint8
                                    .out1(cfblk111_out1)  // uint8
                                    );

  assign cfblk5_out1 = cfblk111_out1 + cfblk170_out1;



  assign cfblk99_out1 = cfblk5_out1 + cfblk174_out1;



  assign dtc_out_1 = cfblk46_out1;



  assign cfblk93_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk93_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk98_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk104_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  cfblk146 u_cfblk146 (.In1(cfblk76_out1),  // uint8
                       .Out1(cfblk146_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk146_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk53_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  always @(cfblk125_out1, cfblk12_out1) begin
    cfblk96_div_temp = 9'b000000000;
    cfblk96_t_0_0 = 9'b000000000;
    if (cfblk12_out1 == 8'b00000000) begin
      cfblk96_out1 = 8'b11111111;
    end
    else begin
      cfblk96_t_0_0 = {1'b0, cfblk125_out1};
      cfblk96_div_temp = cfblk96_t_0_0 / cfblk12_out1;
      if (cfblk96_div_temp[8] != 1'b0) begin
        cfblk96_out1 = 8'b11111111;
      end
      else begin
        cfblk96_out1 = cfblk96_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk96_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk16_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  always @(cfblk167_out1, cfblk66_out1) begin
    cfblk37_div_temp = 9'b000000000;
    cfblk37_t_0_0 = 9'b000000000;
    if (cfblk167_out1 == 8'b00000000) begin
      cfblk37_out1 = 8'b11111111;
    end
    else begin
      cfblk37_t_0_0 = {1'b0, cfblk66_out1};
      cfblk37_div_temp = cfblk37_t_0_0 / cfblk167_out1;
      if (cfblk37_div_temp[8] != 1'b0) begin
        cfblk37_out1 = 8'b11111111;
      end
      else begin
        cfblk37_out1 = cfblk37_div_temp[7:0];
      end
    end
  end



  assign cfblk78_out1 = cfblk37_out1 - cfblk157_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk131_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk92_out1 = cfblk158_out1 + cfblk78_out1;



  assign cfblk8_out1 = cfblk92_out1 + cfblk162_out1;



  assign cfblk101_out1 = cfblk8_out1 + cfblk141_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk73_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk77_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk17_out1 = cfblk88_out1 + cfblk147_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk17_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  always @(cfblk154_out1, cfblk97_out1) begin
    cfblk122_div_temp = 9'b000000000;
    cfblk122_t_0_0 = 9'b000000000;
    if (cfblk97_out1 == 8'b00000000) begin
      cfblk122_out1 = 8'b11111111;
    end
    else begin
      cfblk122_t_0_0 = {1'b0, cfblk154_out1};
      cfblk122_div_temp = cfblk122_t_0_0 / cfblk97_out1;
      if (cfblk122_div_temp[8] != 1'b0) begin
        cfblk122_out1 = 8'b11111111;
      end
      else begin
        cfblk122_out1 = cfblk122_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk147_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  DotProduct_block4 u_cfblk18_inst (.in1(cfblk172_out1),  // uint8
                                    .in2(cfblk122_out1),  // uint8
                                    .out1(cfblk18_out1)  // uint8
                                    );

  assign cfblk25_1 = {16'b0, cfblk139_out1};
  assign cfblk25_2 = {24'b0, cfblk18_out1};
  assign cfblk25_add_temp = cfblk25_1 + cfblk25_2;
  assign cfblk25_out1 = cfblk25_add_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk25_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  DotProduct_block3 u_cfblk127_inst (.in1(cfblk31_out1),  // uint8
                                     .in2(cfblk31_out1),  // uint8
                                     .out1(cfblk127_out1)  // uint8
                                     );

  assign dtc_out_2 = cfblk127_out1;



  assign cfblk95_out1 = dtc_out_2;



  assign cfblk38_out1 = cfblk140_out1 + cfblk76_out1;



  assign dtc_out_3 = cfblk38_out1;



  assign cfblk14_out1 = dtc_out_3;



  assign cfblk133_out1 = cfblk14_out1 + cfblk66_out1;



  assign cfblk43_out1 = cfblk133_out1 + cfblk82_out1;



  DotProduct u_cfblk100_inst (.in1(cfblk109_out1),  // uint8
                              .in2(cfblk43_out1),  // uint8
                              .out1(cfblk100_out1)  // uint8
                              );

  assign cfblk12_out1 = cfblk100_out1 - cfblk95_out1;



  assign cfblk20_out1 = (cfblk53_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk20_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  always @(cfblk147_out1, cfblk156_out1) begin
    cfblk50_div_temp = 9'b000000000;
    cfblk50_t_0_0 = 9'b000000000;
    if (cfblk147_out1 == 8'b00000000) begin
      cfblk50_out1 = 8'b11111111;
    end
    else begin
      cfblk50_t_0_0 = {1'b0, cfblk156_out1};
      cfblk50_div_temp = cfblk50_t_0_0 / cfblk147_out1;
      if (cfblk50_div_temp[8] != 1'b0) begin
        cfblk50_out1 = 8'b11111111;
      end
      else begin
        cfblk50_out1 = cfblk50_div_temp[7:0];
      end
    end
  end



  assign cfblk60_out1 = cfblk50_out1 + cfblk60_const_val_1;



  assign cfblk86_out1 = cfblk60_out1 + cfblk12_out1;



  assign cfblk83_out1 = cfblk73_out1 + cfblk113_out1;



  assign cfblk84_out1 = cfblk83_out1 + cfblk3_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk84_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk131_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign dtc_out_4 = cfblk46_out1;



  assign cfblk109_out1 = dtc_out_4;



  assign cfblk33_out1 = cfblk109_out1 - cfblk159_out1;



  assign cfblk131_out1 = cfblk33_out1 - cfblk160_out1;



  assign cfblk73_out1 = cfblk113_out1 + cfblk131_out1;



  always @(cfblk67_out1, cfblk73_out1) begin
    cfblk80_div_temp = 9'b000000000;
    cfblk80_t_0_0 = 9'b000000000;
    if (cfblk67_out1 == 8'b00000000) begin
      cfblk80_out1 = 8'b11111111;
    end
    else begin
      cfblk80_t_0_0 = {1'b0, cfblk73_out1};
      cfblk80_div_temp = cfblk80_t_0_0 / cfblk67_out1;
      if (cfblk80_div_temp[8] != 1'b0) begin
        cfblk80_out1 = 8'b11111111;
      end
      else begin
        cfblk80_out1 = cfblk80_div_temp[7:0];
      end
    end
  end



  assign cfblk104_out1 = cfblk55_out1 - cfblk80_out1;



  always @(cfblk104_out1, cfblk86_out1) begin
    cfblk114_div_temp = 9'b000000000;
    cfblk114_t_0_0 = 9'b000000000;
    if (cfblk86_out1 == 8'b00000000) begin
      cfblk114_out1 = 8'b11111111;
    end
    else begin
      cfblk114_t_0_0 = {1'b0, cfblk104_out1};
      cfblk114_div_temp = cfblk114_t_0_0 / cfblk86_out1;
      if (cfblk114_div_temp[8] != 1'b0) begin
        cfblk114_out1 = 8'b11111111;
      end
      else begin
        cfblk114_out1 = cfblk114_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk114_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  assign cfblk87_out1 = (cfblk7_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block9 u_cfblk6_inst (.in1(cfblk87_out1),  // uint8
                                   .in2(cfblk155_out1),  // uint8
                                   .out1(cfblk6_out1)  // uint8
                                   );

  assign cfblk132_out1 = cfblk6_out1 + cfblk153_out1;



  cfblk145 u_cfblk145 (.In1(cfblk147_out1),  // uint8
                       .Out1(cfblk145_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk145_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  DotProduct_block12 u_cfblk97_inst (.in1(cfblk54_out1),  // uint8
                                     .in2(cfblk179_out1),  // uint8
                                     .out1(cfblk97_out1)  // uint8
                                     );

  always @(Mysubsystem_42_out1, cfblk97_out1) begin
    cfblk91_div_temp = 9'b000000000;
    cfblk91_t_0_0 = 9'b000000000;
    if (cfblk97_out1 == 8'b00000000) begin
      cfblk91_out1 = 8'b11111111;
    end
    else begin
      cfblk91_t_0_0 = {1'b0, Mysubsystem_42_out1};
      cfblk91_div_temp = cfblk91_t_0_0 / cfblk97_out1;
      if (cfblk91_div_temp[8] != 1'b0) begin
        cfblk91_out1 = 8'b11111111;
      end
      else begin
        cfblk91_out1 = cfblk91_div_temp[7:0];
      end
    end
  end



  assign cfblk66_out1 = cfblk148_out1 + cfblk66_const_val_1;



  assign cfblk106_out1 = cfblk9_out1 - cfblk66_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk106_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  cfblk147 u_cfblk147 (.In1(cfblk10_out1),  // uint8
                       .Out1(cfblk147_out1)  // uint8
                       );

  always @(cfblk147_out1, cfblk67_out1) begin
    cfblk121_div_temp = 9'b000000000;
    cfblk121_t_0_0 = 9'b000000000;
    if (cfblk67_out1 == 8'b00000000) begin
      cfblk121_out1 = 8'b11111111;
    end
    else begin
      cfblk121_t_0_0 = {1'b0, cfblk147_out1};
      cfblk121_div_temp = cfblk121_t_0_0 / cfblk67_out1;
      if (cfblk121_div_temp[8] != 1'b0) begin
        cfblk121_out1 = 8'b11111111;
      end
      else begin
        cfblk121_out1 = cfblk121_div_temp[7:0];
      end
    end
  end



  always @(cfblk121_out1, cfblk175_out1) begin
    cfblk55_div_temp = 9'b000000000;
    cfblk55_t_0_0 = 9'b000000000;
    if (cfblk175_out1 == 8'b00000000) begin
      cfblk55_out1 = 8'b11111111;
    end
    else begin
      cfblk55_t_0_0 = {1'b0, cfblk121_out1};
      cfblk55_div_temp = cfblk55_t_0_0 / cfblk175_out1;
      if (cfblk55_div_temp[8] != 1'b0) begin
        cfblk55_out1 = 8'b11111111;
      end
      else begin
        cfblk55_out1 = cfblk55_div_temp[7:0];
      end
    end
  end



  assign cfblk28_out1 = cfblk55_out1 + cfblk28_const_val_1;



  assign cfblk13_out1 = cfblk28_out1 + cfblk91_out1;



  DotProduct_block1 u_cfblk115_inst (.in1(cfblk13_out1),  // uint8
                                     .in2(cfblk23_out1),  // uint8
                                     .out1(cfblk115_out1)  // uint8
                                     );

  DotProduct_block11 u_cfblk9_inst (.in1(cfblk115_out1),  // uint8
                                    .in2(cfblk103_out1),  // uint8
                                    .out1(cfblk9_out1)  // uint8
                                    );

  assign cfblk30_out1 = cfblk9_out1 + cfblk7_out1;



  assign cfblk34_out1 = cfblk30_out1 + cfblk67_out1;



  DotProduct_block2 u_cfblk119_inst (.in1(cfblk34_out1),  // uint8
                                     .in2(cfblk34_out1),  // uint8
                                     .out1(cfblk119_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk119_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk31_out1 = cfblk176_out1 + cfblk132_out1;



  assign dtc_out_5 = cfblk77_out1;



  assign cfblk21_out1 = dtc_out_5;



  assign cfblk29_out1 = cfblk21_out1 - cfblk46_out1;



  cfblk144 u_cfblk144 (.In1(cfblk29_out1),  // uint8
                       .Out1(cfblk144_out1)  // uint8
                       );

  assign cfblk41_out1 = cfblk144_out1 + cfblk41_const_val_1;



  assign cfblk82_out1 = cfblk41_out1 + cfblk31_out1;



  assign cfblk77_out1 = cfblk141_out1 - cfblk76_out1;



  assign cfblk98_out1 = cfblk77_out1 + cfblk82_out1;



  assign cfblk16_out1 = cfblk98_out1 + cfblk14_out1;



  assign cfblk113_out1 = cfblk16_out1 + cfblk131_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk113_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk23_out1 = cfblk166_out1 - cfblk25_out1;



  cfblk148 u_cfblk148 (.In1(cfblk23_out1),  // uint8
                       .Out1(cfblk148_out1)  // uint8
                       );

  DotProduct_block7 u_cfblk53_inst (.in1(cfblk148_out1),  // uint8
                                    .in2(cfblk50_out1),  // uint8
                                    .out1(cfblk53_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk53_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  DotProduct_block8 u_cfblk54_inst (.in1(cfblk67_out1),  // uint8
                                    .in2(cfblk163_out1),  // uint8
                                    .out1(cfblk54_out1)  // uint8
                                    );

  assign cfblk79_out1 = (cfblk54_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk79_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign cfblk1_out1 = cfblk181_out1 & 8'b11111110;



  assign cfblk7_out1 = cfblk1_out1 + cfblk178_out1;



  assign cfblk76_out1 = cfblk7_out1 + cfblk121_out1;



  DotProduct_block10 u_cfblk62_inst (.in1(cfblk76_out1),  // uint8
                                     .in2(cfblk20_out1),  // uint8
                                     .out1(cfblk62_out1)  // uint8
                                     );

  assign cfblk46_out1 = cfblk62_out1 + cfblk165_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk46_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk125_out1 = cfblk171_out1 + cfblk101_out1;



  assign cfblk88_out1 = cfblk125_out1 - cfblk177_out1;



  assign cfblk10_out1 = cfblk88_out1 + cfblk161_out1;



  assign cfblk103_out1 = (cfblk10_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk103_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  DotProduct_block6 u_cfblk3_inst (.in1(cfblk180_out1),  // uint8
                                   .in2(cfblk69_out1),  // uint8
                                   .out1(cfblk3_out1)  // uint8
                                   );

  assign cfblk68_out1 = cfblk3_out1 - cfblk168_out1;



  assign cfblk49_out1 = cfblk68_out1 + cfblk49_const_val_1;



  assign cfblk67_out1 = cfblk49_out1 - cfblk164_out1;



  assign cfblk58_out1 = (cfblk67_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk58_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk69_out1 = cfblk152_out1 + cfblk99_out1;



  assign cfblk135 = cfblk69_out1;

  assign cfblk136 = cfblk82_out1;

  Mysubsystem_27 u_Mysubsystem_27 (.In1(cfblk62_out1),  // uint8
                                   .In2(cfblk10_out1),  // uint8
                                   .cfblk138(Mysubsystem_27_out1)  // uint8
                                   );

  assign cfblk138 = Mysubsystem_27_out1;

  assign Hdl_out = cfblk79_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

