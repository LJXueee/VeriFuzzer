// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1561\sampleModel1561_3_sub\Subsystem.v
// Created: 2024-08-12 18:59:29
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1561_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [15:0] cfblk130_out1;  // uint16
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk113_const_val_1;  // uint8
  wire [7:0] cfblk59_const_val_1;  // uint8
  wire [7:0] cfblk125_const_val_1;  // uint8
  wire [15:0] cfblk101_out1;  // uint16
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk37_const_val_1;  // uint8
  wire [7:0] cfblk34_const_val_1;  // uint8
  wire [7:0] cfblk57_const_val_1;  // uint8
  wire [7:0] cfblk76_const_val_1;  // uint8
  wire [7:0] cfblk85_const_val_1;  // uint8
  wire [7:0] cfblk69_const_val_1;  // uint8
  wire [7:0] cfblk22_const_val_1;  // uint8
  wire [7:0] cfblk26_const_val_1;  // uint8
  wire [7:0] cfblk99_const_val_1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  reg [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire cfblk6_relop1;
  reg [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire cfblk2_out1;  // ufix1
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk136_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk135_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [31:0] cfblk81_add_temp;  // ufix32
  wire [31:0] cfblk81_1;  // ufix32
  wire [31:0] cfblk81_2;  // ufix32
  wire [7:0] cfblk91_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  reg [7:0] cfblk79_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  reg [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  reg [8:0] cfblk25_div_temp;  // ufix9
  reg [8:0] cfblk25_t_0_0;  // ufix9
  reg [8:0] cfblk41_div_temp;  // ufix9
  reg [8:0] cfblk41_t_0_0;  // ufix9
  reg [8:0] cfblk7_div_temp;  // ufix9
  reg [8:0] cfblk7_t_0_0;  // ufix9
  reg [8:0] cfblk112_div_temp;  // ufix9
  reg [8:0] cfblk112_t_0_0;  // ufix9
  reg [8:0] cfblk79_div_temp;  // ufix9
  reg [8:0] cfblk79_t_0_0;  // ufix9
  reg [8:0] cfblk109_div_temp;  // ufix9
  reg [8:0] cfblk109_t_0_0;  // ufix9
  reg [15:0] cfblk28_varargout_1;  // ufix16
  reg [16:0] cfblk28_div_temp;  // ufix17
  reg [16:0] cfblk28_t_0_0;  // ufix17
  reg [8:0] cfblk14_div_temp;  // ufix9
  reg [8:0] cfblk14_t_0_0;  // ufix9


  cfblk130 u_cfblk130 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk130_out1)  // uint16
                       );

  cfblk129 u_cfblk129 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk129_out1)  // uint8
                       );

  assign cfblk70_out1 = (cfblk129_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk113_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk59_const_val_1 = 8'b00000000;



  assign cfblk125_const_val_1 = 8'b00000000;



  assign cfblk101_out1 = (cfblk130_out1 > 16'b0000000000000000 ? 16'b0000000000000001 :
              16'b0000000000000000);



  assign cfblk45_out1 = cfblk101_out1[7:0];



  assign cfblk37_const_val_1 = 8'b00000000;



  assign cfblk34_const_val_1 = 8'b00000000;



  assign cfblk57_const_val_1 = 8'b00000000;



  assign cfblk76_const_val_1 = 8'b00000000;



  assign cfblk85_const_val_1 = 8'b00000000;



  assign cfblk69_const_val_1 = 8'b00000000;



  assign cfblk22_const_val_1 = 8'b00000000;



  assign cfblk26_const_val_1 = 8'b00000000;



  assign cfblk99_const_val_1 = 8'b00000000;



  assign cfblk18_out1 = (cfblk114_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk69_out1 = cfblk112_out1 + cfblk69_const_val_1;



  assign cfblk40_out1 = cfblk69_out1 + cfblk131_out1;



  DotProduct_block5 u_cfblk89_inst (.in1(cfblk40_out1),  // uint8
                                    .in2(cfblk109_out1),  // uint8
                                    .out1(cfblk89_out1)  // uint8
                                    );

  assign cfblk93_out1 = cfblk89_out1 - cfblk105_out1;



  assign cfblk27_out1 = cfblk93_out1 + cfblk18_out1;



  always @(cfblk105_out1, cfblk27_out1) begin
    cfblk25_div_temp = 9'b000000000;
    cfblk25_t_0_0 = 9'b000000000;
    if (cfblk27_out1 == 8'b00000000) begin
      cfblk25_out1 = 8'b11111111;
    end
    else begin
      cfblk25_t_0_0 = {1'b0, cfblk105_out1};
      cfblk25_div_temp = cfblk25_t_0_0 / cfblk27_out1;
      if (cfblk25_div_temp[8] != 1'b0) begin
        cfblk25_out1 = 8'b11111111;
      end
      else begin
        cfblk25_out1 = cfblk25_div_temp[7:0];
      end
    end
  end



  assign cfblk117_out1 = (cfblk25_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk22_out1 = cfblk117_out1 + cfblk22_const_val_1;



  assign cfblk29_out1 = (cfblk22_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out = cfblk29_out1;



  assign cfblk96_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk96_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk37_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk24_out1 = cfblk113_out1 + cfblk15_out1;



  always @(cfblk24_out1, cfblk6_relop1) begin
    cfblk41_div_temp = 9'b000000000;
    cfblk41_t_0_0 = 9'b000000000;
    if (cfblk6_relop1 == 1'b0) begin
      cfblk41_out1 = 8'b11111111;
    end
    else begin
      cfblk41_t_0_0 = {1'b0, cfblk24_out1};
      cfblk41_div_temp = cfblk41_t_0_0 / cfblk6_relop1;
      if (cfblk41_div_temp[8] != 1'b0) begin
        cfblk41_out1 = 8'b11111111;
      end
      else begin
        cfblk41_out1 = cfblk41_div_temp[7:0];
      end
    end
  end



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk41_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  assign cfblk106_out1 = cfblk59_out1 + cfblk11_out1;



  assign cfblk102_out1 = (cfblk106_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk61_out1 = cfblk102_out1 - cfblk62_out1;



  assign cfblk38_out1 = cfblk61_out1 + cfblk55_out1;



  assign cfblk44_out1 = cfblk38_out1 + cfblk3_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk44_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk19_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk113_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk20_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk37_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk32_out1 = cfblk64_out1 - cfblk86_out1;



  assign cfblk2_out1 = (&cfblk32_out1[7:0]);



  assign cfblk118_out1 = {7'b0, cfblk2_out1};



  assign cfblk72_out1 = (cfblk118_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk72_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk43_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  assign cfblk76_out1 = cfblk81_out1 + cfblk76_const_val_1;



  assign cfblk86_out1 = cfblk76_out1 - cfblk42_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk136_process
      if (reset == 1'b1) begin
        cfblk136_reg[0] <= 8'b00000000;
        cfblk136_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk136_reg[0] <= cfblk136_reg_next[0];
          cfblk136_reg[1] <= cfblk136_reg_next[1];
        end
      end
    end

  assign cfblk136_out1 = cfblk136_reg[1];
  assign cfblk136_reg_next[0] = cfblk86_out1;
  assign cfblk136_reg_next[1] = cfblk136_reg[0];



  DotProduct_block4 u_cfblk73_inst (.in1(cfblk136_out1),  // uint8
                                    .in2(cfblk64_out1),  // uint8
                                    .out1(cfblk73_out1)  // uint8
                                    );

  assign cfblk115_out1 = cfblk73_out1 + cfblk153_out1;



  assign cfblk83_out1 = cfblk115_out1 + cfblk137_out1;



  assign cfblk51_out1 = cfblk83_out1 + cfblk152_out1;



  DotProduct_block3 u_cfblk39_inst (.in1(cfblk51_out1),  // uint8
                                    .in2(cfblk138_out1),  // uint8
                                    .out1(cfblk39_out1)  // uint8
                                    );

  assign cfblk34_out1 = cfblk109_out1 + cfblk34_const_val_1;



  assign cfblk57_out1 = cfblk34_out1 + cfblk57_const_val_1;



  assign cfblk90_out1 = cfblk57_out1 + cfblk114_out1;



  assign cfblk68_out1 = (cfblk90_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk68_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk36_out1 = cfblk144_out1 - cfblk39_out1;



  assign cfblk50_out1 = cfblk36_out1 - cfblk148_out1;



  assign dtc_out_1 = cfblk50_out1;



  assign cfblk62_out1 = dtc_out_1;



  assign cfblk20_out1 = cfblk81_out1 + cfblk75_out1;



  always @(cfblk20_out1, cfblk85_out1) begin
    cfblk7_div_temp = 9'b000000000;
    cfblk7_t_0_0 = 9'b000000000;
    if (cfblk20_out1 == 8'b00000000) begin
      cfblk7_out1 = 8'b11111111;
    end
    else begin
      cfblk7_t_0_0 = {1'b0, cfblk85_out1};
      cfblk7_div_temp = cfblk7_t_0_0 / cfblk20_out1;
      if (cfblk7_div_temp[8] != 1'b0) begin
        cfblk7_out1 = 8'b11111111;
      end
      else begin
        cfblk7_out1 = cfblk7_div_temp[7:0];
      end
    end
  end



  DotProduct u_cfblk11_inst (.in1(cfblk7_out1),  // uint8
                             .in2(cfblk62_out1),  // uint8
                             .out1(cfblk11_out1)  // uint8
                             );

  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk11_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk113_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk135_process
      if (reset == 1'b1) begin
        cfblk135_reg[0] <= 8'b00000000;
        cfblk135_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk135_reg[0] <= cfblk135_reg_next[0];
          cfblk135_reg[1] <= cfblk135_reg_next[1];
        end
      end
    end

  assign cfblk135_out1 = cfblk135_reg[1];
  assign cfblk135_reg_next[0] = cfblk14_out1;
  assign cfblk135_reg_next[1] = cfblk135_reg[0];



  DotProduct_block u_cfblk13_inst (.in1(cfblk100_out1),  // uint8
                                   .in2(cfblk135_out1),  // uint8
                                   .out1(cfblk13_out1)  // uint8
                                   );

  assign cfblk108_out1 = cfblk13_out1 + cfblk147_out1;



  assign cfblk107_out1 = cfblk108_out1 + cfblk139_out1;



  assign dtc_out_2 = cfblk107_out1;



  assign cfblk64_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk81_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  assign cfblk78_out1 = cfblk142_out1 + cfblk112_out1;



  assign cfblk92_out1 = cfblk78_out1 + cfblk64_out1;



  assign dtc_out_3 = cfblk14_out1;



  assign cfblk43_out1 = dtc_out_3;



  assign cfblk125_out1 = cfblk43_out1 + cfblk125_const_val_1;



  assign dtc_out_4 = cfblk125_out1;



  assign cfblk15_out1 = dtc_out_4;



  assign cfblk42_out1 = cfblk15_out1 + cfblk45_out1;



  assign cfblk37_out1 = cfblk42_out1 + cfblk37_const_val_1;



  assign dtc_out_5 = cfblk37_out1;



  assign cfblk49_out1 = dtc_out_5;



  DotProduct_block2 u_cfblk21_inst (.in1(cfblk49_out1),  // uint8
                                    .in2(cfblk92_out1),  // uint8
                                    .out1(cfblk21_out1)  // uint8
                                    );

  assign cfblk6_relop1 = cfblk21_out1 <= cfblk146_out1;



  assign cfblk81_1 = {31'b0, cfblk6_relop1};
  assign cfblk81_2 = {24'b0, cfblk140_out1};
  assign cfblk81_add_temp = cfblk81_1 + cfblk81_2;
  assign cfblk81_out1 = cfblk81_add_temp[7:0];



  assign cfblk105_out1 = (cfblk109_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk91_out1 = cfblk105_out1 + cfblk105_out1;



  assign cfblk59_out1 = cfblk91_out1 + cfblk59_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk59_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  always @(cfblk141_out1, cfblk14_out1) begin
    cfblk112_div_temp = 9'b000000000;
    cfblk112_t_0_0 = 9'b000000000;
    if (cfblk141_out1 == 8'b00000000) begin
      cfblk112_out1 = 8'b11111111;
    end
    else begin
      cfblk112_t_0_0 = {1'b0, cfblk14_out1};
      cfblk112_div_temp = cfblk112_t_0_0 / cfblk141_out1;
      if (cfblk112_div_temp[8] != 1'b0) begin
        cfblk112_out1 = 8'b11111111;
      end
      else begin
        cfblk112_out1 = cfblk112_div_temp[7:0];
      end
    end
  end



  assign cfblk55_out1 = cfblk109_out1 - cfblk112_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk55_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk113_out1 = cfblk104_out1 + cfblk113_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk113_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk1_out1 = cfblk149_out1 | 8'b00000001;



  assign cfblk12_out1 = cfblk1_out1 - cfblk145_out1;



  always @(cfblk12_out1, cfblk70_out1) begin
    cfblk79_div_temp = 9'b000000000;
    cfblk79_t_0_0 = 9'b000000000;
    if (cfblk12_out1 == 8'b00000000) begin
      cfblk79_out1 = 8'b11111111;
    end
    else begin
      cfblk79_t_0_0 = {1'b0, cfblk70_out1};
      cfblk79_div_temp = cfblk79_t_0_0 / cfblk12_out1;
      if (cfblk79_div_temp[8] != 1'b0) begin
        cfblk79_out1 = 8'b11111111;
      end
      else begin
        cfblk79_out1 = cfblk79_div_temp[7:0];
      end
    end
  end



  assign dtc_out_6 = cfblk79_out1;



  assign cfblk75_out1 = dtc_out_6;



  assign dtc_out_7 = cfblk75_out1;



  assign cfblk100_out1 = dtc_out_7;



  cfblk131 u_cfblk131 (.In1(cfblk100_out1),  // uint8
                       .Out1(cfblk131_out1)  // uint8
                       );

  always @(cfblk131_out1, cfblk81_out1) begin
    cfblk109_div_temp = 9'b000000000;
    cfblk109_t_0_0 = 9'b000000000;
    if (cfblk81_out1 == 8'b00000000) begin
      cfblk109_out1 = 8'b11111111;
    end
    else begin
      cfblk109_t_0_0 = {1'b0, cfblk131_out1};
      cfblk109_div_temp = cfblk109_t_0_0 / cfblk81_out1;
      if (cfblk109_div_temp[8] != 1'b0) begin
        cfblk109_out1 = 8'b11111111;
      end
      else begin
        cfblk109_out1 = cfblk109_div_temp[7:0];
      end
    end
  end



  DotProduct_block1 u_cfblk19_inst (.in1(cfblk109_out1),  // uint8
                                    .in2(cfblk26_out1),  // uint8
                                    .out1(cfblk19_out1)  // uint8
                                    );

  assign cfblk104_out1 = cfblk19_out1 + cfblk116_out1;



  assign dtc_out_8 = cfblk104_out1;



  assign cfblk98_out1 = dtc_out_8;



  assign cfblk35_out1 = cfblk98_out1 + cfblk62_out1;



  assign cfblk85_out1 = cfblk35_out1 + cfblk85_const_val_1;



  always @(cfblk130_out1, cfblk85_out1) begin
    cfblk28_div_temp = 17'b00000000000000000;
    cfblk28_t_0_0 = 17'b00000000000000000;
    if (cfblk85_out1 == 8'b00000000) begin
      cfblk28_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk28_t_0_0 = {1'b0, cfblk130_out1};
      cfblk28_div_temp = cfblk28_t_0_0 / cfblk85_out1;
      if (cfblk28_div_temp[16] != 1'b0) begin
        cfblk28_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk28_varargout_1 = cfblk28_div_temp[15:0];
      end
    end
    if (cfblk28_varargout_1[15:8] != 8'b00000000) begin
      cfblk28_out1 = 8'b11111111;
    end
    else begin
      cfblk28_out1 = cfblk28_varargout_1[7:0];
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk28_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk119_out1 = cfblk150_out1 - cfblk50_out1;



  cfblk5 u_cfblk5 (.u(cfblk119_out1),  // uint8
                   .y(cfblk5_out1)  // uint8
                   );

  cfblk132 u_cfblk132 (.In1(cfblk5_out1),  // uint8
                       .Out1(cfblk132_out1)  // uint8
                       );

  assign cfblk116_out1 = cfblk132_out1 + cfblk151_out1;



  always @(cfblk116_out1, cfblk143_out1) begin
    cfblk14_div_temp = 9'b000000000;
    cfblk14_t_0_0 = 9'b000000000;
    if (cfblk143_out1 == 8'b00000000) begin
      cfblk14_out1 = 8'b11111111;
    end
    else begin
      cfblk14_t_0_0 = {1'b0, cfblk116_out1};
      cfblk14_div_temp = cfblk14_t_0_0 / cfblk143_out1;
      if (cfblk14_div_temp[8] != 1'b0) begin
        cfblk14_out1 = 8'b11111111;
      end
      else begin
        cfblk14_out1 = cfblk14_div_temp[7:0];
      end
    end
  end



  assign dtc_out_9 = cfblk14_out1;



  assign cfblk74_out1 = dtc_out_9;



  assign cfblk8_out1 = cfblk74_out1 + cfblk125_out1;



  assign cfblk26_out1 = cfblk8_out1 + cfblk26_const_val_1;



  assign cfblk99_out1 = cfblk26_out1 + cfblk99_const_val_1;



  assign cfblk114_out1 = (cfblk99_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign Hdl_out = cfblk114_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

