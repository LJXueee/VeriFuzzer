// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1786\sampleModel1786_sub\Subsystem.v
// Created: 2024-08-14 08:47:26
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1786_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk74_const_val_1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk73_const_val_1;  // uint8
  wire [7:0] cfblk39_const_val_1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk93_const_val_1;  // uint8
  wire [15:0] cfblk131_out1;  // uint16
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] bitMask_for_cfblk6;  // uint8
  wire [7:0] cfblk119_const_val_1;  // uint8
  wire [7:0] cfblk76_const_val_1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire signed [31:0] cfblk17_sub_temp;  // sfix32
  wire signed [31:0] cfblk17_1;  // sfix32
  wire signed [31:0] cfblk17_2;  // sfix32
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [3:0] cfblk2_out1;  // ufix4_E4
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire cfblk141_out1_is_not0;
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire cfblk101_out1_is_not0;
  wire cfblk5_out1;
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  reg [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire cfblk37_out1_is_not0;
  wire [7:0] cfblk41_out1;  // uint8
  wire cfblk41_out1_is_not0;
  wire cfblk3_out1;
  wire [31:0] cfblk96_add_temp;  // ufix32
  wire [31:0] cfblk96_1;  // ufix32
  wire [31:0] cfblk96_2;  // ufix32
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  reg [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire signed [31:0] cfblk79_sub_temp;  // sfix32
  wire signed [31:0] cfblk79_1;  // sfix32
  wire signed [31:0] cfblk79_2;  // sfix32
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  reg [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  reg [8:0] cfblk117_div_temp;  // ufix9
  reg [8:0] cfblk117_t_0_0;  // ufix9
  reg [8:0] cfblk16_div_temp;  // ufix9
  reg [8:0] cfblk16_t_0_0;  // ufix9
  reg [8:0] cfblk10_div_temp;  // ufix9
  reg [8:0] cfblk10_t_0_0;  // ufix9
  reg [8:0] cfblk86_div_temp;  // ufix9
  reg [8:0] cfblk86_t_0_0;  // ufix9
  reg [8:0] cfblk115_div_temp;  // ufix9
  reg [8:0] cfblk115_t_0_0;  // ufix9
  reg [8:0] cfblk47_div_temp;  // ufix9
  reg [8:0] cfblk47_t_0_0;  // ufix9
  reg [8:0] cfblk97_div_temp;  // ufix9
  reg [8:0] cfblk97_t_0_0;  // ufix9


  assign cfblk74_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk4_out1 = 8'b00000000;



  assign cfblk118_out1 = (cfblk4_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk29_out1 = (cfblk118_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out = cfblk29_out1;



  assign cfblk65_out1 = dtc_out;



  assign cfblk73_const_val_1 = 8'b00000000;



  assign cfblk39_const_val_1 = 8'b00000000;



  assign cfblk87_out1 = (cfblk65_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk93_const_val_1 = 8'b00000000;



  cfblk131 u_cfblk131 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk131_out1)  // uint16
                       );

  assign cfblk68_out1 = cfblk131_out1[7:0];



  assign bitMask_for_cfblk6 = 8'b11011001;



  assign cfblk119_const_val_1 = 8'b00000000;



  assign cfblk76_const_val_1 = 8'b00000000;



  assign cfblk119_out1 = cfblk99_out1 + cfblk119_const_val_1;



  always @(cfblk119_out1, cfblk126_out1) begin
    cfblk117_div_temp = 9'b000000000;
    cfblk117_t_0_0 = 9'b000000000;
    if (cfblk126_out1 == 8'b00000000) begin
      cfblk117_out1 = 8'b11111111;
    end
    else begin
      cfblk117_t_0_0 = {1'b0, cfblk119_out1};
      cfblk117_div_temp = cfblk117_t_0_0 / cfblk126_out1;
      if (cfblk117_div_temp[8] != 1'b0) begin
        cfblk117_out1 = 8'b11111111;
      end
      else begin
        cfblk117_out1 = cfblk117_div_temp[7:0];
      end
    end
  end



  assign cfblk76_out1 = cfblk117_out1 + cfblk76_const_val_1;



  assign cfblk83_out1 = cfblk76_out1 + cfblk38_out1;



  assign cfblk17_1 = {24'b0, cfblk83_out1};
  assign cfblk17_2 = {16'b0, cfblk131_out1};
  assign cfblk17_sub_temp = cfblk17_1 - cfblk17_2;
  assign cfblk17_out1 = cfblk17_sub_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk6_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk30_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk82_out1 = cfblk114_out1 + cfblk24_out1;



  DotProduct_block1 u_cfblk13_inst (.in1(cfblk122_out1),  // uint8
                                    .in2(cfblk82_out1),  // uint8
                                    .out1(cfblk13_out1)  // uint8
                                    );

  assign cfblk27_out1 = cfblk30_out1 + cfblk60_out1;



  always @(cfblk13_out1, cfblk27_out1) begin
    cfblk16_div_temp = 9'b000000000;
    cfblk16_t_0_0 = 9'b000000000;
    if (cfblk13_out1 == 8'b00000000) begin
      cfblk16_out1 = 8'b11111111;
    end
    else begin
      cfblk16_t_0_0 = {1'b0, cfblk27_out1};
      cfblk16_div_temp = cfblk16_t_0_0 / cfblk13_out1;
      if (cfblk16_div_temp[8] != 1'b0) begin
        cfblk16_out1 = 8'b11111111;
      end
      else begin
        cfblk16_out1 = cfblk16_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk16_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  assign cfblk122_out1 = cfblk137_out1 + cfblk44_out1;



  assign cfblk94_out1 = cfblk68_out1 - cfblk126_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk94_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk21_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk56_out1 = cfblk34_out1 + cfblk84_out1;



  assign cfblk99_out1 = (cfblk56_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk99_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk34_out1 = (cfblk6_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk2_out1 = cfblk34_out1[7:4];



  assign cfblk19_out1 = {cfblk2_out1, 4'b0000};



  assign cfblk126_out1 = (cfblk19_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk93_out1 = cfblk126_out1 + cfblk93_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk93_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  assign cfblk11_out1 = cfblk87_out1 + cfblk79_out1;



  assign dtc_out_1 = cfblk105_out1;



  assign cfblk45_out1 = dtc_out_1;



  assign cfblk53_out1 = cfblk45_out1 + cfblk11_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk53_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  assign cfblk141_out1_is_not0 = cfblk141_out1 != 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk79_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  assign cfblk101_out1 = cfblk46_out1 + cfblk142_out1;



  assign cfblk101_out1_is_not0 = cfblk101_out1 != 8'b00000000;



  assign cfblk5_out1 = cfblk101_out1_is_not0 & cfblk141_out1_is_not0;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk95_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk74_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk61_out1 = cfblk159_out1 + cfblk70_out1;



  assign cfblk73_out1 = cfblk62_out1 + cfblk73_const_val_1;



  assign cfblk24_out1 = cfblk73_out1 + cfblk108_out1;



  DotProduct_block3 u_cfblk22_inst (.in1(cfblk42_out1),  // uint8
                                    .in2(cfblk24_out1),  // uint8
                                    .out1(cfblk22_out1)  // uint8
                                    );

  always @(cfblk124_out1, cfblk22_out1) begin
    cfblk10_div_temp = 9'b000000000;
    cfblk10_t_0_0 = 9'b000000000;
    if (cfblk124_out1 == 8'b00000000) begin
      cfblk10_out1 = 8'b11111111;
    end
    else begin
      cfblk10_t_0_0 = {1'b0, cfblk22_out1};
      cfblk10_div_temp = cfblk10_t_0_0 / cfblk124_out1;
      if (cfblk10_div_temp[8] != 1'b0) begin
        cfblk10_out1 = 8'b11111111;
      end
      else begin
        cfblk10_out1 = cfblk10_div_temp[7:0];
      end
    end
  end



  assign cfblk89_out1 = (cfblk10_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk89_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  assign cfblk44_out1 = cfblk139_out1 + cfblk61_out1;



  assign cfblk60_out1 = cfblk107_out1 - cfblk124_out1;



  assign cfblk25_out1 = cfblk65_out1 + cfblk127_out1;



  assign cfblk121_out1 = cfblk25_out1 - cfblk60_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk121_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk46_out1 = cfblk149_out1 + cfblk47_out1;



  assign cfblk38_out1 = cfblk46_out1 + cfblk47_out1;



  DotProduct_block4 u_cfblk64_inst (.in1(cfblk38_out1),  // uint8
                                    .in2(cfblk127_out1),  // uint8
                                    .out1(cfblk64_out1)  // uint8
                                    );

  assign dtc_out_2 = cfblk64_out1;



  assign cfblk124_out1 = dtc_out_2;



  assign cfblk77_out1 = (cfblk124_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk77_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk37_out1_is_not0 = cfblk37_out1 != 8'b00000000;



  assign cfblk41_out1_is_not0 = cfblk41_out1 != 8'b00000000;



  assign cfblk3_out1 = cfblk41_out1_is_not0 & cfblk37_out1_is_not0;



  assign cfblk96_1 = {31'b0, cfblk3_out1};
  assign cfblk96_2 = {24'b0, cfblk6_out1};
  assign cfblk96_add_temp = cfblk96_1 + cfblk96_2;
  assign cfblk96_out1 = cfblk96_add_temp[7:0];



  assign cfblk21_out1 = cfblk6_out1 - cfblk96_out1;



  always @(cfblk21_out1, cfblk96_out1) begin
    cfblk86_div_temp = 9'b000000000;
    cfblk86_t_0_0 = 9'b000000000;
    if (cfblk96_out1 == 8'b00000000) begin
      cfblk86_out1 = 8'b11111111;
    end
    else begin
      cfblk86_t_0_0 = {1'b0, cfblk21_out1};
      cfblk86_div_temp = cfblk86_t_0_0 / cfblk96_out1;
      if (cfblk86_div_temp[8] != 1'b0) begin
        cfblk86_out1 = 8'b11111111;
      end
      else begin
        cfblk86_out1 = cfblk86_div_temp[7:0];
      end
    end
  end



  assign cfblk127_out1 = cfblk86_out1 + cfblk147_out1;



  assign cfblk63_out1 = cfblk127_out1 + cfblk44_out1;



  assign cfblk39_out1 = cfblk63_out1 + cfblk39_const_val_1;



  assign cfblk23_out1 = cfblk107_out1 + cfblk95_out1;



  assign dtc_out_3 = cfblk23_out1;



  assign cfblk31_out1 = dtc_out_3;



  assign cfblk14_out1 = cfblk31_out1 - cfblk39_out1;



  assign cfblk71_out1 = cfblk14_out1 - cfblk21_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk71_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  assign cfblk42_out1 = cfblk143_out1 - cfblk160_out1;



  assign cfblk48_out1 = cfblk42_out1 - cfblk87_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk48_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  assign cfblk70_out1 = cfblk138_out1 + cfblk1_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk115_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk74_out1 = cfblk92_out1 + cfblk74_const_val_1;



  assign cfblk75_out1 = (cfblk74_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk150_out1, cfblk75_out1) begin
    cfblk115_div_temp = 9'b000000000;
    cfblk115_t_0_0 = 9'b000000000;
    if (cfblk150_out1 == 8'b00000000) begin
      cfblk115_out1 = 8'b11111111;
    end
    else begin
      cfblk115_t_0_0 = {1'b0, cfblk75_out1};
      cfblk115_div_temp = cfblk115_t_0_0 / cfblk150_out1;
      if (cfblk115_div_temp[8] != 1'b0) begin
        cfblk115_out1 = 8'b11111111;
      end
      else begin
        cfblk115_out1 = cfblk115_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk115_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  always @(cfblk151_out1, cfblk69_out1) begin
    cfblk47_div_temp = 9'b000000000;
    cfblk47_t_0_0 = 9'b000000000;
    if (cfblk151_out1 == 8'b00000000) begin
      cfblk47_out1 = 8'b11111111;
    end
    else begin
      cfblk47_t_0_0 = {1'b0, cfblk69_out1};
      cfblk47_div_temp = cfblk47_t_0_0 / cfblk151_out1;
      if (cfblk47_div_temp[8] != 1'b0) begin
        cfblk47_out1 = 8'b11111111;
      end
      else begin
        cfblk47_out1 = cfblk47_div_temp[7:0];
      end
    end
  end



  assign dtc_out_4 = cfblk47_out1;



  assign cfblk84_out1 = dtc_out_4;



  assign dtc_out_5 = cfblk84_out1;



  assign cfblk105_out1 = dtc_out_5;



  assign cfblk67_out1 = (cfblk105_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk41_out1 = (cfblk67_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk114_out1 = cfblk41_out1 + cfblk70_out1;



  assign cfblk59_out1 = cfblk114_out1 + cfblk72_out1;



  assign dtc_out_6 = cfblk59_out1;



  assign cfblk92_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk92_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk79_1 = {24'b0, cfblk158_out1};
  assign cfblk79_2 = {31'b0, cfblk5_out1};
  assign cfblk79_sub_temp = cfblk79_1 - cfblk79_2;
  assign cfblk79_out1 = cfblk79_sub_temp[7:0];



  assign cfblk7_out1 = cfblk1_out1 + cfblk79_out1;



  assign cfblk80_out1 = cfblk7_out1 - cfblk155_out1;



  assign cfblk36_out1 = cfblk80_out1 + cfblk154_out1;



  assign cfblk35_out1 = (cfblk36_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk95_out1 = cfblk35_out1 + cfblk145_out1;



  DotProduct_block2 u_cfblk20_inst (.in1(cfblk95_out1),  // uint8
                                    .in2(cfblk156_out1),  // uint8
                                    .out1(cfblk20_out1)  // uint8
                                    );

  assign dtc_out_7 = cfblk20_out1;



  assign cfblk107_out1 = dtc_out_7;



  DotProduct_block u_cfblk108_inst (.in1(cfblk107_out1),  // uint8
                                    .in2(cfblk41_out1),  // uint8
                                    .out1(cfblk108_out1)  // uint8
                                    );

  assign cfblk37_out1 = cfblk108_out1 - cfblk122_out1;



  always @(cfblk144_out1, cfblk37_out1) begin
    cfblk97_div_temp = 9'b000000000;
    cfblk97_t_0_0 = 9'b000000000;
    if (cfblk144_out1 == 8'b00000000) begin
      cfblk97_out1 = 8'b11111111;
    end
    else begin
      cfblk97_t_0_0 = {1'b0, cfblk37_out1};
      cfblk97_div_temp = cfblk97_t_0_0 / cfblk144_out1;
      if (cfblk97_div_temp[8] != 1'b0) begin
        cfblk97_out1 = 8'b11111111;
      end
      else begin
        cfblk97_out1 = cfblk97_div_temp[7:0];
      end
    end
  end



  DotProduct u_cfblk103_inst (.in1(cfblk97_out1),  // uint8
                              .in2(cfblk108_out1),  // uint8
                              .out1(cfblk103_out1)  // uint8
                              );

  assign cfblk72_out1 = (cfblk103_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk30_out1 = cfblk72_out1 + cfblk152_out1;



  assign cfblk6_out1 = cfblk30_out1 & bitMask_for_cfblk6;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk6_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk69_out1 = cfblk157_out1 - cfblk42_out1;



  assign cfblk111_out1 = cfblk69_out1 + cfblk69_out1;



  assign cfblk78_out1 = cfblk111_out1 - cfblk77_out1;



  assign cfblk62_out1 = cfblk78_out1 + cfblk17_out1;



  assign cfblk110_out1 = cfblk62_out1 + cfblk56_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk110_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk140_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign Hdl_out = cfblk1_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

