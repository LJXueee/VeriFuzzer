// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1525\sampleModel1525_sub\Subsystem.v
// Created: 2024-08-12 15:39:55
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk135                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1525_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk135,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk135;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk138_out1;  // uint8
  wire [15:0] cfblk140_out1;  // uint16
  wire [7:0] cfblk178_out1;  // uint8
  wire [15:0] cfblk139_out1;  // uint16
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [15:0] cfblk25_const_val_1;  // uint16
  wire [15:0] cfblk82_out1;  // uint16
  reg [7:0] cfblk122_out1;  // uint8
  wire [15:0] cfblk25_out1;  // uint16
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk43_const_val_1;  // uint8
  wire [7:0] cfblk42_const_val_1;  // uint8
  wire [7:0] cfblk77_const_val_1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk97_const_val_1;  // uint8
  wire [7:0] cfblk58_const_val_1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk72_const_val_1;  // uint8
  wire [7:0] cfblk94_const_val_1;  // uint8
  wire [15:0] cfblk134_const_val_1;  // uint16
  wire [15:0] cfblk134_out1;  // uint16
  wire [7:0] cfblk47_const_val_1;  // uint8
  wire [7:0] cfblk8_const_val_1;  // uint8
  wire [7:0] cfblk71_const_val_1;  // uint8
  wire [7:0] cfblk125_const_val_1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk13_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  reg [7:0] cfblk79_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk31_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  reg [7:0] cfblk38_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk33_out1;  // uint8
  wire [31:0] cfblk12_add_temp;  // ufix32
  wire [31:0] cfblk12_1;  // ufix32
  wire [31:0] cfblk12_2;  // ufix32
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [31:0] cfblk26_add_temp;  // ufix32
  wire [31:0] cfblk26_1;  // ufix32
  wire [31:0] cfblk26_2;  // ufix32
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [8:0] cfblk122_div_temp;  // ufix9
  reg [8:0] cfblk122_t_0_0;  // ufix9
  reg [15:0] cfblk23_varargout_1;  // ufix16
  reg [16:0] cfblk23_div_temp;  // ufix17
  reg [16:0] cfblk23_t_0_0;  // ufix17
  reg [8:0] cfblk13_div_temp;  // ufix9
  reg [8:0] cfblk13_t_0_0;  // ufix9
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9
  reg [8:0] cfblk83_div_temp;  // ufix9
  reg [8:0] cfblk83_t_0_0;  // ufix9
  reg [8:0] cfblk38_div_temp;  // ufix9
  reg [8:0] cfblk38_t_0_0;  // ufix9
  reg [8:0] cfblk79_div_temp;  // ufix9
  reg [8:0] cfblk79_t_0_0;  // ufix9
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk138_out1 = 8'b00000001;



  cfblk140 u_cfblk140 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk140_out1)  // uint16
                       );

  assign cfblk178_out1 = cfblk140_out1[7:0];



  cfblk139 u_cfblk139 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk139_out1)  // uint16
                       );

  assign cfblk54_out1 = cfblk139_out1[7:0];



  assign cfblk142_out1 = 8'b00000000;



  assign cfblk137_out1 = 8'b00000001;



  assign cfblk41_out1 = (cfblk137_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk87_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk25_const_val_1 = 16'b0000000000000000;



  assign cfblk82_out1 = (cfblk140_out1 > 16'b0000000000000000 ? 16'b0000000000000001 :
              16'b0000000000000000);



  always @(cfblk137_out1, cfblk87_out1) begin
    cfblk122_div_temp = 9'b000000000;
    cfblk122_t_0_0 = 9'b000000000;
    if (cfblk137_out1 == 8'b00000000) begin
      cfblk122_out1 = 8'b11111111;
    end
    else begin
      cfblk122_t_0_0 = {1'b0, cfblk87_out1};
      cfblk122_div_temp = cfblk122_t_0_0 / cfblk137_out1;
      if (cfblk122_div_temp[8] != 1'b0) begin
        cfblk122_out1 = 8'b11111111;
      end
      else begin
        cfblk122_out1 = cfblk122_div_temp[7:0];
      end
    end
  end



  assign cfblk25_out1 = cfblk139_out1 + cfblk25_const_val_1;



  assign cfblk143_out1 = 8'b00000001;



  assign cfblk43_const_val_1 = 8'b00000000;



  assign cfblk42_const_val_1 = 8'b00000000;



  assign cfblk77_const_val_1 = 8'b00000000;



  assign cfblk132_out1 = (cfblk143_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk21_out1 = (cfblk132_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk97_const_val_1 = 8'b00000000;



  assign cfblk58_const_val_1 = 8'b00000000;



  assign cfblk141_out1 = 8'b00000001;



  assign cfblk72_const_val_1 = 8'b00000000;



  assign cfblk94_const_val_1 = 8'b00000000;



  assign cfblk134_const_val_1 = 16'b0000000000000000;



  assign cfblk134_out1 = cfblk139_out1 + cfblk134_const_val_1;



  assign cfblk47_const_val_1 = 8'b00000000;



  assign cfblk8_const_val_1 = 8'b00000000;



  assign cfblk71_const_val_1 = 8'b00000000;



  assign cfblk125_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk94_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk47_out1 = cfblk72_out1 + cfblk47_const_val_1;



  assign cfblk8_out1 = cfblk47_out1 + cfblk8_const_val_1;



  DotProduct_block1 u_cfblk128_inst (.in1(cfblk145_out1),  // uint8
                                     .in2(cfblk27_out1),  // uint8
                                     .out1(cfblk128_out1)  // uint8
                                     );

  always @(cfblk134_out1, cfblk29_out1) begin
    cfblk23_div_temp = 17'b00000000000000000;
    cfblk23_t_0_0 = 17'b00000000000000000;
    if (cfblk29_out1 == 8'b00000000) begin
      cfblk23_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk23_t_0_0 = {1'b0, cfblk134_out1};
      cfblk23_div_temp = cfblk23_t_0_0 / cfblk29_out1;
      if (cfblk23_div_temp[16] != 1'b0) begin
        cfblk23_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk23_varargout_1 = cfblk23_div_temp[15:0];
      end
    end
    if (cfblk23_varargout_1[15:8] != 8'b00000000) begin
      cfblk23_out1 = 8'b11111111;
    end
    else begin
      cfblk23_out1 = cfblk23_varargout_1[7:0];
    end
  end



  cfblk146 u_cfblk146 (.In1(cfblk36_out1),  // uint8
                       .Out1(cfblk146_out1)  // uint8
                       );

  always @(cfblk29_out1, cfblk56_out1) begin
    cfblk13_div_temp = 9'b000000000;
    cfblk13_t_0_0 = 9'b000000000;
    if (cfblk56_out1 == 8'b00000000) begin
      cfblk13_out1 = 8'b11111111;
    end
    else begin
      cfblk13_t_0_0 = {1'b0, cfblk29_out1};
      cfblk13_div_temp = cfblk13_t_0_0 / cfblk56_out1;
      if (cfblk13_div_temp[8] != 1'b0) begin
        cfblk13_out1 = 8'b11111111;
      end
      else begin
        cfblk13_out1 = cfblk13_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk13_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk71_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk94_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  assign cfblk69_out1 = cfblk66_out1 + cfblk160_out1;



  assign cfblk97_out1 = cfblk48_out1 + cfblk97_const_val_1;



  assign cfblk98_out1 = cfblk29_out1 + cfblk131_out1;



  assign dtc_out = cfblk98_out1;



  assign cfblk37_out1 = dtc_out;



  DotProduct_block2 u_cfblk15_inst (.in1(cfblk131_out1),  // uint8
                                    .in2(cfblk37_out1),  // uint8
                                    .out1(cfblk15_out1)  // uint8
                                    );

  assign dtc_out_1 = cfblk15_out1;



  assign cfblk46_out1 = dtc_out_1;



  always @(cfblk46_out1, cfblk97_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk97_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk46_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk97_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  assign cfblk58_out1 = cfblk44_out1 + cfblk58_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk58_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk73_out1 = cfblk152_out1 + cfblk69_out1;



  assign cfblk6_out1 = cfblk73_out1 + cfblk147_out1;



  assign cfblk51_out1 = cfblk6_out1 + cfblk141_out1;



  assign cfblk19_out1 = cfblk94_out1 + cfblk94_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk19_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk35_out1 = cfblk159_out1 + cfblk51_out1;



  assign cfblk104_out1 = cfblk35_out1 + cfblk156_out1;



  assign cfblk72_out1 = cfblk104_out1 + cfblk72_const_val_1;



  DotProduct_block3 u_cfblk34_inst (.in1(cfblk17_out1),  // uint8
                                    .in2(cfblk72_out1),  // uint8
                                    .out1(cfblk34_out1)  // uint8
                                    );

  assign cfblk91_out1 = cfblk34_out1 + cfblk97_out1;



  cfblk144 u_cfblk144 (.In1(cfblk91_out1),  // uint8
                       .Out1(cfblk144_out1)  // uint8
                       );

  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk144_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  DotProduct_block4 u_cfblk36_inst (.in1(cfblk4_out1),  // uint8
                                    .in2(cfblk87_out1),  // uint8
                                    .out1(cfblk36_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk27_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk113_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk131_out1 = cfblk138_out1 + cfblk77_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk131_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk79_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk42_out1 = cfblk116_out1 + cfblk42_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk42_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk26_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk75_out1 = cfblk163_out1 + cfblk155_out1;



  assign cfblk117_out1 = cfblk75_out1 - cfblk168_out1;



  assign cfblk120_out1 = cfblk117_out1 - cfblk167_out1;



  DotProduct u_cfblk10_inst (.in1(cfblk113_out1),  // uint8
                             .in2(cfblk26_out1),  // uint8
                             .out1(cfblk10_out1)  // uint8
                             );

  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk10_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk39_out1 = cfblk149_out1 + cfblk120_out1;



  always @(cfblk143_out1, cfblk29_out1) begin
    cfblk83_div_temp = 9'b000000000;
    cfblk83_t_0_0 = 9'b000000000;
    if (cfblk143_out1 == 8'b00000000) begin
      cfblk83_out1 = 8'b11111111;
    end
    else begin
      cfblk83_t_0_0 = {1'b0, cfblk29_out1};
      cfblk83_div_temp = cfblk83_t_0_0 / cfblk143_out1;
      if (cfblk83_div_temp[8] != 1'b0) begin
        cfblk83_out1 = 8'b11111111;
      end
      else begin
        cfblk83_out1 = cfblk83_div_temp[7:0];
      end
    end
  end



  assign cfblk59_out1 = cfblk93_out1 + cfblk83_out1;



  assign cfblk22_out1 = (cfblk59_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk43_out1 = cfblk22_out1 + cfblk43_const_val_1;



  assign cfblk113_out1 = (cfblk43_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk110_out1 = cfblk113_out1 + cfblk2_out1;



  assign dtc_out_2 = cfblk110_out1;



  assign cfblk31_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk31_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  always @(cfblk150_out1, cfblk39_out1) begin
    cfblk38_div_temp = 9'b000000000;
    cfblk38_t_0_0 = 9'b000000000;
    if (cfblk39_out1 == 8'b00000000) begin
      cfblk38_out1 = 8'b11111111;
    end
    else begin
      cfblk38_t_0_0 = {1'b0, cfblk150_out1};
      cfblk38_div_temp = cfblk38_t_0_0 / cfblk39_out1;
      if (cfblk38_div_temp[8] != 1'b0) begin
        cfblk38_out1 = 8'b11111111;
      end
      else begin
        cfblk38_out1 = cfblk38_div_temp[7:0];
      end
    end
  end



  always @(cfblk142_out1, cfblk38_out1) begin
    cfblk79_div_temp = 9'b000000000;
    cfblk79_t_0_0 = 9'b000000000;
    if (cfblk38_out1 == 8'b00000000) begin
      cfblk79_out1 = 8'b11111111;
    end
    else begin
      cfblk79_t_0_0 = {1'b0, cfblk142_out1};
      cfblk79_div_temp = cfblk79_t_0_0 / cfblk38_out1;
      if (cfblk79_div_temp[8] != 1'b0) begin
        cfblk79_out1 = 8'b11111111;
      end
      else begin
        cfblk79_out1 = cfblk79_div_temp[7:0];
      end
    end
  end



  assign dtc_out_3 = cfblk71_out1;



  assign cfblk33_out1 = dtc_out_3;



  assign cfblk12_1 = {16'b0, cfblk25_out1};
  assign cfblk12_2 = {24'b0, cfblk33_out1};
  assign cfblk12_add_temp = cfblk12_1 + cfblk12_2;
  assign cfblk12_out1 = cfblk12_add_temp[7:0];



  assign cfblk101_out1 = cfblk122_out1 + cfblk12_out1;



  DotProduct_block7 u_cfblk78_inst (.in1(cfblk142_out1),  // uint8
                                    .in2(cfblk101_out1),  // uint8
                                    .out1(cfblk78_out1)  // uint8
                                    );

  assign cfblk26_1 = {16'b0, cfblk82_out1};
  assign cfblk26_2 = {24'b0, cfblk78_out1};
  assign cfblk26_add_temp = cfblk26_1 + cfblk26_2;
  assign cfblk26_out1 = cfblk26_add_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk27_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk121_out1 = cfblk165_out1 + cfblk26_out1;



  assign cfblk27_out1 = cfblk54_out1 - cfblk121_out1;



  assign cfblk102_out1 = (cfblk27_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk17_out1 = cfblk102_out1 + cfblk30_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk108_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  assign cfblk66_out1 = cfblk50_out1 + cfblk148_out1;



  assign cfblk55_out1 = (cfblk66_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk17_out1, cfblk55_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk17_out1 == 8'b00000000) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk55_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk17_out1;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk18_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk81_out1 = cfblk164_out1 - cfblk79_out1;



  assign cfblk63_out1 = cfblk81_out1 + cfblk151_out1;



  assign dtc_out_4 = cfblk63_out1;



  assign cfblk30_out1 = dtc_out_4;



  assign cfblk50_out1 = cfblk30_out1 + cfblk166_out1;



  assign cfblk77_out1 = cfblk50_out1 + cfblk77_const_val_1;



  assign cfblk40_out1 = cfblk77_out1 + cfblk38_out1;



  DotProduct_block6 u_cfblk70_inst (.in1(cfblk40_out1),  // uint8
                                    .in2(cfblk21_out1),  // uint8
                                    .out1(cfblk70_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk70_out1;



  assign cfblk92_out1 = dtc_out_5;



  cfblk145 u_cfblk145 (.In1(cfblk92_out1),  // uint8
                       .Out1(cfblk145_out1)  // uint8
                       );

  assign cfblk84_out1 = cfblk145_out1 + cfblk36_out1;



  DotProduct_block5 u_cfblk65_inst (.in1(cfblk178_out1),  // uint8
                                    .in2(cfblk84_out1),  // uint8
                                    .out1(cfblk65_out1)  // uint8
                                    );

  assign cfblk76_out1 = cfblk65_out1 - cfblk146_out1;



  assign dtc_out_6 = cfblk76_out1;



  assign cfblk116_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk116_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk94_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  DotProduct_block u_cfblk115_inst (.in1(cfblk108_out1),  // uint8
                                    .in2(cfblk161_out1),  // uint8
                                    .out1(cfblk115_out1)  // uint8
                                    );

  assign cfblk93_out1 = cfblk115_out1 + cfblk153_out1;



  assign cfblk48_out1 = (cfblk93_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk56_out1 = (cfblk48_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk56_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign cfblk94_out1 = cfblk2_out1 + cfblk94_const_val_1;



  assign cfblk29_out1 = cfblk94_out1 + cfblk84_out1;



  assign cfblk45_out1 = cfblk29_out1 + cfblk2_out1;



  assign cfblk88_out1 = cfblk45_out1 + cfblk23_out1;



  assign cfblk129_out1 = cfblk88_out1 + cfblk128_out1;



  assign cfblk9_out1 = cfblk138_out1 - cfblk129_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk9_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk57_out1 = cfblk157_out1 + cfblk8_out1;



  assign cfblk71_out1 = cfblk57_out1 + cfblk71_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk125_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk106_out1 = cfblk162_out1 + cfblk71_out1;



  assign cfblk108_out1 = cfblk106_out1 + cfblk158_out1;



  assign cfblk125_out1 = cfblk108_out1 + cfblk125_const_val_1;



  assign cfblk135 = cfblk125_out1;

  assign Hdl_out = cfblk146_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

