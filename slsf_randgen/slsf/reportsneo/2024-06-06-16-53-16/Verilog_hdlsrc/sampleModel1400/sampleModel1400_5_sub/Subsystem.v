// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1400\sampleModel1400_5_sub\Subsystem.v
// Created: 2024-08-12 00:45:49
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk147                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1400_5_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk147,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk147;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk141_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] Mysubsystem_20_out1;  // uint8
  wire [15:0] Mysubsystem_20_out2;  // uint16
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk70_const_val_1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk112_const_val_1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk122_const_val_1;  // uint8
  wire [7:0] cfblk28_const_val_1;  // uint8
  wire [7:0] cfblk26_const_val_1;  // uint8
  wire [7:0] cfblk15_const_val_1;  // uint8
  wire [7:0] cfblk11_const_val_1;  // uint8
  wire [7:0] cfblk134_const_val_1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [15:0] Mysubsystem_33_out1;  // uint16
  reg [15:0] cfblk166_reg [0:1];  // ufix16 [2]
  wire [15:0] cfblk166_reg_next [0:1];  // ufix16 [2]
  wire [15:0] cfblk166_out1;  // uint16
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] Mysubsystem_11_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  reg [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  reg [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  reg [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  reg [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk47_out1;  // uint8
  reg [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  reg [8:0] cfblk141_div_temp;  // ufix9
  reg [8:0] cfblk141_t_0_0;  // ufix9
  reg [8:0] cfblk102_div_temp;  // ufix9
  reg [8:0] cfblk102_t_0_0;  // ufix9
  reg [8:0] cfblk48_div_temp;  // ufix9
  reg [8:0] cfblk48_t_0_0;  // ufix9
  reg [8:0] cfblk9_div_temp;  // ufix9
  reg [8:0] cfblk9_t_0_0;  // ufix9
  reg [8:0] cfblk59_div_temp;  // ufix9
  reg [8:0] cfblk59_t_0_0;  // ufix9
  reg [8:0] cfblk47_div_temp;  // ufix9
  reg [8:0] cfblk47_t_0_0;  // ufix9
  reg [15:0] cfblk126_varargout_1;  // ufix16
  reg [15:0] cfblk126_div_temp;  // ufix16
  reg [8:0] cfblk77_div_temp;  // ufix9
  reg [8:0] cfblk77_t_0_0;  // ufix9
  reg [8:0] cfblk64_div_temp;  // ufix9
  reg [8:0] cfblk64_t_0_0;  // ufix9


  cfblk154 u_cfblk154 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk154_out1)  // uint8
                       );

  assign cfblk84_out1 = (cfblk154_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk68_out1 = (cfblk84_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk154_out1, cfblk68_out1) begin
    cfblk141_div_temp = 9'b000000000;
    cfblk141_t_0_0 = 9'b000000000;
    if (cfblk68_out1 == 8'b00000000) begin
      cfblk141_out1 = 8'b11111111;
    end
    else begin
      cfblk141_t_0_0 = {1'b0, cfblk154_out1};
      cfblk141_div_temp = cfblk141_t_0_0 / cfblk68_out1;
      if (cfblk141_div_temp[8] != 1'b0) begin
        cfblk141_out1 = 8'b11111111;
      end
      else begin
        cfblk141_out1 = cfblk141_div_temp[7:0];
      end
    end
  end



  assign dtc_out = cfblk141_out1;



  assign cfblk23_out1 = dtc_out;



  assign enb = clk_enable;

  Mysubsystem_20 u_Mysubsystem_20 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_20_out1),  // uint8
                                   .Out2(Mysubsystem_20_out2)  // uint16
                                   );

  assign dtc_out_1 = Mysubsystem_20_out1;



  assign cfblk50_out1 = dtc_out_1;



  assign cfblk70_const_val_1 = 8'b00000000;



  assign cfblk151_out1 = 8'b00000001;



  assign cfblk152_out1 = 8'b00000001;



  assign cfblk112_const_val_1 = 8'b00000000;



  assign cfblk112_out1 = cfblk84_out1 + cfblk112_const_val_1;



  assign cfblk193_out1 = Mysubsystem_20_out2[7:0];



  assign cfblk122_const_val_1 = 8'b00000000;



  assign cfblk28_const_val_1 = 8'b00000000;



  assign cfblk26_const_val_1 = 8'b00000000;



  assign cfblk15_const_val_1 = 8'b00000000;



  assign cfblk11_const_val_1 = 8'b00000000;



  assign cfblk134_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk14_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk130_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk158_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign cfblk8_out1 = cfblk3_out1 - cfblk183_out1;



  assign cfblk129_out1 = (cfblk39_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk3 u_cfblk3 (.u(cfblk129_out1),  // uint8
                   .y(cfblk3_out1)  // uint8
                   );

  assign cfblk27_out1 = cfblk3_out1 + cfblk8_out1;



  DotProduct_block1 u_cfblk139_inst (.in1(cfblk27_out1),  // uint8
                                     .in2(cfblk84_out1),  // uint8
                                     .out1(cfblk139_out1)  // uint8
                                     );

  assign cfblk136_out1 = (cfblk139_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk11_out1 = cfblk136_out1 + cfblk11_const_val_1;



  DotProduct_block2 u_cfblk143_inst (.in1(cfblk11_out1),  // uint8
                                     .in2(cfblk167_out1),  // uint8
                                     .out1(cfblk143_out1)  // uint8
                                     );

  assign cfblk130_out1 = cfblk146_out1 - cfblk13_out1;



  assign cfblk88_out1 = cfblk159_out1 + cfblk130_out1;



  Mysubsystem_33 u_Mysubsystem_33 (.In1(cfblk151_out1),  // uint8
                                   .In2(cfblk88_out1),  // uint8
                                   .Out1(Mysubsystem_33_out1)  // uint16
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 16'b0000000000000000;
        cfblk166_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = Mysubsystem_33_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  DotProduct_block7 u_cfblk19_inst (.in1(cfblk6_out1),  // uint8
                                    .in2(cfblk101_out1),  // uint8
                                    .out1(cfblk19_out1)  // uint8
                                    );

  assign cfblk58_out1 = (cfblk19_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk105_out1;



  assign cfblk123_out1 = dtc_out_2;



  assign cfblk127_out1 = cfblk123_out1 + cfblk58_out1;



  always @(cfblk127_out1, cfblk131_out1) begin
    cfblk102_div_temp = 9'b000000000;
    cfblk102_t_0_0 = 9'b000000000;
    if (cfblk131_out1 == 8'b00000000) begin
      cfblk102_out1 = 8'b11111111;
    end
    else begin
      cfblk102_t_0_0 = {1'b0, cfblk127_out1};
      cfblk102_div_temp = cfblk102_t_0_0 / cfblk131_out1;
      if (cfblk102_div_temp[8] != 1'b0) begin
        cfblk102_out1 = 8'b11111111;
      end
      else begin
        cfblk102_out1 = cfblk102_div_temp[7:0];
      end
    end
  end



  assign cfblk28_out1 = cfblk102_out1 + cfblk28_const_val_1;



  Mysubsystem_11 u_Mysubsystem_11 (.In1(cfblk29_out1),  // uint8
                                   .In2(cfblk28_out1),  // uint8
                                   .In3(cfblk50_out1),  // uint8
                                   .Out1(Mysubsystem_11_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = Mysubsystem_11_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk42_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk122_out1 = cfblk40_out1 + cfblk122_const_val_1;



  DotProduct_block21 u_cfblk99_inst (.in1(cfblk122_out1),  // uint8
                                     .in2(cfblk138_out1),  // uint8
                                     .out1(cfblk99_out1)  // uint8
                                     );

  assign cfblk82_out1 = cfblk99_out1 + cfblk76_out1;



  DotProduct_block11 u_cfblk43_inst (.in1(cfblk82_out1),  // uint8
                                     .in2(cfblk14_out1),  // uint8
                                     .out1(cfblk43_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk43_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk14_out1 = cfblk144_out1 + cfblk141_out1;



  assign cfblk21_out1 = cfblk14_out1 + cfblk40_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk21_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk93_out1 = cfblk178_out1 + cfblk37_out1;



  assign dtc_out_3 = cfblk80_out1;



  assign cfblk105_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk105_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  DotProduct_block16 u_cfblk71_inst (.in1(cfblk40_out1),  // uint8
                                     .in2(cfblk126_out1),  // uint8
                                     .out1(cfblk71_out1)  // uint8
                                     );

  DotProduct_block4 u_cfblk146_inst (.in1(cfblk193_out1),  // uint8
                                     .in2(cfblk71_out1),  // uint8
                                     .out1(cfblk146_out1)  // uint8
                                     );

  DotProduct_block18 u_cfblk80_inst (.in1(cfblk146_out1),  // uint8
                                     .in2(cfblk169_out1),  // uint8
                                     .out1(cfblk80_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk80_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk25_out1 = cfblk170_out1 + cfblk93_out1;



  assign cfblk24_out1 = cfblk25_out1 - cfblk176_out1;



  assign cfblk61_out1 = cfblk112_out1 - cfblk24_out1;



  cfblk159 u_cfblk159 (.In1(cfblk101_out1),  // uint8
                       .Out1(cfblk159_out1)  // uint8
                       );

  assign cfblk108_out1 = cfblk152_out1 + cfblk98_out1;



  assign cfblk10_out1 = (cfblk108_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk10_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk128_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  DotProduct_block5 u_cfblk16_inst (.in1(cfblk179_out1),  // uint8
                                    .in2(cfblk64_out1),  // uint8
                                    .out1(cfblk16_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk120_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk138_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk64_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk40_out1 = cfblk49_out1 - cfblk171_out1;



  DotProduct_block13 u_cfblk60_inst (.in1(cfblk95_out1),  // uint8
                                     .in2(cfblk40_out1),  // uint8
                                     .out1(cfblk60_out1)  // uint8
                                     );

  DotProduct_block15 u_cfblk67_inst (.in1(cfblk60_out1),  // uint8
                                     .in2(cfblk154_out1),  // uint8
                                     .out1(cfblk67_out1)  // uint8
                                     );

  DotProduct_block17 u_cfblk79_inst (.in1(cfblk67_out1),  // uint8
                                     .in2(cfblk50_out1),  // uint8
                                     .out1(cfblk79_out1)  // uint8
                                     );

  always @(cfblk151_out1, cfblk79_out1) begin
    cfblk48_div_temp = 9'b000000000;
    cfblk48_t_0_0 = 9'b000000000;
    if (cfblk151_out1 == 8'b00000000) begin
      cfblk48_out1 = 8'b11111111;
    end
    else begin
      cfblk48_t_0_0 = {1'b0, cfblk79_out1};
      cfblk48_div_temp = cfblk48_t_0_0 / cfblk151_out1;
      if (cfblk48_div_temp[8] != 1'b0) begin
        cfblk48_out1 = 8'b11111111;
      end
      else begin
        cfblk48_out1 = cfblk48_div_temp[7:0];
      end
    end
  end



  assign cfblk131_out1 = (cfblk2_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk131_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk125_out1 = cfblk175_out1 + cfblk48_out1;



  assign cfblk138_out1 = cfblk125_out1 + cfblk163_out1;



  assign cfblk76_out1 = cfblk138_out1 + cfblk40_out1;



  DotProduct_block u_cfblk13_inst (.in1(cfblk76_out1),  // uint8
                                   .in2(cfblk68_out1),  // uint8
                                   .out1(cfblk13_out1)  // uint8
                                   );

  assign cfblk142_out1 = cfblk13_out1 + cfblk145_out1;



  assign cfblk69_out1 = cfblk142_out1 + cfblk181_out1;



  assign dtc_out_4 = cfblk69_out1;



  assign cfblk104_out1 = dtc_out_4;



  DotProduct_block6 u_cfblk17_inst (.in1(cfblk29_out1),  // uint8
                                    .in2(cfblk95_out1),  // uint8
                                    .out1(cfblk17_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk17_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  DotProduct_block9 u_cfblk37_inst (.in1(cfblk165_out1),  // uint8
                                    .in2(cfblk104_out1),  // uint8
                                    .out1(cfblk37_out1)  // uint8
                                    );

  assign cfblk144_out1 = cfblk37_out1 - cfblk128_out1;



  DotProduct_block14 u_cfblk62_inst (.in1(cfblk95_out1),  // uint8
                                     .in2(cfblk59_out1),  // uint8
                                     .out1(cfblk62_out1)  // uint8
                                     );

  always @(cfblk120_out1, cfblk50_out1) begin
    cfblk9_div_temp = 9'b000000000;
    cfblk9_t_0_0 = 9'b000000000;
    if (cfblk50_out1 == 8'b00000000) begin
      cfblk9_out1 = 8'b11111111;
    end
    else begin
      cfblk9_t_0_0 = {1'b0, cfblk120_out1};
      cfblk9_div_temp = cfblk9_t_0_0 / cfblk50_out1;
      if (cfblk9_div_temp[8] != 1'b0) begin
        cfblk9_out1 = 8'b11111111;
      end
      else begin
        cfblk9_out1 = cfblk9_div_temp[7:0];
      end
    end
  end



  assign cfblk42_out1 = (cfblk9_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk70_out1 = cfblk42_out1 + cfblk70_const_val_1;



  assign cfblk100_out1 = cfblk141_out1 + cfblk70_out1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk100_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  DotProduct_block12 u_cfblk54_inst (.in1(cfblk2_out1),  // uint8
                                     .in2(cfblk62_out1),  // uint8
                                     .out1(cfblk54_out1)  // uint8
                                     );

  DotProduct_block20 u_cfblk98_inst (.in1(cfblk54_out1),  // uint8
                                     .in2(cfblk144_out1),  // uint8
                                     .out1(cfblk98_out1)  // uint8
                                     );

  assign cfblk75_out1 = cfblk4_out1 - cfblk29_out1;



  assign cfblk96_out1 = cfblk75_out1 + cfblk98_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk96_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk117_out1 = cfblk174_out1 + cfblk16_out1;



  assign cfblk128_out1 = (cfblk117_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block8 u_cfblk35_inst (.in1(cfblk128_out1),  // uint8
                                    .in2(cfblk152_out1),  // uint8
                                    .out1(cfblk35_out1)  // uint8
                                    );

  assign cfblk86_out1 = (cfblk35_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk173_out1, cfblk86_out1) begin
    cfblk59_div_temp = 9'b000000000;
    cfblk59_t_0_0 = 9'b000000000;
    if (cfblk173_out1 == 8'b00000000) begin
      cfblk59_out1 = 8'b11111111;
    end
    else begin
      cfblk59_t_0_0 = {1'b0, cfblk86_out1};
      cfblk59_div_temp = cfblk59_t_0_0 / cfblk173_out1;
      if (cfblk59_div_temp[8] != 1'b0) begin
        cfblk59_out1 = 8'b11111111;
      end
      else begin
        cfblk59_out1 = cfblk59_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk59_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk6_out1 = (cfblk134_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk49_out1 = cfblk6_out1 + cfblk172_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk95_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  DotProduct_block3 u_cfblk145_inst (.in1(cfblk182_out1),  // uint8
                                     .in2(cfblk49_out1),  // uint8
                                     .out1(cfblk145_out1)  // uint8
                                     );

  assign cfblk95_out1 = (cfblk145_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk158 u_cfblk158 (.In1(cfblk95_out1),  // uint8
                       .Out1(cfblk158_out1)  // uint8
                       );

  assign cfblk74_out1 = cfblk158_out1 + cfblk159_out1;



  assign cfblk29_out1 = cfblk74_out1 + cfblk61_out1;



  assign dtc_out_5 = cfblk29_out1;



  assign cfblk78_out1 = dtc_out_5;



  assign cfblk120_out1 = cfblk78_out1 + cfblk180_out1;



  always @(cfblk120_out1, cfblk168_out1) begin
    cfblk47_div_temp = 9'b000000000;
    cfblk47_t_0_0 = 9'b000000000;
    if (cfblk168_out1 == 8'b00000000) begin
      cfblk47_out1 = 8'b11111111;
    end
    else begin
      cfblk47_t_0_0 = {1'b0, cfblk120_out1};
      cfblk47_div_temp = cfblk47_t_0_0 / cfblk168_out1;
      if (cfblk47_div_temp[8] != 1'b0) begin
        cfblk47_out1 = 8'b11111111;
      end
      else begin
        cfblk47_out1 = cfblk47_div_temp[7:0];
      end
    end
  end



  always @(cfblk166_out1, cfblk47_out1) begin
    cfblk126_div_temp = 16'b0000000000000000;
    if (cfblk166_out1 == 16'b0000000000000000) begin
      cfblk126_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk126_div_temp = cfblk47_out1 / cfblk166_out1;
      cfblk126_varargout_1 = cfblk126_div_temp;
    end
    if (cfblk126_varargout_1[15:8] != 8'b00000000) begin
      cfblk126_out1 = 8'b11111111;
    end
    else begin
      cfblk126_out1 = cfblk126_varargout_1[7:0];
    end
  end



  always @(cfblk126_out1, cfblk23_out1) begin
    cfblk77_div_temp = 9'b000000000;
    cfblk77_t_0_0 = 9'b000000000;
    if (cfblk126_out1 == 8'b00000000) begin
      cfblk77_out1 = 8'b11111111;
    end
    else begin
      cfblk77_t_0_0 = {1'b0, cfblk23_out1};
      cfblk77_div_temp = cfblk77_t_0_0 / cfblk126_out1;
      if (cfblk77_div_temp[8] != 1'b0) begin
        cfblk77_out1 = 8'b11111111;
      end
      else begin
        cfblk77_out1 = cfblk77_div_temp[7:0];
      end
    end
  end



  assign cfblk26_out1 = cfblk77_out1 + cfblk26_const_val_1;



  assign cfblk15_out1 = cfblk26_out1 + cfblk15_const_val_1;



  assign dtc_out_6 = cfblk101_out1;



  assign cfblk83_out1 = dtc_out_6;



  always @(cfblk15_out1, cfblk83_out1) begin
    cfblk64_div_temp = 9'b000000000;
    cfblk64_t_0_0 = 9'b000000000;
    if (cfblk15_out1 == 8'b00000000) begin
      cfblk64_out1 = 8'b11111111;
    end
    else begin
      cfblk64_t_0_0 = {1'b0, cfblk83_out1};
      cfblk64_div_temp = cfblk64_t_0_0 / cfblk15_out1;
      if (cfblk64_div_temp[8] != 1'b0) begin
        cfblk64_out1 = 8'b11111111;
      end
      else begin
        cfblk64_out1 = cfblk64_div_temp[7:0];
      end
    end
  end



  DotProduct_block19 u_cfblk85_inst (.in1(cfblk64_out1),  // uint8
                                     .in2(cfblk138_out1),  // uint8
                                     .out1(cfblk85_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk85_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk101_out1 = cfblk164_out1 - cfblk143_out1;



  cfblk157 u_cfblk157 (.In1(cfblk101_out1),  // uint8
                       .Out1(cfblk157_out1)  // uint8
                       );

  assign cfblk140_out1 = cfblk141_out1 - cfblk157_out1;



  assign cfblk134_out1 = cfblk140_out1 + cfblk134_const_val_1;



  cfblk4 u_cfblk4 (.u(cfblk134_out1),  // uint8
                   .y(cfblk4_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk4_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  DotProduct_block10 u_cfblk39_inst (.in1(cfblk184_out1),  // uint8
                                     .in2(cfblk177_out1),  // uint8
                                     .out1(cfblk39_out1)  // uint8
                                     );

  assign cfblk147 = cfblk39_out1;

  assign Hdl_out = cfblk35_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

