// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1990\sampleModel1990_sub\Subsystem.v
// Created: 2024-08-16 08:41:33
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1990_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk153_const_val_1;  // uint8
  wire [7:0] cfblk45_const_val_1;  // uint8
  wire [7:0] cfblk127_const_val_1;  // uint8
  wire [7:0] cfblk125_const_val_1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk11_const_val_1;  // uint8
  wire [7:0] cfblk124_const_val_1;  // uint8
  wire [7:0] cfblk9_const_val_1;  // uint8
  wire [7:0] cfblk107_const_val_1;  // uint8
  wire [7:0] cfblk33_const_val_1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk47_out1;  // uint8
  reg [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk18_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [3:0] cfblk2_out1;  // ufix4_E4
  reg [3:0] cfblk169_reg [0:1];  // ufix4 [2]
  wire [3:0] cfblk169_reg_next [0:1];  // ufix4_E4 [2]
  wire [3:0] cfblk169_out1;  // ufix4_E4
  wire [7:0] cfblk7_out1;  // uint8
  wire [31:0] cfblk83_add_cast;  // ufix32
  wire [31:0] cfblk83_add_temp;  // ufix32
  wire [31:0] cfblk83_1;  // ufix32
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  reg [3:0] cfblk168_reg [0:1];  // ufix4 [2]
  wire [3:0] cfblk168_reg_next [0:1];  // ufix4_E4 [2]
  wire [3:0] cfblk168_out1;  // ufix4_E4
  wire [7:0] cfblk15_out1;  // uint8
  wire [31:0] cfblk25_add_cast;  // ufix32
  wire [31:0] cfblk25_add_temp;  // ufix32
  wire [31:0] cfblk25_1;  // ufix32
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk163_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  reg [7:0] cfblk147_out1;  // uint8
  wire [4:0] cfblk70_y;  // ufix5_E4
  wire [31:0] cfblk12_add_cast;  // ufix32
  wire [31:0] cfblk12_add_temp;  // ufix32
  wire [31:0] cfblk12_1;  // ufix32
  wire [7:0] cfblk12_out1;  // uint8
  reg [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  reg [7:0] cfblk87_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk192_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  reg [8:0] cfblk121_div_temp;  // ufix9
  reg [8:0] cfblk121_t_0_0;  // ufix9
  reg [8:0] cfblk115_div_temp;  // ufix9
  reg [8:0] cfblk115_t_0_0;  // ufix9
  reg [8:0] cfblk52_div_temp;  // ufix9
  reg [8:0] cfblk52_t_0_0;  // ufix9
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9
  reg [8:0] cfblk68_div_temp;  // ufix9
  reg [8:0] cfblk68_t_0_0;  // ufix9
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9
  reg [8:0] cfblk147_div_temp;  // ufix9
  reg [8:0] cfblk147_t_0_0;  // ufix9
  reg [8:0] cfblk82_div_temp;  // ufix9
  reg [8:0] cfblk82_t_0_0;  // ufix9
  reg [8:0] cfblk19_div_temp;  // ufix9
  reg [8:0] cfblk19_t_0_0;  // ufix9
  reg [8:0] cfblk46_div_temp;  // ufix9
  reg [8:0] cfblk46_t_0_0;  // ufix9
  reg [8:0] cfblk87_div_temp;  // ufix9
  reg [8:0] cfblk87_t_0_0;  // ufix9
  reg [8:0] cfblk140_div_temp;  // ufix9
  reg [8:0] cfblk140_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk153_const_val_1 = 8'b00000000;



  assign cfblk45_const_val_1 = 8'b00000000;



  assign cfblk127_const_val_1 = 8'b00000000;



  assign cfblk125_const_val_1 = 8'b00000000;



  assign cfblk160_out1 = 8'b00000001;



  assign cfblk11_const_val_1 = 8'b00000000;



  assign cfblk124_const_val_1 = 8'b00000000;



  assign cfblk9_const_val_1 = 8'b00000000;



  assign cfblk107_const_val_1 = 8'b00000000;



  assign cfblk33_const_val_1 = 8'b00000000;



  assign cfblk113_out1 = (cfblk6_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block6 u_cfblk152_inst (.in1(cfblk140_out1),  // uint8
                                     .in2(cfblk113_out1),  // uint8
                                     .out1(cfblk152_out1)  // uint8
                                     );

  assign cfblk111_out1 = cfblk152_out1 + cfblk17_out1;



  assign cfblk41_out1 = (cfblk37_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk153_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk67_out1 = (cfblk161_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out = cfblk153_out1;



  assign cfblk146_out1 = dtc_out;



  assign dtc_out_1 = cfblk146_out1;



  assign cfblk47_out1 = dtc_out_1;



  assign cfblk24_out1 = cfblk47_out1 + cfblk68_out1;



  assign cfblk107_out1 = cfblk24_out1 + cfblk107_const_val_1;



  assign cfblk53_out1 = cfblk107_out1 + cfblk160_out1;



  assign cfblk122_out1 = cfblk53_out1 + cfblk67_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk122_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk85_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  assign cfblk9_out1 = cfblk26_out1 + cfblk9_const_val_1;



  DotProduct_block9 u_cfblk34_inst (.in1(cfblk9_out1),  // uint8
                                    .in2(cfblk154_out1),  // uint8
                                    .out1(cfblk34_out1)  // uint8
                                    );

  assign cfblk128_out1 = cfblk127_out1 + cfblk34_out1;



  assign cfblk78_out1 = cfblk128_out1 - cfblk9_out1;



  assign dtc_out_2 = cfblk78_out1;



  assign cfblk84_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk18_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk50_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk56_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk50_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk131_out1 = (cfblk100_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk22_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  assign cfblk85_out1 = cfblk190_out1 - cfblk131_out1;



  DotProduct_block12 u_cfblk6_inst (.in1(cfblk70_out1),  // uint8
                                    .in2(cfblk57_out1),  // uint8
                                    .out1(cfblk6_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk6_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 4'b0000;
        cfblk169_reg[1] <= 4'b0000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk2_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk83_add_cast = {24'b0, {cfblk169_out1, 4'b0000}};
  assign cfblk83_1 = {24'b0, cfblk7_out1};
  assign cfblk83_add_temp = cfblk83_1 + cfblk83_add_cast;
  assign cfblk83_out1 = cfblk83_add_temp[7:0];



  assign cfblk37_out1 = (cfblk83_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk58_out1 = cfblk50_out1 + cfblk37_out1;



  cfblk164 u_cfblk164 (.In1(cfblk58_out1),  // uint8
                       .Out1(cfblk164_out1)  // uint8
                       );

  DotProduct_block u_cfblk13_inst (.in1(cfblk124_out1),  // uint8
                                   .in2(cfblk164_out1),  // uint8
                                   .out1(cfblk13_out1)  // uint8
                                   );

  DotProduct_block18 u_cfblk76_inst (.in1(cfblk62_out1),  // uint8
                                     .in2(cfblk10_out1),  // uint8
                                     .out1(cfblk76_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk76_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  assign cfblk100_out1 = cfblk186_out1 + cfblk140_out1;



  assign cfblk22_out1 = cfblk64_out1 - cfblk74_out1;



  assign dtc_out_3 = cfblk22_out1;



  assign cfblk62_out1 = dtc_out_3;



  always @(cfblk51_out1, cfblk62_out1) begin
    cfblk121_div_temp = 9'b000000000;
    cfblk121_t_0_0 = 9'b000000000;
    if (cfblk51_out1 == 8'b00000000) begin
      cfblk121_out1 = 8'b11111111;
    end
    else begin
      cfblk121_t_0_0 = {1'b0, cfblk62_out1};
      cfblk121_div_temp = cfblk121_t_0_0 / cfblk51_out1;
      if (cfblk121_div_temp[8] != 1'b0) begin
        cfblk121_out1 = 8'b11111111;
      end
      else begin
        cfblk121_out1 = cfblk121_div_temp[7:0];
      end
    end
  end



  assign cfblk117_out1 = (cfblk121_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk117_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  assign cfblk125_out1 = cfblk28_out1 + cfblk125_const_val_1;



  assign cfblk38_out1 = cfblk125_out1 + cfblk184_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk143_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  DotProduct_block19 u_cfblk91_inst (.in1(cfblk170_out1),  // uint8
                                     .in2(cfblk38_out1),  // uint8
                                     .out1(cfblk91_out1)  // uint8
                                     );

  assign dtc_out_4 = cfblk151_out1;



  assign cfblk116_out1 = dtc_out_4;



  cfblk161 u_cfblk161 (.In1(cfblk116_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  assign cfblk120_out1 = cfblk42_out1 - cfblk106_out1;



  assign cfblk150_out1 = cfblk120_out1 - cfblk161_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk59_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk56_out1 = cfblk174_out1 + cfblk150_out1;



  DotProduct_block1 u_cfblk130_inst (.in1(cfblk94_out1),  // uint8
                                     .in2(cfblk140_out1),  // uint8
                                     .out1(cfblk130_out1)  // uint8
                                     );

  assign cfblk66_out1 = (cfblk130_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk108_out1 = (cfblk66_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk17_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 4'b0000;
        cfblk168_reg[1] <= 4'b0000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk2_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk25_add_cast = {24'b0, {cfblk168_out1, 4'b0000}};
  assign cfblk25_1 = {24'b0, cfblk15_out1};
  assign cfblk25_add_temp = cfblk25_1 + cfblk25_add_cast;
  assign cfblk25_out1 = cfblk25_add_temp[7:0];



  assign cfblk133_out1 = cfblk25_out1 + cfblk1_out1;



  DotProduct_block7 u_cfblk28_inst (.in1(cfblk133_out1),  // uint8
                                    .in2(cfblk172_out1),  // uint8
                                    .out1(cfblk28_out1)  // uint8
                                    );

  assign cfblk10_out1 = cfblk28_out1 + cfblk108_out1;



  assign cfblk153_out1 = cfblk74_out1 + cfblk153_const_val_1;



  assign cfblk154_out1 = cfblk153_out1 + cfblk10_out1;



  assign dtc_out_5 = cfblk154_out1;



  assign cfblk145_out1 = dtc_out_5;



  DotProduct_block5 u_cfblk149_inst (.in1(cfblk42_out1),  // uint8
                                     .in2(cfblk145_out1),  // uint8
                                     .out1(cfblk149_out1)  // uint8
                                     );

  DotProduct_block8 u_cfblk32_inst (.in1(cfblk149_out1),  // uint8
                                    .in2(cfblk56_out1),  // uint8
                                    .out1(cfblk32_out1)  // uint8
                                    );

  assign cfblk50_out1 = (cfblk32_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk29_out1, cfblk50_out1) begin
    cfblk115_div_temp = 9'b000000000;
    cfblk115_t_0_0 = 9'b000000000;
    if (cfblk50_out1 == 8'b00000000) begin
      cfblk115_out1 = 8'b11111111;
    end
    else begin
      cfblk115_t_0_0 = {1'b0, cfblk29_out1};
      cfblk115_div_temp = cfblk115_t_0_0 / cfblk50_out1;
      if (cfblk115_div_temp[8] != 1'b0) begin
        cfblk115_out1 = 8'b11111111;
      end
      else begin
        cfblk115_out1 = cfblk115_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk115_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk29_out1 = cfblk49_out1 - cfblk176_out1;



  assign cfblk45_out1 = cfblk29_out1 + cfblk45_const_val_1;



  assign cfblk127_out1 = cfblk45_out1 + cfblk127_const_val_1;



  always @(cfblk127_out1, cfblk150_out1) begin
    cfblk52_div_temp = 9'b000000000;
    cfblk52_t_0_0 = 9'b000000000;
    if (cfblk150_out1 == 8'b00000000) begin
      cfblk52_out1 = 8'b11111111;
    end
    else begin
      cfblk52_t_0_0 = {1'b0, cfblk127_out1};
      cfblk52_div_temp = cfblk52_t_0_0 / cfblk150_out1;
      if (cfblk52_div_temp[8] != 1'b0) begin
        cfblk52_out1 = 8'b11111111;
      end
      else begin
        cfblk52_out1 = cfblk52_div_temp[7:0];
      end
    end
  end



  assign cfblk3_out1 = (cfblk52_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk95_out1 = cfblk138_out1 + cfblk33_out1;



  always @(cfblk3_out1, cfblk95_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk3_out1 == 8'b00000000) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk95_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk3_out1;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  assign cfblk16_out1 = cfblk18_out1 + cfblk50_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk16_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  DotProduct_block16 u_cfblk7_inst (.in1(cfblk175_out1),  // uint8
                                    .in2(cfblk91_out1),  // uint8
                                    .out1(cfblk7_out1)  // uint8
                                    );

  assign cfblk142_out1 = cfblk72_out1 + cfblk63_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk142_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  DotProduct_block14 u_cfblk63_inst (.in1(cfblk188_out1),  // uint8
                                     .in2(cfblk30_out1),  // uint8
                                     .out1(cfblk63_out1)  // uint8
                                     );

  assign cfblk103_out1 = cfblk63_out1 + cfblk7_out1;



  DotProduct_block17 u_cfblk72_inst (.in1(cfblk103_out1),  // uint8
                                     .in2(cfblk100_out1),  // uint8
                                     .out1(cfblk72_out1)  // uint8
                                     );

  assign cfblk88_out1 = cfblk140_out1 - cfblk72_out1;



  assign dtc_out_6 = cfblk88_out1;



  assign cfblk80_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        cfblk189_reg[0] <= 8'b00000000;
        cfblk189_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk189_reg[0] <= cfblk189_reg_next[0];
          cfblk189_reg[1] <= cfblk189_reg_next[1];
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk80_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  assign cfblk74_out1 = cfblk189_out1 - cfblk94_out1;



  cfblk162 u_cfblk162 (.In1(cfblk74_out1),  // uint8
                       .Out1(cfblk162_out1)  // uint8
                       );

  assign cfblk157_out1 = cfblk140_out1 + cfblk162_out1;



  DotProduct_block4 u_cfblk148_inst (.in1(cfblk157_out1),  // uint8
                                     .in2(cfblk160_out1),  // uint8
                                     .out1(cfblk148_out1)  // uint8
                                     );

  assign cfblk57_out1 = (cfblk148_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk135_out1 = cfblk57_out1 + cfblk13_out1;



  assign cfblk17_out1 = cfblk135_out1 + cfblk150_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk17_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(cfblk173_out1, cfblk1_out1) begin
    cfblk68_div_temp = 9'b000000000;
    cfblk68_t_0_0 = 9'b000000000;
    if (cfblk1_out1 == 8'b00000000) begin
      cfblk68_out1 = 8'b11111111;
    end
    else begin
      cfblk68_t_0_0 = {1'b0, cfblk173_out1};
      cfblk68_div_temp = cfblk68_t_0_0 / cfblk1_out1;
      if (cfblk68_div_temp[8] != 1'b0) begin
        cfblk68_out1 = 8'b11111111;
      end
      else begin
        cfblk68_out1 = cfblk68_div_temp[7:0];
      end
    end
  end



  cfblk163 u_cfblk163 (.In1(cfblk68_out1),  // uint8
                       .Out1(cfblk163_out1)  // uint8
                       );

  always @(cfblk163_out1, cfblk183_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk183_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk163_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk183_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  assign cfblk11_out1 = cfblk44_out1 + cfblk11_const_val_1;



  assign dtc_out_7 = cfblk11_out1;



  assign cfblk15_out1 = dtc_out_7;



  assign cfblk106_out1 = cfblk15_out1 + cfblk103_out1;



  assign cfblk124_out1 = cfblk106_out1 + cfblk124_const_val_1;



  DotProduct_block15 u_cfblk65_inst (.in1(cfblk94_out1),  // uint8
                                     .in2(cfblk124_out1),  // uint8
                                     .out1(cfblk65_out1)  // uint8
                                     );

  assign dtc_out_8 = cfblk65_out1;



  assign cfblk42_out1 = dtc_out_8;



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk42_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk185_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign dtc_out_9 = cfblk1_out1;



  assign cfblk64_out1 = dtc_out_9;



  DotProduct_block20 u_cfblk94_inst (.in1(cfblk64_out1),  // uint8
                                     .in2(cfblk123_out1),  // uint8
                                     .out1(cfblk94_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk94_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  DotProduct_block13 u_cfblk60_inst (.in1(cfblk180_out1),  // uint8
                                     .in2(cfblk85_out1),  // uint8
                                     .out1(cfblk60_out1)  // uint8
                                     );

  assign cfblk123_out1 = (cfblk60_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block3 u_cfblk144_inst (.in1(cfblk123_out1),  // uint8
                                     .in2(cfblk171_out1),  // uint8
                                     .out1(cfblk144_out1)  // uint8
                                     );

  assign cfblk55_out1 = cfblk144_out1 - cfblk74_out1;



  assign cfblk126_out1 = cfblk55_out1 + cfblk178_out1;



  DotProduct_block11 u_cfblk51_inst (.in1(cfblk126_out1),  // uint8
                                     .in2(cfblk46_out1),  // uint8
                                     .out1(cfblk51_out1)  // uint8
                                     );

  assign cfblk134_out1 = cfblk51_out1 - cfblk177_out1;



  always @(cfblk134_out1, cfblk179_out1) begin
    cfblk147_div_temp = 9'b000000000;
    cfblk147_t_0_0 = 9'b000000000;
    if (cfblk179_out1 == 8'b00000000) begin
      cfblk147_out1 = 8'b11111111;
    end
    else begin
      cfblk147_t_0_0 = {1'b0, cfblk134_out1};
      cfblk147_div_temp = cfblk147_t_0_0 / cfblk179_out1;
      if (cfblk147_div_temp[8] != 1'b0) begin
        cfblk147_out1 = 8'b11111111;
      end
      else begin
        cfblk147_out1 = cfblk147_div_temp[7:0];
      end
    end
  end



  assign cfblk2_out1 = cfblk147_out1[7:4];



  assign cfblk70_y = {1'b0, cfblk2_out1};
  assign cfblk70_out1 = {cfblk70_y[3:0], 4'b0000};



  assign cfblk151_out1 = cfblk49_out1 + cfblk70_out1;



  assign cfblk143_out1 = (cfblk151_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk12_add_cast = {24'b0, {cfblk2_out1, 4'b0000}};
  assign cfblk12_1 = {24'b0, cfblk143_out1};
  assign cfblk12_add_temp = cfblk12_1 + cfblk12_add_cast;
  assign cfblk12_out1 = cfblk12_add_temp[7:0];



  always @(cfblk12_out1, cfblk84_out1) begin
    cfblk82_div_temp = 9'b000000000;
    cfblk82_t_0_0 = 9'b000000000;
    if (cfblk84_out1 == 8'b00000000) begin
      cfblk82_out1 = 8'b11111111;
    end
    else begin
      cfblk82_t_0_0 = {1'b0, cfblk12_out1};
      cfblk82_div_temp = cfblk82_t_0_0 / cfblk84_out1;
      if (cfblk82_div_temp[8] != 1'b0) begin
        cfblk82_out1 = 8'b11111111;
      end
      else begin
        cfblk82_out1 = cfblk82_div_temp[7:0];
      end
    end
  end



  always @(cfblk153_out1, cfblk82_out1) begin
    cfblk19_div_temp = 9'b000000000;
    cfblk19_t_0_0 = 9'b000000000;
    if (cfblk153_out1 == 8'b00000000) begin
      cfblk19_out1 = 8'b11111111;
    end
    else begin
      cfblk19_t_0_0 = {1'b0, cfblk82_out1};
      cfblk19_div_temp = cfblk19_t_0_0 / cfblk153_out1;
      if (cfblk19_div_temp[8] != 1'b0) begin
        cfblk19_out1 = 8'b11111111;
      end
      else begin
        cfblk19_out1 = cfblk19_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk19_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  always @(cfblk167_out1, cfblk29_out1) begin
    cfblk46_div_temp = 9'b000000000;
    cfblk46_t_0_0 = 9'b000000000;
    if (cfblk29_out1 == 8'b00000000) begin
      cfblk46_out1 = 8'b11111111;
    end
    else begin
      cfblk46_t_0_0 = {1'b0, cfblk167_out1};
      cfblk46_div_temp = cfblk46_t_0_0 / cfblk29_out1;
      if (cfblk46_div_temp[8] != 1'b0) begin
        cfblk46_out1 = 8'b11111111;
      end
      else begin
        cfblk46_out1 = cfblk46_div_temp[7:0];
      end
    end
  end



  assign cfblk26_out1 = (cfblk46_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block2 u_cfblk138_inst (.in1(cfblk26_out1),  // uint8
                                     .in2(cfblk191_out1),  // uint8
                                     .out1(cfblk138_out1)  // uint8
                                     );

  always @(cfblk138_out1, cfblk182_out1) begin
    cfblk87_div_temp = 9'b000000000;
    cfblk87_t_0_0 = 9'b000000000;
    if (cfblk182_out1 == 8'b00000000) begin
      cfblk87_out1 = 8'b11111111;
    end
    else begin
      cfblk87_t_0_0 = {1'b0, cfblk138_out1};
      cfblk87_div_temp = cfblk87_t_0_0 / cfblk182_out1;
      if (cfblk87_div_temp[8] != 1'b0) begin
        cfblk87_out1 = 8'b11111111;
      end
      else begin
        cfblk87_out1 = cfblk87_div_temp[7:0];
      end
    end
  end



  assign dtc_out_10 = cfblk87_out1;



  assign cfblk90_out1 = dtc_out_10;



  always @(cfblk187_out1, cfblk90_out1) begin
    cfblk140_div_temp = 9'b000000000;
    cfblk140_t_0_0 = 9'b000000000;
    if (cfblk187_out1 == 8'b00000000) begin
      cfblk140_out1 = 8'b11111111;
    end
    else begin
      cfblk140_t_0_0 = {1'b0, cfblk90_out1};
      cfblk140_div_temp = cfblk140_t_0_0 / cfblk187_out1;
      if (cfblk140_div_temp[8] != 1'b0) begin
        cfblk140_out1 = 8'b11111111;
      end
      else begin
        cfblk140_out1 = cfblk140_div_temp[7:0];
      end
    end
  end



  assign cfblk33_out1 = cfblk140_out1 + cfblk33_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk192_process
      if (reset == 1'b1) begin
        cfblk192_reg[0] <= 8'b00000000;
        cfblk192_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk192_reg[0] <= cfblk192_reg_next[0];
          cfblk192_reg[1] <= cfblk192_reg_next[1];
        end
      end
    end

  assign cfblk192_out1 = cfblk192_reg[1];
  assign cfblk192_reg_next[0] = cfblk33_out1;
  assign cfblk192_reg_next[1] = cfblk192_reg[0];



  DotProduct_block10 u_cfblk49_inst (.in1(cfblk192_out1),  // uint8
                                     .in2(cfblk41_out1),  // uint8
                                     .out1(cfblk49_out1)  // uint8
                                     );

  assign cfblk30_out1 = cfblk49_out1 - cfblk47_out1;



  assign cfblk5_out1 = cfblk30_out1 - cfblk32_out1;



  DotProduct u_cfblk119_inst (.in1(cfblk5_out1),  // uint8
                              .in2(cfblk66_out1),  // uint8
                              .out1(cfblk119_out1)  // uint8
                              );

  assign cfblk105_out1 = cfblk119_out1 - cfblk111_out1;



  assign cfblk59_out1 = (cfblk105_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign Hdl_out = cfblk59_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

