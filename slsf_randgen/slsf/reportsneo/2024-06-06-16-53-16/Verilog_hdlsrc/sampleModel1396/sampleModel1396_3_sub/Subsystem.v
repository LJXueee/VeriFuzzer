// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1396\sampleModel1396_3_sub\Subsystem.v
// Created: 2024-06-30 21:16:14
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk125                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1396_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk125,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk125;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  real cfblk128_out1;  // double
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [15:0] cfblk130_out1;  // uint16
  wire [7:0] cfblk97_const_val_1;  // uint8
  wire [7:0] cfblk92_const_val_1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk43_const_val_1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire Mysubsystem_36_out1;
  reg  [0:1] cfblk140_reg;  // ufix1 [2]
  wire [0:1] cfblk140_reg_next;  // ufix1 [2]
  wire cfblk140_out1;
  wire [7:0] cfblk47_const_val_1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk83_const_val_1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk35_const_val_1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk40_const_val_1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk24_const_val_1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk109_const_val_1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [31:0] cfblk72_add_temp;  // ufix32
  wire [31:0] cfblk72_1;  // ufix32
  wire [31:0] cfblk72_2;  // ufix32
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk63_out1;  // uint8
  wire signed [31:0] cfblk25_sub_temp;  // sfix32
  wire signed [31:0] cfblk25_1;  // sfix32
  wire signed [31:0] cfblk25_2;  // sfix32
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk61_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  reg [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  reg [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk89_out1;  // uint8
  reg [8:0] cfblk50_div_temp;  // ufix9
  reg [8:0] cfblk50_t_0_0;  // ufix9
  reg [8:0] cfblk105_div_temp;  // ufix9
  reg [8:0] cfblk105_t_0_0;  // ufix9
  reg [15:0] cfblk101_varargout_1;  // ufix16
  reg [16:0] cfblk101_div_temp;  // ufix17
  reg [16:0] cfblk101_t_0_0;  // ufix17
  reg [8:0] cfblk74_div_temp;  // ufix9
  reg [8:0] cfblk74_t_0_0;  // ufix9
  reg [8:0] cfblk61_div_temp;  // ufix9
  reg [8:0] cfblk61_t_0_0;  // ufix9
  reg [8:0] cfblk85_div_temp;  // ufix9
  reg [8:0] cfblk85_t_0_0;  // ufix9
  reg [8:0] cfblk80_div_temp;  // ufix9
  reg [8:0] cfblk80_t_0_0;  // ufix9
  reg [8:0] cfblk29_div_temp;  // ufix9
  reg [8:0] cfblk29_t_0_0;  // ufix9
  reg [8:0] cfblk108_div_temp;  // ufix9
  reg [8:0] cfblk108_t_0_0;  // ufix9


  initial cfblk128_out1 = 0.0;



  cfblk9 u_cfblk9 (.u($realtobits(cfblk128_out1)),  // double
                   .y(cfblk9_out1)  // uint8
                   );

  assign cfblk129_out1 = 8'b00000000;



  cfblk4 u_cfblk4 (.u(cfblk129_out1),  // uint8
                   .y(cfblk4_out1)  // uint8
                   );

  assign cfblk124_out1 = cfblk9_out1 + cfblk4_out1;



  assign cfblk71_out1 = (cfblk124_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign enb = clk_enable;

  assign cfblk102_out1 = (cfblk60_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk93_out1 = (cfblk102_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk93_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk60_out1 = cfblk150_out1 + cfblk129_out1;



  cfblk130 u_cfblk130 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk130_out1)  // uint16
                       );

  assign cfblk97_const_val_1 = 8'b00000000;



  assign cfblk92_const_val_1 = 8'b00000000;



  assign cfblk6_out1 = 8'b00000000;



  DotProduct_block2 u_cfblk31_inst (.in1(cfblk6_out1),  // uint8
                                    .in2(cfblk129_out1),  // uint8
                                    .out1(cfblk31_out1)  // uint8
                                    );

  assign dtc_out = cfblk31_out1;



  assign cfblk86_out1 = dtc_out;



  assign cfblk43_const_val_1 = 8'b00000000;



  assign cfblk43_out1 = cfblk86_out1 + cfblk43_const_val_1;



  Mysubsystem_36 u_Mysubsystem_36 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .U(cfblk43_out1),  // uint8
                                   .y(Mysubsystem_36_out1)
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 1'b0;
        cfblk140_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = Mysubsystem_36_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  assign cfblk47_const_val_1 = 8'b00000000;



  assign cfblk117_out1 = cfblk130_out1[7:0];



  assign cfblk83_const_val_1 = 8'b00000000;



  assign cfblk131_out1 = 8'b00000000;



  assign cfblk35_const_val_1 = 8'b00000000;



  assign cfblk35_out1 = cfblk131_out1 + cfblk35_const_val_1;



  assign cfblk40_const_val_1 = 8'b00000000;



  assign dtc_out_1 = cfblk129_out1;



  assign cfblk115_out1 = dtc_out_1;



  assign cfblk132_out1 = 8'b00000001;



  assign cfblk24_const_val_1 = 8'b00000000;



  assign cfblk24_out1 = cfblk132_out1 + cfblk24_const_val_1;



  assign cfblk109_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk27_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk121_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk64_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk107_out1 = cfblk79_out1 + cfblk69_out1;



  always @(cfblk107_out1, cfblk60_out1) begin
    cfblk50_div_temp = 9'b000000000;
    cfblk50_t_0_0 = 9'b000000000;
    if (cfblk60_out1 == 8'b00000000) begin
      cfblk50_out1 = 8'b11111111;
    end
    else begin
      cfblk50_t_0_0 = {1'b0, cfblk107_out1};
      cfblk50_div_temp = cfblk50_t_0_0 / cfblk60_out1;
      if (cfblk50_div_temp[8] != 1'b0) begin
        cfblk50_out1 = 8'b11111111;
      end
      else begin
        cfblk50_out1 = cfblk50_div_temp[7:0];
      end
    end
  end



  assign dtc_out_2 = cfblk97_out1;



  assign cfblk73_out1 = dtc_out_2;



  assign cfblk10_out1 = cfblk73_out1 | 8'b00000001;



  assign cfblk37_out1 = (cfblk10_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk40_out1 = cfblk37_out1 + cfblk40_const_val_1;



  DotProduct_block1 u_cfblk113_inst (.in1(cfblk64_out1),  // uint8
                                     .in2(cfblk95_out1),  // uint8
                                     .out1(cfblk113_out1)  // uint8
                                     );

  assign cfblk92_out1 = cfblk18_out1 + cfblk92_const_val_1;



  assign cfblk72_1 = {24'b0, cfblk92_out1};
  assign cfblk72_2 = {31'b0, cfblk140_out1};
  assign cfblk72_add_temp = cfblk72_1 + cfblk72_2;
  assign cfblk72_out1 = cfblk72_add_temp[7:0];



  assign cfblk47_out1 = cfblk72_out1 + cfblk47_const_val_1;



  assign cfblk51_out1 = cfblk47_out1 - cfblk72_out1;



  cfblk7 u_cfblk7 (.u(cfblk51_out1),  // uint8
                   .y(cfblk7_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk7_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  assign cfblk16_out1 = cfblk106_out1 - cfblk105_out1;



  assign cfblk18_out1 = cfblk16_out1 + cfblk141_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk18_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  assign cfblk90_out1 = (cfblk3_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk81_out1 = cfblk90_out1 + cfblk124_out1;



  cfblk133 u_cfblk133 (.In1(cfblk81_out1),  // uint8
                       .Out1(cfblk133_out1)  // uint8
                       );

  assign cfblk97_out1 = cfblk133_out1 + cfblk97_const_val_1;



  assign cfblk121_out1 = cfblk97_out1 - cfblk94_out1;



  always @(cfblk121_out1, cfblk139_out1) begin
    cfblk105_div_temp = 9'b000000000;
    cfblk105_t_0_0 = 9'b000000000;
    if (cfblk139_out1 == 8'b00000000) begin
      cfblk105_out1 = 8'b11111111;
    end
    else begin
      cfblk105_t_0_0 = {1'b0, cfblk121_out1};
      cfblk105_div_temp = cfblk105_t_0_0 / cfblk139_out1;
      if (cfblk105_div_temp[8] != 1'b0) begin
        cfblk105_out1 = 8'b11111111;
      end
      else begin
        cfblk105_out1 = cfblk105_div_temp[7:0];
      end
    end
  end



  DotProduct_block6 u_cfblk67_inst (.in1(cfblk105_out1),  // uint8
                                    .in2(cfblk117_out1),  // uint8
                                    .out1(cfblk67_out1)  // uint8
                                    );

  assign cfblk95_out1 = (cfblk67_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block5 u_cfblk66_inst (.in1(cfblk95_out1),  // uint8
                                    .in2(cfblk101_out1),  // uint8
                                    .out1(cfblk66_out1)  // uint8
                                    );

  always @(cfblk130_out1, cfblk55_out1) begin
    cfblk101_div_temp = 17'b00000000000000000;
    cfblk101_t_0_0 = 17'b00000000000000000;
    if (cfblk55_out1 == 8'b00000000) begin
      cfblk101_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk101_t_0_0 = {1'b0, cfblk130_out1};
      cfblk101_div_temp = cfblk101_t_0_0 / cfblk55_out1;
      if (cfblk101_div_temp[16] != 1'b0) begin
        cfblk101_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk101_varargout_1 = cfblk101_div_temp[15:0];
      end
    end
    if (cfblk101_varargout_1[15:8] != 8'b00000000) begin
      cfblk101_out1 = 8'b11111111;
    end
    else begin
      cfblk101_out1 = cfblk101_varargout_1[7:0];
    end
  end



  always @(cfblk101_out1, cfblk66_out1) begin
    cfblk74_div_temp = 9'b000000000;
    cfblk74_t_0_0 = 9'b000000000;
    if (cfblk66_out1 == 8'b00000000) begin
      cfblk74_out1 = 8'b11111111;
    end
    else begin
      cfblk74_t_0_0 = {1'b0, cfblk101_out1};
      cfblk74_div_temp = cfblk74_t_0_0 / cfblk66_out1;
      if (cfblk74_div_temp[8] != 1'b0) begin
        cfblk74_out1 = 8'b11111111;
      end
      else begin
        cfblk74_out1 = cfblk74_div_temp[7:0];
      end
    end
  end



  assign cfblk65_out1 = cfblk71_out1 + cfblk74_out1;



  assign cfblk83_out1 = cfblk65_out1 + cfblk83_const_val_1;



  assign cfblk69_out1 = cfblk83_out1 - cfblk113_out1;



  assign dtc_out_3 = cfblk69_out1;



  assign cfblk63_out1 = dtc_out_3;



  assign cfblk25_1 = {24'b0, cfblk63_out1};
  assign cfblk25_2 = {16'b0, cfblk130_out1};
  assign cfblk25_sub_temp = cfblk25_1 - cfblk25_2;
  assign cfblk25_out1 = cfblk25_sub_temp[7:0];



  DotProduct_block u_cfblk11_inst (.in1(cfblk25_out1),  // uint8
                                   .in2(cfblk35_out1),  // uint8
                                   .out1(cfblk11_out1)  // uint8
                                   );

  DotProduct_block4 u_cfblk52_inst (.in1(cfblk11_out1),  // uint8
                                    .in2(cfblk40_out1),  // uint8
                                    .out1(cfblk52_out1)  // uint8
                                    );

  always @(cfblk115_out1, cfblk52_out1) begin
    cfblk61_div_temp = 9'b000000000;
    cfblk61_t_0_0 = 9'b000000000;
    if (cfblk115_out1 == 8'b00000000) begin
      cfblk61_out1 = 8'b11111111;
    end
    else begin
      cfblk61_t_0_0 = {1'b0, cfblk52_out1};
      cfblk61_div_temp = cfblk61_t_0_0 / cfblk115_out1;
      if (cfblk61_div_temp[8] != 1'b0) begin
        cfblk61_out1 = 8'b11111111;
      end
      else begin
        cfblk61_out1 = cfblk61_div_temp[7:0];
      end
    end
  end



  assign dtc_out_4 = cfblk61_out1;



  assign cfblk84_out1 = dtc_out_4;



  always @(cfblk121_out1, cfblk84_out1) begin
    cfblk85_div_temp = 9'b000000000;
    cfblk85_t_0_0 = 9'b000000000;
    if (cfblk121_out1 == 8'b00000000) begin
      cfblk85_out1 = 8'b11111111;
    end
    else begin
      cfblk85_t_0_0 = {1'b0, cfblk84_out1};
      cfblk85_div_temp = cfblk85_t_0_0 / cfblk121_out1;
      if (cfblk85_div_temp[8] != 1'b0) begin
        cfblk85_out1 = 8'b11111111;
      end
      else begin
        cfblk85_out1 = cfblk85_div_temp[7:0];
      end
    end
  end



  assign cfblk48_out1 = cfblk60_out1 + cfblk85_out1;



  assign cfblk116_out1 = cfblk48_out1 - cfblk50_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk116_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk137_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  always @(cfblk147_out1, cfblk1_out1) begin
    cfblk80_div_temp = 9'b000000000;
    cfblk80_t_0_0 = 9'b000000000;
    if (cfblk147_out1 == 8'b00000000) begin
      cfblk80_out1 = 8'b11111111;
    end
    else begin
      cfblk80_t_0_0 = {1'b0, cfblk1_out1};
      cfblk80_div_temp = cfblk80_t_0_0 / cfblk147_out1;
      if (cfblk80_div_temp[8] != 1'b0) begin
        cfblk80_out1 = 8'b11111111;
      end
      else begin
        cfblk80_out1 = cfblk80_div_temp[7:0];
      end
    end
  end



  assign cfblk75_out1 = cfblk80_out1 - cfblk143_out1;



  DotProduct_block7 u_cfblk94_inst (.in1(cfblk75_out1),  // uint8
                                    .in2(cfblk149_out1),  // uint8
                                    .out1(cfblk94_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk94_out1;



  assign cfblk27_out1 = dtc_out_5;



  assign cfblk3_out1 = cfblk64_out1 & 8'b11111110;



  DotProduct_block3 u_cfblk32_inst (.in1(cfblk109_out1),  // uint8
                                    .in2(cfblk3_out1),  // uint8
                                    .out1(cfblk32_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk32_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  always @(cfblk144_out1, cfblk27_out1) begin
    cfblk29_div_temp = 9'b000000000;
    cfblk29_t_0_0 = 9'b000000000;
    if (cfblk27_out1 == 8'b00000000) begin
      cfblk29_out1 = 8'b11111111;
    end
    else begin
      cfblk29_t_0_0 = {1'b0, cfblk144_out1};
      cfblk29_div_temp = cfblk29_t_0_0 / cfblk27_out1;
      if (cfblk29_div_temp[8] != 1'b0) begin
        cfblk29_out1 = 8'b11111111;
      end
      else begin
        cfblk29_out1 = cfblk29_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk109_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  always @(cfblk145_out1, cfblk29_out1) begin
    cfblk108_div_temp = 9'b000000000;
    cfblk108_t_0_0 = 9'b000000000;
    if (cfblk29_out1 == 8'b00000000) begin
      cfblk108_out1 = 8'b11111111;
    end
    else begin
      cfblk108_t_0_0 = {1'b0, cfblk145_out1};
      cfblk108_div_temp = cfblk108_t_0_0 / cfblk29_out1;
      if (cfblk108_div_temp[8] != 1'b0) begin
        cfblk108_out1 = 8'b11111111;
      end
      else begin
        cfblk108_out1 = cfblk108_div_temp[7:0];
      end
    end
  end



  assign cfblk49_out1 = (cfblk57_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk79_out1 = cfblk49_out1 - cfblk71_out1;



  assign cfblk59_out1 = (cfblk79_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_6 = cfblk59_out1;



  assign cfblk110_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk110_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  DotProduct u_cfblk106_inst (.in1(cfblk146_out1),  // uint8
                              .in2(cfblk108_out1),  // uint8
                              .out1(cfblk106_out1)  // uint8
                              );

  cfblk5 u_cfblk5 (.u(cfblk106_out1),  // uint8
                   .y(cfblk5_out1)  // uint8
                   );

  assign cfblk14_out1 = cfblk5_out1 + cfblk4_out1;



  assign cfblk19_out1 = (cfblk14_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk68_out1 = cfblk19_out1 + cfblk24_out1;



  assign cfblk64_out1 = cfblk68_out1 + cfblk94_out1;



  assign cfblk57_out1 = (cfblk64_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk109_out1 = cfblk57_out1 + cfblk109_const_val_1;



  assign cfblk20_out1 = (cfblk109_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_7 = cfblk20_out1;



  assign cfblk89_out1 = dtc_out_7;



  assign cfblk55_out1 = cfblk89_out1 - cfblk67_out1;



  assign cfblk125 = cfblk55_out1;

  assign Hdl_out = cfblk109_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

