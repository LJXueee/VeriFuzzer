// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1912\sampleModel1912_4_sub\Subsystem.v
// Created: 2024-06-10 17:29:04
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1912_4_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk42_const_val_1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk31_const_val_1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk117_const_val_1;  // uint8
  wire [7:0] cfblk98_const_val_1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk33_const_val_1;  // uint8
  wire [7:0] cfblk67_const_val_1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk51_const_val_1;  // uint8
  wire [7:0] cfblk112_const_val_1;  // uint8
  wire [7:0] cfblk79_const_val_1;  // uint8
  wire [7:0] Mysubsystem_21_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] Mysubsystem_23_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] Mysubsystem_22_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk135_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] Mysubsystem_36_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  reg [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] Mysubsystem_30_out1;  // uint8
  wire [7:0] Mysubsystem_21_out2;  // ufix8_En7
  wire [7:0] Mysubsystem_11_out1;  // uint8
  wire [7:0] Mysubsystem_11_out2;  // ufix8_En7
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  reg [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  reg [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire signed [31:0] cfblk87_sub_cast;  // sfix32_En7
  wire signed [31:0] cfblk87_sub_cast_1;  // sfix32_En7
  wire signed [31:0] cfblk87_sub_temp;  // sfix32_En7
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk136_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  reg [8:0] cfblk11_div_temp;  // ufix9
  reg [8:0] cfblk11_t_0_0;  // ufix9
  reg [8:0] cfblk100_div_temp;  // ufix9
  reg [8:0] cfblk100_t_0_0;  // ufix9
  reg [8:0] cfblk84_div_temp;  // ufix9
  reg [8:0] cfblk84_t_0_0;  // ufix9
  reg [8:0] cfblk13_div_temp;  // ufix9
  reg [8:0] cfblk13_t_0_0;  // ufix9
  reg [8:0] cfblk113_div_temp;  // ufix9
  reg [8:0] cfblk113_t_0_0;  // ufix9
  reg [8:0] cfblk99_div_temp;  // ufix9
  reg [8:0] cfblk99_t_0_0;  // ufix9
  reg [8:0] cfblk105_div_temp;  // ufix9
  reg [8:0] cfblk105_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk42_const_val_1 = 8'b00000000;



  assign cfblk129_out1 = 8'b00000000;



  assign cfblk4_out1 = 8'b00000000;



  assign cfblk31_const_val_1 = 8'b00000000;



  assign cfblk31_out1 = cfblk129_out1 + cfblk31_const_val_1;



  cfblk131 u_cfblk131 (.In1(cfblk31_out1),  // uint8
                       .Out1(cfblk131_out1)  // uint8
                       );

  cfblk7 u_cfblk7 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk131_out1),  // uint8
                   .Y(cfblk7_out1)  // uint8
                   );

  assign cfblk128_out1 = 8'b00000001;



  assign cfblk117_const_val_1 = 8'b00000000;



  assign cfblk98_const_val_1 = 8'b00000000;



  assign cfblk19_out1 = (cfblk128_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk33_const_val_1 = 8'b00000000;



  assign cfblk67_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk103_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign dtc_out = cfblk150_out1;



  assign cfblk40_out1 = dtc_out;



  assign cfblk67_out1 = cfblk40_out1 + cfblk67_const_val_1;



  assign cfblk103_out1 = (cfblk67_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk51_const_val_1 = 8'b00000000;



  assign cfblk112_const_val_1 = 8'b00000000;



  assign cfblk79_const_val_1 = 8'b00000000;



  assign dtc_out_1 = Mysubsystem_21_out1;



  assign cfblk88_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk8_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk86_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  assign cfblk5_out1 = cfblk44_out1 & 8'b11111110;



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk126_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  Mysubsystem_23 u_Mysubsystem_23 (.In1(cfblk23_out1),  // uint8
                                   .Out1(Mysubsystem_23_out1)  // uint8
                                   );

  Mysubsystem_22 u_Mysubsystem_22 (.In1(cfblk58_out1),  // uint8
                                   .In2(Mysubsystem_23_out1),  // uint8
                                   .Out1(Mysubsystem_22_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk30_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  assign cfblk17_out1 = cfblk81_out1 + cfblk137_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk135_process
      if (reset == 1'b1) begin
        cfblk135_reg[0] <= 8'b00000000;
        cfblk135_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk135_reg[0] <= cfblk135_reg_next[0];
          cfblk135_reg[1] <= cfblk135_reg_next[1];
        end
      end
    end

  assign cfblk135_out1 = cfblk135_reg[1];
  assign cfblk135_reg_next[0] = cfblk92_out1;
  assign cfblk135_reg_next[1] = cfblk135_reg[0];



  DotProduct_block12 u_cfblk92_inst (.in1(cfblk135_out1),  // uint8
                                     .in2(cfblk17_out1),  // uint8
                                     .out1(cfblk92_out1)  // uint8
                                     );

  assign cfblk44_out1 = cfblk58_out1 + cfblk92_out1;



  assign cfblk51_out1 = cfblk98_out1 + cfblk51_const_val_1;



  assign cfblk62_out1 = cfblk51_out1 + cfblk44_out1;



  Mysubsystem_36 u_Mysubsystem_36 (.In1(cfblk62_out1),  // uint8
                                   .Out1(Mysubsystem_36_out1)  // uint8
                                   );

  assign cfblk33_out1 = cfblk83_out1 + cfblk33_const_val_1;



  assign dtc_out_2 = cfblk33_out1;



  assign cfblk58_out1 = dtc_out_2;



  assign cfblk81_out1 = cfblk58_out1 + cfblk76_out1;



  assign cfblk26_out1 = cfblk81_out1 + cfblk125_out1;



  assign cfblk23_out1 = cfblk26_out1 + cfblk19_out1;



  always @(cfblk103_out1, cfblk23_out1) begin
    cfblk11_div_temp = 9'b000000000;
    cfblk11_t_0_0 = 9'b000000000;
    if (cfblk103_out1 == 8'b00000000) begin
      cfblk11_out1 = 8'b11111111;
    end
    else begin
      cfblk11_t_0_0 = {1'b0, cfblk23_out1};
      cfblk11_div_temp = cfblk11_t_0_0 / cfblk103_out1;
      if (cfblk11_div_temp[8] != 1'b0) begin
        cfblk11_out1 = 8'b11111111;
      end
      else begin
        cfblk11_out1 = cfblk11_div_temp[7:0];
      end
    end
  end



  DotProduct_block7 u_cfblk38_inst (.in1(cfblk11_out1),  // uint8
                                    .in2(cfblk121_out1),  // uint8
                                    .out1(cfblk38_out1)  // uint8
                                    );

  assign cfblk102_out1 = cfblk38_out1 + cfblk26_out1;



  always @(cfblk102_out1, cfblk53_out1) begin
    cfblk100_div_temp = 9'b000000000;
    cfblk100_t_0_0 = 9'b000000000;
    if (cfblk53_out1 == 8'b00000000) begin
      cfblk100_out1 = 8'b11111111;
    end
    else begin
      cfblk100_t_0_0 = {1'b0, cfblk102_out1};
      cfblk100_div_temp = cfblk100_t_0_0 / cfblk53_out1;
      if (cfblk100_div_temp[8] != 1'b0) begin
        cfblk100_out1 = 8'b11111111;
      end
      else begin
        cfblk100_out1 = cfblk100_div_temp[7:0];
      end
    end
  end



  DotProduct_block6 u_cfblk37_inst (.in1(cfblk100_out1),  // uint8
                                    .in2(cfblk124_out1),  // uint8
                                    .out1(cfblk37_out1)  // uint8
                                    );

  Mysubsystem_30 u_Mysubsystem_30 (.In1(cfblk37_out1),  // uint8
                                   .In2(Mysubsystem_36_out1),  // uint8
                                   .Out1(Mysubsystem_30_out1)  // uint8
                                   );

  Mysubsystem_21 u_Mysubsystem_21 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(Mysubsystem_30_out1),  // uint8
                                   .In2(Mysubsystem_22_out1),  // uint8
                                   .Out1(Mysubsystem_21_out1),  // uint8
                                   .Out2(Mysubsystem_21_out2)  // ufix8_En7
                                   );

  Mysubsystem_11 u_Mysubsystem_11 (.In1(Mysubsystem_21_out2),  // ufix8_En7
                                   .Out1(Mysubsystem_11_out1),  // uint8
                                   .Out2(Mysubsystem_11_out2)  // ufix8_En7
                                   );

  assign cfblk27_out1 = cfblk12_out1 - cfblk19_out1;



  assign cfblk30_out1 = cfblk27_out1 + cfblk83_out1;



  assign cfblk98_out1 = cfblk50_out1 + cfblk98_const_val_1;



  cfblk130 u_cfblk130 (.In1(cfblk98_out1),  // uint8
                       .Out1(cfblk130_out1)  // uint8
                       );

  assign dtc_out_3 = cfblk6_out1;



  assign cfblk124_out1 = dtc_out_3;



  assign cfblk118_out1 = cfblk124_out1 + cfblk130_out1;



  assign cfblk85_out1 = cfblk14_out1 - cfblk128_out1;



  assign cfblk117_out1 = cfblk85_out1 + cfblk117_const_val_1;



  DotProduct_block4 u_cfblk21_inst (.in1(cfblk117_out1),  // uint8
                                    .in2(cfblk118_out1),  // uint8
                                    .out1(cfblk21_out1)  // uint8
                                    );

  assign cfblk18_out1 = cfblk105_out1 + cfblk21_out1;



  assign dtc_out_4 = cfblk18_out1;



  assign cfblk20_out1 = dtc_out_4;



  always @(cfblk20_out1, cfblk7_out1) begin
    cfblk84_div_temp = 9'b000000000;
    cfblk84_t_0_0 = 9'b000000000;
    if (cfblk20_out1 == 8'b00000000) begin
      cfblk84_out1 = 8'b11111111;
    end
    else begin
      cfblk84_t_0_0 = {1'b0, cfblk7_out1};
      cfblk84_div_temp = cfblk84_t_0_0 / cfblk20_out1;
      if (cfblk84_div_temp[8] != 1'b0) begin
        cfblk84_out1 = 8'b11111111;
      end
      else begin
        cfblk84_out1 = cfblk84_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk84_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  assign cfblk83_out1 = cfblk42_out1 + cfblk138_out1;



  assign cfblk108_out1 = (cfblk83_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block5 u_cfblk24_inst (.in1(cfblk108_out1),  // uint8
                                    .in2(cfblk30_out1),  // uint8
                                    .out1(cfblk24_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk24_out1;



  assign cfblk63_out1 = dtc_out_5;



  DotProduct_block9 u_cfblk46_inst (.in1(cfblk63_out1),  // uint8
                                    .in2(Mysubsystem_11_out1),  // uint8
                                    .out1(cfblk46_out1)  // uint8
                                    );

  assign cfblk86_out1 = (cfblk46_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk8_out1 = cfblk113_out1 | 8'b00000001;



  DotProduct_block u_cfblk106_inst (.in1(cfblk114_out1),  // uint8
                                    .in2(cfblk8_out1),  // uint8
                                    .out1(cfblk106_out1)  // uint8
                                    );

  assign cfblk94_out1 = cfblk106_out1 + cfblk86_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk94_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  assign cfblk57_out1 = cfblk4_out1 + cfblk142_out1;



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk57_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  DotProduct_block8 u_cfblk41_inst (.in1(cfblk3_out1),  // uint8
                                    .in2(cfblk44_out1),  // uint8
                                    .out1(cfblk41_out1)  // uint8
                                    );

  always @(cfblk129_out1, cfblk15_out1) begin
    cfblk13_div_temp = 9'b000000000;
    cfblk13_t_0_0 = 9'b000000000;
    if (cfblk129_out1 == 8'b00000000) begin
      cfblk13_out1 = 8'b11111111;
    end
    else begin
      cfblk13_t_0_0 = {1'b0, cfblk15_out1};
      cfblk13_div_temp = cfblk13_t_0_0 / cfblk129_out1;
      if (cfblk13_div_temp[8] != 1'b0) begin
        cfblk13_out1 = 8'b11111111;
      end
      else begin
        cfblk13_out1 = cfblk13_div_temp[7:0];
      end
    end
  end



  DotProduct_block3 u_cfblk14_inst (.in1(cfblk13_out1),  // uint8
                                    .in2(cfblk41_out1),  // uint8
                                    .out1(cfblk14_out1)  // uint8
                                    );

  assign cfblk122_out1 = cfblk14_out1 + cfblk43_out1;



  assign cfblk6_out1 = cfblk122_out1 & 8'b11111110;



  always @(cfblk6_out1, cfblk99_out1) begin
    cfblk113_div_temp = 9'b000000000;
    cfblk113_t_0_0 = 9'b000000000;
    if (cfblk99_out1 == 8'b00000000) begin
      cfblk113_out1 = 8'b11111111;
    end
    else begin
      cfblk113_t_0_0 = {1'b0, cfblk6_out1};
      cfblk113_div_temp = cfblk113_t_0_0 / cfblk99_out1;
      if (cfblk113_div_temp[8] != 1'b0) begin
        cfblk113_out1 = 8'b11111111;
      end
      else begin
        cfblk113_out1 = cfblk113_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk113_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  always @(cfblk140_out1, cfblk70_out1) begin
    cfblk99_div_temp = 9'b000000000;
    cfblk99_t_0_0 = 9'b000000000;
    if (cfblk70_out1 == 8'b00000000) begin
      cfblk99_out1 = 8'b11111111;
    end
    else begin
      cfblk99_t_0_0 = {1'b0, cfblk140_out1};
      cfblk99_div_temp = cfblk99_t_0_0 / cfblk70_out1;
      if (cfblk99_div_temp[8] != 1'b0) begin
        cfblk99_out1 = 8'b11111111;
      end
      else begin
        cfblk99_out1 = cfblk99_div_temp[7:0];
      end
    end
  end



  cfblk133 u_cfblk133 (.In1(cfblk99_out1),  // uint8
                       .Out1(cfblk133_out1)  // uint8
                       );

  assign cfblk111_out1 = cfblk133_out1 - cfblk98_out1;



  DotProduct_block2 u_cfblk12_inst (.in1(cfblk111_out1),  // uint8
                                    .in2(cfblk145_out1),  // uint8
                                    .out1(cfblk12_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk126_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk56_out1 = cfblk144_out1 - cfblk12_out1;



  cfblk132 u_cfblk132 (.In1(cfblk56_out1),  // uint8
                       .Out1(cfblk132_out1)  // uint8
                       );

  assign cfblk125_out1 = cfblk132_out1 + cfblk103_out1;



  assign cfblk16_out1 = cfblk125_out1 + cfblk43_out1;



  assign cfblk87_sub_cast = {17'b0, {cfblk16_out1, 7'b0000000}};
  assign cfblk87_sub_cast_1 = {24'b0, Mysubsystem_11_out2};
  assign cfblk87_sub_temp = cfblk87_sub_cast - cfblk87_sub_cast_1;
  assign cfblk87_out1 = cfblk87_sub_temp[14:7];



  always @(posedge clk or posedge reset)
    begin : cfblk136_process
      if (reset == 1'b1) begin
        cfblk136_reg[0] <= 8'b00000000;
        cfblk136_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk136_reg[0] <= cfblk136_reg_next[0];
          cfblk136_reg[1] <= cfblk136_reg_next[1];
        end
      end
    end

  assign cfblk136_out1 = cfblk136_reg[1];
  assign cfblk136_reg_next[0] = cfblk87_out1;
  assign cfblk136_reg_next[1] = cfblk136_reg[0];



  assign cfblk53_out1 = cfblk136_out1 + cfblk5_out1;



  DotProduct_block10 u_cfblk59_inst (.in1(cfblk53_out1),  // uint8
                                     .in2(cfblk143_out1),  // uint8
                                     .out1(cfblk59_out1)  // uint8
                                     );

  assign cfblk112_out1 = cfblk59_out1 + cfblk112_const_val_1;



  assign cfblk36_out1 = (cfblk112_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk50_out1 = cfblk36_out1 + cfblk141_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk121_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  cfblk9 u_cfblk9 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk89_out1),  // uint8
                   .Y(cfblk9_out1)  // uint8
                   );

  assign cfblk42_out1 = cfblk9_out1 + cfblk42_const_val_1;



  assign cfblk75_out1 = cfblk42_out1 + cfblk43_out1;



  assign cfblk70_out1 = (cfblk75_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk123_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  always @(cfblk149_out1, cfblk70_out1) begin
    cfblk105_div_temp = 9'b000000000;
    cfblk105_t_0_0 = 9'b000000000;
    if (cfblk70_out1 == 8'b00000000) begin
      cfblk105_out1 = 8'b11111111;
    end
    else begin
      cfblk105_t_0_0 = {1'b0, cfblk149_out1};
      cfblk105_div_temp = cfblk105_t_0_0 / cfblk70_out1;
      if (cfblk105_div_temp[8] != 1'b0) begin
        cfblk105_out1 = 8'b11111111;
      end
      else begin
        cfblk105_out1 = cfblk105_div_temp[7:0];
      end
    end
  end



  assign cfblk107_out1 = cfblk105_out1 + cfblk148_out1;



  assign cfblk123_out1 = (cfblk107_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_6 = cfblk123_out1;



  assign cfblk74_out1 = dtc_out_6;



  assign cfblk121_out1 = cfblk79_out1 + cfblk74_out1;



  DotProduct_block1 u_cfblk114_inst (.in1(cfblk79_out1),  // uint8
                                     .in2(cfblk121_out1),  // uint8
                                     .out1(cfblk114_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk114_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk15_out1 = cfblk147_out1 + cfblk50_out1;



  assign cfblk43_out1 = cfblk15_out1 + cfblk51_out1;



  assign cfblk79_out1 = cfblk43_out1 + cfblk79_const_val_1;



  assign cfblk126_out1 = cfblk79_out1 + cfblk102_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk126_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  DotProduct_block11 u_cfblk76_inst (.in1(cfblk146_out1),  // uint8
                                     .in2(cfblk88_out1),  // uint8
                                     .out1(cfblk76_out1)  // uint8
                                     );

  assign dtc_out_7 = cfblk76_out1;



  assign cfblk89_out1 = dtc_out_7;



  assign Hdl_out = cfblk89_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

