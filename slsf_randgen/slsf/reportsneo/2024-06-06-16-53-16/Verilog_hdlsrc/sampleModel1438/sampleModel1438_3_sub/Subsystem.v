// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1438\sampleModel1438_3_sub\Subsystem.v
// Created: 2024-08-12 05:13:13
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk136                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1438_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk136,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk136;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk129_const_val_1;  // uint8
  wire [7:0] cfblk87_const_val_1;  // uint8
  wire [7:0] cfblk120_const_val_1;  // uint8
  wire [7:0] cfblk109_const_val_1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk130_out1;  // uint8
  wire [15:0] cfblk138_out1;  // uint16
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk20_const_val_1;  // uint8
  wire [7:0] cfblk32_const_val_1;  // uint8
  wire [7:0] cfblk24_const_val_1;  // uint8
  wire [7:0] cfblk18_const_val_1;  // uint8
  wire [7:0] cfblk37_const_val_1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  reg [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk95_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  reg [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk33_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  reg [8:0] cfblk42_div_temp;  // ufix9
  reg [8:0] cfblk42_t_0_0;  // ufix9
  reg [8:0] cfblk55_div_temp;  // ufix9
  reg [8:0] cfblk55_t_0_0;  // ufix9
  reg [8:0] cfblk58_div_temp;  // ufix9
  reg [8:0] cfblk58_t_0_0;  // ufix9
  reg [8:0] cfblk95_div_temp;  // ufix9
  reg [8:0] cfblk95_t_0_0;  // ufix9
  reg [8:0] cfblk85_div_temp;  // ufix9
  reg [8:0] cfblk85_t_0_0;  // ufix9
  reg [8:0] cfblk114_div_temp;  // ufix9
  reg [8:0] cfblk114_t_0_0;  // ufix9
  reg [8:0] cfblk75_div_temp;  // ufix9
  reg [8:0] cfblk75_t_0_0;  // ufix9
  reg [8:0] cfblk132_div_temp;  // ufix9
  reg [8:0] cfblk132_t_0_0;  // ufix9
  reg [8:0] cfblk111_div_temp;  // ufix9
  reg [8:0] cfblk111_t_0_0;  // ufix9
  reg [8:0] cfblk90_div_temp;  // ufix9
  reg [8:0] cfblk90_t_0_0;  // ufix9
  reg [8:0] cfblk134_div_temp;  // ufix9
  reg [8:0] cfblk134_t_0_0;  // ufix9
  reg [8:0] cfblk116_div_temp;  // ufix9
  reg [8:0] cfblk116_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk129_const_val_1 = 8'b00000000;



  assign cfblk87_const_val_1 = 8'b00000000;



  assign cfblk120_const_val_1 = 8'b00000000;



  assign cfblk109_const_val_1 = 8'b00000000;



  assign cfblk139_out1 = 8'b00000001;



  assign dtc_out = cfblk139_out1;



  assign cfblk130_out1 = dtc_out;



  cfblk138 u_cfblk138 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk138_out1)  // uint16
                       );

  assign cfblk172_out1 = cfblk138_out1[7:0];



  assign cfblk20_const_val_1 = 8'b00000000;



  assign cfblk32_const_val_1 = 8'b00000000;



  assign cfblk24_const_val_1 = 8'b00000000;



  assign cfblk18_const_val_1 = 8'b00000000;



  assign cfblk37_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk21_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(cfblk101_out1, cfblk120_out1) begin
    cfblk42_div_temp = 9'b000000000;
    cfblk42_t_0_0 = 9'b000000000;
    if (cfblk120_out1 == 8'b00000000) begin
      cfblk42_out1 = 8'b11111111;
    end
    else begin
      cfblk42_t_0_0 = {1'b0, cfblk101_out1};
      cfblk42_div_temp = cfblk42_t_0_0 / cfblk120_out1;
      if (cfblk42_div_temp[8] != 1'b0) begin
        cfblk42_out1 = 8'b11111111;
      end
      else begin
        cfblk42_out1 = cfblk42_div_temp[7:0];
      end
    end
  end



  assign cfblk79_out1 = cfblk42_out1 + cfblk71_out1;



  assign cfblk16_out1 = cfblk79_out1 - cfblk4_out1;



  assign cfblk34_out1 = cfblk16_out1 + cfblk45_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk34_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk81_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk45_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  cfblk144 u_cfblk144 (.In1(cfblk68_out1),  // uint8
                       .Out1(cfblk144_out1)  // uint8
                       );

  assign cfblk101_out1 = cfblk81_out1 - cfblk91_out1;



  assign cfblk32_out1 = cfblk101_out1 + cfblk32_const_val_1;



  assign cfblk100_out1 = (cfblk32_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk100_out1, cfblk144_out1) begin
    cfblk55_div_temp = 9'b000000000;
    cfblk55_t_0_0 = 9'b000000000;
    if (cfblk144_out1 == 8'b00000000) begin
      cfblk55_out1 = 8'b11111111;
    end
    else begin
      cfblk55_t_0_0 = {1'b0, cfblk100_out1};
      cfblk55_div_temp = cfblk55_t_0_0 / cfblk144_out1;
      if (cfblk55_div_temp[8] != 1'b0) begin
        cfblk55_out1 = 8'b11111111;
      end
      else begin
        cfblk55_out1 = cfblk55_div_temp[7:0];
      end
    end
  end



  cfblk141 u_cfblk141 (.In1(cfblk55_out1),  // uint8
                       .Out1(cfblk141_out1)  // uint8
                       );

  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk29_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign cfblk20_out1 = cfblk4_out1 + cfblk20_const_val_1;



  always @(cfblk20_out1, cfblk46_out1) begin
    cfblk58_div_temp = 9'b000000000;
    cfblk58_t_0_0 = 9'b000000000;
    if (cfblk46_out1 == 8'b00000000) begin
      cfblk58_out1 = 8'b11111111;
    end
    else begin
      cfblk58_t_0_0 = {1'b0, cfblk20_out1};
      cfblk58_div_temp = cfblk58_t_0_0 / cfblk46_out1;
      if (cfblk58_div_temp[8] != 1'b0) begin
        cfblk58_out1 = 8'b11111111;
      end
      else begin
        cfblk58_out1 = cfblk58_div_temp[7:0];
      end
    end
  end



  assign cfblk5_out1 = cfblk58_out1 + cfblk141_out1;



  assign dtc_out_1 = cfblk5_out1;



  assign cfblk127_out1 = dtc_out_1;



  always @(cfblk127_out1, cfblk142_out1) begin
    cfblk95_div_temp = 9'b000000000;
    cfblk95_t_0_0 = 9'b000000000;
    if (cfblk142_out1 == 8'b00000000) begin
      cfblk95_out1 = 8'b11111111;
    end
    else begin
      cfblk95_t_0_0 = {1'b0, cfblk127_out1};
      cfblk95_div_temp = cfblk95_t_0_0 / cfblk142_out1;
      if (cfblk95_div_temp[8] != 1'b0) begin
        cfblk95_out1 = 8'b11111111;
      end
      else begin
        cfblk95_out1 = cfblk95_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk95_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  always @(cfblk152_out1, cfblk90_out1) begin
    cfblk85_div_temp = 9'b000000000;
    cfblk85_t_0_0 = 9'b000000000;
    if (cfblk152_out1 == 8'b00000000) begin
      cfblk85_out1 = 8'b11111111;
    end
    else begin
      cfblk85_t_0_0 = {1'b0, cfblk90_out1};
      cfblk85_div_temp = cfblk85_t_0_0 / cfblk152_out1;
      if (cfblk85_div_temp[8] != 1'b0) begin
        cfblk85_out1 = 8'b11111111;
      end
      else begin
        cfblk85_out1 = cfblk85_div_temp[7:0];
      end
    end
  end



  assign cfblk83_out1 = cfblk85_out1 - cfblk158_out1;



  assign cfblk47_out1 = (cfblk68_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block1 u_cfblk15_inst (.in1(cfblk47_out1),  // uint8
                                    .in2(cfblk81_out1),  // uint8
                                    .out1(cfblk15_out1)  // uint8
                                    );

  assign cfblk27_out1 = cfblk15_out1 + cfblk68_out1;



  assign cfblk46_out1 = cfblk27_out1 - cfblk21_out1;



  assign dtc_out_2 = cfblk46_out1;



  assign cfblk33_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk33_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  DotProduct_block4 u_cfblk71_inst (.in1(cfblk39_out1),  // uint8
                                    .in2(cfblk172_out1),  // uint8
                                    .out1(cfblk71_out1)  // uint8
                                    );

  assign cfblk131_out1 = cfblk71_out1 + cfblk154_out1;



  assign cfblk11_out1 = cfblk131_out1 + cfblk114_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk77_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk74_out1 = cfblk126_out1 + cfblk130_out1;



  assign cfblk112_out1 = (cfblk74_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk63_out1 = (cfblk112_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk109_out1 = cfblk39_out1 + cfblk109_const_val_1;



  assign cfblk108_out1 = cfblk109_out1 - cfblk63_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk108_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk2_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk117_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk150_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk125_out1 = (cfblk68_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk125_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  always @(cfblk162_out1, cfblk1_out1) begin
    cfblk114_div_temp = 9'b000000000;
    cfblk114_t_0_0 = 9'b000000000;
    if (cfblk1_out1 == 8'b00000000) begin
      cfblk114_out1 = 8'b11111111;
    end
    else begin
      cfblk114_t_0_0 = {1'b0, cfblk162_out1};
      cfblk114_div_temp = cfblk114_t_0_0 / cfblk1_out1;
      if (cfblk114_div_temp[8] != 1'b0) begin
        cfblk114_out1 = 8'b11111111;
      end
      else begin
        cfblk114_out1 = cfblk114_div_temp[7:0];
      end
    end
  end



  assign cfblk97_out1 = (cfblk114_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk120_out1 = cfblk97_out1 + cfblk120_const_val_1;



  assign dtc_out_3 = cfblk120_out1;



  assign cfblk10_out1 = dtc_out_3;



  assign cfblk67_out1 = cfblk10_out1 - cfblk155_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk61_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  assign cfblk78_out1 = cfblk132_out1 + cfblk146_out1;



  assign cfblk87_out1 = cfblk78_out1 + cfblk87_const_val_1;



  assign cfblk84_out1 = cfblk87_out1 + cfblk31_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk53_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk94_out1 = cfblk140_out1 - cfblk151_out1;



  assign cfblk49_out1 = cfblk81_out1 - cfblk94_out1;



  assign cfblk53_out1 = cfblk18_out1 - cfblk49_out1;



  DotProduct_block3 u_cfblk61_inst (.in1(cfblk53_out1),  // uint8
                                    .in2(cfblk84_out1),  // uint8
                                    .out1(cfblk61_out1)  // uint8
                                    );

  assign cfblk62_out1 = (cfblk61_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk28_out1 = cfblk62_out1 + cfblk116_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk28_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk129_out1 = cfblk31_out1 + cfblk129_const_val_1;



  always @(cfblk38_out1, cfblk68_out1) begin
    cfblk75_div_temp = 9'b000000000;
    cfblk75_t_0_0 = 9'b000000000;
    if (cfblk68_out1 == 8'b00000000) begin
      cfblk75_out1 = 8'b11111111;
    end
    else begin
      cfblk75_t_0_0 = {1'b0, cfblk38_out1};
      cfblk75_div_temp = cfblk75_t_0_0 / cfblk68_out1;
      if (cfblk75_div_temp[8] != 1'b0) begin
        cfblk75_out1 = 8'b11111111;
      end
      else begin
        cfblk75_out1 = cfblk75_div_temp[7:0];
      end
    end
  end



  assign dtc_out_4 = cfblk75_out1;



  assign cfblk118_out1 = dtc_out_4;



  cfblk140 u_cfblk140 (.In1(cfblk118_out1),  // uint8
                       .Out1(cfblk140_out1)  // uint8
                       );

  assign cfblk64_out1 = cfblk140_out1 + cfblk129_out1;



  assign cfblk117_out1 = cfblk64_out1 + cfblk38_out1;



  always @(cfblk117_out1, cfblk147_out1) begin
    cfblk132_div_temp = 9'b000000000;
    cfblk132_t_0_0 = 9'b000000000;
    if (cfblk147_out1 == 8'b00000000) begin
      cfblk132_out1 = 8'b11111111;
    end
    else begin
      cfblk132_t_0_0 = {1'b0, cfblk117_out1};
      cfblk132_div_temp = cfblk132_t_0_0 / cfblk147_out1;
      if (cfblk132_div_temp[8] != 1'b0) begin
        cfblk132_out1 = 8'b11111111;
      end
      else begin
        cfblk132_out1 = cfblk132_div_temp[7:0];
      end
    end
  end



  DotProduct_block u_cfblk119_inst (.in1(cfblk132_out1),  // uint8
                                    .in2(cfblk75_out1),  // uint8
                                    .out1(cfblk119_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk119_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk35_out1 = cfblk149_out1 + cfblk67_out1;



  DotProduct_block2 u_cfblk52_inst (.in1(cfblk35_out1),  // uint8
                                    .in2(cfblk160_out1),  // uint8
                                    .out1(cfblk52_out1)  // uint8
                                    );

  assign cfblk44_out1 = (cfblk111_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk57_out1 = (cfblk44_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk57_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk43_out1 = cfblk165_out1 + cfblk52_out1;



  cfblk142 u_cfblk142 (.In1(cfblk43_out1),  // uint8
                       .Out1(cfblk142_out1)  // uint8
                       );

  assign cfblk38_out1 = cfblk142_out1 + cfblk164_out1;



  always @(cfblk38_out1) begin
    cfblk111_div_temp = 9'b000000000;
    cfblk111_t_0_0 = 9'b000000000;
    if (cfblk38_out1 == 8'b00000000) begin
      cfblk111_out1 = 8'b11111111;
    end
    else begin
      cfblk111_t_0_0 = {1'b0, cfblk38_out1};
      cfblk111_div_temp = cfblk111_t_0_0 / cfblk38_out1;
      if (cfblk111_div_temp[8] != 1'b0) begin
        cfblk111_out1 = 8'b11111111;
      end
      else begin
        cfblk111_out1 = cfblk111_div_temp[7:0];
      end
    end
  end



  assign cfblk21_out1 = cfblk68_out1 + cfblk111_out1;



  assign cfblk126_out1 = cfblk21_out1 - cfblk143_out1;



  assign dtc_out_5 = cfblk126_out1;



  assign cfblk54_out1 = dtc_out_5;



  assign cfblk92_out1 = (cfblk54_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk92_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  always @(cfblk11_out1, cfblk159_out1) begin
    cfblk90_div_temp = 9'b000000000;
    cfblk90_t_0_0 = 9'b000000000;
    if (cfblk11_out1 == 8'b00000000) begin
      cfblk90_out1 = 8'b11111111;
    end
    else begin
      cfblk90_t_0_0 = {1'b0, cfblk159_out1};
      cfblk90_div_temp = cfblk90_t_0_0 / cfblk11_out1;
      if (cfblk90_div_temp[8] != 1'b0) begin
        cfblk90_out1 = 8'b11111111;
      end
      else begin
        cfblk90_out1 = cfblk90_div_temp[7:0];
      end
    end
  end



  assign cfblk77_out1 = (cfblk90_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk29_out1 = cfblk77_out1 - cfblk83_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk68_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk31_out1 = cfblk163_out1 + cfblk29_out1;



  assign cfblk68_out1 = (cfblk31_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk2 u_cfblk2 (.u(cfblk68_out1),  // uint8
                   .y(cfblk2_out1)  // uint8
                   );

  DotProduct u_cfblk105_inst (.in1(cfblk2_out1),  // uint8
                              .in2(cfblk156_out1),  // uint8
                              .out1(cfblk105_out1)  // uint8
                              );

  cfblk143 u_cfblk143 (.In1(cfblk105_out1),  // uint8
                       .Out1(cfblk143_out1)  // uint8
                       );

  assign dtc_out_6 = cfblk143_out1;



  assign cfblk81_out1 = dtc_out_6;



  assign cfblk45_out1 = cfblk81_out1 + cfblk130_out1;



  assign cfblk24_out1 = cfblk45_out1 + cfblk24_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk24_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk124_out1 = cfblk157_out1 - cfblk44_out1;



  assign cfblk18_out1 = cfblk124_out1 + cfblk18_const_val_1;



  assign cfblk98_out1 = (cfblk18_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk97_out1, cfblk98_out1) begin
    cfblk134_div_temp = 9'b000000000;
    cfblk134_t_0_0 = 9'b000000000;
    if (cfblk97_out1 == 8'b00000000) begin
      cfblk134_out1 = 8'b11111111;
    end
    else begin
      cfblk134_t_0_0 = {1'b0, cfblk98_out1};
      cfblk134_div_temp = cfblk134_t_0_0 / cfblk97_out1;
      if (cfblk134_div_temp[8] != 1'b0) begin
        cfblk134_out1 = 8'b11111111;
      end
      else begin
        cfblk134_out1 = cfblk134_div_temp[7:0];
      end
    end
  end



  assign cfblk37_out1 = cfblk134_out1 + cfblk37_const_val_1;



  assign dtc_out_7 = cfblk37_out1;



  assign cfblk91_out1 = dtc_out_7;



  always @(cfblk153_out1, cfblk91_out1) begin
    cfblk116_div_temp = 9'b000000000;
    cfblk116_t_0_0 = 9'b000000000;
    if (cfblk153_out1 == 8'b00000000) begin
      cfblk116_out1 = 8'b11111111;
    end
    else begin
      cfblk116_t_0_0 = {1'b0, cfblk91_out1};
      cfblk116_div_temp = cfblk116_t_0_0 / cfblk153_out1;
      if (cfblk116_div_temp[8] != 1'b0) begin
        cfblk116_out1 = 8'b11111111;
      end
      else begin
        cfblk116_out1 = cfblk116_div_temp[7:0];
      end
    end
  end



  assign cfblk39_out1 = cfblk116_out1 + cfblk161_out1;



  assign cfblk136 = cfblk39_out1;

  assign Hdl_out = cfblk81_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

