// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1880\sampleModel1880_3_sub\Subsystem.v
// Created: 2024-08-15 02:52:44
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk126                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1880_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk126,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk126;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk109_const_val_1;  // uint8
  wire [7:0] Mysubsystem_36_out1;  // uint8
  wire [7:0] Mysubsystem_10_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk59_const_val_1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk94_const_val_1;  // uint8
  wire [7:0] cfblk39_const_val_1;  // uint8
  wire [7:0] cfblk75_const_val_1;  // uint8
  wire [7:0] cfblk47_const_val_1;  // uint8
  wire [7:0] cfblk114_const_val_1;  // uint8
  wire [7:0] cfblk81_const_val_1;  // uint8
  wire [7:0] cfblk99_const_val_1;  // uint8
  wire [7:0] cfblk45_const_val_1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  reg [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  reg [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk80_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk135_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  reg [7:0] cfblk136_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] cfblk61_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] Mysubsystem_26_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk22_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk35_out1;  // uint8
  reg [8:0] cfblk112_div_temp;  // ufix9
  reg [8:0] cfblk112_t_0_0;  // ufix9
  reg [8:0] cfblk15_div_temp;  // ufix9
  reg [8:0] cfblk15_t_0_0;  // ufix9
  reg [8:0] cfblk125_div_temp;  // ufix9
  reg [8:0] cfblk125_t_0_0;  // ufix9
  reg [8:0] cfblk80_div_temp;  // ufix9
  reg [8:0] cfblk80_t_0_0;  // ufix9
  reg [8:0] cfblk97_div_temp;  // ufix9
  reg [8:0] cfblk97_t_0_0;  // ufix9
  reg [8:0] cfblk26_div_temp;  // ufix9
  reg [8:0] cfblk26_t_0_0;  // ufix9
  reg [8:0] cfblk17_div_temp;  // ufix9
  reg [8:0] cfblk17_t_0_0;  // ufix9
  reg [8:0] cfblk122_div_temp;  // ufix9
  reg [8:0] cfblk122_t_0_0;  // ufix9
  reg [8:0] cfblk69_div_temp;  // ufix9
  reg [8:0] cfblk69_t_0_0;  // ufix9
  reg [8:0] cfblk61_div_temp;  // ufix9
  reg [8:0] cfblk61_t_0_0;  // ufix9
  reg [8:0] cfblk19_div_temp;  // ufix9
  reg [8:0] cfblk19_t_0_0;  // ufix9
  reg [8:0] cfblk68_div_temp;  // ufix9
  reg [8:0] cfblk68_t_0_0;  // ufix9
  reg [8:0] cfblk70_div_temp;  // ufix9
  reg [8:0] cfblk70_t_0_0;  // ufix9
  reg [8:0] cfblk22_div_temp;  // ufix9
  reg [8:0] cfblk22_t_0_0;  // ufix9


  assign cfblk130_out1 = 8'b00000000;



  assign cfblk129_out1 = 8'b00000001;



  assign enb = clk_enable;

  assign cfblk109_const_val_1 = 8'b00000000;



  Mysubsystem_36 u_Mysubsystem_36 (.In1(cfblk130_out1),  // uint8
                                   .Out1(Mysubsystem_36_out1)  // uint8
                                   );

  Mysubsystem_10 u_Mysubsystem_10 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_10_out1)  // uint8
                                   );

  assign cfblk60_out1 = (Mysubsystem_36_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk129_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  assign cfblk59_const_val_1 = 8'b00000000;



  assign cfblk23_out1 = (cfblk3_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk94_const_val_1 = 8'b00000000;



  assign cfblk39_const_val_1 = 8'b00000000;



  assign cfblk75_const_val_1 = 8'b00000000;



  assign cfblk47_const_val_1 = 8'b00000000;



  assign cfblk114_const_val_1 = 8'b00000000;



  assign cfblk81_const_val_1 = 8'b00000000;



  assign cfblk99_const_val_1 = 8'b00000000;



  assign cfblk45_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk114_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk39_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  assign cfblk27_out1 = cfblk68_out1 + Mysubsystem_36_out1;



  assign cfblk99_out1 = cfblk27_out1 + cfblk99_const_val_1;



  assign cfblk81_out1 = cfblk2_out1 + cfblk81_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk124_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk19_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  always @(cfblk132_out1, cfblk142_out1) begin
    cfblk112_div_temp = 9'b000000000;
    cfblk112_t_0_0 = 9'b000000000;
    if (cfblk142_out1 == 8'b00000000) begin
      cfblk112_out1 = 8'b11111111;
    end
    else begin
      cfblk112_t_0_0 = {1'b0, cfblk132_out1};
      cfblk112_div_temp = cfblk112_t_0_0 / cfblk142_out1;
      if (cfblk112_div_temp[8] != 1'b0) begin
        cfblk112_out1 = 8'b11111111;
      end
      else begin
        cfblk112_out1 = cfblk112_div_temp[7:0];
      end
    end
  end



  cfblk132 u_cfblk132 (.In1(cfblk72_out1),  // uint8
                       .Out1(cfblk132_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk132_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  always @(cfblk83_out1, cfblk96_out1) begin
    cfblk15_div_temp = 9'b000000000;
    cfblk15_t_0_0 = 9'b000000000;
    if (cfblk83_out1 == 8'b00000000) begin
      cfblk15_out1 = 8'b11111111;
    end
    else begin
      cfblk15_t_0_0 = {1'b0, cfblk96_out1};
      cfblk15_div_temp = cfblk15_t_0_0 / cfblk83_out1;
      if (cfblk15_div_temp[8] != 1'b0) begin
        cfblk15_out1 = 8'b11111111;
      end
      else begin
        cfblk15_out1 = cfblk15_div_temp[7:0];
      end
    end
  end



  assign cfblk39_out1 = cfblk15_out1 + cfblk39_const_val_1;



  always @(cfblk39_out1, cfblk44_out1) begin
    cfblk125_div_temp = 9'b000000000;
    cfblk125_t_0_0 = 9'b000000000;
    if (cfblk39_out1 == 8'b00000000) begin
      cfblk125_out1 = 8'b11111111;
    end
    else begin
      cfblk125_t_0_0 = {1'b0, cfblk44_out1};
      cfblk125_div_temp = cfblk125_t_0_0 / cfblk39_out1;
      if (cfblk125_div_temp[8] != 1'b0) begin
        cfblk125_out1 = 8'b11111111;
      end
      else begin
        cfblk125_out1 = cfblk125_div_temp[7:0];
      end
    end
  end



  assign cfblk82_out1 = cfblk125_out1 - cfblk17_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk82_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  assign cfblk57_out1 = cfblk56_out1 + cfblk36_out1;



  cfblk131 u_cfblk131 (.In1(cfblk57_out1),  // uint8
                       .Out1(cfblk131_out1)  // uint8
                       );

  assign cfblk94_out1 = cfblk69_out1 + cfblk94_const_val_1;



  DotProduct_block9 u_cfblk72_inst (.in1(cfblk23_out1),  // uint8
                                    .in2(cfblk77_out1),  // uint8
                                    .out1(cfblk72_out1)  // uint8
                                    );

  always @(cfblk52_out1, cfblk72_out1) begin
    cfblk80_div_temp = 9'b000000000;
    cfblk80_t_0_0 = 9'b000000000;
    if (cfblk52_out1 == 8'b00000000) begin
      cfblk80_out1 = 8'b11111111;
    end
    else begin
      cfblk80_t_0_0 = {1'b0, cfblk72_out1};
      cfblk80_div_temp = cfblk80_t_0_0 / cfblk52_out1;
      if (cfblk80_div_temp[8] != 1'b0) begin
        cfblk80_out1 = 8'b11111111;
      end
      else begin
        cfblk80_out1 = cfblk80_div_temp[7:0];
      end
    end
  end



  assign dtc_out = cfblk80_out1;



  assign cfblk95_out1 = dtc_out;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk95_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  always @(cfblk114_out1, cfblk2_out1) begin
    cfblk97_div_temp = 9'b000000000;
    cfblk97_t_0_0 = 9'b000000000;
    if (cfblk114_out1 == 8'b00000000) begin
      cfblk97_out1 = 8'b11111111;
    end
    else begin
      cfblk97_t_0_0 = {1'b0, cfblk2_out1};
      cfblk97_div_temp = cfblk97_t_0_0 / cfblk114_out1;
      if (cfblk97_div_temp[8] != 1'b0) begin
        cfblk97_out1 = 8'b11111111;
      end
      else begin
        cfblk97_out1 = cfblk97_div_temp[7:0];
      end
    end
  end



  DotProduct_block11 u_cfblk9_inst (.in1(cfblk97_out1),  // uint8
                                    .in2(cfblk122_out1),  // uint8
                                    .out1(cfblk9_out1)  // uint8
                                    );

  DotProduct_block4 u_cfblk42_inst (.in1(cfblk9_out1),  // uint8
                                    .in2(cfblk94_out1),  // uint8
                                    .out1(cfblk42_out1)  // uint8
                                    );

  assign cfblk89_out1 = cfblk42_out1 - cfblk131_out1;



  assign cfblk53_out1 = (cfblk89_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk135_process
      if (reset == 1'b1) begin
        cfblk135_reg[0] <= 8'b00000000;
        cfblk135_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk135_reg[0] <= cfblk135_reg_next[0];
          cfblk135_reg[1] <= cfblk135_reg_next[1];
        end
      end
    end

  assign cfblk135_out1 = cfblk135_reg[1];
  assign cfblk135_reg_next[0] = cfblk53_out1;
  assign cfblk135_reg_next[1] = cfblk135_reg[0];



  assign cfblk28_out1 = cfblk12_out1 - cfblk17_out1;



  assign cfblk24_out1 = (cfblk28_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk111_out1, cfblk24_out1) begin
    cfblk26_div_temp = 9'b000000000;
    cfblk26_t_0_0 = 9'b000000000;
    if (cfblk24_out1 == 8'b00000000) begin
      cfblk26_out1 = 8'b11111111;
    end
    else begin
      cfblk26_t_0_0 = {1'b0, cfblk111_out1};
      cfblk26_div_temp = cfblk26_t_0_0 / cfblk24_out1;
      if (cfblk26_div_temp[8] != 1'b0) begin
        cfblk26_out1 = 8'b11111111;
      end
      else begin
        cfblk26_out1 = cfblk26_div_temp[7:0];
      end
    end
  end



  DotProduct_block10 u_cfblk88_inst (.in1(cfblk26_out1),  // uint8
                                     .in2(cfblk48_out1),  // uint8
                                     .out1(cfblk88_out1)  // uint8
                                     );

  assign cfblk59_out1 = cfblk83_out1 + cfblk59_const_val_1;



  always @(cfblk129_out1, cfblk59_out1) begin
    cfblk17_div_temp = 9'b000000000;
    cfblk17_t_0_0 = 9'b000000000;
    if (cfblk129_out1 == 8'b00000000) begin
      cfblk17_out1 = 8'b11111111;
    end
    else begin
      cfblk17_t_0_0 = {1'b0, cfblk59_out1};
      cfblk17_div_temp = cfblk17_t_0_0 / cfblk129_out1;
      if (cfblk17_div_temp[8] != 1'b0) begin
        cfblk17_out1 = 8'b11111111;
      end
      else begin
        cfblk17_out1 = cfblk17_div_temp[7:0];
      end
    end
  end



  always @(cfblk129_out1, cfblk17_out1) begin
    cfblk122_div_temp = 9'b000000000;
    cfblk122_t_0_0 = 9'b000000000;
    if (cfblk129_out1 == 8'b00000000) begin
      cfblk122_out1 = 8'b11111111;
    end
    else begin
      cfblk122_t_0_0 = {1'b0, cfblk17_out1};
      cfblk122_div_temp = cfblk122_t_0_0 / cfblk129_out1;
      if (cfblk122_div_temp[8] != 1'b0) begin
        cfblk122_out1 = 8'b11111111;
      end
      else begin
        cfblk122_out1 = cfblk122_div_temp[7:0];
      end
    end
  end



  DotProduct_block7 u_cfblk63_inst (.in1(cfblk3_out1),  // uint8
                                    .in2(cfblk5_out1),  // uint8
                                    .out1(cfblk63_out1)  // uint8
                                    );

  assign cfblk96_out1 = cfblk108_out1 + cfblk83_out1;



  always @(cfblk4_out1, cfblk77_out1) begin
    cfblk69_div_temp = 9'b000000000;
    cfblk69_t_0_0 = 9'b000000000;
    if (cfblk4_out1 == 8'b00000000) begin
      cfblk69_out1 = 8'b11111111;
    end
    else begin
      cfblk69_t_0_0 = {1'b0, cfblk77_out1};
      cfblk69_div_temp = cfblk69_t_0_0 / cfblk4_out1;
      if (cfblk69_div_temp[8] != 1'b0) begin
        cfblk69_out1 = 8'b11111111;
      end
      else begin
        cfblk69_out1 = cfblk69_div_temp[7:0];
      end
    end
  end



  DotProduct_block u_cfblk103_inst (.in1(cfblk69_out1),  // uint8
                                    .in2(cfblk96_out1),  // uint8
                                    .out1(cfblk103_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk103_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  DotProduct_block2 u_cfblk111_inst (.in1(cfblk138_out1),  // uint8
                                     .in2(cfblk63_out1),  // uint8
                                     .out1(cfblk111_out1)  // uint8
                                     );

  assign cfblk79_out1 = cfblk111_out1 - cfblk122_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk6_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  assign cfblk102_out1 = cfblk20_out1 + cfblk148_out1;



  assign cfblk62_out1 = cfblk47_out1 + cfblk102_out1;



  assign dtc_out_1 = cfblk62_out1;



  assign cfblk65_out1 = dtc_out_1;



  assign cfblk76_out1 = cfblk65_out1 + cfblk79_out1;



  DotProduct_block13 u_cfblk93_inst (.in1(cfblk76_out1),  // uint8
                                     .in2(cfblk98_out1),  // uint8
                                     .out1(cfblk93_out1)  // uint8
                                     );

  assign cfblk104_out1 = (cfblk7_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk104_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  DotProduct_block5 u_cfblk48_inst (.in1(cfblk139_out1),  // uint8
                                    .in2(cfblk93_out1),  // uint8
                                    .out1(cfblk48_out1)  // uint8
                                    );

  assign cfblk113_out1 = (cfblk48_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk113_out1;



  assign cfblk116_out1 = dtc_out_2;



  assign cfblk7_out1 = cfblk116_out1 & 8'b11111110;



  assign cfblk44_out1 = cfblk7_out1 - cfblk45_out1;



  assign cfblk105_out1 = cfblk44_out1 + cfblk73_out1;



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk105_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign cfblk41_out1 = cfblk4_out1 + cfblk88_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk136_process
      if (reset == 1'b1) begin
        cfblk136_reg[0] <= 8'b00000000;
        cfblk136_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk136_reg[0] <= cfblk136_reg_next[0];
          cfblk136_reg[1] <= cfblk136_reg_next[1];
        end
      end
    end

  assign cfblk136_out1 = cfblk136_reg[1];
  assign cfblk136_reg_next[0] = cfblk41_out1;
  assign cfblk136_reg_next[1] = cfblk136_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk136_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk101_out1 = (cfblk1_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk20_out1 = cfblk101_out1 + cfblk23_out1;



  assign cfblk52_out1 = cfblk20_out1 - cfblk109_out1;



  cfblk6 u_cfblk6 (.u(cfblk47_out1),  // uint8
                   .y(cfblk6_out1)  // uint8
                   );

  DotProduct_block1 u_cfblk106_inst (.in1(cfblk6_out1),  // uint8
                                     .in2(cfblk52_out1),  // uint8
                                     .out1(cfblk106_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk106_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  always @(cfblk102_out1, cfblk147_out1) begin
    cfblk61_div_temp = 9'b000000000;
    cfblk61_t_0_0 = 9'b000000000;
    if (cfblk102_out1 == 8'b00000000) begin
      cfblk61_out1 = 8'b11111111;
    end
    else begin
      cfblk61_t_0_0 = {1'b0, cfblk147_out1};
      cfblk61_div_temp = cfblk61_t_0_0 / cfblk102_out1;
      if (cfblk61_div_temp[8] != 1'b0) begin
        cfblk61_out1 = 8'b11111111;
      end
      else begin
        cfblk61_out1 = cfblk61_div_temp[7:0];
      end
    end
  end



  always @(cfblk114_out1, cfblk129_out1) begin
    cfblk19_div_temp = 9'b000000000;
    cfblk19_t_0_0 = 9'b000000000;
    if (cfblk129_out1 == 8'b00000000) begin
      cfblk19_out1 = 8'b11111111;
    end
    else begin
      cfblk19_t_0_0 = {1'b0, cfblk114_out1};
      cfblk19_div_temp = cfblk19_t_0_0 / cfblk129_out1;
      if (cfblk19_div_temp[8] != 1'b0) begin
        cfblk19_out1 = 8'b11111111;
      end
      else begin
        cfblk19_out1 = cfblk19_div_temp[7:0];
      end
    end
  end



  assign cfblk12_out1 = cfblk60_out1 - cfblk19_out1;



  assign dtc_out_3 = cfblk12_out1;



  assign cfblk84_out1 = dtc_out_3;



  assign dtc_out_4 = cfblk84_out1;



  assign cfblk108_out1 = dtc_out_4;



  Mysubsystem_26 u_Mysubsystem_26 (.In1(Mysubsystem_10_out1),  // uint8
                                   .In2(cfblk108_out1),  // uint8
                                   .In3(cfblk119_out1),  // uint8
                                   .Out1(Mysubsystem_26_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = Mysubsystem_26_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  assign cfblk25_out1 = cfblk141_out1 + cfblk61_out1;



  assign cfblk73_out1 = cfblk25_out1 - cfblk135_out1;



  DotProduct_block12 u_cfblk91_inst (.in1(cfblk73_out1),  // uint8
                                     .in2(cfblk137_out1),  // uint8
                                     .out1(cfblk91_out1)  // uint8
                                     );

  assign cfblk109_out1 = cfblk124_out1 + cfblk109_const_val_1;



  DotProduct u_cfblk100_inst (.in1(cfblk109_out1),  // uint8
                              .in2(Mysubsystem_36_out1),  // uint8
                              .out1(cfblk100_out1)  // uint8
                              );

  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk100_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk56_out1 = cfblk149_out1 + cfblk91_out1;



  always @(cfblk151_out1, cfblk56_out1) begin
    cfblk68_div_temp = 9'b000000000;
    cfblk68_t_0_0 = 9'b000000000;
    if (cfblk151_out1 == 8'b00000000) begin
      cfblk68_out1 = 8'b11111111;
    end
    else begin
      cfblk68_t_0_0 = {1'b0, cfblk56_out1};
      cfblk68_div_temp = cfblk68_t_0_0 / cfblk151_out1;
      if (cfblk68_div_temp[8] != 1'b0) begin
        cfblk68_out1 = 8'b11111111;
      end
      else begin
        cfblk68_out1 = cfblk68_div_temp[7:0];
      end
    end
  end



  assign cfblk124_out1 = cfblk49_out1 - cfblk77_out1;



  DotProduct_block3 u_cfblk34_inst (.in1(cfblk5_out1),  // uint8
                                    .in2(cfblk124_out1),  // uint8
                                    .out1(cfblk34_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk75_out1;



  assign cfblk119_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk119_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk21_out1 = cfblk144_out1 - cfblk37_out1;



  assign cfblk98_out1 = cfblk21_out1 + cfblk34_out1;



  cfblk133 u_cfblk133 (.In1(cfblk98_out1),  // uint8
                       .Out1(cfblk133_out1)  // uint8
                       );

  DotProduct_block8 u_cfblk67_inst (.in1(cfblk133_out1),  // uint8
                                    .in2(cfblk68_out1),  // uint8
                                    .out1(cfblk67_out1)  // uint8
                                    );

  assign cfblk75_out1 = cfblk67_out1 + cfblk75_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk75_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk83_out1 = cfblk145_out1 + cfblk112_out1;



  DotProduct_block6 u_cfblk49_inst (.in1(cfblk83_out1),  // uint8
                                    .in2(cfblk150_out1),  // uint8
                                    .out1(cfblk49_out1)  // uint8
                                    );

  assign cfblk47_out1 = cfblk49_out1 + cfblk47_const_val_1;



  assign cfblk114_out1 = cfblk47_out1 + cfblk114_const_val_1;



  assign cfblk37_out1 = cfblk129_out1 - cfblk114_out1;



  always @(cfblk37_out1, cfblk81_out1) begin
    cfblk70_div_temp = 9'b000000000;
    cfblk70_t_0_0 = 9'b000000000;
    if (cfblk81_out1 == 8'b00000000) begin
      cfblk70_out1 = 8'b11111111;
    end
    else begin
      cfblk70_t_0_0 = {1'b0, cfblk37_out1};
      cfblk70_div_temp = cfblk70_t_0_0 / cfblk81_out1;
      if (cfblk70_div_temp[8] != 1'b0) begin
        cfblk70_out1 = 8'b11111111;
      end
      else begin
        cfblk70_out1 = cfblk70_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk70_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  assign cfblk36_out1 = cfblk143_out1 - cfblk99_out1;



  assign cfblk45_out1 = cfblk36_out1 + cfblk45_const_val_1;



  assign cfblk40_out1 = cfblk45_out1 + cfblk140_out1;



  assign cfblk120_out1 = cfblk40_out1 - cfblk40_out1;



  always @(cfblk120_out1, cfblk146_out1) begin
    cfblk22_div_temp = 9'b000000000;
    cfblk22_t_0_0 = 9'b000000000;
    if (cfblk146_out1 == 8'b00000000) begin
      cfblk22_out1 = 8'b11111111;
    end
    else begin
      cfblk22_t_0_0 = {1'b0, cfblk120_out1};
      cfblk22_div_temp = cfblk22_t_0_0 / cfblk146_out1;
      if (cfblk22_div_temp[8] != 1'b0) begin
        cfblk22_out1 = 8'b11111111;
      end
      else begin
        cfblk22_out1 = cfblk22_div_temp[7:0];
      end
    end
  end



  assign cfblk5_out1 = cfblk22_out1 & 8'b11111110;



  assign cfblk77_out1 = cfblk130_out1 + cfblk5_out1;



  assign dtc_out_6 = cfblk77_out1;



  assign cfblk35_out1 = dtc_out_6;



  assign cfblk126 = cfblk35_out1;

  assign Hdl_out = Mysubsystem_10_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

