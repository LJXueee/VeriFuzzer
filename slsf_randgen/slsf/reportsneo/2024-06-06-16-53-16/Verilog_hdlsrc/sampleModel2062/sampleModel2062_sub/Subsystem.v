// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel2062\sampleModel2062_sub\Subsystem.v
// Created: 2024-08-17 00:58:02
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk132                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel2062_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk132,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk132;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk57_const_val_1;  // uint8
  wire [7:0] cfblk87_const_val_1;  // uint8
  wire [7:0] cfblk120_const_val_1;  // uint8
  wire [7:0] cfblk19_const_val_1;  // uint8
  wire [7:0] cfblk116_const_val_1;  // uint8
  wire [7:0] cfblk52_const_val_1;  // uint8
  wire [7:0] cfblk117_const_val_1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  reg [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  reg [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [3:0] cfblk2_out1;  // ufix4_E4
  wire [31:0] dtc_out_2;  // ufix32_E4
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk8_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  reg [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  reg [8:0] cfblk38_div_temp;  // ufix9
  reg [8:0] cfblk38_t_0_0;  // ufix9
  reg [8:0] cfblk9_div_temp;  // ufix9
  reg [8:0] cfblk9_t_0_0;  // ufix9
  reg [8:0] cfblk10_div_temp;  // ufix9
  reg [8:0] cfblk10_t_0_0;  // ufix9
  reg [8:0] cfblk5_div_temp;  // ufix9
  reg [8:0] cfblk5_t_0_0;  // ufix9
  reg [8:0] cfblk6_div_temp;  // ufix9
  reg [8:0] cfblk6_t_0_0;  // ufix9
  reg [8:0] cfblk121_div_temp;  // ufix9
  reg [8:0] cfblk121_t_0_0;  // ufix9
  reg [8:0] cfblk123_div_temp;  // ufix9
  reg [8:0] cfblk123_t_0_0;  // ufix9


  assign cfblk57_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk87_const_val_1 = 8'b00000000;



  assign cfblk120_const_val_1 = 8'b00000000;



  assign cfblk19_const_val_1 = 8'b00000000;



  assign cfblk116_const_val_1 = 8'b00000000;



  assign cfblk52_const_val_1 = 8'b00000000;



  assign cfblk117_const_val_1 = 8'b00000000;



  always @(cfblk136_out1, cfblk54_out1) begin
    cfblk38_div_temp = 9'b000000000;
    cfblk38_t_0_0 = 9'b000000000;
    if (cfblk54_out1 == 8'b00000000) begin
      cfblk38_out1 = 8'b11111111;
    end
    else begin
      cfblk38_t_0_0 = {1'b0, cfblk136_out1};
      cfblk38_div_temp = cfblk38_t_0_0 / cfblk54_out1;
      if (cfblk38_div_temp[8] != 1'b0) begin
        cfblk38_out1 = 8'b11111111;
      end
      else begin
        cfblk38_out1 = cfblk38_div_temp[7:0];
      end
    end
  end



  assign cfblk114_out1 = (cfblk96_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk114_out1, cfblk38_out1) begin
    cfblk9_div_temp = 9'b000000000;
    cfblk9_t_0_0 = 9'b000000000;
    if (cfblk38_out1 == 8'b00000000) begin
      cfblk9_out1 = 8'b11111111;
    end
    else begin
      cfblk9_t_0_0 = {1'b0, cfblk114_out1};
      cfblk9_div_temp = cfblk9_t_0_0 / cfblk38_out1;
      if (cfblk9_div_temp[8] != 1'b0) begin
        cfblk9_out1 = 8'b11111111;
      end
      else begin
        cfblk9_out1 = cfblk9_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk9_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  assign cfblk28_out1 = (cfblk143_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out = cfblk7_out1;



  assign cfblk4_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk27_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  assign dtc_out_1 = cfblk57_out1;



  assign cfblk59_out1 = dtc_out_1;



  assign cfblk15_out1 = cfblk40_out1 - cfblk39_out1;



  assign cfblk46_out1 = cfblk5_out1 - cfblk100_out1;



  assign cfblk2_out1 = cfblk27_out1[7:4];



  assign dtc_out_2 = {28'b0, cfblk2_out1};



  assign cfblk111_out1 = {dtc_out_2[3:0], 4'b0000};



  DotProduct_block2 u_cfblk24_inst (.in1(cfblk111_out1),  // uint8
                                    .in2(cfblk46_out1),  // uint8
                                    .out1(cfblk24_out1)  // uint8
                                    );

  always @(cfblk13_out1, cfblk66_out1) begin
    cfblk10_div_temp = 9'b000000000;
    cfblk10_t_0_0 = 9'b000000000;
    if (cfblk66_out1 == 8'b00000000) begin
      cfblk10_out1 = 8'b11111111;
    end
    else begin
      cfblk10_t_0_0 = {1'b0, cfblk13_out1};
      cfblk10_div_temp = cfblk10_t_0_0 / cfblk66_out1;
      if (cfblk10_div_temp[8] != 1'b0) begin
        cfblk10_out1 = 8'b11111111;
      end
      else begin
        cfblk10_out1 = cfblk10_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk10_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk35_out1 = cfblk145_out1 - cfblk121_out1;



  DotProduct_block4 u_cfblk92_inst (.in1(cfblk116_out1),  // uint8
                                    .in2(cfblk52_out1),  // uint8
                                    .out1(cfblk92_out1)  // uint8
                                    );

  assign dtc_out_3 = cfblk92_out1;



  assign cfblk66_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk58_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk41_out1 = cfblk90_out1 - cfblk156_out1;



  assign dtc_out_4 = cfblk44_out1;



  assign cfblk29_out1 = dtc_out_4;



  assign cfblk19_out1 = cfblk29_out1 + cfblk19_const_val_1;



  assign cfblk93_out1 = cfblk19_out1 + cfblk41_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk93_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  assign cfblk96_out1 = cfblk148_out1 + cfblk20_out1;



  DotProduct_block1 u_cfblk16_inst (.in1(cfblk117_out1),  // uint8
                                    .in2(cfblk99_out1),  // uint8
                                    .out1(cfblk16_out1)  // uint8
                                    );

  assign cfblk129_out1 = cfblk16_out1 - cfblk47_out1;



  assign cfblk120_out1 = cfblk25_out1 + cfblk120_const_val_1;



  assign dtc_out_5 = cfblk120_out1;



  assign cfblk100_out1 = dtc_out_5;



  always @(cfblk100_out1, cfblk129_out1) begin
    cfblk5_div_temp = 9'b000000000;
    cfblk5_t_0_0 = 9'b000000000;
    if (cfblk129_out1 == 8'b00000000) begin
      cfblk5_out1 = 8'b11111111;
    end
    else begin
      cfblk5_t_0_0 = {1'b0, cfblk100_out1};
      cfblk5_div_temp = cfblk5_t_0_0 / cfblk129_out1;
      if (cfblk5_div_temp[8] != 1'b0) begin
        cfblk5_out1 = 8'b11111111;
      end
      else begin
        cfblk5_out1 = cfblk5_div_temp[7:0];
      end
    end
  end



  assign cfblk8_out1 = (cfblk5_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk8_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk27_out1 = cfblk151_out1 + cfblk96_out1;



  assign dtc_out_6 = cfblk27_out1;



  assign cfblk69_out1 = dtc_out_6;



  assign cfblk33_out1 = (cfblk69_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk87_out1 = cfblk6_out1 + cfblk87_const_val_1;



  assign cfblk7_out1 = cfblk121_out1 + cfblk57_out1;



  assign dtc_out_7 = cfblk82_out1;



  assign cfblk115_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk115_out1;



  assign cfblk25_out1 = dtc_out_8;



  DotProduct_block u_cfblk112_inst (.in1(cfblk25_out1),  // uint8
                                    .in2(cfblk7_out1),  // uint8
                                    .out1(cfblk112_out1)  // uint8
                                    );

  assign cfblk61_out1 = cfblk112_out1 + cfblk87_out1;



  DotProduct_block5 u_cfblk99_inst (.in1(cfblk61_out1),  // uint8
                                    .in2(cfblk33_out1),  // uint8
                                    .out1(cfblk99_out1)  // uint8
                                    );

  assign cfblk116_out1 = cfblk99_out1 + cfblk116_const_val_1;



  assign cfblk78_out1 = cfblk116_out1 - cfblk66_out1;



  DotProduct_block3 u_cfblk50_inst (.in1(cfblk78_out1),  // uint8
                                    .in2(cfblk47_out1),  // uint8
                                    .out1(cfblk50_out1)  // uint8
                                    );

  assign dtc_out_9 = cfblk50_out1;



  assign cfblk70_out1 = dtc_out_9;



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk70_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk20_out1 = cfblk152_out1 + cfblk35_out1;



  assign cfblk13_out1 = (cfblk20_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk85_out1 = (cfblk90_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk45_out1, cfblk85_out1) begin
    cfblk6_div_temp = 9'b000000000;
    cfblk6_t_0_0 = 9'b000000000;
    if (cfblk45_out1 == 8'b00000000) begin
      cfblk6_out1 = 8'b11111111;
    end
    else begin
      cfblk6_t_0_0 = {1'b0, cfblk85_out1};
      cfblk6_div_temp = cfblk6_t_0_0 / cfblk45_out1;
      if (cfblk6_div_temp[8] != 1'b0) begin
        cfblk6_out1 = 8'b11111111;
      end
      else begin
        cfblk6_out1 = cfblk6_div_temp[7:0];
      end
    end
  end



  assign cfblk83_out1 = cfblk90_out1 - cfblk6_out1;



  assign cfblk39_out1 = cfblk83_out1 + cfblk13_out1;



  assign cfblk71_out1 = (cfblk39_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk127_out1 = cfblk71_out1 - cfblk24_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk127_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  assign cfblk54_out1 = cfblk146_out1 + cfblk117_out1;



  DotProduct u_cfblk108_inst (.in1(cfblk136_out1),  // uint8
                              .in2(cfblk54_out1),  // uint8
                              .out1(cfblk108_out1)  // uint8
                              );

  assign cfblk44_out1 = cfblk89_out1 + cfblk49_out1;



  assign cfblk11_out1 = cfblk44_out1 + cfblk30_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk11_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  always @(cfblk108_out1, cfblk150_out1) begin
    cfblk121_div_temp = 9'b000000000;
    cfblk121_t_0_0 = 9'b000000000;
    if (cfblk108_out1 == 8'b00000000) begin
      cfblk121_out1 = 8'b11111111;
    end
    else begin
      cfblk121_t_0_0 = {1'b0, cfblk150_out1};
      cfblk121_div_temp = cfblk121_t_0_0 / cfblk108_out1;
      if (cfblk121_div_temp[8] != 1'b0) begin
        cfblk121_out1 = 8'b11111111;
      end
      else begin
        cfblk121_out1 = cfblk121_div_temp[7:0];
      end
    end
  end



  assign cfblk45_out1 = cfblk121_out1 - cfblk117_out1;



  assign cfblk57_out1 = cfblk1_out1 + cfblk57_const_val_1;



  assign cfblk75_out1 = cfblk57_out1 - cfblk30_out1;



  assign cfblk60_out1 = (cfblk75_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_10 = cfblk60_out1;



  assign cfblk58_out1 = dtc_out_10;



  cfblk136 u_cfblk136 (.In1(cfblk58_out1),  // uint8
                       .Out1(cfblk136_out1)  // uint8
                       );

  assign cfblk56_out1 = cfblk136_out1 + cfblk45_out1;



  assign cfblk91_out1 = cfblk56_out1 - cfblk115_out1;



  assign cfblk101_out1 = cfblk91_out1 + cfblk15_out1;



  assign cfblk94_out1 = cfblk49_out1 + cfblk101_out1;



  always @(cfblk27_out1, cfblk94_out1) begin
    cfblk123_div_temp = 9'b000000000;
    cfblk123_t_0_0 = 9'b000000000;
    if (cfblk27_out1 == 8'b00000000) begin
      cfblk123_out1 = 8'b11111111;
    end
    else begin
      cfblk123_t_0_0 = {1'b0, cfblk94_out1};
      cfblk123_div_temp = cfblk123_t_0_0 / cfblk27_out1;
      if (cfblk123_div_temp[8] != 1'b0) begin
        cfblk123_out1 = 8'b11111111;
      end
      else begin
        cfblk123_out1 = cfblk123_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk123_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  assign cfblk40_out1 = cfblk141_out1 + cfblk59_out1;



  assign cfblk90_out1 = cfblk40_out1 + cfblk155_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk90_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk142_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk47_out1 = cfblk1_out1 - cfblk111_out1;



  assign cfblk89_out1 = cfblk47_out1 - cfblk4_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk89_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  assign cfblk30_out1 = cfblk147_out1 + cfblk28_out1;



  assign cfblk77_out1 = cfblk30_out1 - cfblk85_out1;



  assign cfblk52_out1 = cfblk77_out1 + cfblk52_const_val_1;



  assign cfblk117_out1 = cfblk52_out1 + cfblk117_const_val_1;



  assign dtc_out_11 = cfblk117_out1;



  assign cfblk82_out1 = dtc_out_11;



  assign cfblk49_out1 = (cfblk82_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk132 = cfblk49_out1;

  assign Hdl_out = cfblk59_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

