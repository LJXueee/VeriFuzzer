// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1618\sampleModel1618_2_sub\Subsystem.v
// Created: 2024-07-01 11:59:03
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1618_2_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk70_const_val_1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] Mysubsystem_14_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk78_const_val_1;  // uint8
  wire [7:0] cfblk27_const_val_1;  // uint8
  wire [7:0] cfblk112_const_val_1;  // uint8
  wire [7:0] cfblk118_const_val_1;  // uint8
  wire [7:0] cfblk76_const_val_1;  // uint8
  wire [15:0] cfblk138_out1;  // uint16
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk12_const_val_1;  // uint8
  wire [7:0] cfblk134_const_val_1;  // uint8
  wire [7:0] cfblk17_const_val_1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire signed [31:0] cfblk8_sub_temp;  // sfix32
  wire signed [31:0] cfblk8_1;  // sfix32
  wire signed [31:0] cfblk8_2;  // sfix32
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk200_out1;  // uint8
  reg [7:0] cfblk54_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  reg [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [3:0] cfblk6_out1;  // ufix4_E4
  wire signed [3:0] cfblk35_out1;  // sfix4
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk128_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] dtc_out_13;  // ufix8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] dtc_out_14;  // ufix8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  reg [8:0] cfblk64_div_temp;  // ufix9
  reg [8:0] cfblk64_t_0_0;  // ufix9
  reg [8:0] cfblk54_div_temp;  // ufix9
  reg [8:0] cfblk54_t_0_0;  // ufix9
  reg [8:0] cfblk123_div_temp;  // ufix9
  reg [8:0] cfblk123_t_0_0;  // ufix9
  reg [8:0] cfblk107_div_temp;  // ufix9
  reg [8:0] cfblk107_t_0_0;  // ufix9
  reg [8:0] cfblk102_div_temp;  // ufix9
  reg [8:0] cfblk102_t_0_0;  // ufix9
  reg [8:0] cfblk52_div_temp;  // ufix9
  reg [8:0] cfblk52_t_0_0;  // ufix9
  reg [8:0] cfblk37_div_temp;  // ufix9
  reg [8:0] cfblk37_t_0_0;  // ufix9
  reg [8:0] cfblk99_div_temp;  // ufix9
  reg [8:0] cfblk99_t_0_0;  // ufix9
  reg [8:0] cfblk87_div_temp;  // ufix9
  reg [8:0] cfblk87_t_0_0;  // ufix9
  reg [8:0] cfblk128_div_temp;  // ufix9
  reg [8:0] cfblk128_t_0_0;  // ufix9


  assign cfblk70_const_val_1 = 8'b00000000;



  cfblk139 u_cfblk139 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk139_out1)  // uint8
                       );

  assign dtc_out = cfblk139_out1;



  assign cfblk77_out1 = dtc_out;



  Mysubsystem_14 u_Mysubsystem_14 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_14_out1)  // uint8
                                   );

  DotProduct_block2 u_cfblk38_inst (.in1(cfblk77_out1),  // uint8
                                    .in2(Mysubsystem_14_out1),  // uint8
                                    .out1(cfblk38_out1)  // uint8
                                    );

  assign enb = clk_enable;

  cfblk136 u_cfblk136 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk136_out1)  // uint8
                       );

  assign cfblk93_out1 = (cfblk38_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk80_out1 = cfblk136_out1 - cfblk93_out1;



  assign dtc_out_1 = cfblk80_out1;



  assign cfblk45_out1 = dtc_out_1;



  assign cfblk78_const_val_1 = 8'b00000000;



  assign cfblk27_const_val_1 = 8'b00000000;



  assign cfblk112_const_val_1 = 8'b00000000;



  assign cfblk118_const_val_1 = 8'b00000000;



  assign cfblk76_const_val_1 = 8'b00000000;



  cfblk138 u_cfblk138 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk138_out1)  // uint16
                       );

  assign cfblk1_out1 = 8'b00000000;



  assign dtc_out_2 = cfblk1_out1;



  assign cfblk110_out1 = dtc_out_2;



  assign cfblk12_const_val_1 = 8'b00000000;



  assign cfblk134_const_val_1 = 8'b00000000;



  assign cfblk17_const_val_1 = 8'b00000000;



  cfblk137 u_cfblk137 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk137_out1)  // uint8
                       );

  assign dtc_out_3 = cfblk43_out1;



  assign cfblk73_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk73_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  DotProduct u_cfblk132_inst (.in1(cfblk40_out1),  // uint8
                              .in2(cfblk137_out1),  // uint8
                              .out1(cfblk132_out1)  // uint8
                              );

  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk132_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  always @(cfblk158_out1, cfblk42_out1) begin
    cfblk64_div_temp = 9'b000000000;
    cfblk64_t_0_0 = 9'b000000000;
    if (cfblk158_out1 == 8'b00000000) begin
      cfblk64_out1 = 8'b11111111;
    end
    else begin
      cfblk64_t_0_0 = {1'b0, cfblk42_out1};
      cfblk64_div_temp = cfblk64_t_0_0 / cfblk158_out1;
      if (cfblk64_div_temp[8] != 1'b0) begin
        cfblk64_out1 = 8'b11111111;
      end
      else begin
        cfblk64_out1 = cfblk64_div_temp[7:0];
      end
    end
  end



  assign cfblk47_out1 = cfblk64_out1 - cfblk164_out1;



  assign cfblk55_out1 = cfblk45_out1 - cfblk47_out1;



  assign cfblk86_out1 = cfblk45_out1 - cfblk2_out1;



  assign cfblk17_out1 = cfblk86_out1 + cfblk17_const_val_1;



  assign cfblk85_out1 = cfblk142_out1 - cfblk17_out1;



  DotProduct_block3 u_cfblk43_inst (.in1(cfblk25_out1),  // uint8
                                    .in2(cfblk18_out1),  // uint8
                                    .out1(cfblk43_out1)  // uint8
                                    );

  assign cfblk12_out1 = cfblk70_out1 + cfblk12_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk12_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  DotProduct_block1 u_cfblk34_inst (.in1(cfblk107_out1),  // uint8
                                    .in2(cfblk38_out1),  // uint8
                                    .out1(cfblk34_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk34_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk25_out1 = cfblk110_out1 + cfblk162_out1;



  cfblk142 u_cfblk142 (.In1(cfblk25_out1),  // uint8
                       .Out1(cfblk142_out1)  // uint8
                       );

  assign cfblk9_out1 = (cfblk142_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_4 = cfblk9_out1;



  assign cfblk65_out1 = dtc_out_4;



  assign cfblk133_out1 = cfblk65_out1 + cfblk159_out1;



  assign cfblk108_out1 = (cfblk133_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_5 = cfblk108_out1;



  assign cfblk42_out1 = dtc_out_5;



  assign cfblk100_out1 = cfblk60_out1 + cfblk42_out1;



  assign cfblk8_1 = {16'b0, cfblk138_out1};
  assign cfblk8_2 = {24'b0, cfblk101_out1};
  assign cfblk8_sub_temp = cfblk8_1 - cfblk8_2;
  assign cfblk8_out1 = cfblk8_sub_temp[7:0];



  DotProduct_block6 u_cfblk97_inst (.in1(cfblk8_out1),  // uint8
                                    .in2(cfblk77_out1),  // uint8
                                    .out1(cfblk97_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk97_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  cfblk7 u_cfblk7 (.u(cfblk104_out1),  // uint8
                   .y(cfblk7_out1)  // uint8
                   );

  assign cfblk18_out1 = cfblk141_out1 + cfblk200_out1;



  assign cfblk60_out1 = (cfblk18_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk60_out1, cfblk7_out1) begin
    cfblk54_div_temp = 9'b000000000;
    cfblk54_t_0_0 = 9'b000000000;
    if (cfblk7_out1 == 8'b00000000) begin
      cfblk54_out1 = 8'b11111111;
    end
    else begin
      cfblk54_t_0_0 = {1'b0, cfblk60_out1};
      cfblk54_div_temp = cfblk54_t_0_0 / cfblk7_out1;
      if (cfblk54_div_temp[8] != 1'b0) begin
        cfblk54_out1 = 8'b11111111;
      end
      else begin
        cfblk54_out1 = cfblk54_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk54_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  assign cfblk76_out1 = cfblk16_out1 + cfblk76_const_val_1;



  DotProduct_block u_cfblk15_inst (.in1(cfblk76_out1),  // uint8
                                   .in2(cfblk99_out1),  // uint8
                                   .out1(cfblk15_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk15_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  always @(cfblk109_out1, cfblk129_out1) begin
    cfblk123_div_temp = 9'b000000000;
    cfblk123_t_0_0 = 9'b000000000;
    if (cfblk109_out1 == 8'b00000000) begin
      cfblk123_out1 = 8'b11111111;
    end
    else begin
      cfblk123_t_0_0 = {1'b0, cfblk129_out1};
      cfblk123_div_temp = cfblk123_t_0_0 / cfblk109_out1;
      if (cfblk123_div_temp[8] != 1'b0) begin
        cfblk123_out1 = 8'b11111111;
      end
      else begin
        cfblk123_out1 = cfblk123_div_temp[7:0];
      end
    end
  end



  cfblk4 u_cfblk4 (.u(cfblk123_out1),  // uint8
                   .y(cfblk4_out1)  // uint8
                   );

  assign dtc_out_6 = cfblk200_out1;



  assign cfblk96_out1 = dtc_out_6;



  assign cfblk117_out1 = cfblk96_out1 + cfblk4_out1;



  assign cfblk71_out1 = (cfblk117_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk112_out1 = cfblk71_out1 + cfblk112_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk112_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  assign cfblk26_out1 = (cfblk122_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk141 u_cfblk141 (.In1(cfblk26_out1),  // uint8
                       .Out1(cfblk141_out1)  // uint8
                       );

  assign cfblk35_out1 = (cfblk6_out1 > 4'b0000 ? 4'sb0001 :
              4'sb0000);



  assign cfblk46_out1 = {{4{cfblk35_out1[3]}}, cfblk35_out1};



  always @(cfblk141_out1, cfblk46_out1) begin
    cfblk107_div_temp = 9'b000000000;
    cfblk107_t_0_0 = 9'b000000000;
    if (cfblk141_out1 == 8'b00000000) begin
      cfblk107_out1 = 8'b11111111;
    end
    else begin
      cfblk107_t_0_0 = {1'b0, cfblk46_out1};
      cfblk107_div_temp = cfblk107_t_0_0 / cfblk141_out1;
      if (cfblk107_div_temp[8] != 1'b0) begin
        cfblk107_out1 = 8'b11111111;
      end
      else begin
        cfblk107_out1 = cfblk107_div_temp[7:0];
      end
    end
  end



  assign cfblk27_out1 = cfblk107_out1 + cfblk27_const_val_1;



  assign cfblk114_out1 = cfblk27_out1 - cfblk149_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk104_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  DotProduct_block5 u_cfblk82_inst (.in1(cfblk160_out1),  // uint8
                                    .in2(cfblk114_out1),  // uint8
                                    .out1(cfblk82_out1)  // uint8
                                    );

  always @(cfblk45_out1, cfblk99_out1) begin
    cfblk102_div_temp = 9'b000000000;
    cfblk102_t_0_0 = 9'b000000000;
    if (cfblk45_out1 == 8'b00000000) begin
      cfblk102_out1 = 8'b11111111;
    end
    else begin
      cfblk102_t_0_0 = {1'b0, cfblk99_out1};
      cfblk102_div_temp = cfblk102_t_0_0 / cfblk45_out1;
      if (cfblk102_div_temp[8] != 1'b0) begin
        cfblk102_out1 = 8'b11111111;
      end
      else begin
        cfblk102_out1 = cfblk102_div_temp[7:0];
      end
    end
  end



  assign cfblk78_out1 = cfblk102_out1 + cfblk78_const_val_1;



  DotProduct_block4 u_cfblk68_inst (.in1(cfblk78_out1),  // uint8
                                    .in2(cfblk77_out1),  // uint8
                                    .out1(cfblk68_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk68_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk101_out1 = cfblk154_out1 + cfblk82_out1;



  assign cfblk109_out1 = (cfblk101_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk118_out1 = cfblk109_out1 + cfblk118_const_val_1;



  assign cfblk51_out1 = cfblk118_out1 + cfblk152_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk56_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk75_out1 = cfblk151_out1 + cfblk51_out1;



  assign cfblk69_out1 = cfblk75_out1 + cfblk161_out1;



  assign cfblk66_out1 = cfblk69_out1 - cfblk148_out1;



  assign cfblk63_out1 = cfblk66_out1 + cfblk100_out1;



  always @(cfblk43_out1, cfblk63_out1) begin
    cfblk52_div_temp = 9'b000000000;
    cfblk52_t_0_0 = 9'b000000000;
    if (cfblk43_out1 == 8'b00000000) begin
      cfblk52_out1 = 8'b11111111;
    end
    else begin
      cfblk52_t_0_0 = {1'b0, cfblk63_out1};
      cfblk52_div_temp = cfblk52_t_0_0 / cfblk43_out1;
      if (cfblk52_div_temp[8] != 1'b0) begin
        cfblk52_out1 = 8'b11111111;
      end
      else begin
        cfblk52_out1 = cfblk52_div_temp[7:0];
      end
    end
  end



  assign cfblk134_out1 = cfblk52_out1 + cfblk134_const_val_1;



  assign dtc_out_7 = cfblk134_out1;



  assign cfblk24_out1 = dtc_out_7;



  always @(cfblk70_out1, cfblk74_out1) begin
    cfblk37_div_temp = 9'b000000000;
    cfblk37_t_0_0 = 9'b000000000;
    if (cfblk74_out1 == 8'b00000000) begin
      cfblk37_out1 = 8'b11111111;
    end
    else begin
      cfblk37_t_0_0 = {1'b0, cfblk70_out1};
      cfblk37_div_temp = cfblk37_t_0_0 / cfblk74_out1;
      if (cfblk37_div_temp[8] != 1'b0) begin
        cfblk37_out1 = 8'b11111111;
      end
      else begin
        cfblk37_out1 = cfblk37_div_temp[7:0];
      end
    end
  end



  assign cfblk49_out1 = (cfblk37_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk36_out1 = cfblk49_out1 - cfblk70_out1;



  cfblk140 u_cfblk140 (.In1(cfblk200_out1),  // uint8
                       .Out1(cfblk140_out1)  // uint8
                       );

  assign cfblk16_out1 = cfblk140_out1 + cfblk36_out1;



  always @(cfblk16_out1, cfblk38_out1) begin
    cfblk99_div_temp = 9'b000000000;
    cfblk99_t_0_0 = 9'b000000000;
    if (cfblk38_out1 == 8'b00000000) begin
      cfblk99_out1 = 8'b11111111;
    end
    else begin
      cfblk99_t_0_0 = {1'b0, cfblk16_out1};
      cfblk99_div_temp = cfblk99_t_0_0 / cfblk38_out1;
      if (cfblk99_div_temp[8] != 1'b0) begin
        cfblk99_out1 = 8'b11111111;
      end
      else begin
        cfblk99_out1 = cfblk99_div_temp[7:0];
      end
    end
  end



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk99_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  assign cfblk70_out1 = cfblk40_out1 + cfblk70_const_val_1;



  assign cfblk56_out1 = cfblk70_out1 + cfblk14_out1;



  assign cfblk74_out1 = (cfblk56_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_8 = cfblk74_out1;



  assign cfblk83_out1 = dtc_out_8;



  always @(cfblk122_out1, cfblk83_out1) begin
    cfblk87_div_temp = 9'b000000000;
    cfblk87_t_0_0 = 9'b000000000;
    if (cfblk122_out1 == 8'b00000000) begin
      cfblk87_out1 = 8'b11111111;
    end
    else begin
      cfblk87_t_0_0 = {1'b0, cfblk83_out1};
      cfblk87_div_temp = cfblk87_t_0_0 / cfblk122_out1;
      if (cfblk87_div_temp[8] != 1'b0) begin
        cfblk87_out1 = 8'b11111111;
      end
      else begin
        cfblk87_out1 = cfblk87_div_temp[7:0];
      end
    end
  end



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk87_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  always @(cfblk2_out1, cfblk5_out1) begin
    cfblk128_div_temp = 9'b000000000;
    cfblk128_t_0_0 = 9'b000000000;
    if (cfblk5_out1 == 8'b00000000) begin
      cfblk128_out1 = 8'b11111111;
    end
    else begin
      cfblk128_t_0_0 = {1'b0, cfblk2_out1};
      cfblk128_div_temp = cfblk128_t_0_0 / cfblk5_out1;
      if (cfblk128_div_temp[8] != 1'b0) begin
        cfblk128_out1 = 8'b11111111;
      end
      else begin
        cfblk128_out1 = cfblk128_div_temp[7:0];
      end
    end
  end



  assign dtc_out_9 = cfblk128_out1;



  assign cfblk121_out1 = dtc_out_9;



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk121_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  assign cfblk129_out1 = cfblk153_out1 - cfblk24_out1;



  assign dtc_out_10 = cfblk129_out1;



  assign cfblk61_out1 = dtc_out_10;



  assign dtc_out_11 = cfblk61_out1;



  assign cfblk104_out1 = dtc_out_11;



  assign dtc_out_12 = cfblk104_out1;



  assign cfblk40_out1 = dtc_out_12;



  assign dtc_out_13 = cfblk40_out1;



  assign cfblk14_out1 = dtc_out_13;



  assign cfblk88_out1 = cfblk14_out1 + cfblk85_out1;



  assign cfblk57_out1 = cfblk88_out1 - cfblk87_out1;



  assign dtc_out_14 = cfblk57_out1;



  assign cfblk44_out1 = dtc_out_14;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk44_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk122_out1 = cfblk150_out1 - cfblk55_out1;



  assign cfblk6_out1 = cfblk122_out1[7:4];



  assign cfblk200_out1 = {cfblk6_out1, 4'b0000};



  assign Hdl_out = cfblk200_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

