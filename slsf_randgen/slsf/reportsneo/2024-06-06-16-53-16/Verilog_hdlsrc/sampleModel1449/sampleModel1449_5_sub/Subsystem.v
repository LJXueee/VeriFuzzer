// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1449\sampleModel1449_5_sub\Subsystem.v
// Created: 2024-07-01 01:01:08
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1449_5_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk86_const_val_1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk59_const_val_1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk74_const_val_1;  // uint8
  wire [15:0] Mysubsystem_35_out1;  // uint16
  wire [7:0] cfblk45_const_val_1;  // uint8
  wire [7:0] cfblk66_const_val_1;  // uint8
  wire [7:0] cfblk31_const_val_1;  // uint8
  wire [7:0] cfblk119_const_val_1;  // uint8
  wire [7:0] cfblk35_const_val_1;  // uint8
  wire [7:0] cfblk85_const_val_1;  // uint8
  wire [7:0] cfblk22_const_val_1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [15:0] cfblk3_out1;  // uint16
  wire [7:0] cfblk170_out1;  // uint8
  reg [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] cfblk57_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] Mysubsystem_32_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk102_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] cfblk120_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [15:0] Mysubsystem_31_out1;  // ufix16_En7
  reg [15:0] cfblk163_reg [0:1];  // ufix16 [2]
  wire [15:0] cfblk163_reg_next [0:1];  // ufix16_En7 [2]
  wire [15:0] cfblk163_out1;  // ufix16_En7
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk54_out1;  // uint8
  wire [31:0] cfblk91_add_cast;  // ufix32_En7
  wire [31:0] cfblk91_add_cast_1;  // ufix32_En7
  wire [31:0] cfblk91_add_temp;  // ufix32_En7
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  reg [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  reg [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  reg [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  reg [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  reg [8:0] cfblk52_div_temp;  // ufix9
  reg [8:0] cfblk52_t_0_0;  // ufix9
  reg [8:0] cfblk90_div_temp;  // ufix9
  reg [8:0] cfblk90_t_0_0;  // ufix9
  reg [8:0] cfblk108_div_temp;  // ufix9
  reg [8:0] cfblk108_t_0_0;  // ufix9
  reg [8:0] cfblk63_div_temp;  // ufix9
  reg [8:0] cfblk63_t_0_0;  // ufix9
  reg [8:0] cfblk131_div_temp;  // ufix9
  reg [8:0] cfblk131_t_0_0;  // ufix9
  reg [15:0] cfblk120_varargout_1;  // ufix16
  reg [15:0] cfblk120_div_temp;  // ufix16
  reg [8:0] cfblk88_div_temp;  // ufix9
  reg [8:0] cfblk88_t_0_0;  // ufix9
  reg [8:0] cfblk69_div_temp;  // ufix9
  reg [8:0] cfblk69_t_0_0;  // ufix9
  reg [8:0] cfblk21_div_temp;  // ufix9
  reg [8:0] cfblk21_t_0_0;  // ufix9
  reg [8:0] cfblk100_div_temp;  // ufix9
  reg [8:0] cfblk100_t_0_0;  // ufix9
  reg [8:0] cfblk46_div_temp;  // ufix9
  reg [8:0] cfblk46_t_0_0;  // ufix9
  reg [8:0] cfblk57_div_temp;  // ufix9
  reg [8:0] cfblk57_t_0_0;  // ufix9
  reg [8:0] cfblk84_div_temp;  // ufix9
  reg [8:0] cfblk84_t_0_0;  // ufix9


  assign cfblk86_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk138_out1 = 8'b00000001;



  assign cfblk75_out1 = cfblk138_out1 - cfblk138_out1;



  assign cfblk59_const_val_1 = 8'b00000000;



  cfblk137 u_cfblk137 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk137_out1)  // uint8
                       );

  assign cfblk140_out1 = 8'b00000001;



  assign cfblk74_const_val_1 = 8'b00000000;



  Mysubsystem_35 u_Mysubsystem_35 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_35_out1)  // uint16
                                   );

  assign cfblk45_const_val_1 = 8'b00000000;



  assign cfblk66_const_val_1 = 8'b00000000;



  assign cfblk31_const_val_1 = 8'b00000000;



  assign cfblk119_const_val_1 = 8'b00000000;



  assign cfblk35_const_val_1 = 8'b00000000;



  assign cfblk85_const_val_1 = 8'b00000000;



  assign cfblk22_const_val_1 = 8'b00000000;



  assign dtc_out = cfblk2_out1;



  assign cfblk128_out1 = dtc_out;



  assign cfblk85_out1 = cfblk144_out1 + cfblk85_const_val_1;



  cfblk146 u_cfblk146 (.In1(cfblk85_out1),  // uint8
                       .Out1(cfblk146_out1)  // uint8
                       );

  assign cfblk22_out1 = cfblk146_out1 + cfblk22_const_val_1;



  assign cfblk3_out1 = {cfblk22_out1, cfblk138_out1};



  assign cfblk170_out1 = cfblk3_out1[7:0];



  always @(cfblk128_out1, cfblk170_out1) begin
    cfblk52_div_temp = 9'b000000000;
    cfblk52_t_0_0 = 9'b000000000;
    if (cfblk128_out1 == 8'b00000000) begin
      cfblk52_out1 = 8'b11111111;
    end
    else begin
      cfblk52_t_0_0 = {1'b0, cfblk170_out1};
      cfblk52_div_temp = cfblk52_t_0_0 / cfblk128_out1;
      if (cfblk52_div_temp[8] != 1'b0) begin
        cfblk52_out1 = 8'b11111111;
      end
      else begin
        cfblk52_out1 = cfblk52_div_temp[7:0];
      end
    end
  end



  assign cfblk107_out1 = cfblk52_out1 + cfblk90_out1;



  cfblk142 u_cfblk142 (.In1(cfblk74_out1),  // uint8
                       .Out1(cfblk142_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk142_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk101_out1 = cfblk158_out1 + cfblk45_out1;



  assign cfblk31_out1 = cfblk43_out1 + cfblk31_const_val_1;



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk31_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign cfblk73_out1 = (cfblk4_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_1 = cfblk73_out1;



  assign cfblk117_out1 = dtc_out_1;



  always @(cfblk2_out1, cfblk57_out1) begin
    cfblk90_div_temp = 9'b000000000;
    cfblk90_t_0_0 = 9'b000000000;
    if (cfblk57_out1 == 8'b00000000) begin
      cfblk90_out1 = 8'b11111111;
    end
    else begin
      cfblk90_t_0_0 = {1'b0, cfblk2_out1};
      cfblk90_div_temp = cfblk90_t_0_0 / cfblk57_out1;
      if (cfblk90_div_temp[8] != 1'b0) begin
        cfblk90_out1 = 8'b11111111;
      end
      else begin
        cfblk90_out1 = cfblk90_div_temp[7:0];
      end
    end
  end



  assign dtc_out_2 = cfblk45_out1;



  assign cfblk43_out1 = dtc_out_2;



  Mysubsystem_32 u_Mysubsystem_32 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk43_out1),  // uint8
                                   .Out1(Mysubsystem_32_out1)  // uint8
                                   );

  assign cfblk127_out1 = cfblk141_out1 + Mysubsystem_32_out1;



  assign cfblk103_out1 = (cfblk127_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk6_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  DotProduct_block2 u_cfblk55_inst (.in1(cfblk161_out1),  // uint8
                                    .in2(cfblk103_out1),  // uint8
                                    .out1(cfblk55_out1)  // uint8
                                    );

  assign cfblk12_out1 = (cfblk55_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk45_out1 = cfblk12_out1 + cfblk45_const_val_1;



  assign cfblk113_out1 = cfblk122_out1 - cfblk45_out1;



  cfblk143 u_cfblk143 (.In1(cfblk113_out1),  // uint8
                       .Out1(cfblk143_out1)  // uint8
                       );

  DotProduct_block1 u_cfblk33_inst (.in1(cfblk143_out1),  // uint8
                                    .in2(cfblk122_out1),  // uint8
                                    .out1(cfblk33_out1)  // uint8
                                    );

  assign cfblk98_out1 = cfblk140_out1 + cfblk91_out1;



  assign cfblk96_out1 = cfblk91_out1 + cfblk119_out1;



  assign dtc_out_3 = cfblk123_out1;



  assign cfblk102_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk102_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk23_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  DotProduct_block3 u_cfblk58_inst (.in1(cfblk162_out1),  // uint8
                                    .in2(cfblk153_out1),  // uint8
                                    .out1(cfblk58_out1)  // uint8
                                    );

  assign dtc_out_4 = cfblk58_out1;



  assign cfblk14_out1 = dtc_out_4;



  always @(cfblk14_out1, cfblk23_out1) begin
    cfblk108_div_temp = 9'b000000000;
    cfblk108_t_0_0 = 9'b000000000;
    if (cfblk23_out1 == 8'b00000000) begin
      cfblk108_out1 = 8'b11111111;
    end
    else begin
      cfblk108_t_0_0 = {1'b0, cfblk14_out1};
      cfblk108_div_temp = cfblk108_t_0_0 / cfblk23_out1;
      if (cfblk108_div_temp[8] != 1'b0) begin
        cfblk108_out1 = 8'b11111111;
      end
      else begin
        cfblk108_out1 = cfblk108_div_temp[7:0];
      end
    end
  end



  always @(cfblk108_out1, cfblk97_out1) begin
    cfblk63_div_temp = 9'b000000000;
    cfblk63_t_0_0 = 9'b000000000;
    if (cfblk108_out1 == 8'b00000000) begin
      cfblk63_out1 = 8'b11111111;
    end
    else begin
      cfblk63_t_0_0 = {1'b0, cfblk97_out1};
      cfblk63_div_temp = cfblk63_t_0_0 / cfblk108_out1;
      if (cfblk63_div_temp[8] != 1'b0) begin
        cfblk63_out1 = 8'b11111111;
      end
      else begin
        cfblk63_out1 = cfblk63_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk63_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk13_out1 = cfblk156_out1 + cfblk96_out1;



  cfblk145 u_cfblk145 (.In1(cfblk13_out1),  // uint8
                       .Out1(cfblk145_out1)  // uint8
                       );

  assign cfblk105_out1 = cfblk145_out1 + cfblk98_out1;



  assign dtc_out_5 = cfblk120_out1;



  assign cfblk38_out1 = dtc_out_5;



  DotProduct u_cfblk116_inst (.in1(cfblk38_out1),  // uint8
                              .in2(cfblk122_out1),  // uint8
                              .out1(cfblk116_out1)  // uint8
                              );

  assign cfblk25_out1 = (cfblk116_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk25_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  always @(cfblk105_out1, cfblk159_out1) begin
    cfblk131_div_temp = 9'b000000000;
    cfblk131_t_0_0 = 9'b000000000;
    if (cfblk105_out1 == 8'b00000000) begin
      cfblk131_out1 = 8'b11111111;
    end
    else begin
      cfblk131_t_0_0 = {1'b0, cfblk159_out1};
      cfblk131_div_temp = cfblk131_t_0_0 / cfblk105_out1;
      if (cfblk131_div_temp[8] != 1'b0) begin
        cfblk131_out1 = 8'b11111111;
      end
      else begin
        cfblk131_out1 = cfblk131_div_temp[7:0];
      end
    end
  end



  cfblk144 u_cfblk144 (.In1(cfblk131_out1),  // uint8
                       .Out1(cfblk144_out1)  // uint8
                       );

  assign cfblk28_out1 = cfblk97_out1 + cfblk144_out1;



  assign cfblk74_out1 = cfblk28_out1 + cfblk74_const_val_1;



  always @(Mysubsystem_35_out1, cfblk74_out1) begin
    cfblk120_div_temp = 16'b0000000000000000;
    if (Mysubsystem_35_out1 == 16'b0000000000000000) begin
      cfblk120_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk120_div_temp = cfblk74_out1 / Mysubsystem_35_out1;
      cfblk120_varargout_1 = cfblk120_div_temp;
    end
    if (cfblk120_varargout_1[15:8] != 8'b00000000) begin
      cfblk120_out1 = 8'b11111111;
    end
    else begin
      cfblk120_out1 = cfblk120_varargout_1[7:0];
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk120_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  assign cfblk5_out1 = cfblk79_out1 - cfblk160_out1;



  cfblk2 u_cfblk2 (.u(cfblk5_out1),  // uint8
                   .y(cfblk2_out1)  // uint8
                   );

  assign cfblk6_out1 = cfblk137_out1 - cfblk2_out1;



  assign cfblk81_out1 = (cfblk6_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk23_out1 = cfblk81_out1 + cfblk122_out1;



  assign dtc_out_6 = cfblk119_out1;



  assign cfblk16_out1 = dtc_out_6;



  assign dtc_out_7 = cfblk16_out1;



  assign cfblk115_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk115_out1;



  assign cfblk44_out1 = dtc_out_8;



  assign cfblk72_out1 = cfblk44_out1 + cfblk23_out1;



  Mysubsystem_31 u_Mysubsystem_31 (.In1(cfblk72_out1),  // uint8
                                   .Out1(Mysubsystem_31_out1)  // ufix16_En7
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 16'b0000000000000000;
        cfblk163_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = Mysubsystem_31_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk59_out1 = cfblk121_out1 + cfblk59_const_val_1;



  assign dtc_out_9 = cfblk59_out1;



  assign cfblk54_out1 = dtc_out_9;



  assign cfblk91_add_cast = {17'b0, {cfblk54_out1, 7'b0000000}};
  assign cfblk91_add_cast_1 = {16'b0, cfblk163_out1};
  assign cfblk91_add_temp = cfblk91_add_cast + cfblk91_add_cast_1;
  assign cfblk91_out1 = cfblk91_add_temp[14:7];



  assign cfblk118_out1 = cfblk75_out1 + cfblk91_out1;



  assign cfblk122_out1 = (cfblk118_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk10_out1 = (cfblk122_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk47_out1 = (cfblk10_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk26_out1 = (cfblk47_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block4 u_cfblk76_inst (.in1(cfblk88_out1),  // uint8
                                    .in2(cfblk26_out1),  // uint8
                                    .out1(cfblk76_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk76_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(cfblk155_out1, cfblk97_out1) begin
    cfblk88_div_temp = 9'b000000000;
    cfblk88_t_0_0 = 9'b000000000;
    if (cfblk97_out1 == 8'b00000000) begin
      cfblk88_out1 = 8'b11111111;
    end
    else begin
      cfblk88_t_0_0 = {1'b0, cfblk155_out1};
      cfblk88_div_temp = cfblk88_t_0_0 / cfblk97_out1;
      if (cfblk88_div_temp[8] != 1'b0) begin
        cfblk88_out1 = 8'b11111111;
      end
      else begin
        cfblk88_out1 = cfblk88_div_temp[7:0];
      end
    end
  end



  assign cfblk78_out1 = cfblk88_out1 - cfblk33_out1;



  assign cfblk95_out1 = cfblk78_out1 + cfblk122_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk95_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk32_out1 = cfblk154_out1 + cfblk90_out1;



  assign cfblk97_out1 = cfblk32_out1 + cfblk16_out1;



  always @(cfblk97_out1) begin
    cfblk69_div_temp = 9'b000000000;
    cfblk69_t_0_0 = 9'b000000000;
    if (cfblk97_out1 == 8'b00000000) begin
      cfblk69_out1 = 8'b11111111;
    end
    else begin
      cfblk69_t_0_0 = {1'b0, cfblk97_out1};
      cfblk69_div_temp = cfblk69_t_0_0 / cfblk97_out1;
      if (cfblk69_div_temp[8] != 1'b0) begin
        cfblk69_out1 = 8'b11111111;
      end
      else begin
        cfblk69_out1 = cfblk69_div_temp[7:0];
      end
    end
  end



  assign cfblk40_out1 = cfblk69_out1 + cfblk69_out1;



  assign cfblk66_out1 = cfblk40_out1 + cfblk66_const_val_1;



  assign cfblk64_out1 = cfblk66_out1 - cfblk117_out1;



  always @(cfblk137_out1, cfblk64_out1) begin
    cfblk21_div_temp = 9'b000000000;
    cfblk21_t_0_0 = 9'b000000000;
    if (cfblk137_out1 == 8'b00000000) begin
      cfblk21_out1 = 8'b11111111;
    end
    else begin
      cfblk21_t_0_0 = {1'b0, cfblk64_out1};
      cfblk21_div_temp = cfblk21_t_0_0 / cfblk137_out1;
      if (cfblk21_div_temp[8] != 1'b0) begin
        cfblk21_out1 = 8'b11111111;
      end
      else begin
        cfblk21_out1 = cfblk21_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk21_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  always @(cfblk14_out1, cfblk157_out1) begin
    cfblk100_div_temp = 9'b000000000;
    cfblk100_t_0_0 = 9'b000000000;
    if (cfblk14_out1 == 8'b00000000) begin
      cfblk100_out1 = 8'b11111111;
    end
    else begin
      cfblk100_t_0_0 = {1'b0, cfblk157_out1};
      cfblk100_div_temp = cfblk100_t_0_0 / cfblk14_out1;
      if (cfblk100_div_temp[8] != 1'b0) begin
        cfblk100_out1 = 8'b11111111;
      end
      else begin
        cfblk100_out1 = cfblk100_div_temp[7:0];
      end
    end
  end



  assign cfblk86_out1 = cfblk121_out1 + cfblk86_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk86_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk121_out1 = cfblk168_out1 + cfblk100_out1;



  assign cfblk119_out1 = cfblk121_out1 + cfblk119_const_val_1;



  always @(cfblk79_out1) begin
    cfblk46_div_temp = 9'b000000000;
    cfblk46_t_0_0 = 9'b000000000;
    if (cfblk79_out1 == 8'b00000000) begin
      cfblk46_out1 = 8'b11111111;
    end
    else begin
      cfblk46_t_0_0 = {1'b0, cfblk79_out1};
      cfblk46_div_temp = cfblk46_t_0_0 / cfblk79_out1;
      if (cfblk46_div_temp[8] != 1'b0) begin
        cfblk46_out1 = 8'b11111111;
      end
      else begin
        cfblk46_out1 = cfblk46_div_temp[7:0];
      end
    end
  end



  assign cfblk9_out1 = cfblk46_out1 + cfblk119_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk9_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk133_out1 = cfblk165_out1 - cfblk101_out1;



  assign dtc_out_10 = cfblk133_out1;



  assign cfblk79_out1 = dtc_out_10;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk79_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  always @(cfblk122_out1, cfblk164_out1) begin
    cfblk57_div_temp = 9'b000000000;
    cfblk57_t_0_0 = 9'b000000000;
    if (cfblk122_out1 == 8'b00000000) begin
      cfblk57_out1 = 8'b11111111;
    end
    else begin
      cfblk57_t_0_0 = {1'b0, cfblk164_out1};
      cfblk57_div_temp = cfblk57_t_0_0 / cfblk122_out1;
      if (cfblk57_div_temp[8] != 1'b0) begin
        cfblk57_out1 = 8'b11111111;
      end
      else begin
        cfblk57_out1 = cfblk57_div_temp[7:0];
      end
    end
  end



  assign cfblk35_out1 = cfblk57_out1 + cfblk35_const_val_1;



  cfblk141 u_cfblk141 (.In1(cfblk35_out1),  // uint8
                       .Out1(cfblk141_out1)  // uint8
                       );

  assign cfblk60_out1 = (cfblk141_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk60_out1, cfblk64_out1) begin
    cfblk84_div_temp = 9'b000000000;
    cfblk84_t_0_0 = 9'b000000000;
    if (cfblk64_out1 == 8'b00000000) begin
      cfblk84_out1 = 8'b11111111;
    end
    else begin
      cfblk84_t_0_0 = {1'b0, cfblk60_out1};
      cfblk84_div_temp = cfblk84_t_0_0 / cfblk64_out1;
      if (cfblk84_div_temp[8] != 1'b0) begin
        cfblk84_out1 = 8'b11111111;
      end
      else begin
        cfblk84_out1 = cfblk84_div_temp[7:0];
      end
    end
  end



  DotProduct_block u_cfblk123_inst (.in1(cfblk84_out1),  // uint8
                                    .in2(cfblk107_out1),  // uint8
                                    .out1(cfblk123_out1)  // uint8
                                    );

  assign Hdl_out = cfblk123_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

