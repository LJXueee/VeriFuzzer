// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel2027\sampleModel2027_3_sub\Subsystem.v
// Created: 2024-07-03 01:17:47
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk152                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel2027_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk152,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk152;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk195_out1;  // uint8
  reg [7:0] cfblk195_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_reg_next [0:1];  // ufix8 [2]
  wire cfblk197_out1_is_not0;
  wire [7:0] cfblk27_const_val_1;  // uint8
  wire [7:0] cfblk124_const_val_1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk194_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  reg [7:0] cfblk192_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_out1;  // uint8
  wire [15:0] cfblk153_out1;  // uint16
  wire [7:0] cfblk72_const_val_1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk93_const_val_1;  // uint8
  wire [7:0] cfblk106_const_val_1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] Mysubsystem_47_out1;  // uint8
  wire [7:0] cfblk110_const_val_1;  // uint8
  wire [7:0] cfblk43_const_val_1;  // uint8
  wire [7:0] cfblk208_out1;  // uint8
  wire [7:0] cfblk54_const_val_1;  // uint8
  wire [7:0] cfblk50_const_val_1;  // uint8
  wire [7:0] cfblk24_const_val_1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk67_const_val_1;  // uint8
  wire [7:0] cfblk48_const_val_1;  // uint8
  wire [7:0] cfblk101_const_val_1;  // uint8
  wire [7:0] cfblk28_const_val_1;  // uint8
  wire [7:0] cfblk112_const_val_1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  reg [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk103_out1;  // uint8
  wire [7:0] Mysubsystem_15_out1;  // uint8
  reg [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk61_out1;  // uint8
  wire Mysubsystem_19_out1;
  wire signed [7:0] Mysubsystem_29_out1;  // int8
  reg signed [7:0] cfblk175_reg [0:1];  // sfix8 [2]
  wire signed [7:0] cfblk175_reg_next [0:1];  // sfix8 [2]
  wire signed [7:0] cfblk175_out1;  // int8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk11_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  reg [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  reg [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk75_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  reg [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk196_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire cfblk6_relop1;
  wire [7:0] cfblk203_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk68_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] Mysubsystem_52_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  reg [7:0] cfblk148_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire cfblk198_out1_is_not0;
  wire cfblk3_out1;
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire signed [31:0] cfblk135_add_temp;  // sfix32
  wire signed [31:0] cfblk135_1;  // sfix32
  wire signed [31:0] cfblk135_2;  // sfix32
  reg [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  reg [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk193_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_reg_next [0:1];  // ufix8 [2]
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  reg [8:0] cfblk22_div_temp;  // ufix9
  reg [8:0] cfblk22_t_0_0;  // ufix9
  reg [8:0] cfblk103_div_temp;  // ufix9
  reg [8:0] cfblk103_t_0_0;  // ufix9
  reg [8:0] cfblk129_div_temp;  // ufix9
  reg [8:0] cfblk129_t_0_0;  // ufix9
  reg [8:0] cfblk61_div_temp;  // ufix9
  reg [8:0] cfblk61_t_0_0;  // ufix9
  reg [8:0] cfblk11_div_temp;  // ufix9
  reg [8:0] cfblk11_t_0_0;  // ufix9
  reg [8:0] cfblk77_div_temp;  // ufix9
  reg [8:0] cfblk77_t_0_0;  // ufix9
  reg [8:0] cfblk149_div_temp;  // ufix9
  reg [8:0] cfblk149_t_0_0;  // ufix9
  reg [8:0] cfblk47_div_temp;  // ufix9
  reg [8:0] cfblk47_t_0_0;  // ufix9
  reg [8:0] cfblk145_div_temp;  // ufix9
  reg [8:0] cfblk145_t_0_0;  // ufix9
  reg [8:0] cfblk151_div_temp;  // ufix9
  reg [8:0] cfblk151_t_0_0;  // ufix9
  reg [15:0] cfblk111_varargout_1;  // ufix16
  reg [15:0] cfblk111_div_temp;  // ufix16
  reg [15:0] cfblk148_varargout_1;  // ufix16
  reg [15:0] cfblk148_div_temp;  // ufix16
  reg [8:0] cfblk25_div_temp;  // ufix9
  reg [8:0] cfblk25_t_0_0;  // ufix9
  reg [8:0] cfblk19_div_temp;  // ufix9
  reg [8:0] cfblk19_t_0_0;  // ufix9
  reg [8:0] cfblk150_div_temp;  // ufix9
  reg [8:0] cfblk150_t_0_0;  // ufix9
  reg [8:0] cfblk68_div_temp;  // ufix9
  reg [8:0] cfblk68_t_0_0;  // ufix9
  reg [8:0] cfblk9_div_temp;  // ufix9
  reg [8:0] cfblk9_t_0_0;  // ufix9
  reg [8:0] cfblk56_div_temp;  // ufix9
  reg [8:0] cfblk56_t_0_0;  // ufix9


  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : cfblk195_process
      if (reset == 1'b1) begin
        cfblk195_reg[0] <= 8'b00000000;
        cfblk195_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk195_reg[0] <= cfblk195_reg_next[0];
          cfblk195_reg[1] <= cfblk195_reg_next[1];
        end
      end
    end

  assign cfblk195_out1 = cfblk195_reg[1];
  assign cfblk195_reg_next[0] = cfblk195_out1;
  assign cfblk195_reg_next[1] = cfblk195_reg[0];



  assign cfblk197_out1_is_not0 = cfblk195_out1 != 8'b00000000;



  assign cfblk27_const_val_1 = 8'b00000000;



  assign cfblk124_const_val_1 = 8'b00000000;



  assign dtc_out = cfblk5_out1;



  assign cfblk120_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk194_process
      if (reset == 1'b1) begin
        cfblk194_reg[0] <= 8'b00000000;
        cfblk194_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk194_reg[0] <= cfblk194_reg_next[0];
          cfblk194_reg[1] <= cfblk194_reg_next[1];
        end
      end
    end

  assign cfblk194_out1 = cfblk194_reg[1];
  assign cfblk194_reg_next[0] = cfblk120_out1;
  assign cfblk194_reg_next[1] = cfblk194_reg[0];



  assign cfblk134_out1 = (cfblk194_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk124_out1 = cfblk134_out1 + cfblk124_const_val_1;



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk124_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  assign cfblk133_out1 = (cfblk5_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk7 u_cfblk7 (.u(cfblk105_out1),  // uint8
                   .y(cfblk7_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk7_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  assign cfblk105_out1 = cfblk120_out1 + cfblk191_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk192_process
      if (reset == 1'b1) begin
        cfblk192_reg[0] <= 8'b00000000;
        cfblk192_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk192_reg[0] <= cfblk192_reg_next[0];
          cfblk192_reg[1] <= cfblk192_reg_next[1];
        end
      end
    end

  assign cfblk192_out1 = cfblk192_reg[1];
  assign cfblk192_reg_next[0] = cfblk105_out1;
  assign cfblk192_reg_next[1] = cfblk192_reg[0];



  cfblk153 u_cfblk153 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk153_out1)  // uint16
                       );

  assign cfblk72_const_val_1 = 8'b00000000;



  assign cfblk155_out1 = 8'b00000001;



  assign cfblk93_const_val_1 = 8'b00000000;



  assign cfblk106_const_val_1 = 8'b00000000;



  assign cfblk106_out1 = cfblk124_out1 + cfblk106_const_val_1;



  Mysubsystem_47 u_Mysubsystem_47 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_47_out1)  // uint8
                                   );

  assign cfblk110_const_val_1 = 8'b00000000;



  assign cfblk43_const_val_1 = 8'b00000000;



  assign cfblk208_out1 = cfblk153_out1[7:0];



  assign cfblk54_const_val_1 = 8'b00000000;



  assign cfblk50_const_val_1 = 8'b00000000;



  assign cfblk24_const_val_1 = 8'b00000000;



  assign cfblk100_out1 = (cfblk191_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk67_const_val_1 = 8'b00000000;



  assign cfblk48_const_val_1 = 8'b00000000;



  assign cfblk101_const_val_1 = 8'b00000000;



  assign cfblk28_const_val_1 = 8'b00000000;



  assign cfblk112_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk78_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk28_out1 = cfblk71_out1 + cfblk28_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        cfblk189_reg[0] <= 8'b00000000;
        cfblk189_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk189_reg[0] <= cfblk189_reg_next[0];
          cfblk189_reg[1] <= cfblk189_reg_next[1];
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk28_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  assign cfblk94_out1 = (cfblk95_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk94_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  assign cfblk97_out1 = cfblk179_out1 - cfblk1_out1;



  always @(cfblk189_out1, cfblk97_out1) begin
    cfblk22_div_temp = 9'b000000000;
    cfblk22_t_0_0 = 9'b000000000;
    if (cfblk189_out1 == 8'b00000000) begin
      cfblk22_out1 = 8'b11111111;
    end
    else begin
      cfblk22_t_0_0 = {1'b0, cfblk97_out1};
      cfblk22_div_temp = cfblk22_t_0_0 / cfblk189_out1;
      if (cfblk22_div_temp[8] != 1'b0) begin
        cfblk22_out1 = 8'b11111111;
      end
      else begin
        cfblk22_out1 = cfblk22_div_temp[7:0];
      end
    end
  end



  always @(cfblk19_out1, cfblk65_out1) begin
    cfblk103_div_temp = 9'b000000000;
    cfblk103_t_0_0 = 9'b000000000;
    if (cfblk19_out1 == 8'b00000000) begin
      cfblk103_out1 = 8'b11111111;
    end
    else begin
      cfblk103_t_0_0 = {1'b0, cfblk65_out1};
      cfblk103_div_temp = cfblk103_t_0_0 / cfblk19_out1;
      if (cfblk103_div_temp[8] != 1'b0) begin
        cfblk103_out1 = 8'b11111111;
      end
      else begin
        cfblk103_out1 = cfblk103_div_temp[7:0];
      end
    end
  end



  Mysubsystem_15 u_Mysubsystem_15 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk103_out1),  // uint8
                                   .Out1(Mysubsystem_15_out1)  // uint8
                                   );

  always @(Mysubsystem_15_out1, cfblk22_out1) begin
    cfblk129_div_temp = 9'b000000000;
    cfblk129_t_0_0 = 9'b000000000;
    if (cfblk22_out1 == 8'b00000000) begin
      cfblk129_out1 = 8'b11111111;
    end
    else begin
      cfblk129_t_0_0 = {1'b0, Mysubsystem_15_out1};
      cfblk129_div_temp = cfblk129_t_0_0 / cfblk22_out1;
      if (cfblk129_div_temp[8] != 1'b0) begin
        cfblk129_out1 = 8'b11111111;
      end
      else begin
        cfblk129_out1 = cfblk129_div_temp[7:0];
      end
    end
  end



  cfblk157 u_cfblk157 (.In1(cfblk129_out1),  // uint8
                       .Out1(cfblk157_out1)  // uint8
                       );

  assign cfblk118_out1 = cfblk36_out1 - cfblk120_out1;



  assign cfblk67_out1 = cfblk118_out1 + cfblk67_const_val_1;



  always @(cfblk16_out1, cfblk5_out1) begin
    cfblk61_div_temp = 9'b000000000;
    cfblk61_t_0_0 = 9'b000000000;
    if (cfblk5_out1 == 8'b00000000) begin
      cfblk61_out1 = 8'b11111111;
    end
    else begin
      cfblk61_t_0_0 = {1'b0, cfblk16_out1};
      cfblk61_div_temp = cfblk61_t_0_0 / cfblk5_out1;
      if (cfblk61_div_temp[8] != 1'b0) begin
        cfblk61_out1 = 8'b11111111;
      end
      else begin
        cfblk61_out1 = cfblk61_div_temp[7:0];
      end
    end
  end



  Mysubsystem_19 u_Mysubsystem_19 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk61_out1),  // uint8
                                   .Out1(Mysubsystem_19_out1)
                                   );

  Mysubsystem_29 u_Mysubsystem_29 (.In1(Mysubsystem_19_out1),
                                   .In2(cfblk67_out1),  // uint8
                                   .Out1(Mysubsystem_29_out1)  // int8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'sb00000000;
        cfblk175_reg[1] <= 8'sb00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = Mysubsystem_29_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk30_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  always @(cfblk121_out1, cfblk139_out1) begin
    cfblk11_div_temp = 9'b000000000;
    cfblk11_t_0_0 = 9'b000000000;
    if (cfblk121_out1 == 8'b00000000) begin
      cfblk11_out1 = 8'b11111111;
    end
    else begin
      cfblk11_t_0_0 = {1'b0, cfblk139_out1};
      cfblk11_div_temp = cfblk11_t_0_0 / cfblk121_out1;
      if (cfblk11_div_temp[8] != 1'b0) begin
        cfblk11_out1 = 8'b11111111;
      end
      else begin
        cfblk11_out1 = cfblk11_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk11_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  DotProduct u_cfblk109_inst (.in1(cfblk100_out1),  // uint8
                              .in2(cfblk170_out1),  // uint8
                              .out1(cfblk109_out1)  // uint8
                              );

  always @(cfblk109_out1, cfblk187_out1) begin
    cfblk77_div_temp = 9'b000000000;
    cfblk77_t_0_0 = 9'b000000000;
    if (cfblk187_out1 == 8'b00000000) begin
      cfblk77_out1 = 8'b11111111;
    end
    else begin
      cfblk77_t_0_0 = {1'b0, cfblk109_out1};
      cfblk77_div_temp = cfblk77_t_0_0 / cfblk187_out1;
      if (cfblk77_div_temp[8] != 1'b0) begin
        cfblk77_out1 = 8'b11111111;
      end
      else begin
        cfblk77_out1 = cfblk77_div_temp[7:0];
      end
    end
  end



  assign cfblk51_out1 = (cfblk77_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk54_out1 = cfblk70_out1 + cfblk54_const_val_1;



  always @(cfblk38_out1, cfblk54_out1) begin
    cfblk149_div_temp = 9'b000000000;
    cfblk149_t_0_0 = 9'b000000000;
    if (cfblk38_out1 == 8'b00000000) begin
      cfblk149_out1 = 8'b11111111;
    end
    else begin
      cfblk149_t_0_0 = {1'b0, cfblk54_out1};
      cfblk149_div_temp = cfblk149_t_0_0 / cfblk38_out1;
      if (cfblk149_div_temp[8] != 1'b0) begin
        cfblk149_out1 = 8'b11111111;
      end
      else begin
        cfblk149_out1 = cfblk149_div_temp[7:0];
      end
    end
  end



  assign cfblk50_out1 = cfblk149_out1 + cfblk50_const_val_1;



  cfblk160 u_cfblk160 (.In1(cfblk42_out1),  // uint8
                       .Out1(cfblk160_out1)  // uint8
                       );

  assign cfblk58_out1 = cfblk160_out1 + cfblk121_out1;



  DotProduct_block8 u_cfblk78_inst (.in1(cfblk136_out1),  // uint8
                                    .in2(cfblk27_out1),  // uint8
                                    .out1(cfblk78_out1)  // uint8
                                    );

  assign dtc_out_1 = cfblk78_out1;



  assign cfblk36_out1 = dtc_out_1;



  assign cfblk65_out1 = cfblk36_out1 - cfblk208_out1;



  assign dtc_out_2 = cfblk1_out1;



  assign cfblk69_out1 = dtc_out_2;



  DotProduct_block7 u_cfblk62_inst (.in1(cfblk69_out1),  // uint8
                                    .in2(cfblk65_out1),  // uint8
                                    .out1(cfblk62_out1)  // uint8
                                    );

  assign cfblk31_out1 = cfblk62_out1 - cfblk30_out1;



  assign cfblk55_out1 = (cfblk31_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk59_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk180_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  always @(cfblk1_out1, cfblk30_out1) begin
    cfblk47_div_temp = 9'b000000000;
    cfblk47_t_0_0 = 9'b000000000;
    if (cfblk1_out1 == 8'b00000000) begin
      cfblk47_out1 = 8'b11111111;
    end
    else begin
      cfblk47_t_0_0 = {1'b0, cfblk30_out1};
      cfblk47_div_temp = cfblk47_t_0_0 / cfblk1_out1;
      if (cfblk47_div_temp[8] != 1'b0) begin
        cfblk47_out1 = 8'b11111111;
      end
      else begin
        cfblk47_out1 = cfblk47_div_temp[7:0];
      end
    end
  end



  assign cfblk43_out1 = cfblk47_out1 + cfblk43_const_val_1;



  assign dtc_out_3 = cfblk43_out1;



  assign cfblk75_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk75_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  DotProduct_block5 u_cfblk30_inst (.in1(cfblk184_out1),  // uint8
                                    .in2(cfblk111_out1),  // uint8
                                    .out1(cfblk30_out1)  // uint8
                                    );

  DotProduct_block2 u_cfblk126_inst (.in1(cfblk30_out1),  // uint8
                                     .in2(cfblk55_out1),  // uint8
                                     .out1(cfblk126_out1)  // uint8
                                     );

  assign cfblk138_out1 = (cfblk126_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk138_out1, cfblk71_out1) begin
    cfblk145_div_temp = 9'b000000000;
    cfblk145_t_0_0 = 9'b000000000;
    if (cfblk71_out1 == 8'b00000000) begin
      cfblk145_out1 = 8'b11111111;
    end
    else begin
      cfblk145_t_0_0 = {1'b0, cfblk138_out1};
      cfblk145_div_temp = cfblk145_t_0_0 / cfblk71_out1;
      if (cfblk145_div_temp[8] != 1'b0) begin
        cfblk145_out1 = 8'b11111111;
      end
      else begin
        cfblk145_out1 = cfblk145_div_temp[7:0];
      end
    end
  end



  assign cfblk91_out1 = cfblk145_out1 + cfblk58_out1;



  DotProduct_block6 u_cfblk33_inst (.in1(cfblk91_out1),  // uint8
                                    .in2(cfblk55_out1),  // uint8
                                    .out1(cfblk33_out1)  // uint8
                                    );

  assign cfblk20_out1 = cfblk33_out1 + cfblk50_out1;



  assign dtc_out_4 = cfblk20_out1;



  assign cfblk114_out1 = dtc_out_4;



  assign cfblk24_out1 = cfblk114_out1 + cfblk24_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk24_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk196_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  cfblk158 u_cfblk158 (.In1(cfblk38_out1),  // uint8
                       .Out1(cfblk158_out1)  // uint8
                       );

  assign cfblk6_relop1 = cfblk158_out1 <= cfblk190_out1;



  assign cfblk203_out1 = {7'b0, cfblk6_relop1};



  assign cfblk140_out1 = Mysubsystem_47_out1 + cfblk203_out1;



  assign cfblk110_out1 = cfblk140_out1 + cfblk110_const_val_1;



  assign cfblk66_out1 = cfblk110_out1 + cfblk146_out1;



  DotProduct_block10 u_cfblk86_inst (.in1(cfblk26_out1),  // uint8
                                     .in2(cfblk66_out1),  // uint8
                                     .out1(cfblk86_out1)  // uint8
                                     );

  DotProduct_block3 u_cfblk139_inst (.in1(cfblk86_out1),  // uint8
                                     .in2(cfblk68_out1),  // uint8
                                     .out1(cfblk139_out1)  // uint8
                                     );

  assign dtc_out_5 = cfblk139_out1;



  assign cfblk16_out1 = dtc_out_5;



  assign cfblk93_out1 = cfblk71_out1 + cfblk93_const_val_1;



  always @(cfblk155_out1, cfblk56_out1) begin
    cfblk151_div_temp = 9'b000000000;
    cfblk151_t_0_0 = 9'b000000000;
    if (cfblk56_out1 == 8'b00000000) begin
      cfblk151_out1 = 8'b11111111;
    end
    else begin
      cfblk151_t_0_0 = {1'b0, cfblk155_out1};
      cfblk151_div_temp = cfblk151_t_0_0 / cfblk56_out1;
      if (cfblk151_div_temp[8] != 1'b0) begin
        cfblk151_out1 = 8'b11111111;
      end
      else begin
        cfblk151_out1 = cfblk151_div_temp[7:0];
      end
    end
  end



  assign cfblk71_out1 = cfblk151_out1 + cfblk156_out1;



  always @(cfblk153_out1, cfblk71_out1) begin
    cfblk111_div_temp = 16'b0000000000000000;
    if (cfblk153_out1 == 16'b0000000000000000) begin
      cfblk111_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk111_div_temp = cfblk71_out1 / cfblk153_out1;
      cfblk111_varargout_1 = cfblk111_div_temp;
    end
    if (cfblk111_varargout_1[15:8] != 8'b00000000) begin
      cfblk111_out1 = 8'b11111111;
    end
    else begin
      cfblk111_out1 = cfblk111_varargout_1[7:0];
    end
  end



  Mysubsystem_52 u_Mysubsystem_52 (.In1(cfblk27_out1),  // uint8
                                   .In2(cfblk111_out1),  // uint8
                                   .In3(cfblk93_out1),  // uint8
                                   .Out1(Mysubsystem_52_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = Mysubsystem_52_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  always @(cfblk135_out1, cfblk153_out1) begin
    cfblk148_div_temp = 16'b0000000000000000;
    if (cfblk153_out1 == 16'b0000000000000000) begin
      cfblk148_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk148_div_temp = cfblk135_out1 / cfblk153_out1;
      cfblk148_varargout_1 = cfblk148_div_temp;
    end
    if (cfblk148_varargout_1[15:8] != 8'b00000000) begin
      cfblk148_out1 = 8'b11111111;
    end
    else begin
      cfblk148_out1 = cfblk148_varargout_1[7:0];
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk148_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk88_out1 = cfblk166_out1 + cfblk102_out1;



  assign cfblk15_out1 = cfblk192_out1 - cfblk88_out1;



  assign cfblk132_out1 = (cfblk15_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk72_out1 = cfblk132_out1 + cfblk72_const_val_1;



  assign cfblk89_out1 = cfblk72_out1 + cfblk183_out1;



  assign cfblk41_out1 = (cfblk89_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk53_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk38_out1 = (cfblk53_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk127_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk123_out1 = cfblk48_out1 + cfblk169_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk123_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk102_out1 = cfblk168_out1 + cfblk133_out1;



  assign cfblk70_out1 = (cfblk136_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk70_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign cfblk198_out1_is_not0 = cfblk84_out1 != 8'b00000000;



  assign cfblk3_out1 = cfblk197_out1_is_not0 & cfblk198_out1_is_not0;



  assign cfblk196_out1 = {7'b0, cfblk3_out1};



  assign cfblk27_out1 = cfblk196_out1 + cfblk27_const_val_1;



  assign cfblk127_out1 = cfblk27_out1 + cfblk177_out1;



  cfblk161 u_cfblk161 (.In1(cfblk127_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  assign dtc_out_6 = cfblk161_out1;



  assign cfblk57_out1 = dtc_out_6;



  assign cfblk26_out1 = cfblk57_out1 + cfblk102_out1;



  assign cfblk59_out1 = cfblk26_out1 + cfblk38_out1;



  assign cfblk95_out1 = cfblk59_out1 + cfblk106_out1;



  assign cfblk81_out1 = (cfblk95_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_7 = cfblk81_out1;



  assign cfblk136_out1 = dtc_out_7;



  cfblk159 u_cfblk159 (.In1(cfblk136_out1),  // uint8
                       .Out1(cfblk159_out1)  // uint8
                       );

  always @(cfblk159_out1, cfblk16_out1) begin
    cfblk25_div_temp = 9'b000000000;
    cfblk25_t_0_0 = 9'b000000000;
    if (cfblk16_out1 == 8'b00000000) begin
      cfblk25_out1 = 8'b11111111;
    end
    else begin
      cfblk25_t_0_0 = {1'b0, cfblk159_out1};
      cfblk25_div_temp = cfblk25_t_0_0 / cfblk16_out1;
      if (cfblk25_div_temp[8] != 1'b0) begin
        cfblk25_out1 = 8'b11111111;
      end
      else begin
        cfblk25_out1 = cfblk25_div_temp[7:0];
      end
    end
  end



  DotProduct_block4 u_cfblk29_inst (.in1(cfblk25_out1),  // uint8
                                    .in2(cfblk172_out1),  // uint8
                                    .out1(cfblk29_out1)  // uint8
                                    );

  assign cfblk121_out1 = (cfblk29_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_8 = cfblk121_out1;



  assign cfblk131_out1 = dtc_out_8;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk131_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk146_out1 = cfblk171_out1 + cfblk51_out1;



  assign cfblk135_1 = {24'b0, cfblk146_out1};
  assign cfblk135_2 = {{24{cfblk175_out1[7]}}, cfblk175_out1};
  assign cfblk135_add_temp = cfblk135_1 + cfblk135_2;
  assign cfblk135_out1 = cfblk135_add_temp[7:0];



  always @(cfblk135_out1, cfblk148_out1) begin
    cfblk19_div_temp = 9'b000000000;
    cfblk19_t_0_0 = 9'b000000000;
    if (cfblk148_out1 == 8'b00000000) begin
      cfblk19_out1 = 8'b11111111;
    end
    else begin
      cfblk19_t_0_0 = {1'b0, cfblk135_out1};
      cfblk19_div_temp = cfblk19_t_0_0 / cfblk148_out1;
      if (cfblk19_div_temp[8] != 1'b0) begin
        cfblk19_out1 = 8'b11111111;
      end
      else begin
        cfblk19_out1 = cfblk19_div_temp[7:0];
      end
    end
  end



  always @(cfblk19_out1, cfblk89_out1) begin
    cfblk150_div_temp = 9'b000000000;
    cfblk150_t_0_0 = 9'b000000000;
    if (cfblk89_out1 == 8'b00000000) begin
      cfblk150_out1 = 8'b11111111;
    end
    else begin
      cfblk150_t_0_0 = {1'b0, cfblk19_out1};
      cfblk150_div_temp = cfblk150_t_0_0 / cfblk89_out1;
      if (cfblk150_div_temp[8] != 1'b0) begin
        cfblk150_out1 = 8'b11111111;
      end
      else begin
        cfblk150_out1 = cfblk150_div_temp[7:0];
      end
    end
  end



  assign cfblk42_out1 = cfblk150_out1 + cfblk38_out1;



  assign cfblk40_out1 = (cfblk42_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_9 = cfblk40_out1;



  assign cfblk141_out1 = dtc_out_9;



  cfblk156 u_cfblk156 (.In1(cfblk141_out1),  // uint8
                       .Out1(cfblk156_out1)  // uint8
                       );

  always @(cfblk156_out1, cfblk5_out1) begin
    cfblk68_div_temp = 9'b000000000;
    cfblk68_t_0_0 = 9'b000000000;
    if (cfblk5_out1 == 8'b00000000) begin
      cfblk68_out1 = 8'b11111111;
    end
    else begin
      cfblk68_t_0_0 = {1'b0, cfblk156_out1};
      cfblk68_div_temp = cfblk68_t_0_0 / cfblk5_out1;
      if (cfblk68_div_temp[8] != 1'b0) begin
        cfblk68_out1 = 8'b11111111;
      end
      else begin
        cfblk68_out1 = cfblk68_div_temp[7:0];
      end
    end
  end



  assign cfblk108_out1 = cfblk68_out1 - cfblk156_out1;



  assign dtc_out_10 = cfblk108_out1;



  assign cfblk143_out1 = dtc_out_10;



  assign cfblk48_out1 = cfblk143_out1 + cfblk48_const_val_1;



  assign cfblk64_out1 = (cfblk112_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk74_out1 = cfblk64_out1 + cfblk48_out1;



  assign cfblk101_out1 = cfblk74_out1 + cfblk101_const_val_1;



  always @(cfblk101_out1, cfblk88_out1) begin
    cfblk9_div_temp = 9'b000000000;
    cfblk9_t_0_0 = 9'b000000000;
    if (cfblk88_out1 == 8'b00000000) begin
      cfblk9_out1 = 8'b11111111;
    end
    else begin
      cfblk9_t_0_0 = {1'b0, cfblk101_out1};
      cfblk9_div_temp = cfblk9_t_0_0 / cfblk88_out1;
      if (cfblk9_div_temp[8] != 1'b0) begin
        cfblk9_out1 = 8'b11111111;
      end
      else begin
        cfblk9_out1 = cfblk9_div_temp[7:0];
      end
    end
  end



  DotProduct_block9 u_cfblk82_inst (.in1(cfblk9_out1),  // uint8
                                    .in2(cfblk157_out1),  // uint8
                                    .out1(cfblk82_out1)  // uint8
                                    );

  assign cfblk87_out1 = (cfblk82_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk87_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign cfblk84_out1 = cfblk182_out1 + cfblk123_out1;



  DotProduct_block1 u_cfblk12_inst (.in1(cfblk84_out1),  // uint8
                                    .in2(cfblk178_out1),  // uint8
                                    .out1(cfblk12_out1)  // uint8
                                    );

  assign dtc_out_11 = cfblk12_out1;



  assign cfblk99_out1 = dtc_out_11;



  assign cfblk90_out1 = (cfblk99_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk112_out1 = cfblk90_out1 + cfblk112_const_val_1;



  always @(cfblk112_out1, cfblk40_out1) begin
    cfblk56_div_temp = 9'b000000000;
    cfblk56_t_0_0 = 9'b000000000;
    if (cfblk40_out1 == 8'b00000000) begin
      cfblk56_out1 = 8'b11111111;
    end
    else begin
      cfblk56_t_0_0 = {1'b0, cfblk112_out1};
      cfblk56_div_temp = cfblk56_t_0_0 / cfblk40_out1;
      if (cfblk56_div_temp[8] != 1'b0) begin
        cfblk56_out1 = 8'b11111111;
      end
      else begin
        cfblk56_out1 = cfblk56_div_temp[7:0];
      end
    end
  end



  assign cfblk152 = cfblk56_out1;

  assign Hdl_out = cfblk129_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

