// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel2003\sampleModel2003_sub_sub\Subsystem_block.v
// Created: 2024-08-16 12:05:15
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem_block
// Source Path: sampleModel2003_sub_sub/Subsystem/Subsystem
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem_block
          (clk,
           reset,
           enb,
           Hdl_out);


  input   clk;
  input   reset;
  input   enb;
  output  [7:0] Hdl_out;  // uint8


  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk34_const_val_1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [3:0] cfblk3_out1;  // ufix4_E4
  wire [7:0] cfblk207_out1;  // uint8
  wire [15:0] cfblk154_out1;  // uint16
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk40_const_val_1;  // uint8
  wire [7:0] cfblk143_const_val_1;  // uint8
  wire [7:0] cfblk84_const_val_1;  // uint8
  wire [7:0] cfblk36_const_val_1;  // uint8
  wire [7:0] cfblk121_const_val_1;  // uint8
  wire [7:0] cfblk49_const_val_1;  // uint8
  wire [7:0] cfblk62_const_val_1;  // uint8
  wire [7:0] cfblk130_const_val_1;  // uint8
  wire [7:0] cfblk8_out1;  // ufix8_E8
  wire [7:0] cfblk98_const_val_1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk85_const_val_1;  // uint8
  wire [7:0] cfblk125_const_val_1;  // uint8
  wire [7:0] cfblk114_const_val_1;  // uint8
  wire [7:0] cfblk90_const_val_1;  // uint8
  wire [7:0] cfblk50_const_val_1;  // uint8
  wire [7:0] cfblk11_const_val_1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk102_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [15:0] cfblk5_out1;  // uint16
  wire [7:0] cfblk201_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  reg [7:0] cfblk18_out1;  // uint8
  wire signed [31:0] cfblk145_sub_cast;  // sfix32
  wire signed [31:0] cfblk145_sub_temp;  // sfix32
  wire signed [31:0] cfblk145_1;  // sfix32
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire cfblk6_relop1;
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  reg [7:0] cfblk139_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] dtc_out_5;  // ufix8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  reg [8:0] cfblk102_div_temp;  // ufix9
  reg [8:0] cfblk102_t_0_0;  // ufix9
  reg [8:0] cfblk56_div_temp;  // ufix9
  reg [8:0] cfblk56_t_0_0;  // ufix9
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9
  reg [8:0] cfblk140_div_temp;  // ufix9
  reg [8:0] cfblk140_t_0_0;  // ufix9
  reg [8:0] cfblk96_div_temp;  // ufix9
  reg [8:0] cfblk96_t_0_0;  // ufix9
  reg [8:0] cfblk139_div_temp;  // ufix9
  reg [8:0] cfblk139_t_0_0;  // ufix9
  reg [8:0] cfblk83_div_temp;  // ufix9
  reg [8:0] cfblk83_t_0_0;  // ufix9
  reg [8:0] cfblk21_div_temp;  // ufix9
  reg [8:0] cfblk21_t_0_0;  // ufix9


  assign cfblk156_out1 = 8'b00000000;



  assign cfblk34_const_val_1 = 8'b00000000;



  cfblk162 u_cfblk162 (.In1(cfblk156_out1),  // uint8
                       .Out1(cfblk162_out1)  // uint8
                       );

  cfblk153 u_cfblk153 (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .y(cfblk153_out1)  // uint8
                       );

  assign cfblk142_out1 = (cfblk153_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk3_out1 = cfblk142_out1[7:4];



  assign cfblk207_out1 = {cfblk3_out1, 4'b0000};



  cfblk154 u_cfblk154 (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .y(cfblk154_out1)  // uint16
                       );

  assign cfblk64_out1 = cfblk154_out1[7:0];



  assign cfblk40_const_val_1 = 8'b00000000;



  assign cfblk143_const_val_1 = 8'b00000000;



  assign cfblk84_const_val_1 = 8'b00000000;



  assign cfblk36_const_val_1 = 8'b00000000;



  assign cfblk121_const_val_1 = 8'b00000000;



  assign cfblk49_const_val_1 = 8'b00000000;



  assign cfblk62_const_val_1 = 8'b00000000;



  assign cfblk130_const_val_1 = 8'b00000000;



  assign cfblk8_out1 = cfblk154_out1[15:8];



  assign cfblk98_const_val_1 = 8'b00000000;



  assign cfblk158_out1 = 8'b00000000;



  assign cfblk157_out1 = 8'b00000001;



  assign cfblk85_const_val_1 = 8'b00000000;



  assign cfblk125_const_val_1 = 8'b00000000;



  assign cfblk114_const_val_1 = 8'b00000000;



  assign cfblk90_const_val_1 = 8'b00000000;



  assign cfblk50_const_val_1 = 8'b00000000;



  assign cfblk11_const_val_1 = 8'b00000000;



  assign cfblk47_out1 = cfblk98_out1 + cfblk100_out1;



  assign dtc_out = cfblk47_out1;



  assign cfblk104_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk58_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk22_out1 = cfblk72_out1 - cfblk103_out1;



  always @(cfblk22_out1, cfblk32_out1) begin
    cfblk102_div_temp = 9'b000000000;
    cfblk102_t_0_0 = 9'b000000000;
    if (cfblk32_out1 == 8'b00000000) begin
      cfblk102_out1 = 8'b11111111;
    end
    else begin
      cfblk102_t_0_0 = {1'b0, cfblk22_out1};
      cfblk102_div_temp = cfblk102_t_0_0 / cfblk32_out1;
      if (cfblk102_div_temp[8] != 1'b0) begin
        cfblk102_out1 = 8'b11111111;
      end
      else begin
        cfblk102_out1 = cfblk102_div_temp[7:0];
      end
    end
  end



  assign dtc_out_1 = cfblk102_out1;



  assign cfblk132_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk132_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk31_out1 = cfblk35_out1 - cfblk135_out1;



  assign cfblk114_out1 = cfblk31_out1 + cfblk114_const_val_1;



  DotProduct_block6 u_cfblk29_inst (.in1(cfblk35_out1),  // uint8
                                    .in2(cfblk114_out1),  // uint8
                                    .out1(cfblk29_out1)  // uint8
                                    );

  assign cfblk58_out1 = cfblk29_out1 + cfblk123_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk58_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  assign cfblk137_out1 = cfblk158_out1 - cfblk2_out1;



  DotProduct_block3 u_cfblk146_inst (.in1(cfblk64_out1),  // uint8
                                     .in2(cfblk137_out1),  // uint8
                                     .out1(cfblk146_out1)  // uint8
                                     );

  assign cfblk5_out1 = {cfblk146_out1, cfblk34_out1};



  assign cfblk201_out1 = cfblk5_out1[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk201_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk145_sub_cast = {16'b0, {cfblk8_out1, 8'b00000000}};
  assign cfblk145_1 = {24'b0, cfblk18_out1};
  assign cfblk145_sub_temp = cfblk145_sub_cast - cfblk145_1;
  assign cfblk145_out1 = cfblk145_sub_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk21_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign cfblk62_out1 = cfblk84_out1 + cfblk62_const_val_1;



  cfblk159 u_cfblk159 (.In1(cfblk62_out1),  // uint8
                       .Out1(cfblk159_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk159_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  assign cfblk57_out1 = cfblk193_out1 + cfblk135_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk57_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign dtc_out_2 = cfblk11_out1;



  assign cfblk126_out1 = dtc_out_2;



  assign cfblk49_out1 = cfblk126_out1 + cfblk49_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk49_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  DotProduct_block5 u_cfblk25_inst (.in1(cfblk81_out1),  // uint8
                                    .in2(cfblk107_out1),  // uint8
                                    .out1(cfblk25_out1)  // uint8
                                    );

  assign cfblk129_out1 = cfblk25_out1 + cfblk98_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk129_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk68_out1 = (cfblk143_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk107_out1 = cfblk19_out1 + cfblk135_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk107_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  always @(cfblk39_out1, cfblk7_out1) begin
    cfblk56_div_temp = 9'b000000000;
    cfblk56_t_0_0 = 9'b000000000;
    if (cfblk39_out1 == 8'b00000000) begin
      cfblk56_out1 = 8'b11111111;
    end
    else begin
      cfblk56_t_0_0 = {1'b0, cfblk7_out1};
      cfblk56_div_temp = cfblk56_t_0_0 / cfblk39_out1;
      if (cfblk56_div_temp[8] != 1'b0) begin
        cfblk56_out1 = 8'b11111111;
      end
      else begin
        cfblk56_out1 = cfblk56_div_temp[7:0];
      end
    end
  end



  assign cfblk72_out1 = cfblk56_out1 + cfblk83_out1;



  assign cfblk110_out1 = (cfblk72_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk110_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk84_out1 = cfblk17_out1 + cfblk84_const_val_1;



  assign cfblk95_out1 = cfblk84_out1 + cfblk170_out1;



  DotProduct u_cfblk113_inst (.in1(cfblk35_out1),  // uint8
                              .in2(cfblk11_out1),  // uint8
                              .out1(cfblk113_out1)  // uint8
                              );

  assign cfblk40_out1 = cfblk113_out1 + cfblk40_const_val_1;



  cfblk161 u_cfblk161 (.In1(cfblk40_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  assign cfblk143_out1 = cfblk161_out1 + cfblk143_const_val_1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(enb),
                   .U(cfblk83_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign cfblk42_out1 = cfblk2_out1 + cfblk143_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk42_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  DotProduct_block7 u_cfblk39_inst (.in1(cfblk175_out1),  // uint8
                                    .in2(cfblk95_out1),  // uint8
                                    .out1(cfblk39_out1)  // uint8
                                    );

  assign cfblk44_out1 = (cfblk39_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block4 u_cfblk24_inst (.in1(cfblk44_out1),  // uint8
                                    .in2(cfblk172_out1),  // uint8
                                    .out1(cfblk24_out1)  // uint8
                                    );

  assign cfblk117_out1 = cfblk181_out1 + cfblk24_out1;



  cfblk7 u_cfblk7 (.clk(clk),
                   .reset(reset),
                   .enb(enb),
                   .U(cfblk117_out1),  // uint8
                   .Y(cfblk7_out1)  // uint8
                   );

  assign cfblk19_out1 = cfblk7_out1 - cfblk135_out1;



  assign cfblk108_out1 = (cfblk16_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk35_out1 = (cfblk108_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk27_out1 = cfblk35_out1 - cfblk18_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk27_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk81_out1 = cfblk187_out1 - cfblk19_out1;



  assign cfblk36_out1 = cfblk81_out1 + cfblk36_const_val_1;



  assign cfblk52_out1 = cfblk135_out1 + cfblk36_out1;



  assign cfblk121_out1 = cfblk52_out1 + cfblk121_const_val_1;



  DotProduct_block8 u_cfblk60_inst (.in1(cfblk121_out1),  // uint8
                                    .in2(cfblk68_out1),  // uint8
                                    .out1(cfblk60_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk60_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  cfblk1 u_cfblk1 (.u(cfblk174_out1),  // uint8
                   .y(cfblk1_out1)  // uint8
                   );

  assign cfblk89_out1 = cfblk1_out1 + cfblk173_out1;



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(enb),
                   .U(cfblk89_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  DotProduct_block9 u_cfblk79_inst (.in1(cfblk4_out1),  // uint8
                                    .in2(cfblk184_out1),  // uint8
                                    .out1(cfblk79_out1)  // uint8
                                    );

  always @(cfblk169_out1, cfblk79_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk169_out1 == 8'b00000000) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk79_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk169_out1;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  DotProduct_block u_cfblk116_inst (.in1(cfblk18_out1),  // uint8
                                    .in2(cfblk190_out1),  // uint8
                                    .out1(cfblk116_out1)  // uint8
                                    );

  assign cfblk100_out1 = cfblk64_out1 + cfblk116_out1;



  assign cfblk130_out1 = cfblk100_out1 + cfblk130_const_val_1;



  always @(cfblk130_out1, cfblk183_out1) begin
    cfblk140_div_temp = 9'b000000000;
    cfblk140_t_0_0 = 9'b000000000;
    if (cfblk183_out1 == 8'b00000000) begin
      cfblk140_out1 = 8'b11111111;
    end
    else begin
      cfblk140_t_0_0 = {1'b0, cfblk130_out1};
      cfblk140_div_temp = cfblk140_t_0_0 / cfblk183_out1;
      if (cfblk140_div_temp[8] != 1'b0) begin
        cfblk140_out1 = 8'b11111111;
      end
      else begin
        cfblk140_out1 = cfblk140_div_temp[7:0];
      end
    end
  end



  DotProduct_block11 u_cfblk9_inst (.in1(cfblk140_out1),  // uint8
                                    .in2(cfblk145_out1),  // uint8
                                    .out1(cfblk9_out1)  // uint8
                                    );

  assign cfblk61_out1 = (cfblk9_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block10 u_cfblk86_inst (.in1(cfblk61_out1),  // uint8
                                     .in2(cfblk79_out1),  // uint8
                                     .out1(cfblk86_out1)  // uint8
                                     );

  assign cfblk98_out1 = cfblk86_out1 + cfblk98_const_val_1;



  always @(cfblk176_out1, cfblk98_out1) begin
    cfblk96_div_temp = 9'b000000000;
    cfblk96_t_0_0 = 9'b000000000;
    if (cfblk176_out1 == 8'b00000000) begin
      cfblk96_out1 = 8'b11111111;
    end
    else begin
      cfblk96_t_0_0 = {1'b0, cfblk98_out1};
      cfblk96_div_temp = cfblk96_t_0_0 / cfblk176_out1;
      if (cfblk96_div_temp[8] != 1'b0) begin
        cfblk96_out1 = 8'b11111111;
      end
      else begin
        cfblk96_out1 = cfblk96_div_temp[7:0];
      end
    end
  end



  assign cfblk28_out1 = cfblk96_out1 + cfblk157_out1;



  assign cfblk45_out1 = cfblk28_out1 + cfblk1_out1;



  assign cfblk111_out1 = cfblk123_out1 - cfblk21_out1;



  DotProduct_block1 u_cfblk124_inst (.in1(cfblk111_out1),  // uint8
                                     .in2(cfblk207_out1),  // uint8
                                     .out1(cfblk124_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk124_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk6_relop1 = cfblk178_out1 <= cfblk45_out1;



  assign cfblk193_out1 = {7'b0, cfblk6_relop1};



  assign cfblk85_out1 = cfblk193_out1 + cfblk85_const_val_1;



  assign cfblk125_out1 = cfblk85_out1 + cfblk125_const_val_1;



  DotProduct_block2 u_cfblk141_inst (.in1(cfblk125_out1),  // uint8
                                     .in2(cfblk179_out1),  // uint8
                                     .out1(cfblk141_out1)  // uint8
                                     );

  assign cfblk78_out1 = cfblk141_out1 + cfblk193_out1;



  assign cfblk10_out1 = cfblk78_out1 + cfblk171_out1;



  assign cfblk34_out1 = cfblk11_out1 + cfblk34_const_val_1;



  assign cfblk138_out1 = cfblk34_out1 + cfblk162_out1;



  assign cfblk136_out1 = (cfblk138_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk160 u_cfblk160 (.In1(cfblk136_out1),  // uint8
                       .Out1(cfblk160_out1)  // uint8
                       );

  assign cfblk32_out1 = (cfblk160_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk32_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign cfblk75_out1 = cfblk177_out1 + cfblk10_out1;



  assign cfblk99_out1 = cfblk75_out1 - cfblk9_out1;



  assign cfblk17_out1 = (cfblk99_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk135_out1 = cfblk17_out1 + cfblk84_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk16_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  always @(cfblk135_out1, cfblk191_out1) begin
    cfblk139_div_temp = 9'b000000000;
    cfblk139_t_0_0 = 9'b000000000;
    if (cfblk135_out1 == 8'b00000000) begin
      cfblk139_out1 = 8'b11111111;
    end
    else begin
      cfblk139_t_0_0 = {1'b0, cfblk191_out1};
      cfblk139_div_temp = cfblk139_t_0_0 / cfblk135_out1;
      if (cfblk139_div_temp[8] != 1'b0) begin
        cfblk139_out1 = 8'b11111111;
      end
      else begin
        cfblk139_out1 = cfblk139_div_temp[7:0];
      end
    end
  end



  assign dtc_out_3 = cfblk139_out1;



  assign cfblk16_out1 = dtc_out_3;



  assign cfblk65_out1 = (cfblk16_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk15_out1 = (cfblk65_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk90_out1 = cfblk15_out1 + cfblk90_const_val_1;



  always @(cfblk24_out1, cfblk90_out1) begin
    cfblk83_div_temp = 9'b000000000;
    cfblk83_t_0_0 = 9'b000000000;
    if (cfblk24_out1 == 8'b00000000) begin
      cfblk83_out1 = 8'b11111111;
    end
    else begin
      cfblk83_t_0_0 = {1'b0, cfblk90_out1};
      cfblk83_div_temp = cfblk83_t_0_0 / cfblk24_out1;
      if (cfblk83_div_temp[8] != 1'b0) begin
        cfblk83_out1 = 8'b11111111;
      end
      else begin
        cfblk83_out1 = cfblk83_div_temp[7:0];
      end
    end
  end



  assign cfblk70_out1 = cfblk83_out1 - cfblk180_out1;



  assign cfblk50_out1 = cfblk70_out1 + cfblk50_const_val_1;



  assign cfblk11_out1 = cfblk50_out1 + cfblk11_const_val_1;



  always @(cfblk11_out1, cfblk156_out1) begin
    cfblk21_div_temp = 9'b000000000;
    cfblk21_t_0_0 = 9'b000000000;
    if (cfblk11_out1 == 8'b00000000) begin
      cfblk21_out1 = 8'b11111111;
    end
    else begin
      cfblk21_t_0_0 = {1'b0, cfblk156_out1};
      cfblk21_div_temp = cfblk21_t_0_0 / cfblk11_out1;
      if (cfblk21_div_temp[8] != 1'b0) begin
        cfblk21_out1 = 8'b11111111;
      end
      else begin
        cfblk21_out1 = cfblk21_div_temp[7:0];
      end
    end
  end



  assign cfblk46_out1 = cfblk21_out1 + cfblk104_out1;



  assign dtc_out_4 = cfblk46_out1;



  assign cfblk123_out1 = dtc_out_4;



  assign dtc_out_5 = cfblk123_out1;



  assign cfblk103_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk103_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign Hdl_out = cfblk181_out1;

endmodule  // Subsystem_block

