// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1727\sampleModel1727_sub\Subsystem.v
// Created: 2024-08-13 21:35:46
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk148                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1727_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk148,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk148;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk63_const_val_1;  // uint8
  wire [7:0] cfblk76_const_val_1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk62_const_val_1;  // uint8
  wire [7:0] bitMask_for_cfblk3;  // uint8
  wire [7:0] cfblk49_const_val_1;  // uint8
  wire [7:0] cfblk123_const_val_1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk25_const_val_1;  // uint8
  wire [7:0] cfblk61_const_val_1;  // uint8
  wire [15:0] cfblk154_out1;  // uint16
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk81_const_val_1;  // uint8
  wire [7:0] cfblk113_const_val_1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  reg [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  reg [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk143_out1;  // uint8
  wire [3:0] cfblk5_out1;  // ufix4_E4
  wire [31:0] cfblk138_add_cast;  // ufix32
  wire [31:0] cfblk138_add_temp;  // ufix32
  wire [31:0] cfblk138_1;  // ufix32
  wire [7:0] cfblk120_out1;  // uint8
  wire [31:0] cfblk109_add_cast;  // ufix32
  wire [31:0] cfblk109_add_temp;  // ufix32
  wire [31:0] cfblk109_1;  // ufix32
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  reg [8:0] cfblk54_div_temp;  // ufix9
  reg [8:0] cfblk54_t_0_0;  // ufix9
  reg [8:0] cfblk51_div_temp;  // ufix9
  reg [8:0] cfblk51_t_0_0;  // ufix9
  reg [8:0] cfblk57_div_temp;  // ufix9
  reg [8:0] cfblk57_t_0_0;  // ufix9
  reg [8:0] cfblk115_div_temp;  // ufix9
  reg [8:0] cfblk115_t_0_0;  // ufix9
  reg [8:0] cfblk72_div_temp;  // ufix9
  reg [8:0] cfblk72_t_0_0;  // ufix9
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk153_out1 = 8'b00000001;



  assign cfblk128_out1 = (cfblk153_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk156_out1 = 8'b00000001;



  assign cfblk103_out1 = cfblk128_out1 + cfblk156_out1;



  assign cfblk63_const_val_1 = 8'b00000000;



  assign cfblk76_const_val_1 = 8'b00000000;



  assign cfblk155_out1 = 8'b00000001;



  cfblk157 u_cfblk157 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk157_out1)  // uint8
                       );

  assign dtc_out = cfblk157_out1;



  assign cfblk84_out1 = dtc_out;



  assign cfblk62_const_val_1 = 8'b00000000;



  assign bitMask_for_cfblk3 = 8'b11011001;



  assign cfblk49_const_val_1 = 8'b00000000;



  assign cfblk123_const_val_1 = 8'b00000000;



  assign cfblk152_out1 = 8'b00000001;



  assign cfblk25_const_val_1 = 8'b00000000;



  assign cfblk61_const_val_1 = 8'b00000000;



  cfblk154 u_cfblk154 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk154_out1)  // uint16
                       );

  assign cfblk34_out1 = cfblk154_out1[7:0];



  assign cfblk81_const_val_1 = 8'b00000000;



  assign cfblk113_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk138_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign dtc_out_1 = cfblk68_out1;



  assign cfblk20_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk20_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk16_out1 = cfblk172_out1 - cfblk11_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk136_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  DotProduct_block8 u_cfblk66_inst (.in1(cfblk163_out1),  // uint8
                                    .in2(cfblk16_out1),  // uint8
                                    .out1(cfblk66_out1)  // uint8
                                    );

  assign cfblk130_out1 = cfblk32_out1 + cfblk124_out1;



  assign dtc_out_2 = cfblk146_out1;



  assign cfblk46_out1 = dtc_out_2;



  assign cfblk32_out1 = cfblk74_out1 + cfblk46_out1;



  DotProduct_block1 u_cfblk121_inst (.in1(cfblk59_out1),  // uint8
                                     .in2(cfblk32_out1),  // uint8
                                     .out1(cfblk121_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk121_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk7_out1 = cfblk109_out1 + cfblk15_out1;



  assign dtc_out_3 = cfblk80_out1;



  assign cfblk140_out1 = dtc_out_3;



  assign cfblk87_out1 = cfblk140_out1 + cfblk25_out1;



  DotProduct_block6 u_cfblk58_inst (.in1(cfblk87_out1),  // uint8
                                    .in2(cfblk7_out1),  // uint8
                                    .out1(cfblk58_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk58_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk57_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign cfblk119_out1 = cfblk113_out1 + cfblk177_out1;



  assign cfblk27_out1 = cfblk119_out1 + cfblk164_out1;



  cfblk158 u_cfblk158 (.In1(cfblk27_out1),  // uint8
                       .Out1(cfblk158_out1)  // uint8
                       );

  always @(cfblk158_out1, cfblk178_out1) begin
    cfblk54_div_temp = 9'b000000000;
    cfblk54_t_0_0 = 9'b000000000;
    if (cfblk178_out1 == 8'b00000000) begin
      cfblk54_out1 = 8'b11111111;
    end
    else begin
      cfblk54_t_0_0 = {1'b0, cfblk158_out1};
      cfblk54_div_temp = cfblk54_t_0_0 / cfblk178_out1;
      if (cfblk54_div_temp[8] != 1'b0) begin
        cfblk54_out1 = 8'b11111111;
      end
      else begin
        cfblk54_out1 = cfblk54_div_temp[7:0];
      end
    end
  end



  DotProduct u_cfblk117_inst (.in1(cfblk84_out1),  // uint8
                              .in2(cfblk74_out1),  // uint8
                              .out1(cfblk117_out1)  // uint8
                              );

  assign cfblk25_out1 = cfblk117_out1 + cfblk25_const_val_1;



  assign cfblk59_out1 = cfblk128_out1 + cfblk77_out1;



  assign cfblk49_out1 = cfblk51_out1 + cfblk49_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk49_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  DotProduct_block9 u_cfblk94_inst (.in1(cfblk108_out1),  // uint8
                                    .in2(cfblk115_out1),  // uint8
                                    .out1(cfblk94_out1)  // uint8
                                    );

  assign cfblk62_out1 = cfblk94_out1 + cfblk62_const_val_1;



  assign cfblk3_out1 = cfblk62_out1 & bitMask_for_cfblk3;



  assign cfblk110_out1 = (cfblk3_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk110_out1, cfblk175_out1) begin
    cfblk51_div_temp = 9'b000000000;
    cfblk51_t_0_0 = 9'b000000000;
    if (cfblk175_out1 == 8'b00000000) begin
      cfblk51_out1 = 8'b11111111;
    end
    else begin
      cfblk51_t_0_0 = {1'b0, cfblk110_out1};
      cfblk51_div_temp = cfblk51_t_0_0 / cfblk175_out1;
      if (cfblk51_div_temp[8] != 1'b0) begin
        cfblk51_out1 = 8'b11111111;
      end
      else begin
        cfblk51_out1 = cfblk51_div_temp[7:0];
      end
    end
  end



  DotProduct_block4 u_cfblk28_inst (.in1(cfblk51_out1),  // uint8
                                    .in2(cfblk11_out1),  // uint8
                                    .out1(cfblk28_out1)  // uint8
                                    );

  assign cfblk123_out1 = cfblk28_out1 + cfblk123_const_val_1;



  assign cfblk15_out1 = cfblk123_out1 + cfblk59_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk15_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk82_out1 = (cfblk9_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk82_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  cfblk1 u_cfblk1 (.u(cfblk173_out1),  // uint8
                   .y(cfblk1_out1)  // uint8
                   );

  assign cfblk11_out1 = cfblk1_out1 + cfblk165_out1;



  assign dtc_out_4 = cfblk136_out1;



  assign cfblk143_out1 = dtc_out_4;



  assign cfblk5_out1 = cfblk143_out1[7:4];



  assign cfblk138_add_cast = {24'b0, {cfblk5_out1, 4'b0000}};
  assign cfblk138_1 = {24'b0, cfblk128_out1};
  assign cfblk138_add_temp = cfblk138_add_cast + cfblk138_1;
  assign cfblk138_out1 = cfblk138_add_temp[7:0];



  DotProduct_block u_cfblk120_inst (.in1(cfblk138_out1),  // uint8
                                    .in2(cfblk11_out1),  // uint8
                                    .out1(cfblk120_out1)  // uint8
                                    );

  assign cfblk109_add_cast = {24'b0, {cfblk5_out1, 4'b0000}};
  assign cfblk109_1 = {24'b0, cfblk120_out1};
  assign cfblk109_add_temp = cfblk109_1 + cfblk109_add_cast;
  assign cfblk109_out1 = cfblk109_add_temp[7:0];



  assign cfblk124_out1 = cfblk139_out1 + cfblk4_out1;



  assign dtc_out_5 = cfblk53_out1;



  assign cfblk108_out1 = dtc_out_5;



  always @(cfblk108_out1, cfblk124_out1) begin
    cfblk57_div_temp = 9'b000000000;
    cfblk57_t_0_0 = 9'b000000000;
    if (cfblk124_out1 == 8'b00000000) begin
      cfblk57_out1 = 8'b11111111;
    end
    else begin
      cfblk57_t_0_0 = {1'b0, cfblk108_out1};
      cfblk57_div_temp = cfblk57_t_0_0 / cfblk124_out1;
      if (cfblk57_div_temp[8] != 1'b0) begin
        cfblk57_out1 = 8'b11111111;
      end
      else begin
        cfblk57_out1 = cfblk57_div_temp[7:0];
      end
    end
  end



  assign cfblk14_out1 = cfblk57_out1 + cfblk132_out1;



  DotProduct_block3 u_cfblk18_inst (.in1(cfblk14_out1),  // uint8
                                    .in2(cfblk84_out1),  // uint8
                                    .out1(cfblk18_out1)  // uint8
                                    );

  assign cfblk9_out1 = cfblk155_out1 - cfblk18_out1;



  assign cfblk132_out1 = (cfblk77_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk63_out1 = cfblk132_out1 + cfblk63_const_val_1;



  assign cfblk38_out1 = cfblk63_out1 - cfblk77_out1;



  assign cfblk76_out1 = cfblk38_out1 + cfblk76_const_val_1;



  always @(cfblk76_out1, cfblk9_out1) begin
    cfblk115_div_temp = 9'b000000000;
    cfblk115_t_0_0 = 9'b000000000;
    if (cfblk9_out1 == 8'b00000000) begin
      cfblk115_out1 = 8'b11111111;
    end
    else begin
      cfblk115_t_0_0 = {1'b0, cfblk76_out1};
      cfblk115_div_temp = cfblk115_t_0_0 / cfblk9_out1;
      if (cfblk115_div_temp[8] != 1'b0) begin
        cfblk115_out1 = 8'b11111111;
      end
      else begin
        cfblk115_out1 = cfblk115_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk115_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  always @(cfblk174_out1, cfblk71_out1) begin
    cfblk72_div_temp = 9'b000000000;
    cfblk72_t_0_0 = 9'b000000000;
    if (cfblk174_out1 == 8'b00000000) begin
      cfblk72_out1 = 8'b11111111;
    end
    else begin
      cfblk72_t_0_0 = {1'b0, cfblk71_out1};
      cfblk72_div_temp = cfblk72_t_0_0 / cfblk174_out1;
      if (cfblk72_div_temp[8] != 1'b0) begin
        cfblk72_out1 = 8'b11111111;
      end
      else begin
        cfblk72_out1 = cfblk72_div_temp[7:0];
      end
    end
  end



  assign cfblk136_out1 = cfblk72_out1 + cfblk89_out1;



  assign cfblk80_out1 = cfblk56_out1 + cfblk159_out1;



  DotProduct_block5 u_cfblk41_inst (.in1(cfblk80_out1),  // uint8
                                    .in2(cfblk136_out1),  // uint8
                                    .out1(cfblk41_out1)  // uint8
                                    );

  assign cfblk77_out1 = (cfblk41_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk96_out1 = cfblk77_out1 - cfblk135_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk96_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  always @(cfblk109_out1, cfblk171_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk109_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk171_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk109_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  assign cfblk10_out1 = cfblk44_out1 + cfblk152_out1;



  assign cfblk139_out1 = cfblk79_out1 - cfblk10_out1;



  assign cfblk53_out1 = cfblk139_out1 + cfblk156_out1;



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk53_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign cfblk33_out1 = cfblk4_out1 + cfblk25_out1;



  assign cfblk61_out1 = cfblk33_out1 + cfblk61_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk61_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk98_out1 = cfblk168_out1 + cfblk54_out1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk98_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign cfblk125_out1 = (cfblk2_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk89_out1 = cfblk125_out1 - cfblk34_out1;



  DotProduct_block7 u_cfblk60_inst (.in1(cfblk103_out1),  // uint8
                                    .in2(cfblk89_out1),  // uint8
                                    .out1(cfblk60_out1)  // uint8
                                    );

  assign cfblk133_out1 = cfblk60_out1 - cfblk84_out1;



  assign cfblk81_out1 = cfblk133_out1 + cfblk81_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk135_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk71_out1 = cfblk170_out1 + cfblk81_out1;



  DotProduct_block2 u_cfblk146_inst (.in1(cfblk71_out1),  // uint8
                                     .in2(cfblk27_out1),  // uint8
                                     .out1(cfblk146_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk159_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk74_out1 = cfblk180_out1 - cfblk146_out1;



  cfblk159 u_cfblk159 (.In1(cfblk74_out1),  // uint8
                       .Out1(cfblk159_out1)  // uint8
                       );

  assign cfblk68_out1 = cfblk159_out1 + cfblk130_out1;



  assign cfblk135_out1 = cfblk68_out1 + cfblk115_out1;



  assign cfblk99_out1 = (cfblk135_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk99_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk100_out1 = cfblk169_out1 + cfblk66_out1;



  assign cfblk56_out1 = (cfblk100_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk79_out1 = cfblk56_out1 - cfblk166_out1;



  assign cfblk113_out1 = cfblk79_out1 + cfblk113_const_val_1;



  assign cfblk148 = cfblk113_out1;

  assign Hdl_out = cfblk152_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

