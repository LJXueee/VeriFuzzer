// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1492\sampleModel1492_sub\Subsystem.v
// Created: 2024-08-12 10:49:35
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk130                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1492_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk130,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk130;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk72_const_val_1;  // uint8
  wire [7:0] cfblk104_const_val_1;  // uint8
  wire [7:0] cfblk119_const_val_1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk112_const_val_1;  // uint8
  wire [7:0] cfblk18_const_val_1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk121_const_val_1;  // uint8
  wire [7:0] cfblk125_const_val_1;  // uint8
  wire [7:0] cfblk70_const_val_1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk69_const_val_1;  // uint8
  wire [7:0] cfblk60_const_val_1;  // uint8
  wire [7:0] cfblk39_const_val_1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  reg [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk142_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk147_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  reg [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk148_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  reg [7:0] cfblk143_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk143_out1;  // uint8
  reg [7:0] cfblk149_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk149_out1;  // uint8
  reg [7:0] cfblk144_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  reg [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  reg [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk37_out1;  // uint8
  reg [7:0] cfblk145_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  reg [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  reg [7:0] cfblk146_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk146_out1;  // uint8
  wire [15:0] cfblk3_out1;  // uint16
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [7:0] cfblk16_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  reg [7:0] cfblk124_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk42_const_val_1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  reg [8:0] cfblk80_div_temp;  // ufix9
  reg [8:0] cfblk80_t_0_0;  // ufix9
  reg [8:0] cfblk108_div_temp;  // ufix9
  reg [8:0] cfblk108_t_0_0;  // ufix9
  reg [8:0] cfblk45_div_temp;  // ufix9
  reg [8:0] cfblk45_t_0_0;  // ufix9
  reg [8:0] cfblk117_div_temp;  // ufix9
  reg [8:0] cfblk117_t_0_0;  // ufix9
  reg [8:0] cfblk52_div_temp;  // ufix9
  reg [8:0] cfblk52_t_0_0;  // ufix9
  reg [8:0] cfblk106_div_temp;  // ufix9
  reg [8:0] cfblk106_t_0_0;  // ufix9
  reg [8:0] cfblk37_div_temp;  // ufix9
  reg [8:0] cfblk37_t_0_0;  // ufix9
  reg [8:0] cfblk28_div_temp;  // ufix9
  reg [8:0] cfblk28_t_0_0;  // ufix9
  reg [8:0] cfblk120_div_temp;  // ufix9
  reg [8:0] cfblk120_t_0_0;  // ufix9
  reg [8:0] cfblk16_div_temp;  // ufix9
  reg [8:0] cfblk16_t_0_0;  // ufix9
  reg [8:0] cfblk49_div_temp;  // ufix9
  reg [8:0] cfblk49_t_0_0;  // ufix9
  reg [8:0] cfblk124_div_temp;  // ufix9
  reg [8:0] cfblk124_t_0_0;  // ufix9
  reg [8:0] cfblk27_div_temp;  // ufix9
  reg [8:0] cfblk27_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk134_out1 = 8'b00000000;



  cfblk136 u_cfblk136 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk136_out1)  // uint8
                       );

  assign cfblk72_const_val_1 = 8'b00000000;



  assign cfblk104_const_val_1 = 8'b00000000;



  assign cfblk119_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk13_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk13_out1 = cfblk158_out1 + cfblk136_out1;



  assign cfblk112_const_val_1 = 8'b00000000;



  assign cfblk18_const_val_1 = 8'b00000000;



  assign cfblk135_out1 = 8'b00000001;



  assign cfblk121_const_val_1 = 8'b00000000;



  assign cfblk125_const_val_1 = 8'b00000000;



  assign cfblk70_const_val_1 = 8'b00000000;



  assign cfblk133_out1 = 8'b00000000;



  assign cfblk69_const_val_1 = 8'b00000000;



  assign cfblk60_const_val_1 = 8'b00000000;



  assign cfblk39_const_val_1 = 8'b00000000;



  always @(cfblk105_out1, cfblk12_out1) begin
    cfblk80_div_temp = 9'b000000000;
    cfblk80_t_0_0 = 9'b000000000;
    if (cfblk12_out1 == 8'b00000000) begin
      cfblk80_out1 = 8'b11111111;
    end
    else begin
      cfblk80_t_0_0 = {1'b0, cfblk105_out1};
      cfblk80_div_temp = cfblk80_t_0_0 / cfblk12_out1;
      if (cfblk80_div_temp[8] != 1'b0) begin
        cfblk80_out1 = 8'b11111111;
      end
      else begin
        cfblk80_out1 = cfblk80_div_temp[7:0];
      end
    end
  end



  assign dtc_out = cfblk76_out1;



  assign cfblk67_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk142_process
      if (reset == 1'b1) begin
        cfblk142_reg[0] <= 8'b00000000;
        cfblk142_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk142_reg[0] <= cfblk142_reg_next[0];
          cfblk142_reg[1] <= cfblk142_reg_next[1];
        end
      end
    end

  assign cfblk142_out1 = cfblk142_reg[1];
  assign cfblk142_reg_next[0] = cfblk67_out1;
  assign cfblk142_reg_next[1] = cfblk142_reg[0];



  assign cfblk81_out1 = (cfblk100_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk51_out1 = cfblk133_out1 + cfblk81_out1;



  assign dtc_out_1 = cfblk112_out1;



  assign cfblk7_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk7_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  assign cfblk127_out1 = cfblk139_out1 + cfblk51_out1;



  assign cfblk70_out1 = cfblk126_out1 + cfblk70_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk70_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk68_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk114_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk125_out1 = cfblk97_out1 + cfblk125_const_val_1;



  always @(cfblk125_out1, cfblk45_out1) begin
    cfblk108_div_temp = 9'b000000000;
    cfblk108_t_0_0 = 9'b000000000;
    if (cfblk45_out1 == 8'b00000000) begin
      cfblk108_out1 = 8'b11111111;
    end
    else begin
      cfblk108_t_0_0 = {1'b0, cfblk125_out1};
      cfblk108_div_temp = cfblk108_t_0_0 / cfblk45_out1;
      if (cfblk108_div_temp[8] != 1'b0) begin
        cfblk108_out1 = 8'b11111111;
      end
      else begin
        cfblk108_out1 = cfblk108_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk147_process
      if (reset == 1'b1) begin
        cfblk147_reg[0] <= 8'b00000000;
        cfblk147_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk147_reg[0] <= cfblk147_reg_next[0];
          cfblk147_reg[1] <= cfblk147_reg_next[1];
        end
      end
    end

  assign cfblk147_out1 = cfblk147_reg[1];
  assign cfblk147_reg_next[0] = cfblk108_out1;
  assign cfblk147_reg_next[1] = cfblk147_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk22_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(cfblk120_out1, cfblk46_out1) begin
    cfblk45_div_temp = 9'b000000000;
    cfblk45_t_0_0 = 9'b000000000;
    if (cfblk46_out1 == 8'b00000000) begin
      cfblk45_out1 = 8'b11111111;
    end
    else begin
      cfblk45_t_0_0 = {1'b0, cfblk120_out1};
      cfblk45_div_temp = cfblk45_t_0_0 / cfblk46_out1;
      if (cfblk45_div_temp[8] != 1'b0) begin
        cfblk45_out1 = 8'b11111111;
      end
      else begin
        cfblk45_out1 = cfblk45_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk148_process
      if (reset == 1'b1) begin
        cfblk148_reg[0] <= 8'b00000000;
        cfblk148_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk148_reg[0] <= cfblk148_reg_next[0];
          cfblk148_reg[1] <= cfblk148_reg_next[1];
        end
      end
    end

  assign cfblk148_out1 = cfblk148_reg[1];
  assign cfblk148_reg_next[0] = cfblk45_out1;
  assign cfblk148_reg_next[1] = cfblk148_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk148_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk122_out1 = cfblk1_out1 + cfblk155_out1;



  assign cfblk53_out1 = cfblk122_out1 + cfblk147_out1;



  assign cfblk26_out1 = cfblk53_out1 - cfblk152_out1;



  assign cfblk31_out1 = cfblk135_out1 - cfblk76_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk143_process
      if (reset == 1'b1) begin
        cfblk143_reg[0] <= 8'b00000000;
        cfblk143_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk143_reg[0] <= cfblk143_reg_next[0];
          cfblk143_reg[1] <= cfblk143_reg_next[1];
        end
      end
    end

  assign cfblk143_out1 = cfblk143_reg[1];
  assign cfblk143_reg_next[0] = cfblk31_out1;
  assign cfblk143_reg_next[1] = cfblk143_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk149_process
      if (reset == 1'b1) begin
        cfblk149_reg[0] <= 8'b00000000;
        cfblk149_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk149_reg[0] <= cfblk149_reg_next[0];
          cfblk149_reg[1] <= cfblk149_reg_next[1];
        end
      end
    end

  assign cfblk149_out1 = cfblk149_reg[1];
  assign cfblk149_reg_next[0] = cfblk68_out1;
  assign cfblk149_reg_next[1] = cfblk149_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk144_process
      if (reset == 1'b1) begin
        cfblk144_reg[0] <= 8'b00000000;
        cfblk144_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk144_reg[0] <= cfblk144_reg_next[0];
          cfblk144_reg[1] <= cfblk144_reg_next[1];
        end
      end
    end

  assign cfblk144_out1 = cfblk144_reg[1];
  assign cfblk144_reg_next[0] = cfblk46_out1;
  assign cfblk144_reg_next[1] = cfblk144_reg[0];



  assign cfblk112_out1 = cfblk32_out1 + cfblk112_const_val_1;



  always @(cfblk100_out1, cfblk13_out1) begin
    cfblk117_div_temp = 9'b000000000;
    cfblk117_t_0_0 = 9'b000000000;
    if (cfblk13_out1 == 8'b00000000) begin
      cfblk117_out1 = 8'b11111111;
    end
    else begin
      cfblk117_t_0_0 = {1'b0, cfblk100_out1};
      cfblk117_div_temp = cfblk117_t_0_0 / cfblk13_out1;
      if (cfblk117_div_temp[8] != 1'b0) begin
        cfblk117_out1 = 8'b11111111;
      end
      else begin
        cfblk117_out1 = cfblk117_div_temp[7:0];
      end
    end
  end



  assign cfblk113_out1 = (cfblk117_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk88_out1 = cfblk113_out1 - cfblk112_out1;



  assign cfblk50_out1 = cfblk88_out1 + cfblk72_out1;



  always @(cfblk144_out1, cfblk50_out1) begin
    cfblk52_div_temp = 9'b000000000;
    cfblk52_t_0_0 = 9'b000000000;
    if (cfblk144_out1 == 8'b00000000) begin
      cfblk52_out1 = 8'b11111111;
    end
    else begin
      cfblk52_t_0_0 = {1'b0, cfblk50_out1};
      cfblk52_div_temp = cfblk52_t_0_0 / cfblk144_out1;
      if (cfblk52_div_temp[8] != 1'b0) begin
        cfblk52_out1 = 8'b11111111;
      end
      else begin
        cfblk52_out1 = cfblk52_div_temp[7:0];
      end
    end
  end



  assign cfblk101_out1 = (cfblk52_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk107_out1 = cfblk101_out1 + cfblk149_out1;



  assign cfblk118_out1 = cfblk107_out1 - cfblk49_out1;



  assign cfblk114_out1 = (cfblk87_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk114_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk98_out1 = cfblk151_out1 + cfblk118_out1;



  assign dtc_out_2 = cfblk25_out1;



  assign cfblk58_out1 = dtc_out_2;



  assign cfblk78_out1 = cfblk59_out1 + cfblk69_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk78_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk104_out1 = cfblk69_out1 + cfblk104_const_val_1;



  assign cfblk41_out1 = cfblk104_out1 + cfblk157_out1;



  cfblk4 u_cfblk4 (.u(cfblk41_out1),  // uint8
                   .y(cfblk4_out1)  // uint8
                   );

  assign cfblk97_out1 = cfblk136_out1 - cfblk44_out1;



  assign cfblk72_out1 = cfblk97_out1 + cfblk72_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk72_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk32_out1 = cfblk156_out1 + cfblk4_out1;



  assign cfblk44_out1 = cfblk134_out1 + cfblk32_out1;



  always @(cfblk44_out1, cfblk58_out1) begin
    cfblk106_div_temp = 9'b000000000;
    cfblk106_t_0_0 = 9'b000000000;
    if (cfblk58_out1 == 8'b00000000) begin
      cfblk106_out1 = 8'b11111111;
    end
    else begin
      cfblk106_t_0_0 = {1'b0, cfblk44_out1};
      cfblk106_div_temp = cfblk106_t_0_0 / cfblk58_out1;
      if (cfblk106_div_temp[8] != 1'b0) begin
        cfblk106_out1 = 8'b11111111;
      end
      else begin
        cfblk106_out1 = cfblk106_div_temp[7:0];
      end
    end
  end



  assign cfblk129_out1 = (cfblk106_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct u_cfblk10_inst (.in1(cfblk129_out1),  // uint8
                             .in2(cfblk68_out1),  // uint8
                             .out1(cfblk10_out1)  // uint8
                             );

  assign cfblk38_out1 = (cfblk10_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block u_cfblk15_inst (.in1(cfblk39_out1),  // uint8
                                   .in2(cfblk38_out1),  // uint8
                                   .out1(cfblk15_out1)  // uint8
                                   );

  assign cfblk119_out1 = cfblk15_out1 + cfblk119_const_val_1;



  always @(cfblk46_out1, cfblk66_out1) begin
    cfblk37_div_temp = 9'b000000000;
    cfblk37_t_0_0 = 9'b000000000;
    if (cfblk46_out1 == 8'b00000000) begin
      cfblk37_out1 = 8'b11111111;
    end
    else begin
      cfblk37_t_0_0 = {1'b0, cfblk66_out1};
      cfblk37_div_temp = cfblk37_t_0_0 / cfblk46_out1;
      if (cfblk37_div_temp[8] != 1'b0) begin
        cfblk37_out1 = 8'b11111111;
      end
      else begin
        cfblk37_out1 = cfblk37_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_reg[0] <= 8'b00000000;
        cfblk145_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_reg[0] <= cfblk145_reg_next[0];
          cfblk145_reg[1] <= cfblk145_reg_next[1];
        end
      end
    end

  assign cfblk145_out1 = cfblk145_reg[1];
  assign cfblk145_reg_next[0] = cfblk37_out1;
  assign cfblk145_reg_next[1] = cfblk145_reg[0];



  assign cfblk76_out1 = cfblk145_out1 + cfblk119_out1;



  always @(cfblk61_out1, cfblk69_out1) begin
    cfblk28_div_temp = 9'b000000000;
    cfblk28_t_0_0 = 9'b000000000;
    if (cfblk69_out1 == 8'b00000000) begin
      cfblk28_out1 = 8'b11111111;
    end
    else begin
      cfblk28_t_0_0 = {1'b0, cfblk61_out1};
      cfblk28_div_temp = cfblk28_t_0_0 / cfblk69_out1;
      if (cfblk28_div_temp[8] != 1'b0) begin
        cfblk28_out1 = 8'b11111111;
      end
      else begin
        cfblk28_out1 = cfblk28_div_temp[7:0];
      end
    end
  end



  assign cfblk25_out1 = cfblk28_out1 - cfblk59_out1;



  assign cfblk87_out1 = (cfblk25_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk29_out1 = cfblk87_out1 + cfblk76_out1;



  assign dtc_out_3 = cfblk29_out1;



  assign cfblk46_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk146_process
      if (reset == 1'b1) begin
        cfblk146_reg[0] <= 8'b00000000;
        cfblk146_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk146_reg[0] <= cfblk146_reg_next[0];
          cfblk146_reg[1] <= cfblk146_reg_next[1];
        end
      end
    end

  assign cfblk146_out1 = cfblk146_reg[1];
  assign cfblk146_reg_next[0] = cfblk46_out1;
  assign cfblk146_reg_next[1] = cfblk146_reg[0];



  assign cfblk3_out1 = {cfblk146_out1, cfblk98_out1};



  assign cfblk161_out1 = cfblk3_out1[7:0];



  assign cfblk18_out1 = cfblk161_out1 + cfblk18_const_val_1;



  assign cfblk105_out1 = cfblk56_out1 + cfblk18_out1;



  assign cfblk91_out1 = cfblk105_out1 - cfblk143_out1;



  assign dtc_out_4 = cfblk91_out1;



  assign cfblk57_out1 = dtc_out_4;



  always @(cfblk101_out1, cfblk57_out1) begin
    cfblk120_div_temp = 9'b000000000;
    cfblk120_t_0_0 = 9'b000000000;
    if (cfblk101_out1 == 8'b00000000) begin
      cfblk120_out1 = 8'b11111111;
    end
    else begin
      cfblk120_t_0_0 = {1'b0, cfblk57_out1};
      cfblk120_div_temp = cfblk120_t_0_0 / cfblk101_out1;
      if (cfblk120_div_temp[8] != 1'b0) begin
        cfblk120_out1 = 8'b11111111;
      end
      else begin
        cfblk120_out1 = cfblk120_div_temp[7:0];
      end
    end
  end



  assign dtc_out_5 = cfblk120_out1;



  assign cfblk126_out1 = dtc_out_5;



  assign cfblk61_out1 = cfblk126_out1 - cfblk135_out1;



  assign cfblk121_out1 = cfblk61_out1 + cfblk121_const_val_1;



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk121_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk5_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk93_out1 = cfblk150_out1 + cfblk26_out1;



  assign dtc_out_6 = cfblk93_out1;



  assign cfblk12_out1 = dtc_out_6;



  always @(cfblk12_out1, cfblk141_out1) begin
    cfblk16_div_temp = 9'b000000000;
    cfblk16_t_0_0 = 9'b000000000;
    if (cfblk141_out1 == 8'b00000000) begin
      cfblk16_out1 = 8'b11111111;
    end
    else begin
      cfblk16_t_0_0 = {1'b0, cfblk12_out1};
      cfblk16_div_temp = cfblk16_t_0_0 / cfblk141_out1;
      if (cfblk16_div_temp[8] != 1'b0) begin
        cfblk16_out1 = 8'b11111111;
      end
      else begin
        cfblk16_out1 = cfblk16_div_temp[7:0];
      end
    end
  end



  always @(cfblk153_out1, cfblk16_out1) begin
    cfblk49_div_temp = 9'b000000000;
    cfblk49_t_0_0 = 9'b000000000;
    if (cfblk153_out1 == 8'b00000000) begin
      cfblk49_out1 = 8'b11111111;
    end
    else begin
      cfblk49_t_0_0 = {1'b0, cfblk16_out1};
      cfblk49_div_temp = cfblk49_t_0_0 / cfblk153_out1;
      if (cfblk49_div_temp[8] != 1'b0) begin
        cfblk49_out1 = 8'b11111111;
      end
      else begin
        cfblk49_out1 = cfblk49_div_temp[7:0];
      end
    end
  end



  assign dtc_out_7 = cfblk49_out1;



  assign cfblk9_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk9_out1;



  assign cfblk100_out1 = dtc_out_8;



  assign cfblk35_out1 = cfblk100_out1 - cfblk18_out1;



  assign dtc_out_9 = cfblk35_out1;



  assign cfblk22_out1 = dtc_out_9;



  assign dtc_out_10 = cfblk22_out1;



  assign cfblk71_out1 = dtc_out_10;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk71_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk75_out1 = cfblk154_out1 - cfblk127_out1;



  assign cfblk43_out1 = cfblk75_out1 - cfblk142_out1;



  assign cfblk69_out1 = cfblk43_out1 + cfblk69_const_val_1;



  assign dtc_out_11 = cfblk69_out1;



  assign cfblk66_out1 = dtc_out_11;



  assign cfblk59_out1 = cfblk66_out1 + cfblk72_out1;



  assign cfblk56_out1 = cfblk59_out1 - cfblk88_out1;



  always @(cfblk56_out1, cfblk68_out1) begin
    cfblk124_div_temp = 9'b000000000;
    cfblk124_t_0_0 = 9'b000000000;
    if (cfblk56_out1 == 8'b00000000) begin
      cfblk124_out1 = 8'b11111111;
    end
    else begin
      cfblk124_t_0_0 = {1'b0, cfblk68_out1};
      cfblk124_div_temp = cfblk124_t_0_0 / cfblk56_out1;
      if (cfblk124_div_temp[8] != 1'b0) begin
        cfblk124_out1 = 8'b11111111;
      end
      else begin
        cfblk124_out1 = cfblk124_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk124_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  assign cfblk47_out1 = cfblk140_out1 + cfblk126_out1;



  assign dtc_out_12 = cfblk47_out1;



  assign cfblk63_out1 = dtc_out_12;



  always @(cfblk63_out1, cfblk80_out1) begin
    cfblk27_div_temp = 9'b000000000;
    cfblk27_t_0_0 = 9'b000000000;
    if (cfblk80_out1 == 8'b00000000) begin
      cfblk27_out1 = 8'b11111111;
    end
    else begin
      cfblk27_t_0_0 = {1'b0, cfblk63_out1};
      cfblk27_div_temp = cfblk27_t_0_0 / cfblk80_out1;
      if (cfblk27_div_temp[8] != 1'b0) begin
        cfblk27_out1 = 8'b11111111;
      end
      else begin
        cfblk27_out1 = cfblk27_div_temp[7:0];
      end
    end
  end



  assign cfblk68_out1 = (cfblk27_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk60_out1 = cfblk68_out1 + cfblk60_const_val_1;



  assign cfblk39_out1 = cfblk60_out1 + cfblk39_const_val_1;



  assign cfblk123_out1 = cfblk39_out1 + cfblk114_out1;



  assign cfblk42_const_val_1 = 8'b00000000;



  assign cfblk42_out1 = cfblk123_out1 + cfblk42_const_val_1;



  DotProduct_block1 u_cfblk40_inst (.in1(cfblk42_out1),  // uint8
                                    .in2(cfblk87_out1),  // uint8
                                    .out1(cfblk40_out1)  // uint8
                                    );

  assign cfblk130 = cfblk40_out1;

  assign Hdl_out = cfblk113_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

