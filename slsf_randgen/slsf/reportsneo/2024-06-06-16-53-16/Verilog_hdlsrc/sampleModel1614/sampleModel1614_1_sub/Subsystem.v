// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1614\sampleModel1614_1_sub\Subsystem.v
// Created: 2024-08-13 04:42:20
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1614_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [15:0] cfblk161_out1;  // uint16
  wire [7:0] cfblk109_const_val_1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk202_out1;  // uint8
  reg [7:0] cfblk202_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk202_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk19_const_val_1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk118_const_val_1;  // uint8
  wire [7:0] cfblk87_const_val_1;  // uint8
  wire [7:0] cfblk116_const_val_1;  // uint8
  wire [7:0] cfblk72_const_val_1;  // uint8
  wire [7:0] cfblk106_const_val_1;  // uint8
  wire [7:0] cfblk154_const_val_1;  // uint8
  wire [7:0] cfblk38_const_val_1;  // uint8
  wire [7:0] cfblk45_const_val_1;  // uint8
  wire [7:0] cfblk76_const_val_1;  // uint8
  wire [7:0] cfblk86_const_val_1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk141_const_val_1;  // uint8
  wire [7:0] cfblk52_const_val_1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  reg [7:0] cfblk193_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  reg [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk163_out1;  // uint8
  reg [7:0] cfblk194_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_out1;  // uint8
  reg [7:0] cfblk192_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk197_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk197_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk197_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  reg [7:0] cfblk198_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk198_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk198_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  reg [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk200_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk200_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk200_out1;  // uint8
  reg [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  reg [7:0] cfblk7_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  reg [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  reg [7:0] cfblk150_out1;  // uint8
  reg [7:0] cfblk145_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  reg [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] Mysubsystem_34_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  reg [7:0] cfblk128_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk201_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk201_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk201_out1;  // uint8
  reg [7:0] cfblk199_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk199_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk199_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  reg [7:0] cfblk196_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk196_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk196_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  reg [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  reg [7:0] cfblk195_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk67_out1;  // uint8
  wire signed [31:0] cfblk129_sub_temp;  // sfix32
  wire signed [31:0] cfblk129_1;  // sfix32
  wire signed [31:0] cfblk129_2;  // sfix32
  wire [7:0] dtc_out_5;  // ufix8
  reg [8:0] cfblk48_div_temp;  // ufix9
  reg [8:0] cfblk48_t_0_0;  // ufix9
  reg [8:0] cfblk95_div_temp;  // ufix9
  reg [8:0] cfblk95_t_0_0;  // ufix9
  reg [8:0] cfblk46_div_temp;  // ufix9
  reg [8:0] cfblk46_t_0_0;  // ufix9
  reg [8:0] cfblk150_div_temp;  // ufix9
  reg [8:0] cfblk150_t_0_0;  // ufix9
  reg [8:0] cfblk7_div_temp;  // ufix9
  reg [8:0] cfblk7_t_0_0;  // ufix9
  reg [8:0] cfblk145_div_temp;  // ufix9
  reg [8:0] cfblk145_t_0_0;  // ufix9
  reg [8:0] cfblk132_div_temp;  // ufix9
  reg [8:0] cfblk132_t_0_0;  // ufix9
  reg [8:0] cfblk99_div_temp;  // ufix9
  reg [8:0] cfblk99_t_0_0;  // ufix9
  reg [8:0] cfblk120_div_temp;  // ufix9
  reg [8:0] cfblk120_t_0_0;  // ufix9
  reg [8:0] cfblk5_div_temp;  // ufix9
  reg [8:0] cfblk5_t_0_0;  // ufix9
  reg [8:0] cfblk137_div_temp;  // ufix9
  reg [8:0] cfblk137_t_0_0;  // ufix9
  reg [8:0] cfblk134_div_temp;  // ufix9
  reg [8:0] cfblk134_t_0_0;  // ufix9
  reg [8:0] cfblk128_div_temp;  // ufix9
  reg [8:0] cfblk128_t_0_0;  // ufix9
  reg [8:0] cfblk149_div_temp;  // ufix9
  reg [8:0] cfblk149_t_0_0;  // ufix9
  reg [8:0] cfblk14_div_temp;  // ufix9
  reg [8:0] cfblk14_t_0_0;  // ufix9
  reg [8:0] cfblk77_div_temp;  // ufix9
  reg [8:0] cfblk77_t_0_0;  // ufix9
  reg [8:0] cfblk24_div_temp;  // ufix9
  reg [8:0] cfblk24_t_0_0;  // ufix9


  cfblk161 u_cfblk161 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk161_out1)  // uint16
                       );

  assign enb = clk_enable;

  assign cfblk109_const_val_1 = 8'b00000000;



  assign cfblk162_out1 = 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : cfblk202_process
      if (reset == 1'b1) begin
        cfblk202_reg[0] <= 8'b00000000;
        cfblk202_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk202_reg[0] <= cfblk202_reg_next[0];
          cfblk202_reg[1] <= cfblk202_reg_next[1];
        end
      end
    end

  assign cfblk202_out1 = cfblk202_reg[1];
  assign cfblk202_reg_next[0] = cfblk202_out1;
  assign cfblk202_reg_next[1] = cfblk202_reg[0];



  assign cfblk19_const_val_1 = 8'b00000000;



  assign cfblk19_out1 = cfblk202_out1 + cfblk19_const_val_1;



  assign cfblk118_const_val_1 = 8'b00000000;



  assign cfblk87_const_val_1 = 8'b00000000;



  assign cfblk116_const_val_1 = 8'b00000000;



  assign cfblk72_const_val_1 = 8'b00000000;



  assign cfblk106_const_val_1 = 8'b00000000;



  assign cfblk154_const_val_1 = 8'b00000000;



  assign cfblk38_const_val_1 = 8'b00000000;



  assign cfblk45_const_val_1 = 8'b00000000;



  assign cfblk76_const_val_1 = 8'b00000000;



  assign cfblk86_const_val_1 = 8'b00000000;



  assign cfblk2_out1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk2_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk141_const_val_1 = 8'b00000000;



  assign cfblk52_const_val_1 = 8'b00000000;



  always @(cfblk80_out1) begin
    cfblk48_div_temp = 9'b000000000;
    cfblk48_t_0_0 = 9'b000000000;
    if (cfblk80_out1 == 8'b00000000) begin
      cfblk48_out1 = 8'b11111111;
    end
    else begin
      cfblk48_t_0_0 = {1'b0, cfblk80_out1};
      cfblk48_div_temp = cfblk48_t_0_0 / cfblk80_out1;
      if (cfblk48_div_temp[8] != 1'b0) begin
        cfblk48_out1 = 8'b11111111;
      end
      else begin
        cfblk48_out1 = cfblk48_div_temp[7:0];
      end
    end
  end



  assign cfblk152_out1 = (cfblk48_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk152_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk193_process
      if (reset == 1'b1) begin
        cfblk193_reg[0] <= 8'b00000000;
        cfblk193_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk193_reg[0] <= cfblk193_reg_next[0];
          cfblk193_reg[1] <= cfblk193_reg_next[1];
        end
      end
    end

  assign cfblk193_out1 = cfblk193_reg[1];
  assign cfblk193_reg_next[0] = cfblk41_out1;
  assign cfblk193_reg_next[1] = cfblk193_reg[0];



  assign cfblk26_out1 = cfblk202_out1 - cfblk34_out1;



  assign cfblk52_out1 = cfblk120_out1 + cfblk52_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk120_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  cfblk163 u_cfblk163 (.In1(cfblk141_out1),  // uint8
                       .Out1(cfblk163_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk194_process
      if (reset == 1'b1) begin
        cfblk194_reg[0] <= 8'b00000000;
        cfblk194_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk194_reg[0] <= cfblk194_reg_next[0];
          cfblk194_reg[1] <= cfblk194_reg_next[1];
        end
      end
    end

  assign cfblk194_out1 = cfblk194_reg[1];
  assign cfblk194_reg_next[0] = cfblk41_out1;
  assign cfblk194_reg_next[1] = cfblk194_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk192_process
      if (reset == 1'b1) begin
        cfblk192_reg[0] <= 8'b00000000;
        cfblk192_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk192_reg[0] <= cfblk192_reg_next[0];
          cfblk192_reg[1] <= cfblk192_reg_next[1];
        end
      end
    end

  assign cfblk192_out1 = cfblk192_reg[1];
  assign cfblk192_reg_next[0] = cfblk120_out1;
  assign cfblk192_reg_next[1] = cfblk192_reg[0];



  assign cfblk51_out1 = cfblk74_out1 + cfblk74_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk197_process
      if (reset == 1'b1) begin
        cfblk197_reg[0] <= 8'b00000000;
        cfblk197_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk197_reg[0] <= cfblk197_reg_next[0];
          cfblk197_reg[1] <= cfblk197_reg_next[1];
        end
      end
    end

  assign cfblk197_out1 = cfblk197_reg[1];
  assign cfblk197_reg_next[0] = cfblk51_out1;
  assign cfblk197_reg_next[1] = cfblk197_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        cfblk183_reg[0] <= 8'b00000000;
        cfblk183_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk183_reg[0] <= cfblk183_reg_next[0];
          cfblk183_reg[1] <= cfblk183_reg_next[1];
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk154_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign cfblk61_out1 = cfblk120_out1 + cfblk93_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk61_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk198_process
      if (reset == 1'b1) begin
        cfblk198_reg[0] <= 8'b00000000;
        cfblk198_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk198_reg[0] <= cfblk198_reg_next[0];
          cfblk198_reg[1] <= cfblk198_reg_next[1];
        end
      end
    end

  assign cfblk198_out1 = cfblk198_reg[1];
  assign cfblk198_reg_next[0] = cfblk74_out1;
  assign cfblk198_reg_next[1] = cfblk198_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk98_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk47_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  DotProduct_block5 u_cfblk29_inst (.in1(cfblk77_out1),  // uint8
                                    .in2(cfblk173_out1),  // uint8
                                    .out1(cfblk29_out1)  // uint8
                                    );

  assign cfblk117_out1 = cfblk29_out1 + cfblk188_out1;



  assign dtc_out = cfblk117_out1;



  assign cfblk92_out1 = dtc_out;



  always @(cfblk198_out1, cfblk92_out1) begin
    cfblk95_div_temp = 9'b000000000;
    cfblk95_t_0_0 = 9'b000000000;
    if (cfblk198_out1 == 8'b00000000) begin
      cfblk95_out1 = 8'b11111111;
    end
    else begin
      cfblk95_t_0_0 = {1'b0, cfblk92_out1};
      cfblk95_div_temp = cfblk95_t_0_0 / cfblk198_out1;
      if (cfblk95_div_temp[8] != 1'b0) begin
        cfblk95_out1 = 8'b11111111;
      end
      else begin
        cfblk95_out1 = cfblk95_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk200_process
      if (reset == 1'b1) begin
        cfblk200_reg[0] <= 8'b00000000;
        cfblk200_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk200_reg[0] <= cfblk200_reg_next[0];
          cfblk200_reg[1] <= cfblk200_reg_next[1];
        end
      end
    end

  assign cfblk200_out1 = cfblk200_reg[1];
  assign cfblk200_reg_next[0] = cfblk133_out1;
  assign cfblk200_reg_next[1] = cfblk200_reg[0];



  always @(cfblk141_out1, cfblk99_out1) begin
    cfblk46_div_temp = 9'b000000000;
    cfblk46_t_0_0 = 9'b000000000;
    if (cfblk141_out1 == 8'b00000000) begin
      cfblk46_out1 = 8'b11111111;
    end
    else begin
      cfblk46_t_0_0 = {1'b0, cfblk99_out1};
      cfblk46_div_temp = cfblk46_t_0_0 / cfblk141_out1;
      if (cfblk46_div_temp[8] != 1'b0) begin
        cfblk46_out1 = 8'b11111111;
      end
      else begin
        cfblk46_out1 = cfblk46_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk46_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  assign cfblk119_out1 = cfblk80_out1 + cfblk180_out1;



  DotProduct_block3 u_cfblk15_inst (.in1(cfblk119_out1),  // uint8
                                    .in2(cfblk129_out1),  // uint8
                                    .out1(cfblk15_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk146_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk7_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk10_out1 = cfblk58_out1 + cfblk154_out1;



  assign cfblk86_out1 = cfblk10_out1 + cfblk86_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk86_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk45_out1 = cfblk109_out1 + cfblk45_const_val_1;



  assign cfblk76_out1 = cfblk45_out1 + cfblk76_const_val_1;



  assign cfblk25_out1 = cfblk76_out1 + cfblk118_out1;



  DotProduct_block8 u_cfblk43_inst (.in1(cfblk25_out1),  // uint8
                                    .in2(cfblk98_out1),  // uint8
                                    .out1(cfblk43_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk43_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  DotProduct_block13 u_cfblk94_inst (.in1(cfblk14_out1),  // uint8
                                     .in2(cfblk171_out1),  // uint8
                                     .out1(cfblk94_out1)  // uint8
                                     );

  assign cfblk90_out1 = cfblk94_out1 - cfblk168_out1;



  assign cfblk44_out1 = (cfblk90_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk34_out1 = cfblk44_out1 + cfblk176_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk136_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign dtc_out_1 = cfblk17_out1;



  assign cfblk9_out1 = dtc_out_1;



  assign cfblk38_out1 = cfblk9_out1 + cfblk38_const_val_1;



  assign cfblk154_out1 = cfblk120_out1 + cfblk154_const_val_1;



  assign cfblk104_out1 = cfblk36_out1 - cfblk154_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        cfblk179_reg[0] <= 8'b00000000;
        cfblk179_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk179_reg[0] <= cfblk179_reg_next[0];
          cfblk179_reg[1] <= cfblk179_reg_next[1];
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk104_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  always @(cfblk179_out1, cfblk38_out1) begin
    cfblk150_div_temp = 9'b000000000;
    cfblk150_t_0_0 = 9'b000000000;
    if (cfblk38_out1 == 8'b00000000) begin
      cfblk150_out1 = 8'b11111111;
    end
    else begin
      cfblk150_t_0_0 = {1'b0, cfblk179_out1};
      cfblk150_div_temp = cfblk150_t_0_0 / cfblk38_out1;
      if (cfblk150_div_temp[8] != 1'b0) begin
        cfblk150_out1 = 8'b11111111;
      end
      else begin
        cfblk150_out1 = cfblk150_div_temp[7:0];
      end
    end
  end



  always @(cfblk150_out1, cfblk182_out1) begin
    cfblk7_div_temp = 9'b000000000;
    cfblk7_t_0_0 = 9'b000000000;
    if (cfblk182_out1 == 8'b00000000) begin
      cfblk7_out1 = 8'b11111111;
    end
    else begin
      cfblk7_t_0_0 = {1'b0, cfblk150_out1};
      cfblk7_div_temp = cfblk7_t_0_0 / cfblk182_out1;
      if (cfblk7_div_temp[8] != 1'b0) begin
        cfblk7_out1 = 8'b11111111;
      end
      else begin
        cfblk7_out1 = cfblk7_div_temp[7:0];
      end
    end
  end



  always @(cfblk34_out1, cfblk7_out1) begin
    cfblk145_div_temp = 9'b000000000;
    cfblk145_t_0_0 = 9'b000000000;
    if (cfblk34_out1 == 8'b00000000) begin
      cfblk145_out1 = 8'b11111111;
    end
    else begin
      cfblk145_t_0_0 = {1'b0, cfblk7_out1};
      cfblk145_div_temp = cfblk145_t_0_0 / cfblk34_out1;
      if (cfblk145_div_temp[8] != 1'b0) begin
        cfblk145_out1 = 8'b11111111;
      end
      else begin
        cfblk145_out1 = cfblk145_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk120_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  always @(cfblk145_out1, cfblk185_out1) begin
    cfblk132_div_temp = 9'b000000000;
    cfblk132_t_0_0 = 9'b000000000;
    if (cfblk145_out1 == 8'b00000000) begin
      cfblk132_out1 = 8'b11111111;
    end
    else begin
      cfblk132_t_0_0 = {1'b0, cfblk185_out1};
      cfblk132_div_temp = cfblk132_t_0_0 / cfblk145_out1;
      if (cfblk132_div_temp[8] != 1'b0) begin
        cfblk132_out1 = 8'b11111111;
      end
      else begin
        cfblk132_out1 = cfblk132_div_temp[7:0];
      end
    end
  end



  DotProduct_block12 u_cfblk83_inst (.in1(cfblk89_out1),  // uint8
                                     .in2(cfblk99_out1),  // uint8
                                     .out1(cfblk83_out1)  // uint8
                                     );

  always @(cfblk13_out1, cfblk151_out1) begin
    cfblk99_div_temp = 9'b000000000;
    cfblk99_t_0_0 = 9'b000000000;
    if (cfblk13_out1 == 8'b00000000) begin
      cfblk99_out1 = 8'b11111111;
    end
    else begin
      cfblk99_t_0_0 = {1'b0, cfblk151_out1};
      cfblk99_div_temp = cfblk99_t_0_0 / cfblk13_out1;
      if (cfblk99_div_temp[8] != 1'b0) begin
        cfblk99_out1 = 8'b11111111;
      end
      else begin
        cfblk99_out1 = cfblk99_div_temp[7:0];
      end
    end
  end



  assign cfblk106_out1 = cfblk157_out1 + cfblk106_const_val_1;



  always @(cfblk106_out1, cfblk99_out1) begin
    cfblk120_div_temp = 9'b000000000;
    cfblk120_t_0_0 = 9'b000000000;
    if (cfblk99_out1 == 8'b00000000) begin
      cfblk120_out1 = 8'b11111111;
    end
    else begin
      cfblk120_t_0_0 = {1'b0, cfblk106_out1};
      cfblk120_div_temp = cfblk120_t_0_0 / cfblk99_out1;
      if (cfblk120_div_temp[8] != 1'b0) begin
        cfblk120_out1 = 8'b11111111;
      end
      else begin
        cfblk120_out1 = cfblk120_div_temp[7:0];
      end
    end
  end



  DotProduct_block2 u_cfblk136_inst (.in1(cfblk120_out1),  // uint8
                                     .in2(cfblk83_out1),  // uint8
                                     .out1(cfblk136_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk136_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  assign cfblk126_out1 = cfblk181_out1 - cfblk132_out1;



  always @(cfblk126_out1, cfblk177_out1) begin
    cfblk5_div_temp = 9'b000000000;
    cfblk5_t_0_0 = 9'b000000000;
    if (cfblk177_out1 == 8'b00000000) begin
      cfblk5_out1 = 8'b11111111;
    end
    else begin
      cfblk5_t_0_0 = {1'b0, cfblk126_out1};
      cfblk5_div_temp = cfblk5_t_0_0 / cfblk177_out1;
      if (cfblk5_div_temp[8] != 1'b0) begin
        cfblk5_out1 = 8'b11111111;
      end
      else begin
        cfblk5_out1 = cfblk5_div_temp[7:0];
      end
    end
  end



  assign cfblk140_out1 = (cfblk5_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk146_out1 = (cfblk140_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk72_out1 = cfblk4_out1 + cfblk72_const_val_1;



  Mysubsystem_34 u_Mysubsystem_34 (.In1(cfblk72_out1),  // uint8
                                   .In2(cfblk85_out1),  // uint8
                                   .In3(cfblk146_out1),  // uint8
                                   .Out1(Mysubsystem_34_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = Mysubsystem_34_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk97_out1 = cfblk178_out1 + cfblk15_out1;



  assign cfblk16_out1 = cfblk97_out1 - cfblk174_out1;



  assign cfblk141_out1 = cfblk16_out1 + cfblk141_const_val_1;



  assign cfblk66_out1 = cfblk141_out1 + cfblk148_out1;



  assign cfblk96_out1 = cfblk66_out1 + cfblk200_out1;



  assign cfblk58_out1 = (cfblk96_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk58_out1, cfblk5_out1) begin
    cfblk137_div_temp = 9'b000000000;
    cfblk137_t_0_0 = 9'b000000000;
    if (cfblk5_out1 == 8'b00000000) begin
      cfblk137_out1 = 8'b11111111;
    end
    else begin
      cfblk137_t_0_0 = {1'b0, cfblk58_out1};
      cfblk137_div_temp = cfblk137_t_0_0 / cfblk5_out1;
      if (cfblk137_div_temp[8] != 1'b0) begin
        cfblk137_out1 = 8'b11111111;
      end
      else begin
        cfblk137_out1 = cfblk137_div_temp[7:0];
      end
    end
  end



  assign cfblk88_out1 = cfblk137_out1 - cfblk151_out1;



  DotProduct_block4 u_cfblk22_inst (.in1(cfblk87_out1),  // uint8
                                    .in2(cfblk88_out1),  // uint8
                                    .out1(cfblk22_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk22_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk153_out1 = cfblk175_out1 + cfblk95_out1;



  assign cfblk89_out1 = cfblk153_out1 - cfblk172_out1;



  DotProduct_block9 u_cfblk49_inst (.in1(cfblk89_out1),  // uint8
                                    .in2(cfblk183_out1),  // uint8
                                    .out1(cfblk49_out1)  // uint8
                                    );

  DotProduct_block6 u_cfblk37_inst (.in1(cfblk49_out1),  // uint8
                                    .in2(cfblk197_out1),  // uint8
                                    .out1(cfblk37_out1)  // uint8
                                    );

  assign cfblk87_out1 = cfblk157_out1 + cfblk87_const_val_1;



  assign cfblk41_out1 = cfblk78_out1 + cfblk87_out1;



  assign cfblk73_out1 = cfblk40_out1 + cfblk54_out1;



  assign cfblk84_out1 = cfblk80_out1 + cfblk1_out1;



  always @(cfblk202_out1, cfblk84_out1) begin
    cfblk134_div_temp = 9'b000000000;
    cfblk134_t_0_0 = 9'b000000000;
    if (cfblk202_out1 == 8'b00000000) begin
      cfblk134_out1 = 8'b11111111;
    end
    else begin
      cfblk134_t_0_0 = {1'b0, cfblk84_out1};
      cfblk134_div_temp = cfblk134_t_0_0 / cfblk202_out1;
      if (cfblk134_div_temp[8] != 1'b0) begin
        cfblk134_out1 = 8'b11111111;
      end
      else begin
        cfblk134_out1 = cfblk134_div_temp[7:0];
      end
    end
  end



  assign cfblk55_out1 = cfblk134_out1 + cfblk78_out1;



  assign cfblk47_out1 = cfblk55_out1 + cfblk73_out1;



  assign cfblk93_out1 = cfblk47_out1 - cfblk78_out1;



  assign cfblk32_out1 = (cfblk93_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk118_out1 = cfblk32_out1 + cfblk118_const_val_1;



  assign cfblk127_out1 = cfblk54_out1 + cfblk118_out1;



  always @(cfblk127_out1, cfblk41_out1) begin
    cfblk128_div_temp = 9'b000000000;
    cfblk128_t_0_0 = 9'b000000000;
    if (cfblk41_out1 == 8'b00000000) begin
      cfblk128_out1 = 8'b11111111;
    end
    else begin
      cfblk128_t_0_0 = {1'b0, cfblk127_out1};
      cfblk128_div_temp = cfblk128_t_0_0 / cfblk41_out1;
      if (cfblk128_div_temp[8] != 1'b0) begin
        cfblk128_out1 = 8'b11111111;
      end
      else begin
        cfblk128_out1 = cfblk128_div_temp[7:0];
      end
    end
  end



  assign dtc_out_2 = cfblk128_out1;



  assign cfblk79_out1 = dtc_out_2;



  assign cfblk116_out1 = cfblk79_out1 + cfblk116_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk116_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk30_out1 = cfblk170_out1 - cfblk37_out1;



  always @(cfblk192_out1, cfblk30_out1) begin
    cfblk149_div_temp = 9'b000000000;
    cfblk149_t_0_0 = 9'b000000000;
    if (cfblk192_out1 == 8'b00000000) begin
      cfblk149_out1 = 8'b11111111;
    end
    else begin
      cfblk149_t_0_0 = {1'b0, cfblk30_out1};
      cfblk149_div_temp = cfblk149_t_0_0 / cfblk192_out1;
      if (cfblk149_div_temp[8] != 1'b0) begin
        cfblk149_out1 = 8'b11111111;
      end
      else begin
        cfblk149_out1 = cfblk149_div_temp[7:0];
      end
    end
  end



  assign cfblk131_out1 = (cfblk149_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk201_process
      if (reset == 1'b1) begin
        cfblk201_reg[0] <= 8'b00000000;
        cfblk201_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk201_reg[0] <= cfblk201_reg_next[0];
          cfblk201_reg[1] <= cfblk201_reg_next[1];
        end
      end
    end

  assign cfblk201_out1 = cfblk201_reg[1];
  assign cfblk201_reg_next[0] = cfblk131_out1;
  assign cfblk201_reg_next[1] = cfblk201_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk199_process
      if (reset == 1'b1) begin
        cfblk199_reg[0] <= 8'b00000000;
        cfblk199_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk199_reg[0] <= cfblk199_reg_next[0];
          cfblk199_reg[1] <= cfblk199_reg_next[1];
        end
      end
    end

  assign cfblk199_out1 = cfblk199_reg[1];
  assign cfblk199_reg_next[0] = cfblk4_out1;
  assign cfblk199_reg_next[1] = cfblk199_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk199_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  always @(cfblk1_out1, cfblk201_out1) begin
    cfblk14_div_temp = 9'b000000000;
    cfblk14_t_0_0 = 9'b000000000;
    if (cfblk201_out1 == 8'b00000000) begin
      cfblk14_out1 = 8'b11111111;
    end
    else begin
      cfblk14_t_0_0 = {1'b0, cfblk1_out1};
      cfblk14_div_temp = cfblk14_t_0_0 / cfblk201_out1;
      if (cfblk14_div_temp[8] != 1'b0) begin
        cfblk14_out1 = 8'b11111111;
      end
      else begin
        cfblk14_out1 = cfblk14_div_temp[7:0];
      end
    end
  end



  assign cfblk148_out1 = cfblk14_out1 - cfblk55_out1;



  assign cfblk36_out1 = cfblk148_out1 + cfblk5_out1;



  assign cfblk151_out1 = (cfblk36_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk64_out1 = (cfblk151_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk196_process
      if (reset == 1'b1) begin
        cfblk196_reg[0] <= 8'b00000000;
        cfblk196_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk196_reg[0] <= cfblk196_reg_next[0];
          cfblk196_reg[1] <= cfblk196_reg_next[1];
        end
      end
    end

  assign cfblk196_out1 = cfblk196_reg[1];
  assign cfblk196_reg_next[0] = cfblk64_out1;
  assign cfblk196_reg_next[1] = cfblk196_reg[0];



  DotProduct_block10 u_cfblk54_inst (.in1(cfblk196_out1),  // uint8
                                     .in2(cfblk131_out1),  // uint8
                                     .out1(cfblk54_out1)  // uint8
                                     );

  DotProduct u_cfblk11_inst (.in1(cfblk54_out1),  // uint8
                             .in2(cfblk194_out1),  // uint8
                             .out1(cfblk11_out1)  // uint8
                             );

  assign cfblk133_out1 = cfblk11_out1 + cfblk24_out1;



  assign cfblk65_out1 = cfblk27_out1 + cfblk133_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        cfblk189_reg[0] <= 8'b00000000;
        cfblk189_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk189_reg[0] <= cfblk189_reg_next[0];
          cfblk189_reg[1] <= cfblk189_reg_next[1];
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk65_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  DotProduct_block1 u_cfblk13_inst (.in1(cfblk189_out1),  // uint8
                                    .in2(cfblk163_out1),  // uint8
                                    .out1(cfblk13_out1)  // uint8
                                    );

  always @(cfblk13_out1, cfblk184_out1) begin
    cfblk77_div_temp = 9'b000000000;
    cfblk77_t_0_0 = 9'b000000000;
    if (cfblk184_out1 == 8'b00000000) begin
      cfblk77_out1 = 8'b11111111;
    end
    else begin
      cfblk77_t_0_0 = {1'b0, cfblk13_out1};
      cfblk77_div_temp = cfblk77_t_0_0 / cfblk184_out1;
      if (cfblk77_div_temp[8] != 1'b0) begin
        cfblk77_out1 = 8'b11111111;
      end
      else begin
        cfblk77_out1 = cfblk77_div_temp[7:0];
      end
    end
  end



  always @(cfblk58_out1, cfblk77_out1) begin
    cfblk24_div_temp = 9'b000000000;
    cfblk24_t_0_0 = 9'b000000000;
    if (cfblk58_out1 == 8'b00000000) begin
      cfblk24_out1 = 8'b11111111;
    end
    else begin
      cfblk24_t_0_0 = {1'b0, cfblk77_out1};
      cfblk24_div_temp = cfblk24_t_0_0 / cfblk58_out1;
      if (cfblk24_div_temp[8] != 1'b0) begin
        cfblk24_out1 = 8'b11111111;
      end
      else begin
        cfblk24_out1 = cfblk24_div_temp[7:0];
      end
    end
  end



  assign cfblk85_out1 = cfblk24_out1 + cfblk52_out1;



  assign cfblk143_out1 = (cfblk85_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk143_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  assign cfblk17_out1 = cfblk186_out1 + cfblk11_out1;



  assign cfblk75_out1 = cfblk19_out1 - cfblk17_out1;



  DotProduct_block7 u_cfblk4_inst (.in1(cfblk162_out1),  // uint8
                                   .in2(cfblk75_out1),  // uint8
                                   .out1(cfblk4_out1)  // uint8
                                   );

  assign dtc_out_3 = cfblk4_out1;



  assign cfblk74_out1 = dtc_out_3;



  assign cfblk109_out1 = cfblk40_out1 + cfblk109_const_val_1;



  assign cfblk98_out1 = cfblk123_out1 + cfblk109_out1;



  assign cfblk27_out1 = (cfblk98_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk27_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 8'b00000000;
        cfblk187_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk40_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk112_out1 = cfblk187_out1 + cfblk190_out1;



  assign cfblk40_out1 = cfblk112_out1 + cfblk74_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk40_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  assign cfblk157_out1 = cfblk191_out1 + cfblk46_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk195_process
      if (reset == 1'b1) begin
        cfblk195_reg[0] <= 8'b00000000;
        cfblk195_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk195_reg[0] <= cfblk195_reg_next[0];
          cfblk195_reg[1] <= cfblk195_reg_next[1];
        end
      end
    end

  assign cfblk195_out1 = cfblk195_reg[1];
  assign cfblk195_reg_next[0] = cfblk157_out1;
  assign cfblk195_reg_next[1] = cfblk195_reg[0];



  assign cfblk156_out1 = cfblk195_out1 - cfblk26_out1;



  assign cfblk115_out1 = cfblk156_out1 + cfblk193_out1;



  DotProduct_block u_cfblk123_inst (.in1(cfblk115_out1),  // uint8
                                    .in2(cfblk169_out1),  // uint8
                                    .out1(cfblk123_out1)  // uint8
                                    );

  cfblk164 u_cfblk164 (.In1(cfblk123_out1),  // uint8
                       .Out1(cfblk164_out1)  // uint8
                       );

  assign dtc_out_4 = cfblk164_out1;



  assign cfblk67_out1 = dtc_out_4;



  assign cfblk129_1 = {16'b0, cfblk161_out1};
  assign cfblk129_2 = {24'b0, cfblk67_out1};
  assign cfblk129_sub_temp = cfblk129_1 - cfblk129_2;
  assign cfblk129_out1 = cfblk129_sub_temp[7:0];



  assign dtc_out_5 = cfblk129_out1;



  assign cfblk80_out1 = dtc_out_5;



  DotProduct_block11 u_cfblk78_inst (.in1(cfblk80_out1),  // uint8
                                     .in2(cfblk72_out1),  // uint8
                                     .out1(cfblk78_out1)  // uint8
                                     );

  assign Hdl_out = cfblk78_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

