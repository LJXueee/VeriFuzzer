// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1857\sampleModel1857_sub\Subsystem.v
// Created: 2024-08-14 21:02:04
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1857_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk193_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk91_const_val_1;  // uint8
  wire [7:0] cfblk135_const_val_1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  reg [7:0] cfblk194_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk141_const_val_1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk56_const_val_1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk64_const_val_1;  // uint8
  wire [7:0] cfblk29_const_val_1;  // uint8
  wire [7:0] cfblk31_const_val_1;  // uint8
  wire [7:0] cfblk51_const_val_1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  reg [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire cfblk5_relop1;
  reg  [0:1] cfblk187_reg;  // ufix1 [2]
  wire [0:1] cfblk187_reg_next;  // ufix1 [2]
  wire cfblk187_out1;
  wire [7:0] cfblk75_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk134_out1;  // uint8
  reg [7:0] cfblk18_out1;  // uint8
  wire signed [31:0] cfblk37_sub_temp;  // sfix32
  wire signed [31:0] cfblk37_1;  // sfix32
  wire signed [31:0] cfblk37_2;  // sfix32
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk192_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire cfblk2_relop1;
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk164_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire signed [31:0] cfblk99_sub_temp;  // sfix32
  wire signed [31:0] cfblk99_1;  // sfix32
  wire signed [31:0] cfblk99_2;  // sfix32
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  reg [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk8_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  reg [7:0] cfblk192_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [3:0] cfblk1_out1;  // ufix4_E4
  wire [31:0] cfblk39_add_cast;  // ufix32
  wire [31:0] cfblk39_add_temp;  // ufix32
  wire [31:0] cfblk39_1;  // ufix32
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk79_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9
  reg [8:0] cfblk8_div_temp;  // ufix9
  reg [8:0] cfblk8_t_0_0;  // ufix9
  reg [8:0] cfblk57_div_temp;  // ufix9
  reg [8:0] cfblk57_t_0_0;  // ufix9
  reg [8:0] cfblk152_div_temp;  // ufix9
  reg [8:0] cfblk152_t_0_0;  // ufix9
  reg [8:0] cfblk154_div_temp;  // ufix9
  reg [8:0] cfblk154_t_0_0;  // ufix9
  reg [8:0] cfblk98_div_temp;  // ufix9
  reg [8:0] cfblk98_t_0_0;  // ufix9


  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : cfblk193_process
      if (reset == 1'b1) begin
        cfblk193_reg[0] <= 8'b00000000;
        cfblk193_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk193_reg[0] <= cfblk193_reg_next[0];
          cfblk193_reg[1] <= cfblk193_reg_next[1];
        end
      end
    end

  assign cfblk193_out1 = cfblk193_reg[1];
  assign cfblk193_reg_next[0] = cfblk3_out1;
  assign cfblk193_reg_next[1] = cfblk193_reg[0];



  cfblk3 u_cfblk3 (.u(cfblk193_out1),  // uint8
                   .y(cfblk3_out1)  // uint8
                   );

  assign cfblk86_out1 = (cfblk3_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk159_out1 = 8'b00000000;



  assign cfblk91_const_val_1 = 8'b00000000;



  assign cfblk135_const_val_1 = 8'b00000000;



  assign cfblk156_out1 = (cfblk135_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk194_process
      if (reset == 1'b1) begin
        cfblk194_reg[0] <= 8'b00000000;
        cfblk194_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk194_reg[0] <= cfblk194_reg_next[0];
          cfblk194_reg[1] <= cfblk194_reg_next[1];
        end
      end
    end

  assign cfblk194_out1 = cfblk194_reg[1];
  assign cfblk194_reg_next[0] = cfblk156_out1;
  assign cfblk194_reg_next[1] = cfblk194_reg[0];



  assign cfblk135_out1 = cfblk194_out1 + cfblk135_const_val_1;



  assign cfblk158_out1 = 8'b00000001;



  assign dtc_out = cfblk158_out1;



  assign cfblk111_out1 = dtc_out;



  assign cfblk163_out1 = 8'b00000000;



  assign dtc_out_1 = cfblk163_out1;



  assign cfblk146_out1 = dtc_out_1;



  assign cfblk160_out1 = 8'b00000000;



  assign cfblk4_out1 = cfblk160_out1 & 8'b11111110;



  assign dtc_out_2 = cfblk135_out1;



  assign cfblk142_out1 = dtc_out_2;



  assign cfblk141_const_val_1 = 8'b00000000;



  cfblk161 u_cfblk161 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk161_out1)  // uint8
                       );

  assign cfblk162_out1 = 8'b00000000;



  assign dtc_out_3 = cfblk4_out1;



  assign cfblk11_out1 = dtc_out_3;



  assign dtc_out_4 = cfblk11_out1;



  assign cfblk143_out1 = dtc_out_4;



  assign cfblk56_const_val_1 = 8'b00000000;



  assign cfblk56_out1 = cfblk143_out1 + cfblk56_const_val_1;



  assign cfblk10_out1 = cfblk146_out1 + cfblk56_out1;



  assign cfblk64_const_val_1 = 8'b00000000;



  assign cfblk29_const_val_1 = 8'b00000000;



  assign cfblk31_const_val_1 = 8'b00000000;



  assign cfblk51_const_val_1 = 8'b00000000;



  assign cfblk68_out1 = (cfblk69_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk21_out1 = (cfblk68_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_5 = cfblk21_out1;



  assign cfblk94_out1 = dtc_out_5;



  assign cfblk107_out1 = (cfblk94_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk40_out1 = cfblk154_out1 + cfblk41_out1;



  assign cfblk82_out1 = (cfblk40_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        cfblk185_reg[0] <= 8'b00000000;
        cfblk185_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk185_reg[0] <= cfblk185_reg_next[0];
          cfblk185_reg[1] <= cfblk185_reg_next[1];
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk113_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  assign cfblk26_out1 = cfblk33_out1 + cfblk185_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk92_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        cfblk191_reg[0] <= 8'b00000000;
        cfblk191_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk191_reg[0] <= cfblk191_reg_next[0];
          cfblk191_reg[1] <= cfblk191_reg_next[1];
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk69_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  assign cfblk153_out1 = (cfblk78_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_6 = cfblk153_out1;



  assign cfblk130_out1 = dtc_out_6;



  DotProduct_block5 u_cfblk32_inst (.in1(cfblk130_out1),  // uint8
                                    .in2(cfblk123_out1),  // uint8
                                    .out1(cfblk32_out1)  // uint8
                                    );

  assign cfblk33_out1 = cfblk10_out1 + cfblk96_out1;



  DotProduct_block12 u_cfblk92_inst (.in1(cfblk33_out1),  // uint8
                                     .in2(cfblk32_out1),  // uint8
                                     .out1(cfblk92_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk92_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk80_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk73_out1 = cfblk152_out1 - cfblk172_out1;



  assign cfblk155_out1 = cfblk162_out1 + cfblk46_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        cfblk187_reg[0] <= 1'b0;
        cfblk187_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          cfblk187_reg[0] <= cfblk187_reg_next[0];
          cfblk187_reg[1] <= cfblk187_reg_next[1];
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk5_relop1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        cfblk188_reg[0] <= 8'b00000000;
        cfblk188_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk188_reg[0] <= cfblk188_reg_next[0];
          cfblk188_reg[1] <= cfblk188_reg_next[1];
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk75_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  assign cfblk75_out1 = cfblk188_out1 - cfblk117_out1;



  assign cfblk46_out1 = (cfblk75_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_7 = cfblk46_out1;



  assign cfblk134_out1 = dtc_out_7;



  always @(cfblk134_out1, cfblk187_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk187_out1 == 1'b0) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk134_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk187_out1;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  assign cfblk5_relop1 = cfblk18_out1 <= cfblk161_out1;



  assign cfblk37_1 = {31'b0, cfblk5_relop1};
  assign cfblk37_2 = {24'b0, cfblk155_out1};
  assign cfblk37_sub_temp = cfblk37_1 - cfblk37_2;
  assign cfblk37_out1 = cfblk37_sub_temp[7:0];



  assign cfblk112_out1 = cfblk42_out1 + cfblk139_out1;



  assign dtc_out_8 = cfblk112_out1;



  assign cfblk48_out1 = dtc_out_8;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk48_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk69_out1 = cfblk142_out1 - cfblk81_out1;



  assign cfblk125_out1 = (cfblk60_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk120_out1 = cfblk125_out1 - cfblk151_out1;



  assign cfblk157_out1 = cfblk120_out1 - cfblk69_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk157_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  DotProduct_block3 u_cfblk145_inst (.in1(cfblk171_out1),  // uint8
                                     .in2(cfblk192_out1),  // uint8
                                     .out1(cfblk145_out1)  // uint8
                                     );

  assign cfblk38_out1 = (cfblk145_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk2_relop1 = cfblk38_out1 <= cfblk174_out1;



  DotProduct_block1 u_cfblk121_inst (.in1(cfblk4_out1),  // uint8
                                     .in2(cfblk41_out1),  // uint8
                                     .out1(cfblk121_out1)  // uint8
                                     );

  cfblk164 u_cfblk164 (.In1(cfblk121_out1),  // uint8
                       .Out1(cfblk164_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        cfblk190_reg[0] <= 8'b00000000;
        cfblk190_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk190_reg[0] <= cfblk190_reg_next[0];
          cfblk190_reg[1] <= cfblk190_reg_next[1];
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk164_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  assign cfblk99_1 = {24'b0, cfblk190_out1};
  assign cfblk99_2 = {31'b0, cfblk2_relop1};
  assign cfblk99_sub_temp = cfblk99_1 - cfblk99_2;
  assign cfblk99_out1 = cfblk99_sub_temp[7:0];



  assign cfblk78_out1 = (cfblk99_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk24_out1 = (cfblk78_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk141_out1 = cfblk24_out1 + cfblk141_const_val_1;



  DotProduct_block10 u_cfblk88_inst (.in1(cfblk141_out1),  // uint8
                                     .in2(cfblk6_out1),  // uint8
                                     .out1(cfblk88_out1)  // uint8
                                     );

  assign cfblk131_out1 = cfblk88_out1 + cfblk57_out1;



  assign cfblk81_out1 = cfblk146_out1 - cfblk131_out1;



  always @(cfblk81_out1, cfblk88_out1) begin
    cfblk8_div_temp = 9'b000000000;
    cfblk8_t_0_0 = 9'b000000000;
    if (cfblk88_out1 == 8'b00000000) begin
      cfblk8_out1 = 8'b11111111;
    end
    else begin
      cfblk8_t_0_0 = {1'b0, cfblk81_out1};
      cfblk8_div_temp = cfblk8_t_0_0 / cfblk88_out1;
      if (cfblk8_div_temp[8] != 1'b0) begin
        cfblk8_out1 = 8'b11111111;
      end
      else begin
        cfblk8_out1 = cfblk8_div_temp[7:0];
      end
    end
  end



  DotProduct_block7 u_cfblk42_inst (.in1(cfblk8_out1),  // uint8
                                    .in2(cfblk37_out1),  // uint8
                                    .out1(cfblk42_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        cfblk181_reg[0] <= 8'b00000000;
        cfblk181_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk181_reg[0] <= cfblk181_reg_next[0];
          cfblk181_reg[1] <= cfblk181_reg_next[1];
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk42_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  DotProduct_block9 u_cfblk60_inst (.in1(cfblk181_out1),  // uint8
                                    .in2(cfblk73_out1),  // uint8
                                    .out1(cfblk60_out1)  // uint8
                                    );

  assign cfblk122_out1 = cfblk111_out1 - cfblk60_out1;



  assign cfblk17_out1 = cfblk122_out1 - cfblk177_out1;



  assign cfblk129_out1 = cfblk17_out1 + cfblk3_out1;



  DotProduct_block11 u_cfblk89_inst (.in1(cfblk129_out1),  // uint8
                                     .in2(cfblk159_out1),  // uint8
                                     .out1(cfblk89_out1)  // uint8
                                     );

  always @(cfblk129_out1, cfblk89_out1) begin
    cfblk57_div_temp = 9'b000000000;
    cfblk57_t_0_0 = 9'b000000000;
    if (cfblk129_out1 == 8'b00000000) begin
      cfblk57_out1 = 8'b11111111;
    end
    else begin
      cfblk57_t_0_0 = {1'b0, cfblk89_out1};
      cfblk57_div_temp = cfblk57_t_0_0 / cfblk129_out1;
      if (cfblk57_div_temp[8] != 1'b0) begin
        cfblk57_out1 = 8'b11111111;
      end
      else begin
        cfblk57_out1 = cfblk57_div_temp[7:0];
      end
    end
  end



  DotProduct_block8 u_cfblk43_inst (.in1(cfblk45_out1),  // uint8
                                    .in2(cfblk57_out1),  // uint8
                                    .out1(cfblk43_out1)  // uint8
                                    );

  assign cfblk29_out1 = cfblk43_out1 + cfblk29_const_val_1;



  assign cfblk116_out1 = cfblk51_out1 - cfblk135_out1;



  assign cfblk15_out1 = cfblk116_out1 - cfblk25_out1;



  assign cfblk64_out1 = cfblk15_out1 + cfblk64_const_val_1;



  DotProduct u_cfblk103_inst (.in1(cfblk64_out1),  // uint8
                              .in2(cfblk29_out1),  // uint8
                              .out1(cfblk103_out1)  // uint8
                              );

  DotProduct_block u_cfblk117_inst (.in1(cfblk103_out1),  // uint8
                                    .in2(cfblk103_out1),  // uint8
                                    .out1(cfblk117_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        cfblk180_reg[0] <= 8'b00000000;
        cfblk180_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk180_reg[0] <= cfblk180_reg_next[0];
          cfblk180_reg[1] <= cfblk180_reg_next[1];
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk117_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  always @(cfblk180_out1, cfblk51_out1) begin
    cfblk152_div_temp = 9'b000000000;
    cfblk152_t_0_0 = 9'b000000000;
    if (cfblk180_out1 == 8'b00000000) begin
      cfblk152_out1 = 8'b11111111;
    end
    else begin
      cfblk152_t_0_0 = {1'b0, cfblk51_out1};
      cfblk152_div_temp = cfblk152_t_0_0 / cfblk180_out1;
      if (cfblk152_div_temp[8] != 1'b0) begin
        cfblk152_out1 = 8'b11111111;
      end
      else begin
        cfblk152_out1 = cfblk152_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk192_process
      if (reset == 1'b1) begin
        cfblk192_reg[0] <= 8'b00000000;
        cfblk192_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk192_reg[0] <= cfblk192_reg_next[0];
          cfblk192_reg[1] <= cfblk192_reg_next[1];
        end
      end
    end

  assign cfblk192_out1 = cfblk192_reg[1];
  assign cfblk192_reg_next[0] = cfblk152_out1;
  assign cfblk192_reg_next[1] = cfblk192_reg[0];



  assign cfblk91_out1 = cfblk41_out1 + cfblk91_const_val_1;



  assign cfblk83_out1 = cfblk91_out1 + cfblk192_out1;



  assign cfblk62_out1 = (cfblk83_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk138_out1 = cfblk62_out1 + cfblk191_out1;



  cfblk6 u_cfblk6 (.u(cfblk138_out1),  // uint8
                   .y(cfblk6_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_reg[0] <= 8'b00000000;
        cfblk186_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_reg[0] <= cfblk186_reg_next[0];
          cfblk186_reg[1] <= cfblk186_reg_next[1];
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk6_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  DotProduct_block6 u_cfblk41_inst (.in1(cfblk186_out1),  // uint8
                                    .in2(cfblk10_out1),  // uint8
                                    .out1(cfblk41_out1)  // uint8
                                    );

  assign cfblk113_out1 = cfblk124_out1 - cfblk3_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        cfblk184_reg[0] <= 8'b00000000;
        cfblk184_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk184_reg[0] <= cfblk184_reg_next[0];
          cfblk184_reg[1] <= cfblk184_reg_next[1];
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk113_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  DotProduct_block4 u_cfblk16_inst (.in1(cfblk159_out1),  // uint8
                                    .in2(cfblk39_out1),  // uint8
                                    .out1(cfblk16_out1)  // uint8
                                    );

  assign cfblk25_out1 = cfblk16_out1 + cfblk184_out1;



  assign cfblk74_out1 = cfblk25_out1 - cfblk41_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk74_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk1_out1 = cfblk170_out1[7:4];



  assign cfblk39_add_cast = {24'b0, {cfblk1_out1, 4'b0000}};
  assign cfblk39_1 = {24'b0, cfblk178_out1};
  assign cfblk39_add_temp = cfblk39_add_cast + cfblk39_1;
  assign cfblk39_out1 = cfblk39_add_temp[7:0];



  assign dtc_out_9 = cfblk39_out1;



  assign cfblk65_out1 = dtc_out_9;



  assign cfblk9_out1 = cfblk65_out1 + cfblk26_out1;



  assign cfblk151_out1 = cfblk9_out1 + cfblk134_out1;



  always @(cfblk151_out1, cfblk156_out1) begin
    cfblk154_div_temp = 9'b000000000;
    cfblk154_t_0_0 = 9'b000000000;
    if (cfblk156_out1 == 8'b00000000) begin
      cfblk154_out1 = 8'b11111111;
    end
    else begin
      cfblk154_t_0_0 = {1'b0, cfblk151_out1};
      cfblk154_div_temp = cfblk154_t_0_0 / cfblk156_out1;
      if (cfblk154_div_temp[8] != 1'b0) begin
        cfblk154_out1 = 8'b11111111;
      end
      else begin
        cfblk154_out1 = cfblk154_div_temp[7:0];
      end
    end
  end



  assign dtc_out_10 = cfblk154_out1;



  assign cfblk124_out1 = dtc_out_10;



  assign cfblk31_out1 = cfblk124_out1 + cfblk31_const_val_1;



  assign dtc_out_11 = cfblk31_out1;



  assign cfblk123_out1 = dtc_out_11;



  assign cfblk79_out1 = cfblk86_out1 + cfblk123_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        cfblk182_reg[0] <= 8'b00000000;
        cfblk182_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk182_reg[0] <= cfblk182_reg_next[0];
          cfblk182_reg[1] <= cfblk182_reg_next[1];
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk79_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  assign cfblk45_out1 = cfblk182_out1 + cfblk41_out1;



  assign cfblk97_out1 = cfblk45_out1 - cfblk82_out1;



  assign cfblk44_out1 = cfblk97_out1 + cfblk18_out1;



  DotProduct_block2 u_cfblk144_inst (.in1(cfblk44_out1),  // uint8
                                     .in2(cfblk48_out1),  // uint8
                                     .out1(cfblk144_out1)  // uint8
                                     );

  assign cfblk147_out1 = cfblk144_out1 - cfblk88_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk147_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk80_out1 = cfblk175_out1 + cfblk57_out1;



  always @(cfblk110_out1, cfblk80_out1) begin
    cfblk98_div_temp = 9'b000000000;
    cfblk98_t_0_0 = 9'b000000000;
    if (cfblk110_out1 == 8'b00000000) begin
      cfblk98_out1 = 8'b11111111;
    end
    else begin
      cfblk98_t_0_0 = {1'b0, cfblk80_out1};
      cfblk98_div_temp = cfblk98_t_0_0 / cfblk110_out1;
      if (cfblk98_div_temp[8] != 1'b0) begin
        cfblk98_out1 = 8'b11111111;
      end
      else begin
        cfblk98_out1 = cfblk98_div_temp[7:0];
      end
    end
  end



  assign cfblk96_out1 = (cfblk98_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk126_out1 = cfblk96_out1 - cfblk107_out1;



  assign cfblk139_out1 = cfblk126_out1 + cfblk43_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk139_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk52_out1 = cfblk173_out1 + cfblk130_out1;



  assign dtc_out_12 = cfblk52_out1;



  assign cfblk110_out1 = dtc_out_12;



  assign cfblk51_out1 = cfblk110_out1 + cfblk51_const_val_1;



  assign Hdl_out = cfblk51_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

