// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1677\sampleModel1677_sub\Subsystem.v
// Created: 2024-08-13 13:26:14
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk135                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1677_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk135,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk135;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk49_const_val_1;  // uint8
  wire [15:0] cfblk142_out1;  // uint16
  wire [15:0] cfblk113_const_val_1;  // uint16
  wire [15:0] cfblk113_out1;  // uint16
  wire [7:0] cfblk38_const_val_1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  reg [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk67_const_val_1;  // uint8
  wire [7:0] cfblk83_const_val_1;  // uint8
  wire [7:0] cfblk87_const_val_1;  // uint8
  wire [7:0] cfblk66_const_val_1;  // uint8
  wire [7:0] cfblk7_const_val_1;  // uint8
  wire [7:0] cfblk43_const_val_1;  // uint8
  wire [7:0] cfblk11_const_val_1;  // uint8
  wire [7:0] cfblk57_const_val_1;  // uint8
  wire [7:0] cfblk8_const_val_1;  // uint8
  wire [15:0] cfblk128_const_val_1;  // uint16
  wire [15:0] cfblk128_out1;  // uint16
  wire [15:0] cfblk101_const_val_1;  // uint16
  wire [15:0] cfblk101_out1;  // uint16
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  reg [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  reg [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk65_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  reg [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [3:0] cfblk2_out1;  // ufix4_E4
  wire [7:0] cfblk112_out1;  // uint8
  wire signed [31:0] cfblk30_sub_cast;  // sfix32
  wire signed [31:0] cfblk30_sub_temp;  // sfix32
  wire signed [31:0] cfblk30_1;  // sfix32
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk33_out1;  // uint8
  reg [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [31:0] cfblk133_add_temp;  // ufix32
  wire [31:0] cfblk133_1;  // ufix32
  wire [31:0] cfblk133_2;  // ufix32
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  reg [15:0] cfblk119_varargout_1;  // ufix16
  reg [15:0] cfblk119_div_temp;  // ufix16
  reg [8:0] cfblk81_div_temp;  // ufix9
  reg [8:0] cfblk81_t_0_0;  // ufix9
  reg [8:0] cfblk34_div_temp;  // ufix9
  reg [8:0] cfblk34_t_0_0;  // ufix9
  reg [8:0] cfblk16_div_temp;  // ufix9
  reg [8:0] cfblk16_t_0_0;  // ufix9
  reg [8:0] cfblk12_div_temp;  // ufix9
  reg [8:0] cfblk12_t_0_0;  // ufix9
  reg [8:0] cfblk55_div_temp;  // ufix9
  reg [8:0] cfblk55_t_0_0;  // ufix9
  reg [15:0] cfblk33_varargout_1;  // ufix16
  reg [15:0] cfblk33_div_temp;  // ufix16
  reg [8:0] cfblk115_div_temp;  // ufix9
  reg [8:0] cfblk115_t_0_0;  // ufix9
  reg [8:0] cfblk123_div_temp;  // ufix9
  reg [8:0] cfblk123_t_0_0;  // ufix9


  assign cfblk49_const_val_1 = 8'b00000000;



  assign enb = clk_enable;

  cfblk142 u_cfblk142 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk142_out1)  // uint16
                       );

  assign cfblk113_const_val_1 = 16'b0000000000000000;



  assign cfblk113_out1 = cfblk142_out1 + cfblk113_const_val_1;



  assign cfblk38_const_val_1 = 8'b00000000;



  assign cfblk141_out1 = 8'b00000001;



  always @(cfblk141_out1, cfblk142_out1) begin
    cfblk119_div_temp = 16'b0000000000000000;
    if (cfblk142_out1 == 16'b0000000000000000) begin
      cfblk119_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk119_div_temp = cfblk141_out1 / cfblk142_out1;
      cfblk119_varargout_1 = cfblk119_div_temp;
    end
    if (cfblk119_varargout_1[15:8] != 8'b00000000) begin
      cfblk119_out1 = 8'b11111111;
    end
    else begin
      cfblk119_out1 = cfblk119_varargout_1[7:0];
    end
  end



  assign cfblk67_const_val_1 = 8'b00000000;



  assign cfblk83_const_val_1 = 8'b00000000;



  assign cfblk87_const_val_1 = 8'b00000000;



  assign cfblk66_const_val_1 = 8'b00000000;



  assign cfblk7_const_val_1 = 8'b00000000;



  assign cfblk43_const_val_1 = 8'b00000000;



  assign cfblk11_const_val_1 = 8'b00000000;



  assign cfblk57_const_val_1 = 8'b00000000;



  assign cfblk8_const_val_1 = 8'b00000000;



  assign cfblk128_const_val_1 = 16'b0000000000000000;



  assign cfblk128_out1 = cfblk113_out1 + cfblk128_const_val_1;



  assign cfblk101_const_val_1 = 16'b0000000000000000;



  assign cfblk101_out1 = cfblk128_out1 + cfblk101_const_val_1;



  assign cfblk132_out1 = cfblk101_out1[7:0];



  always @(cfblk119_out1, cfblk132_out1) begin
    cfblk81_div_temp = 9'b000000000;
    cfblk81_t_0_0 = 9'b000000000;
    if (cfblk119_out1 == 8'b00000000) begin
      cfblk81_out1 = 8'b11111111;
    end
    else begin
      cfblk81_t_0_0 = {1'b0, cfblk132_out1};
      cfblk81_div_temp = cfblk81_t_0_0 / cfblk119_out1;
      if (cfblk81_div_temp[8] != 1'b0) begin
        cfblk81_out1 = 8'b11111111;
      end
      else begin
        cfblk81_out1 = cfblk81_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk47_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign dtc_out = cfblk21_out1;



  assign cfblk117_out1 = dtc_out;



  assign cfblk47_out1 = cfblk60_out1 - cfblk36_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk47_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  always @(cfblk3_out1, cfblk87_out1) begin
    cfblk34_div_temp = 9'b000000000;
    cfblk34_t_0_0 = 9'b000000000;
    if (cfblk3_out1 == 8'b00000000) begin
      cfblk34_out1 = 8'b11111111;
    end
    else begin
      cfblk34_t_0_0 = {1'b0, cfblk87_out1};
      cfblk34_div_temp = cfblk34_t_0_0 / cfblk3_out1;
      if (cfblk34_div_temp[8] != 1'b0) begin
        cfblk34_out1 = 8'b11111111;
      end
      else begin
        cfblk34_out1 = cfblk34_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk34_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk154_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  assign cfblk1_out1 = cfblk151_out1 | 8'b00000001;



  assign cfblk13_out1 = (cfblk1_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk19_out1 = cfblk119_out1 + cfblk13_out1;



  assign cfblk36_out1 = cfblk19_out1 + cfblk166_out1;



  assign cfblk57_out1 = cfblk102_out1 + cfblk57_const_val_1;



  assign cfblk8_out1 = cfblk57_out1 + cfblk8_const_val_1;



  assign cfblk43_out1 = cfblk12_out1 + cfblk43_const_val_1;



  assign cfblk11_out1 = cfblk43_out1 + cfblk11_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk11_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk111_out1 = cfblk171_out1 + cfblk8_out1;



  assign cfblk122_out1 = (cfblk69_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk78_out1 = cfblk52_out1 - cfblk84_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk78_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk21_out1 = cfblk16_out1 + cfblk52_out1;



  assign cfblk7_out1 = cfblk120_out1 + cfblk7_const_val_1;



  assign dtc_out_1 = cfblk7_out1;



  assign cfblk82_out1 = dtc_out_1;



  assign cfblk32_out1 = cfblk119_out1 - cfblk82_out1;



  assign cfblk76_out1 = cfblk32_out1 + cfblk73_out1;



  DotProduct_block u_cfblk60_inst (.in1(cfblk68_out1),  // uint8
                                   .in2(cfblk76_out1),  // uint8
                                   .out1(cfblk60_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk60_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  assign cfblk28_out1 = cfblk161_out1 - cfblk21_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk28_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  always @(cfblk164_out1, cfblk26_out1) begin
    cfblk16_div_temp = 9'b000000000;
    cfblk16_t_0_0 = 9'b000000000;
    if (cfblk164_out1 == 8'b00000000) begin
      cfblk16_out1 = 8'b11111111;
    end
    else begin
      cfblk16_t_0_0 = {1'b0, cfblk26_out1};
      cfblk16_div_temp = cfblk16_t_0_0 / cfblk164_out1;
      if (cfblk16_div_temp[8] != 1'b0) begin
        cfblk16_out1 = 8'b11111111;
      end
      else begin
        cfblk16_out1 = cfblk16_div_temp[7:0];
      end
    end
  end



  assign cfblk109_out1 = cfblk16_out1 - cfblk156_out1;



  assign dtc_out_2 = cfblk102_out1;



  assign cfblk26_out1 = dtc_out_2;



  assign cfblk87_out1 = cfblk105_out1 + cfblk87_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk12_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  assign cfblk35_out1 = cfblk38_out1 + cfblk38_out1;



  assign cfblk120_out1 = cfblk83_out1 + cfblk35_out1;



  assign cfblk56_out1 = (cfblk29_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk56_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk65_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(cfblk154_out1, cfblk155_out1) begin
    cfblk12_div_temp = 9'b000000000;
    cfblk12_t_0_0 = 9'b000000000;
    if (cfblk154_out1 == 8'b00000000) begin
      cfblk12_out1 = 8'b11111111;
    end
    else begin
      cfblk12_t_0_0 = {1'b0, cfblk155_out1};
      cfblk12_div_temp = cfblk12_t_0_0 / cfblk154_out1;
      if (cfblk12_div_temp[8] != 1'b0) begin
        cfblk12_out1 = 8'b11111111;
      end
      else begin
        cfblk12_out1 = cfblk12_div_temp[7:0];
      end
    end
  end



  assign cfblk130_out1 = cfblk12_out1 + cfblk120_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk106_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk52_out1 = (cfblk65_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk85_out1 = cfblk52_out1 + cfblk119_out1;



  assign cfblk22_out1 = cfblk85_out1 - cfblk48_out1;



  assign cfblk105_out1 = cfblk22_out1 + cfblk167_out1;



  assign cfblk67_out1 = cfblk105_out1 + cfblk67_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk67_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk104_out1 = cfblk165_out1 - cfblk130_out1;



  assign dtc_out_3 = cfblk104_out1;



  assign cfblk29_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk73_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  DotProduct_block1 u_cfblk69_inst (.in1(cfblk158_out1),  // uint8
                                    .in2(cfblk29_out1),  // uint8
                                    .out1(cfblk69_out1)  // uint8
                                    );

  assign cfblk84_out1 = (cfblk69_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk84_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  DotProduct u_cfblk48_inst (.in1(cfblk170_out1),  // uint8
                             .in2(cfblk124_out1),  // uint8
                             .out1(cfblk48_out1)  // uint8
                             );

  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk48_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  always @(cfblk153_out1, cfblk3_out1) begin
    cfblk55_div_temp = 9'b000000000;
    cfblk55_t_0_0 = 9'b000000000;
    if (cfblk153_out1 == 8'b00000000) begin
      cfblk55_out1 = 8'b11111111;
    end
    else begin
      cfblk55_t_0_0 = {1'b0, cfblk3_out1};
      cfblk55_div_temp = cfblk55_t_0_0 / cfblk153_out1;
      if (cfblk55_div_temp[8] != 1'b0) begin
        cfblk55_out1 = 8'b11111111;
      end
      else begin
        cfblk55_out1 = cfblk55_div_temp[7:0];
      end
    end
  end



  assign cfblk83_out1 = cfblk55_out1 + cfblk83_const_val_1;



  assign cfblk106_out1 = cfblk83_out1 + cfblk87_out1;



  assign cfblk66_out1 = cfblk106_out1 + cfblk66_const_val_1;



  assign cfblk88_out1 = cfblk66_out1 - cfblk26_out1;



  assign cfblk2_out1 = cfblk75_out1[7:4];



  assign cfblk30_sub_cast = {24'b0, {cfblk2_out1, 4'b0000}};
  assign cfblk30_1 = {24'b0, cfblk112_out1};
  assign cfblk30_sub_temp = cfblk30_1 - cfblk30_sub_cast;
  assign cfblk30_out1 = cfblk30_sub_temp[7:0];



  assign cfblk40_out1 = cfblk30_out1 - cfblk88_out1;



  assign cfblk86_out1 = cfblk40_out1 + cfblk109_out1;



  assign cfblk110_out1 = (cfblk86_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk110_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  DotProduct_block2 u_cfblk98_inst (.in1(cfblk169_out1),  // uint8
                                    .in2(cfblk122_out1),  // uint8
                                    .out1(cfblk98_out1)  // uint8
                                    );

  assign cfblk65_out1 = cfblk98_out1 + cfblk111_out1;



  assign dtc_out_4 = cfblk68_out1;



  assign cfblk24_out1 = dtc_out_4;



  assign cfblk38_out1 = cfblk24_out1 + cfblk38_const_val_1;



  cfblk143 u_cfblk143 (.In1(cfblk38_out1),  // uint8
                       .Out1(cfblk143_out1)  // uint8
                       );

  assign dtc_out_5 = cfblk143_out1;



  assign cfblk107_out1 = dtc_out_5;



  always @(cfblk113_out1, cfblk75_out1) begin
    cfblk33_div_temp = 16'b0000000000000000;
    if (cfblk113_out1 == 16'b0000000000000000) begin
      cfblk33_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk33_div_temp = cfblk75_out1 / cfblk113_out1;
      cfblk33_varargout_1 = cfblk33_div_temp;
    end
    if (cfblk33_varargout_1[15:8] != 8'b00000000) begin
      cfblk33_out1 = 8'b11111111;
    end
    else begin
      cfblk33_out1 = cfblk33_varargout_1[7:0];
    end
  end



  always @(cfblk107_out1, cfblk33_out1) begin
    cfblk115_div_temp = 9'b000000000;
    cfblk115_t_0_0 = 9'b000000000;
    if (cfblk107_out1 == 8'b00000000) begin
      cfblk115_out1 = 8'b11111111;
    end
    else begin
      cfblk115_t_0_0 = {1'b0, cfblk33_out1};
      cfblk115_div_temp = cfblk115_t_0_0 / cfblk107_out1;
      if (cfblk115_div_temp[8] != 1'b0) begin
        cfblk115_out1 = 8'b11111111;
      end
      else begin
        cfblk115_out1 = cfblk115_div_temp[7:0];
      end
    end
  end



  always @(cfblk115_out1, cfblk65_out1) begin
    cfblk123_div_temp = 9'b000000000;
    cfblk123_t_0_0 = 9'b000000000;
    if (cfblk65_out1 == 8'b00000000) begin
      cfblk123_out1 = 8'b11111111;
    end
    else begin
      cfblk123_t_0_0 = {1'b0, cfblk115_out1};
      cfblk123_div_temp = cfblk123_t_0_0 / cfblk65_out1;
      if (cfblk123_div_temp[8] != 1'b0) begin
        cfblk123_out1 = 8'b11111111;
      end
      else begin
        cfblk123_out1 = cfblk123_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk73_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  assign cfblk73_out1 = cfblk160_out1 - cfblk123_out1;



  assign cfblk93_out1 = (cfblk73_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk93_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk96_out1 = cfblk159_out1 + cfblk36_out1;



  assign dtc_out_6 = cfblk96_out1;



  assign cfblk90_out1 = dtc_out_6;



  assign cfblk74_out1 = cfblk90_out1 + cfblk163_out1;



  assign cfblk102_out1 = cfblk74_out1 + cfblk13_out1;



  assign cfblk114_out1 = (cfblk102_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk49_out1 = cfblk20_out1 + cfblk49_const_val_1;



  assign cfblk112_out1 = cfblk49_out1 + cfblk114_out1;



  assign cfblk133_1 = {24'b0, cfblk112_out1};
  assign cfblk133_2 = {16'b0, cfblk128_out1};
  assign cfblk133_add_temp = cfblk133_1 + cfblk133_2;
  assign cfblk133_out1 = cfblk133_add_temp[7:0];



  assign cfblk80_out1 = cfblk133_out1 + cfblk117_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk80_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk59_out1 = cfblk157_out1 - cfblk111_out1;



  assign cfblk44_out1 = cfblk59_out1 + cfblk162_out1;



  assign cfblk124_out1 = cfblk44_out1 + cfblk81_out1;



  assign dtc_out_7 = cfblk124_out1;



  assign cfblk75_out1 = dtc_out_7;



  assign cfblk20_out1 = (cfblk75_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk68_out1 = cfblk20_out1 + cfblk20_out1;



  DotProduct_block3 u_cfblk99_inst (.in1(cfblk68_out1),  // uint8
                                    .in2(cfblk117_out1),  // uint8
                                    .out1(cfblk99_out1)  // uint8
                                    );

  assign cfblk23_out1 = (cfblk99_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk135 = cfblk23_out1;

  assign Hdl_out = cfblk102_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

