// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1599\sampleModel1599_1_sub\Subsystem.v
// Created: 2024-08-13 01:55:32
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1599_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk76_const_val_1;  // uint8
  wire [7:0] cfblk41_const_val_1;  // uint8
  wire [7:0] cfblk51_const_val_1;  // uint8
  wire [7:0] cfblk92_const_val_1;  // uint8
  wire [7:0] cfblk6_const_val_1;  // uint8
  wire [7:0] cfblk49_const_val_1;  // uint8
  wire [7:0] bitMask_for_cfblk2;  // uint8
  wire [7:0] cfblk72_const_val_1;  // uint8
  wire [7:0] Mysubsystem_49_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk74_const_val_1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk101_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk28_out1;  // uint8
  wire [7:0] Mysubsystem_27_out1;  // uint8
  wire [7:0] Mysubsystem_11_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk173_out1;  // uint8
  reg [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk131_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9
  reg [8:0] cfblk91_div_temp;  // ufix9
  reg [8:0] cfblk91_t_0_0;  // ufix9
  reg [8:0] cfblk16_div_temp;  // ufix9
  reg [8:0] cfblk16_t_0_0;  // ufix9
  reg [8:0] cfblk28_div_temp;  // ufix9
  reg [8:0] cfblk28_t_0_0;  // ufix9
  reg [8:0] cfblk101_div_temp;  // ufix9
  reg [8:0] cfblk101_t_0_0;  // ufix9
  reg [8:0] cfblk109_div_temp;  // ufix9
  reg [8:0] cfblk109_t_0_0;  // ufix9
  reg [8:0] cfblk131_div_temp;  // ufix9
  reg [8:0] cfblk131_t_0_0;  // ufix9


  assign cfblk1_out1 = 8'b00000000;



  assign enb = clk_enable;

  cfblk145 u_cfblk145 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk145_out1)  // uint8
                       );

  assign cfblk76_const_val_1 = 8'b00000000;



  assign cfblk41_const_val_1 = 8'b00000000;



  assign cfblk51_const_val_1 = 8'b00000000;



  assign cfblk92_const_val_1 = 8'b00000000;



  assign cfblk6_const_val_1 = 8'b00000000;



  assign cfblk49_const_val_1 = 8'b00000000;



  assign bitMask_for_cfblk2 = 8'b11011001;



  assign cfblk72_const_val_1 = 8'b00000000;



  Mysubsystem_49 u_Mysubsystem_49 (.Out1(Mysubsystem_49_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk40_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk88_out1 = cfblk174_out1 + Mysubsystem_49_out1;



  assign cfblk40_out1 = (cfblk88_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk74_const_val_1 = 8'b00000000;



  cfblk146 u_cfblk146 (.In1(cfblk10_out1),  // uint8
                       .Out1(cfblk146_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk71_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk84_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk127_out1 = cfblk103_out1 - cfblk158_out1;



  DotProduct_block4 u_cfblk85_inst (.in1(cfblk27_out1),  // uint8
                                    .in2(cfblk136_out1),  // uint8
                                    .out1(cfblk85_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk85_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk96_out1 = cfblk172_out1 + cfblk127_out1;



  assign dtc_out = cfblk96_out1;



  assign cfblk104_out1 = dtc_out;



  assign cfblk112_out1 = Mysubsystem_49_out1 + cfblk104_out1;



  assign cfblk35_out1 = (cfblk112_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk11_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk78_out1 = cfblk163_out1 + cfblk35_out1;



  assign cfblk21_out1 = cfblk59_out1 + cfblk79_out1;



  assign cfblk139_out1 = cfblk21_out1 - cfblk72_out1;



  assign cfblk93_out1 = (cfblk139_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk149 u_cfblk149 (.In1(cfblk93_out1),  // uint8
                       .Out1(cfblk149_out1)  // uint8
                       );

  assign cfblk72_out1 = cfblk106_out1 + cfblk72_const_val_1;



  assign cfblk71_out1 = (cfblk72_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk105_out1 = cfblk71_out1 + cfblk10_out1;



  DotProduct_block3 u_cfblk77_inst (.in1(cfblk105_out1),  // uint8
                                    .in2(cfblk126_out1),  // uint8
                                    .out1(cfblk77_out1)  // uint8
                                    );

  always @(cfblk147_out1, cfblk33_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk147_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk33_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk147_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  cfblk152 u_cfblk152 (.In1(cfblk4_out1),  // uint8
                       .Out1(cfblk152_out1)  // uint8
                       );

  cfblk148 u_cfblk148 (.In1(cfblk152_out1),  // uint8
                       .Out1(cfblk148_out1)  // uint8
                       );

  assign cfblk55_out1 = cfblk148_out1 + cfblk49_out1;



  always @(cfblk44_out1, cfblk55_out1) begin
    cfblk91_div_temp = 9'b000000000;
    cfblk91_t_0_0 = 9'b000000000;
    if (cfblk44_out1 == 8'b00000000) begin
      cfblk91_out1 = 8'b11111111;
    end
    else begin
      cfblk91_t_0_0 = {1'b0, cfblk55_out1};
      cfblk91_div_temp = cfblk91_t_0_0 / cfblk44_out1;
      if (cfblk91_div_temp[8] != 1'b0) begin
        cfblk91_out1 = 8'b11111111;
      end
      else begin
        cfblk91_out1 = cfblk91_div_temp[7:0];
      end
    end
  end



  DotProduct_block5 u_cfblk97_inst (.in1(cfblk6_out1),  // uint8
                                    .in2(cfblk27_out1),  // uint8
                                    .out1(cfblk97_out1)  // uint8
                                    );

  assign cfblk49_out1 = cfblk113_out1 + cfblk49_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk69_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  always @(cfblk168_out1, cfblk30_out1) begin
    cfblk16_div_temp = 9'b000000000;
    cfblk16_t_0_0 = 9'b000000000;
    if (cfblk30_out1 == 8'b00000000) begin
      cfblk16_out1 = 8'b11111111;
    end
    else begin
      cfblk16_t_0_0 = {1'b0, cfblk168_out1};
      cfblk16_div_temp = cfblk16_t_0_0 / cfblk30_out1;
      if (cfblk16_div_temp[8] != 1'b0) begin
        cfblk16_out1 = 8'b11111111;
      end
      else begin
        cfblk16_out1 = cfblk16_div_temp[7:0];
      end
    end
  end



  assign cfblk51_out1 = cfblk82_out1 + cfblk51_const_val_1;



  assign dtc_out_1 = cfblk51_out1;



  assign cfblk84_out1 = dtc_out_1;



  assign cfblk111_out1 = cfblk73_out1 - cfblk84_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk111_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk86_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk69_out1 = (cfblk79_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk3 u_cfblk3 (.u(cfblk33_out1),  // uint8
                   .y(cfblk3_out1)  // uint8
                   );

  assign cfblk76_out1 = cfblk3_out1 + cfblk76_const_val_1;



  assign dtc_out_2 = cfblk76_out1;



  assign cfblk79_out1 = dtc_out_2;



  assign cfblk52_out1 = cfblk113_out1 + cfblk119_out1;



  assign dtc_out_3 = cfblk101_out1;



  assign cfblk10_out1 = dtc_out_3;



  assign cfblk130_out1 = cfblk66_out1 + cfblk10_out1;



  assign cfblk124_out1 = cfblk130_out1 + cfblk52_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk124_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk90_out1 = cfblk167_out1 + cfblk79_out1;



  assign cfblk41_out1 = cfblk90_out1 + cfblk41_const_val_1;



  assign cfblk65_out1 = cfblk41_out1 - cfblk69_out1;



  assign dtc_out_4 = cfblk65_out1;



  assign cfblk113_out1 = dtc_out_4;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk4_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk126_out1 = cfblk162_out1 + cfblk138_out1;



  assign cfblk86_out1 = cfblk126_out1 + cfblk113_out1;



  assign cfblk137_out1 = cfblk86_out1 - cfblk68_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk137_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk135_out1 = cfblk94_out1 + cfblk166_out1;



  assign cfblk136_out1 = cfblk135_out1 + cfblk165_out1;



  assign cfblk103_out1 = cfblk136_out1 - cfblk159_out1;



  assign cfblk4_out1 = cfblk75_out1 | 8'b00000001;



  DotProduct_block2 u_cfblk73_inst (.in1(cfblk4_out1),  // uint8
                                    .in2(cfblk145_out1),  // uint8
                                    .out1(cfblk73_out1)  // uint8
                                    );

  assign cfblk33_out1 = cfblk68_out1 - cfblk73_out1;



  assign cfblk106_out1 = cfblk33_out1 + cfblk103_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk106_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  DotProduct_block u_cfblk17_inst (.in1(cfblk169_out1),  // uint8
                                   .in2(cfblk16_out1),  // uint8
                                   .out1(cfblk17_out1)  // uint8
                                   );

  assign cfblk57_out1 = (cfblk17_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk92_out1 = cfblk57_out1 + cfblk92_const_val_1;



  assign cfblk94_out1 = (cfblk92_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk6_out1 = cfblk94_out1 + cfblk6_const_val_1;



  assign cfblk36_out1 = cfblk7_out1 - cfblk6_out1;



  always @(cfblk36_out1, cfblk49_out1) begin
    cfblk28_div_temp = 9'b000000000;
    cfblk28_t_0_0 = 9'b000000000;
    if (cfblk49_out1 == 8'b00000000) begin
      cfblk28_out1 = 8'b11111111;
    end
    else begin
      cfblk28_t_0_0 = {1'b0, cfblk36_out1};
      cfblk28_div_temp = cfblk28_t_0_0 / cfblk49_out1;
      if (cfblk28_div_temp[8] != 1'b0) begin
        cfblk28_out1 = 8'b11111111;
      end
      else begin
        cfblk28_out1 = cfblk28_div_temp[7:0];
      end
    end
  end



  Mysubsystem_27 u_Mysubsystem_27 (.In1(cfblk28_out1),  // uint8
                                   .In2(cfblk33_out1),  // uint8
                                   .Out1(Mysubsystem_27_out1)  // uint8
                                   );

  Mysubsystem_11 u_Mysubsystem_11 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(Mysubsystem_27_out1),  // uint8
                                   .Out1(Mysubsystem_11_out1)  // uint8
                                   );

  assign cfblk30_out1 = cfblk61_out1 + Mysubsystem_11_out1;



  DotProduct u_cfblk138_inst (.in1(cfblk30_out1),  // uint8
                              .in2(cfblk97_out1),  // uint8
                              .out1(cfblk138_out1)  // uint8
                              );

  assign cfblk18_out1 = cfblk138_out1 - cfblk91_out1;



  assign cfblk82_out1 = cfblk39_out1 - cfblk18_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk82_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  assign cfblk29_out1 = (cfblk66_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk147 u_cfblk147 (.In1(cfblk29_out1),  // uint8
                       .Out1(cfblk147_out1)  // uint8
                       );

  assign cfblk25_out1 = cfblk147_out1 + cfblk160_out1;



  assign dtc_out_5 = cfblk25_out1;



  assign cfblk61_out1 = dtc_out_5;



  always @(cfblk61_out1, cfblk74_out1) begin
    cfblk101_div_temp = 9'b000000000;
    cfblk101_t_0_0 = 9'b000000000;
    if (cfblk61_out1 == 8'b00000000) begin
      cfblk101_out1 = 8'b11111111;
    end
    else begin
      cfblk101_t_0_0 = {1'b0, cfblk74_out1};
      cfblk101_div_temp = cfblk101_t_0_0 / cfblk61_out1;
      if (cfblk101_div_temp[8] != 1'b0) begin
        cfblk101_out1 = 8'b11111111;
      end
      else begin
        cfblk101_out1 = cfblk101_div_temp[7:0];
      end
    end
  end



  assign cfblk2_out1 = cfblk101_out1 & bitMask_for_cfblk2;



  DotProduct_block1 u_cfblk39_inst (.in1(cfblk2_out1),  // uint8
                                    .in2(cfblk77_out1),  // uint8
                                    .out1(cfblk39_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk75_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk59_out1 = cfblk27_out1 - cfblk171_out1;



  assign dtc_out_6 = cfblk59_out1;



  assign cfblk75_out1 = dtc_out_6;



  assign dtc_out_7 = cfblk27_out1;



  assign cfblk43_out1 = dtc_out_7;



  assign cfblk7_out1 = cfblk43_out1 + cfblk75_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk7_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  assign cfblk66_out1 = cfblk1_out1 + cfblk155_out1;



  assign cfblk68_out1 = (cfblk66_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk11_out1 = cfblk68_out1 + cfblk39_out1;



  assign cfblk47_out1 = cfblk11_out1 + cfblk40_out1;



  assign cfblk56_out1 = cfblk47_out1 + cfblk149_out1;



  assign dtc_out_8 = cfblk56_out1;



  assign cfblk42_out1 = dtc_out_8;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk42_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  assign cfblk108_out1 = cfblk161_out1 - cfblk78_out1;



  assign cfblk119_out1 = cfblk108_out1 - cfblk61_out1;



  always @(cfblk119_out1, cfblk173_out1) begin
    cfblk109_div_temp = 9'b000000000;
    cfblk109_t_0_0 = 9'b000000000;
    if (cfblk119_out1 == 8'b00000000) begin
      cfblk109_out1 = 8'b11111111;
    end
    else begin
      cfblk109_t_0_0 = {1'b0, cfblk173_out1};
      cfblk109_div_temp = cfblk109_t_0_0 / cfblk119_out1;
      if (cfblk109_div_temp[8] != 1'b0) begin
        cfblk109_out1 = 8'b11111111;
      end
      else begin
        cfblk109_out1 = cfblk109_div_temp[7:0];
      end
    end
  end



  assign cfblk83_out1 = cfblk109_out1 + cfblk170_out1;



  assign cfblk74_out1 = cfblk83_out1 + cfblk74_const_val_1;



  assign cfblk123_out1 = (cfblk74_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk151 u_cfblk151 (.In1(cfblk123_out1),  // uint8
                       .Out1(cfblk151_out1)  // uint8
                       );

  assign cfblk107_out1 = (cfblk151_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk27_out1 = (cfblk107_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk87_out1 = cfblk1_out1 + cfblk27_out1;



  always @(cfblk146_out1, cfblk87_out1) begin
    cfblk131_div_temp = 9'b000000000;
    cfblk131_t_0_0 = 9'b000000000;
    if (cfblk146_out1 == 8'b00000000) begin
      cfblk131_out1 = 8'b11111111;
    end
    else begin
      cfblk131_t_0_0 = {1'b0, cfblk87_out1};
      cfblk131_div_temp = cfblk131_t_0_0 / cfblk146_out1;
      if (cfblk131_div_temp[8] != 1'b0) begin
        cfblk131_out1 = 8'b11111111;
      end
      else begin
        cfblk131_out1 = cfblk131_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk131_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign Hdl_out = cfblk173_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

