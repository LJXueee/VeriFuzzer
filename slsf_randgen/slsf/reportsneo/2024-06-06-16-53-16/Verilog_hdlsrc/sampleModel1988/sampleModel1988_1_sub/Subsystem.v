// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1988\sampleModel1988_1_sub\Subsystem.v
// Created: 2024-08-16 08:26:59
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1988_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk114_const_val_1;  // uint8
  wire [7:0] cfblk83_const_val_1;  // uint8
  wire [7:0] cfblk119_const_val_1;  // uint8
  wire [7:0] cfblk92_const_val_1;  // uint8
  wire [7:0] cfblk79_const_val_1;  // uint8
  wire [7:0] cfblk107_const_val_1;  // uint8
  wire [15:0] Mysubsystem_41_out1;  // uint16
  wire [15:0] cfblk102_const_val_1;  // uint16
  wire [15:0] cfblk102_out1;  // uint16
  wire [7:0] cfblk86_const_val_1;  // uint8
  wire [7:0] cfblk112_const_val_1;  // uint8
  wire [7:0] cfblk93_const_val_1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  reg [7:0] cfblk140_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk137_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [31:0] cfblk70_add_temp;  // ufix32
  wire [31:0] cfblk70_1;  // ufix32
  wire [31:0] cfblk70_2;  // ufix32
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk133_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk133_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  reg [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  reg [7:0] cfblk135_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk100_out1;  // uint8
  reg [7:0] cfblk139_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk139_out1;  // uint8
  reg [7:0] cfblk141_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk22_out1;  // uint8
  wire Mysubsystem_12_out2;
  wire [31:0] cfblk115_add_temp;  // ufix32
  wire [31:0] cfblk115_1;  // ufix32
  wire [31:0] cfblk115_2;  // ufix32
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  reg [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire Mysubsystem_12_out1;
  wire signed [31:0] cfblk103_sub_temp;  // sfix32
  wire signed [31:0] cfblk103_1;  // sfix32
  wire signed [31:0] cfblk103_2;  // sfix32
  reg [7:0] cfblk138_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] cfblk65_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [8:0] cfblk56_div_temp;  // ufix9
  reg [8:0] cfblk56_t_0_0;  // ufix9
  reg [8:0] cfblk46_div_temp;  // ufix9
  reg [8:0] cfblk46_t_0_0;  // ufix9
  reg [8:0] cfblk100_div_temp;  // ufix9
  reg [8:0] cfblk100_t_0_0;  // ufix9
  reg [8:0] cfblk36_div_temp;  // ufix9
  reg [8:0] cfblk36_t_0_0;  // ufix9
  reg [8:0] cfblk11_div_temp;  // ufix9
  reg [8:0] cfblk11_t_0_0;  // ufix9
  reg [8:0] cfblk28_div_temp;  // ufix9
  reg [8:0] cfblk28_t_0_0;  // ufix9
  reg [8:0] cfblk65_div_temp;  // ufix9
  reg [8:0] cfblk65_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk114_const_val_1 = 8'b00000000;



  assign cfblk83_const_val_1 = 8'b00000000;



  assign cfblk119_const_val_1 = 8'b00000000;



  assign cfblk92_const_val_1 = 8'b00000000;



  assign cfblk79_const_val_1 = 8'b00000000;



  assign cfblk107_const_val_1 = 8'b00000000;



  Mysubsystem_41 u_Mysubsystem_41 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_41_out1)  // uint16
                                   );

  assign cfblk102_const_val_1 = 16'b0000000000000000;



  assign cfblk102_out1 = Mysubsystem_41_out1 + cfblk102_const_val_1;



  assign cfblk86_const_val_1 = 8'b00000000;



  assign cfblk112_const_val_1 = 8'b00000000;



  assign cfblk93_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk140_process
      if (reset == 1'b1) begin
        cfblk140_reg[0] <= 8'b00000000;
        cfblk140_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk140_reg[0] <= cfblk140_reg_next[0];
          cfblk140_reg[1] <= cfblk140_reg_next[1];
        end
      end
    end

  assign cfblk140_out1 = cfblk140_reg[1];
  assign cfblk140_reg_next[0] = cfblk127_out1;
  assign cfblk140_reg_next[1] = cfblk140_reg[0];



  assign cfblk59_out1 = cfblk4_out1 + cfblk96_out1;



  assign cfblk121_out1 = cfblk78_out1 + cfblk5_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk137_process
      if (reset == 1'b1) begin
        cfblk137_reg[0] <= 8'b00000000;
        cfblk137_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk137_reg[0] <= cfblk137_reg_next[0];
          cfblk137_reg[1] <= cfblk137_reg_next[1];
        end
      end
    end

  assign cfblk137_out1 = cfblk137_reg[1];
  assign cfblk137_reg_next[0] = cfblk71_out1;
  assign cfblk137_reg_next[1] = cfblk137_reg[0];



  DotProduct_block3 u_cfblk71_inst (.in1(cfblk41_out1),  // uint8
                                    .in2(cfblk82_out1),  // uint8
                                    .out1(cfblk71_out1)  // uint8
                                    );

  assign cfblk24_out1 = cfblk71_out1 - cfblk78_out1;



  DotProduct_block8 u_cfblk84_inst (.in1(cfblk89_out1),  // uint8
                                    .in2(cfblk99_out1),  // uint8
                                    .out1(cfblk84_out1)  // uint8
                                    );

  assign cfblk47_out1 = cfblk84_out1 + cfblk8_out1;



  assign cfblk70_1 = {16'b0, cfblk102_out1};
  assign cfblk70_2 = {24'b0, cfblk89_out1};
  assign cfblk70_add_temp = cfblk70_1 + cfblk70_2;
  assign cfblk70_out1 = cfblk70_add_temp[7:0];



  assign cfblk107_out1 = cfblk82_out1 + cfblk107_const_val_1;



  assign dtc_out = cfblk107_out1;



  assign cfblk87_out1 = dtc_out;



  assign dtc_out_1 = cfblk19_out1;



  assign cfblk41_out1 = dtc_out_1;



  DotProduct_block1 u_cfblk37_inst (.in1(cfblk69_out1),  // uint8
                                    .in2(cfblk41_out1),  // uint8
                                    .out1(cfblk37_out1)  // uint8
                                    );

  cfblk4 u_cfblk4 (.u(cfblk37_out1),  // uint8
                   .y(cfblk4_out1)  // uint8
                   );

  assign cfblk3_out1 = cfblk5_out1 | 8'b00000001;



  cfblk127 u_cfblk127 (.In1(cfblk3_out1),  // uint8
                       .Out1(cfblk127_out1)  // uint8
                       );

  always @(cfblk127_out1, cfblk53_out1) begin
    cfblk56_div_temp = 9'b000000000;
    cfblk56_t_0_0 = 9'b000000000;
    if (cfblk127_out1 == 8'b00000000) begin
      cfblk56_out1 = 8'b11111111;
    end
    else begin
      cfblk56_t_0_0 = {1'b0, cfblk53_out1};
      cfblk56_div_temp = cfblk56_t_0_0 / cfblk127_out1;
      if (cfblk56_div_temp[8] != 1'b0) begin
        cfblk56_out1 = 8'b11111111;
      end
      else begin
        cfblk56_out1 = cfblk56_div_temp[7:0];
      end
    end
  end



  DotProduct u_cfblk113_inst (.in1(cfblk56_out1),  // uint8
                              .in2(cfblk97_out1),  // uint8
                              .out1(cfblk113_out1)  // uint8
                              );

  assign cfblk79_out1 = cfblk113_out1 + cfblk79_const_val_1;



  assign cfblk80_out1 = cfblk79_out1 - cfblk4_out1;



  assign cfblk30_out1 = (cfblk80_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk75_out1 = cfblk82_out1 + cfblk30_out1;



  assign dtc_out_2 = cfblk75_out1;



  assign cfblk57_out1 = dtc_out_2;



  DotProduct_block5 u_cfblk8_inst (.in1(cfblk93_out1),  // uint8
                                   .in2(cfblk78_out1),  // uint8
                                   .out1(cfblk8_out1)  // uint8
                                   );

  assign cfblk42_out1 = cfblk8_out1 + cfblk57_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk133_process
      if (reset == 1'b1) begin
        cfblk133_reg[0] <= 8'b00000000;
        cfblk133_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk133_reg[0] <= cfblk133_reg_next[0];
          cfblk133_reg[1] <= cfblk133_reg_next[1];
        end
      end
    end

  assign cfblk133_out1 = cfblk133_reg[1];
  assign cfblk133_reg_next[0] = cfblk42_out1;
  assign cfblk133_reg_next[1] = cfblk133_reg[0];



  assign cfblk53_out1 = cfblk114_out1 + cfblk108_out1;



  DotProduct_block7 u_cfblk82_inst (.in1(cfblk13_out1),  // uint8
                                    .in2(cfblk53_out1),  // uint8
                                    .out1(cfblk82_out1)  // uint8
                                    );

  always @(cfblk133_out1, cfblk82_out1) begin
    cfblk46_div_temp = 9'b000000000;
    cfblk46_t_0_0 = 9'b000000000;
    if (cfblk133_out1 == 8'b00000000) begin
      cfblk46_out1 = 8'b11111111;
    end
    else begin
      cfblk46_t_0_0 = {1'b0, cfblk82_out1};
      cfblk46_div_temp = cfblk46_t_0_0 / cfblk133_out1;
      if (cfblk46_div_temp[8] != 1'b0) begin
        cfblk46_out1 = 8'b11111111;
      end
      else begin
        cfblk46_out1 = cfblk46_div_temp[7:0];
      end
    end
  end



  assign cfblk97_out1 = cfblk46_out1 - cfblk96_out1;



  assign cfblk27_out1 = cfblk97_out1 - cfblk87_out1;



  assign cfblk63_out1 = cfblk27_out1 + cfblk70_out1;



  cfblk129 u_cfblk129 (.In1(cfblk63_out1),  // uint8
                       .Out1(cfblk129_out1)  // uint8
                       );

  DotProduct_block6 u_cfblk81_inst (.in1(cfblk129_out1),  // uint8
                                    .in2(cfblk47_out1),  // uint8
                                    .out1(cfblk81_out1)  // uint8
                                    );

  assign cfblk19_out1 = (cfblk81_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk86_out1 = cfblk19_out1 + cfblk86_const_val_1;



  assign cfblk72_out1 = cfblk86_out1 - cfblk24_out1;



  cfblk128 u_cfblk128 (.In1(cfblk72_out1),  // uint8
                       .Out1(cfblk128_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk135_process
      if (reset == 1'b1) begin
        cfblk135_reg[0] <= 8'b00000000;
        cfblk135_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk135_reg[0] <= cfblk135_reg_next[0];
          cfblk135_reg[1] <= cfblk135_reg_next[1];
        end
      end
    end

  assign cfblk135_out1 = cfblk135_reg[1];
  assign cfblk135_reg_next[0] = cfblk128_out1;
  assign cfblk135_reg_next[1] = cfblk135_reg[0];



  assign cfblk92_out1 = cfblk78_out1 + cfblk92_const_val_1;



  always @(cfblk92_out1) begin
    cfblk100_div_temp = 9'b000000000;
    cfblk100_t_0_0 = 9'b000000000;
    if (cfblk92_out1 == 8'b00000000) begin
      cfblk100_out1 = 8'b11111111;
    end
    else begin
      cfblk100_t_0_0 = {1'b0, cfblk92_out1};
      cfblk100_div_temp = cfblk100_t_0_0 / cfblk92_out1;
      if (cfblk100_div_temp[8] != 1'b0) begin
        cfblk100_out1 = 8'b11111111;
      end
      else begin
        cfblk100_out1 = cfblk100_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk139_process
      if (reset == 1'b1) begin
        cfblk139_reg[0] <= 8'b00000000;
        cfblk139_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk139_reg[0] <= cfblk139_reg_next[0];
          cfblk139_reg[1] <= cfblk139_reg_next[1];
        end
      end
    end

  assign cfblk139_out1 = cfblk139_reg[1];
  assign cfblk139_reg_next[0] = cfblk5_out1;
  assign cfblk139_reg_next[1] = cfblk139_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk141_process
      if (reset == 1'b1) begin
        cfblk141_reg[0] <= 8'b00000000;
        cfblk141_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk141_reg[0] <= cfblk141_reg_next[0];
          cfblk141_reg[1] <= cfblk141_reg_next[1];
        end
      end
    end

  assign cfblk141_out1 = cfblk141_reg[1];
  assign cfblk141_reg_next[0] = cfblk108_out1;
  assign cfblk141_reg_next[1] = cfblk141_reg[0];



  assign cfblk89_out1 = cfblk141_out1 + cfblk6_out1;



  assign dtc_out_3 = cfblk89_out1;



  assign cfblk22_out1 = dtc_out_3;



  assign cfblk108_out1 = (cfblk22_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk114_out1 = cfblk108_out1 + cfblk114_const_val_1;



  assign cfblk115_1 = {24'b0, cfblk114_out1};
  assign cfblk115_2 = {31'b0, Mysubsystem_12_out2};
  assign cfblk115_add_temp = cfblk115_1 + cfblk115_2;
  assign cfblk115_out1 = cfblk115_add_temp[7:0];



  assign cfblk99_out1 = (cfblk115_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk139_out1, cfblk99_out1) begin
    cfblk36_div_temp = 9'b000000000;
    cfblk36_t_0_0 = 9'b000000000;
    if (cfblk139_out1 == 8'b00000000) begin
      cfblk36_out1 = 8'b11111111;
    end
    else begin
      cfblk36_t_0_0 = {1'b0, cfblk99_out1};
      cfblk36_div_temp = cfblk36_t_0_0 / cfblk139_out1;
      if (cfblk36_div_temp[8] != 1'b0) begin
        cfblk36_out1 = 8'b11111111;
      end
      else begin
        cfblk36_out1 = cfblk36_div_temp[7:0];
      end
    end
  end



  assign cfblk83_out1 = cfblk36_out1 + cfblk83_const_val_1;



  assign dtc_out_4 = cfblk83_out1;



  assign cfblk91_out1 = dtc_out_4;



  assign cfblk78_out1 = (cfblk91_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk78_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  DotProduct_block4 u_cfblk77_inst (.in1(cfblk5_out1),  // uint8
                                    .in2(cfblk78_out1),  // uint8
                                    .out1(cfblk77_out1)  // uint8
                                    );

  assign cfblk69_out1 = (cfblk77_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk25_out1 = cfblk69_out1 + cfblk103_out1;



  assign cfblk96_out1 = (cfblk25_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk119_out1 = cfblk96_out1 + cfblk119_const_val_1;



  always @(cfblk100_out1, cfblk119_out1) begin
    cfblk11_div_temp = 9'b000000000;
    cfblk11_t_0_0 = 9'b000000000;
    if (cfblk100_out1 == 8'b00000000) begin
      cfblk11_out1 = 8'b11111111;
    end
    else begin
      cfblk11_t_0_0 = {1'b0, cfblk119_out1};
      cfblk11_div_temp = cfblk11_t_0_0 / cfblk100_out1;
      if (cfblk11_div_temp[8] != 1'b0) begin
        cfblk11_out1 = 8'b11111111;
      end
      else begin
        cfblk11_out1 = cfblk11_div_temp[7:0];
      end
    end
  end



  assign dtc_out_5 = cfblk98_out1;



  assign cfblk49_out1 = dtc_out_5;



  assign cfblk15_out1 = (cfblk49_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block2 u_cfblk52_inst (.in1(cfblk15_out1),  // uint8
                                    .in2(cfblk11_out1),  // uint8
                                    .out1(cfblk52_out1)  // uint8
                                    );

  assign cfblk101_out1 = cfblk52_out1 + cfblk135_out1;



  always @(cfblk101_out1, cfblk137_out1) begin
    cfblk28_div_temp = 9'b000000000;
    cfblk28_t_0_0 = 9'b000000000;
    if (cfblk137_out1 == 8'b00000000) begin
      cfblk28_out1 = 8'b11111111;
    end
    else begin
      cfblk28_t_0_0 = {1'b0, cfblk101_out1};
      cfblk28_div_temp = cfblk28_t_0_0 / cfblk137_out1;
      if (cfblk28_div_temp[8] != 1'b0) begin
        cfblk28_out1 = 8'b11111111;
      end
      else begin
        cfblk28_out1 = cfblk28_div_temp[7:0];
      end
    end
  end



  assign cfblk13_out1 = cfblk28_out1 - cfblk121_out1;



  assign cfblk112_out1 = cfblk13_out1 + cfblk112_const_val_1;



  assign cfblk35_out1 = cfblk112_out1 - cfblk59_out1;



  Mysubsystem_12 u_Mysubsystem_12 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk35_out1),  // uint8
                                   .In2(cfblk41_out1),  // uint8
                                   .Y(Mysubsystem_12_out1),
                                   .Y1(Mysubsystem_12_out2)
                                   );

  assign cfblk103_1 = {31'b0, Mysubsystem_12_out1};
  assign cfblk103_2 = {24'b0, cfblk140_out1};
  assign cfblk103_sub_temp = cfblk103_1 - cfblk103_2;
  assign cfblk103_out1 = cfblk103_sub_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk138_process
      if (reset == 1'b1) begin
        cfblk138_reg[0] <= 8'b00000000;
        cfblk138_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk138_reg[0] <= cfblk138_reg_next[0];
          cfblk138_reg[1] <= cfblk138_reg_next[1];
        end
      end
    end

  assign cfblk138_out1 = cfblk138_reg[1];
  assign cfblk138_reg_next[0] = cfblk98_out1;
  assign cfblk138_reg_next[1] = cfblk138_reg[0];



  DotProduct_block u_cfblk123_inst (.in1(cfblk138_out1),  // uint8
                                    .in2(cfblk103_out1),  // uint8
                                    .out1(cfblk123_out1)  // uint8
                                    );

  cfblk6 u_cfblk6 (.u(cfblk123_out1),  // uint8
                   .y(cfblk6_out1)  // uint8
                   );

  assign cfblk93_out1 = cfblk6_out1 + cfblk93_const_val_1;



  always @(cfblk47_out1, cfblk93_out1) begin
    cfblk65_div_temp = 9'b000000000;
    cfblk65_t_0_0 = 9'b000000000;
    if (cfblk47_out1 == 8'b00000000) begin
      cfblk65_out1 = 8'b11111111;
    end
    else begin
      cfblk65_t_0_0 = {1'b0, cfblk93_out1};
      cfblk65_div_temp = cfblk65_t_0_0 / cfblk47_out1;
      if (cfblk65_div_temp[8] != 1'b0) begin
        cfblk65_out1 = 8'b11111111;
      end
      else begin
        cfblk65_out1 = cfblk65_div_temp[7:0];
      end
    end
  end



  assign dtc_out_6 = cfblk65_out1;



  assign cfblk98_out1 = dtc_out_6;



  assign Hdl_out = cfblk98_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

