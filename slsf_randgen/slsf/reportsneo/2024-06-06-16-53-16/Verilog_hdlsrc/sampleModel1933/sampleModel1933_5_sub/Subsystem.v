// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1933\sampleModel1933_5_sub\Subsystem.v
// Created: 2024-08-15 17:11:37
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1933_5_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] Mysubsystem_13_out1;  // uint8
  wire [7:0] cfblk55_const_val_1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk56_const_val_1;  // uint8
  wire [7:0] cfblk95_const_val_1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [15:0] cfblk138_out1;  // uint16
  wire [7:0] cfblk97_const_val_1;  // uint8
  wire [7:0] cfblk29_const_val_1;  // uint8
  wire [7:0] cfblk39_const_val_1;  // uint8
  wire [7:0] cfblk85_const_val_1;  // uint8
  wire [7:0] cfblk22_const_val_1;  // uint8
  wire [7:0] cfblk23_const_val_1;  // uint8
  wire [7:0] cfblk7_const_val_1;  // uint8
  wire [7:0] cfblk107_const_val_1;  // uint8
  wire [7:0] cfblk131_const_val_1;  // uint8
  wire [7:0] cfblk82_const_val_1;  // uint8
  wire [7:0] cfblk44_const_val_1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] Mysubsystem_28_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  reg [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  reg [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk151_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  reg [7:0] cfblk152_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk152_out1;  // uint8
  reg [7:0] cfblk70_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] cfblk150_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] Mysubsystem_14_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  reg [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  reg [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk109_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  reg [7:0] cfblk89_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [8:0] cfblk99_div_temp;  // ufix9
  reg [8:0] cfblk99_t_0_0;  // ufix9
  reg [8:0] cfblk38_div_temp;  // ufix9
  reg [8:0] cfblk38_t_0_0;  // ufix9
  reg [8:0] cfblk14_div_temp;  // ufix9
  reg [8:0] cfblk14_t_0_0;  // ufix9
  reg [8:0] cfblk66_div_temp;  // ufix9
  reg [8:0] cfblk66_t_0_0;  // ufix9
  reg [15:0] cfblk126_varargout_1;  // ufix16
  reg [16:0] cfblk126_div_temp;  // ufix17
  reg [16:0] cfblk126_t_0_0;  // ufix17
  reg [8:0] cfblk105_div_temp;  // ufix9
  reg [8:0] cfblk105_t_0_0;  // ufix9
  reg [8:0] cfblk70_div_temp;  // ufix9
  reg [8:0] cfblk70_t_0_0;  // ufix9
  reg [8:0] cfblk49_div_temp;  // ufix9
  reg [8:0] cfblk49_t_0_0;  // ufix9
  reg [8:0] cfblk89_div_temp;  // ufix9
  reg [8:0] cfblk89_t_0_0;  // ufix9
  reg [8:0] cfblk117_div_temp;  // ufix9
  reg [8:0] cfblk117_t_0_0;  // ufix9
  reg [8:0] cfblk54_div_temp;  // ufix9
  reg [8:0] cfblk54_t_0_0;  // ufix9


  cfblk142 u_cfblk142 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk142_out1)  // uint8
                       );

  assign enb = clk_enable;

  Mysubsystem_13 u_Mysubsystem_13 (.Out1(Mysubsystem_13_out1)  // uint8
                                   );

  assign cfblk55_const_val_1 = 8'b00000000;



  assign cfblk140_out1 = 8'b00000001;



  cfblk145 u_cfblk145 (.In1(cfblk140_out1),  // uint8
                       .Out1(cfblk145_out1)  // uint8
                       );

  assign cfblk56_const_val_1 = 8'b00000000;



  assign cfblk95_const_val_1 = 8'b00000000;



  cfblk139 u_cfblk139 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk139_out1)  // uint8
                       );

  cfblk138 u_cfblk138 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk138_out1)  // uint16
                       );

  assign cfblk97_const_val_1 = 8'b00000000;



  assign cfblk29_const_val_1 = 8'b00000000;



  assign cfblk39_const_val_1 = 8'b00000000;



  assign cfblk85_const_val_1 = 8'b00000000;



  assign cfblk22_const_val_1 = 8'b00000000;



  assign cfblk23_const_val_1 = 8'b00000000;



  assign cfblk7_const_val_1 = 8'b00000000;



  assign cfblk107_const_val_1 = 8'b00000000;



  assign cfblk131_const_val_1 = 8'b00000000;



  assign cfblk82_const_val_1 = 8'b00000000;



  assign cfblk44_const_val_1 = 8'b00000000;



  Mysubsystem_28 u_Mysubsystem_28 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .In1(cfblk68_out1),  // uint8
                                   .Out1(Mysubsystem_28_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk88_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk88_out1 = cfblk63_out1 + cfblk165_out1;



  assign cfblk37_out1 = (cfblk88_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk74_out1 = cfblk37_out1 - cfblk5_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk74_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  assign cfblk5_out1 = cfblk65_out1 - cfblk97_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk5_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  always @(cfblk14_out1, cfblk154_out1) begin
    cfblk99_div_temp = 9'b000000000;
    cfblk99_t_0_0 = 9'b000000000;
    if (cfblk154_out1 == 8'b00000000) begin
      cfblk99_out1 = 8'b11111111;
    end
    else begin
      cfblk99_t_0_0 = {1'b0, cfblk14_out1};
      cfblk99_div_temp = cfblk99_t_0_0 / cfblk154_out1;
      if (cfblk99_div_temp[8] != 1'b0) begin
        cfblk99_out1 = 8'b11111111;
      end
      else begin
        cfblk99_out1 = cfblk99_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk53_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(cfblk160_out1, cfblk99_out1) begin
    cfblk38_div_temp = 9'b000000000;
    cfblk38_t_0_0 = 9'b000000000;
    if (cfblk99_out1 == 8'b00000000) begin
      cfblk38_out1 = 8'b11111111;
    end
    else begin
      cfblk38_t_0_0 = {1'b0, cfblk160_out1};
      cfblk38_div_temp = cfblk38_t_0_0 / cfblk99_out1;
      if (cfblk38_div_temp[8] != 1'b0) begin
        cfblk38_out1 = 8'b11111111;
      end
      else begin
        cfblk38_out1 = cfblk38_div_temp[7:0];
      end
    end
  end



  assign cfblk68_out1 = (cfblk113_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block4 u_cfblk50_inst (.in1(cfblk68_out1),  // uint8
                                    .in2(cfblk38_out1),  // uint8
                                    .out1(cfblk50_out1)  // uint8
                                    );

  assign cfblk107_out1 = cfblk71_out1 + cfblk107_const_val_1;



  assign dtc_out = cfblk8_out1;



  assign cfblk18_out1 = dtc_out;



  assign cfblk7_out1 = cfblk18_out1 + cfblk7_const_val_1;



  assign cfblk87_out1 = cfblk7_out1 + cfblk2_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk151_process
      if (reset == 1'b1) begin
        cfblk151_reg[0] <= 8'b00000000;
        cfblk151_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk151_reg[0] <= cfblk151_reg_next[0];
          cfblk151_reg[1] <= cfblk151_reg_next[1];
        end
      end
    end

  assign cfblk151_out1 = cfblk151_reg[1];
  assign cfblk151_reg_next[0] = cfblk108_out1;
  assign cfblk151_reg_next[1] = cfblk151_reg[0];



  always @(cfblk151_out1, cfblk65_out1) begin
    cfblk14_div_temp = 9'b000000000;
    cfblk14_t_0_0 = 9'b000000000;
    if (cfblk65_out1 == 8'b00000000) begin
      cfblk14_out1 = 8'b11111111;
    end
    else begin
      cfblk14_t_0_0 = {1'b0, cfblk151_out1};
      cfblk14_div_temp = cfblk14_t_0_0 / cfblk65_out1;
      if (cfblk14_div_temp[8] != 1'b0) begin
        cfblk14_out1 = 8'b11111111;
      end
      else begin
        cfblk14_out1 = cfblk14_div_temp[7:0];
      end
    end
  end



  assign cfblk127_out1 = cfblk14_out1 + cfblk104_out1;



  assign cfblk22_out1 = cfblk127_out1 + cfblk22_const_val_1;



  assign cfblk110_out1 = cfblk22_out1 + cfblk14_out1;



  assign cfblk23_out1 = cfblk110_out1 + cfblk23_const_val_1;



  DotProduct_block3 u_cfblk33_inst (.in1(cfblk23_out1),  // uint8
                                    .in2(cfblk87_out1),  // uint8
                                    .out1(cfblk33_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk33_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk85_out1 = cfblk103_out1 + cfblk85_const_val_1;



  assign cfblk27_out1 = (cfblk85_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk62_out1 = cfblk27_out1 + cfblk15_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk62_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk97_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk126_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(cfblk161_out1, cfblk82_out1) begin
    cfblk66_div_temp = 9'b000000000;
    cfblk66_t_0_0 = 9'b000000000;
    if (cfblk161_out1 == 8'b00000000) begin
      cfblk66_out1 = 8'b11111111;
    end
    else begin
      cfblk66_t_0_0 = {1'b0, cfblk82_out1};
      cfblk66_div_temp = cfblk66_t_0_0 / cfblk161_out1;
      if (cfblk66_div_temp[8] != 1'b0) begin
        cfblk66_out1 = 8'b11111111;
      end
      else begin
        cfblk66_out1 = cfblk66_div_temp[7:0];
      end
    end
  end



  assign cfblk36_out1 = cfblk66_out1 + cfblk153_out1;



  assign cfblk12_out1 = cfblk36_out1 - cfblk145_out1;



  assign cfblk10_out1 = cfblk12_out1 + cfblk166_out1;



  assign cfblk39_out1 = cfblk9_out1 + cfblk39_const_val_1;



  assign cfblk41_out1 = cfblk39_out1 + cfblk61_out1;



  assign cfblk92_out1 = cfblk140_out1 + cfblk143_out1;



  assign cfblk79_out1 = (cfblk92_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block1 u_cfblk120_inst (.in1(cfblk79_out1),  // uint8
                                     .in2(cfblk41_out1),  // uint8
                                     .out1(cfblk120_out1)  // uint8
                                     );

  DotProduct_block6 u_cfblk61_inst (.in1(cfblk103_out1),  // uint8
                                    .in2(cfblk2_out1),  // uint8
                                    .out1(cfblk61_out1)  // uint8
                                    );

  always @(cfblk138_out1, cfblk61_out1) begin
    cfblk126_div_temp = 17'b00000000000000000;
    cfblk126_t_0_0 = 17'b00000000000000000;
    if (cfblk61_out1 == 8'b00000000) begin
      cfblk126_varargout_1 = 16'b1111111111111111;
    end
    else begin
      cfblk126_t_0_0 = {1'b0, cfblk138_out1};
      cfblk126_div_temp = cfblk126_t_0_0 / cfblk61_out1;
      if (cfblk126_div_temp[16] != 1'b0) begin
        cfblk126_varargout_1 = 16'b1111111111111111;
      end
      else begin
        cfblk126_varargout_1 = cfblk126_div_temp[15:0];
      end
    end
    if (cfblk126_varargout_1[15:8] != 8'b00000000) begin
      cfblk126_out1 = 8'b11111111;
    end
    else begin
      cfblk126_out1 = cfblk126_varargout_1[7:0];
    end
  end



  assign cfblk31_out1 = (cfblk126_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk131_out1, cfblk55_out1) begin
    cfblk105_div_temp = 9'b000000000;
    cfblk105_t_0_0 = 9'b000000000;
    if (cfblk55_out1 == 8'b00000000) begin
      cfblk105_out1 = 8'b11111111;
    end
    else begin
      cfblk105_t_0_0 = {1'b0, cfblk131_out1};
      cfblk105_div_temp = cfblk105_t_0_0 / cfblk55_out1;
      if (cfblk105_div_temp[8] != 1'b0) begin
        cfblk105_out1 = 8'b11111111;
      end
      else begin
        cfblk105_out1 = cfblk105_div_temp[7:0];
      end
    end
  end



  DotProduct_block2 u_cfblk16_inst (.in1(cfblk105_out1),  // uint8
                                    .in2(cfblk31_out1),  // uint8
                                    .out1(cfblk16_out1)  // uint8
                                    );

  assign cfblk35_out1 = cfblk139_out1 + cfblk29_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk152_process
      if (reset == 1'b1) begin
        cfblk152_reg[0] <= 8'b00000000;
        cfblk152_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk152_reg[0] <= cfblk152_reg_next[0];
          cfblk152_reg[1] <= cfblk152_reg_next[1];
        end
      end
    end

  assign cfblk152_out1 = cfblk152_reg[1];
  assign cfblk152_reg_next[0] = cfblk35_out1;
  assign cfblk152_reg_next[1] = cfblk152_reg[0];



  assign cfblk108_out1 = cfblk152_out1 + cfblk16_out1;



  always @(cfblk108_out1, cfblk63_out1) begin
    cfblk70_div_temp = 9'b000000000;
    cfblk70_t_0_0 = 9'b000000000;
    if (cfblk108_out1 == 8'b00000000) begin
      cfblk70_out1 = 8'b11111111;
    end
    else begin
      cfblk70_t_0_0 = {1'b0, cfblk63_out1};
      cfblk70_div_temp = cfblk70_t_0_0 / cfblk108_out1;
      if (cfblk70_div_temp[8] != 1'b0) begin
        cfblk70_out1 = 8'b11111111;
      end
      else begin
        cfblk70_out1 = cfblk70_div_temp[7:0];
      end
    end
  end



  assign dtc_out_1 = cfblk70_out1;



  assign cfblk121_out1 = dtc_out_1;



  assign cfblk97_out1 = cfblk121_out1 + cfblk97_const_val_1;



  assign cfblk111_out1 = cfblk2_out1 + cfblk97_out1;



  assign cfblk29_out1 = cfblk111_out1 + cfblk29_const_val_1;



  assign cfblk60_out1 = cfblk29_out1 + cfblk83_out1;



  DotProduct_block u_cfblk119_inst (.in1(cfblk60_out1),  // uint8
                                    .in2(cfblk31_out1),  // uint8
                                    .out1(cfblk119_out1)  // uint8
                                    );

  assign cfblk65_out1 = (cfblk83_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk65_out1;



  assign cfblk101_out1 = dtc_out_2;



  assign cfblk93_out1 = cfblk101_out1 + cfblk119_out1;



  assign cfblk130_out1 = cfblk93_out1 - cfblk120_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk150_process
      if (reset == 1'b1) begin
        cfblk150_reg[0] <= 8'b00000000;
        cfblk150_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk150_reg[0] <= cfblk150_reg_next[0];
          cfblk150_reg[1] <= cfblk150_reg_next[1];
        end
      end
    end

  assign cfblk150_out1 = cfblk150_reg[1];
  assign cfblk150_reg_next[0] = cfblk130_out1;
  assign cfblk150_reg_next[1] = cfblk150_reg[0];



  assign cfblk9_out1 = cfblk150_out1 - cfblk10_out1;



  assign cfblk83_out1 = cfblk9_out1 - cfblk158_out1;



  Mysubsystem_14 u_Mysubsystem_14 (.In1(cfblk104_out1),  // uint8
                                   .In2(cfblk83_out1),  // uint8
                                   .In3(cfblk107_out1),  // uint8
                                   .In4(cfblk53_out1),  // uint8
                                   .Out1(Mysubsystem_14_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = Mysubsystem_14_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  always @(cfblk157_out1, cfblk50_out1) begin
    cfblk49_div_temp = 9'b000000000;
    cfblk49_t_0_0 = 9'b000000000;
    if (cfblk50_out1 == 8'b00000000) begin
      cfblk49_out1 = 8'b11111111;
    end
    else begin
      cfblk49_t_0_0 = {1'b0, cfblk157_out1};
      cfblk49_div_temp = cfblk49_t_0_0 / cfblk50_out1;
      if (cfblk49_div_temp[8] != 1'b0) begin
        cfblk49_out1 = 8'b11111111;
      end
      else begin
        cfblk49_out1 = cfblk49_div_temp[7:0];
      end
    end
  end



  assign cfblk131_out1 = cfblk49_out1 + cfblk131_const_val_1;



  assign cfblk104_out1 = cfblk131_out1 + cfblk9_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk104_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk86_out1 = cfblk145_out1 + cfblk53_out1;



  assign cfblk30_out1 = (cfblk164_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk81_out1 = cfblk30_out1 + cfblk86_out1;



  assign dtc_out_3 = cfblk81_out1;



  assign cfblk116_out1 = dtc_out_3;



  assign cfblk56_out1 = cfblk116_out1 + cfblk56_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk56_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  cfblk144 u_cfblk144 (.In1(cfblk51_out1),  // uint8
                       .Out1(cfblk144_out1)  // uint8
                       );

  assign cfblk55_out1 = cfblk15_out1 + cfblk55_const_val_1;



  assign cfblk8_out1 = (cfblk55_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk103_out1 = Mysubsystem_13_out1 + cfblk117_out1;



  assign cfblk71_out1 = (cfblk103_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk134_out1 = cfblk71_out1 + cfblk8_out1;



  assign dtc_out_4 = cfblk134_out1;



  assign cfblk109_out1 = dtc_out_4;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk109_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  always @(cfblk144_out1, cfblk167_out1) begin
    cfblk89_div_temp = 9'b000000000;
    cfblk89_t_0_0 = 9'b000000000;
    if (cfblk144_out1 == 8'b00000000) begin
      cfblk89_out1 = 8'b11111111;
    end
    else begin
      cfblk89_t_0_0 = {1'b0, cfblk167_out1};
      cfblk89_div_temp = cfblk89_t_0_0 / cfblk144_out1;
      if (cfblk89_div_temp[8] != 1'b0) begin
        cfblk89_out1 = 8'b11111111;
      end
      else begin
        cfblk89_out1 = cfblk89_div_temp[7:0];
      end
    end
  end



  assign dtc_out_5 = cfblk89_out1;



  assign cfblk124_out1 = dtc_out_5;



  always @(cfblk124_out1, cfblk44_out1) begin
    cfblk117_div_temp = 9'b000000000;
    cfblk117_t_0_0 = 9'b000000000;
    if (cfblk44_out1 == 8'b00000000) begin
      cfblk117_out1 = 8'b11111111;
    end
    else begin
      cfblk117_t_0_0 = {1'b0, cfblk124_out1};
      cfblk117_div_temp = cfblk117_t_0_0 / cfblk44_out1;
      if (cfblk117_div_temp[8] != 1'b0) begin
        cfblk117_out1 = 8'b11111111;
      end
      else begin
        cfblk117_out1 = cfblk117_div_temp[7:0];
      end
    end
  end



  assign cfblk63_out1 = cfblk117_out1 + cfblk162_out1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk63_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk53_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk53_out1 = cfblk163_out1 - cfblk2_out1;



  assign cfblk95_out1 = cfblk53_out1 + cfblk95_const_val_1;



  assign cfblk133_out1 = (cfblk95_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk143 u_cfblk143 (.In1(cfblk133_out1),  // uint8
                       .Out1(cfblk143_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk143_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  cfblk3 u_cfblk3 (.u(cfblk164_out1),  // uint8
                   .y(cfblk3_out1)  // uint8
                   );

  assign cfblk115_out1 = cfblk142_out1 - cfblk3_out1;



  DotProduct_block5 u_cfblk51_inst (.in1(cfblk115_out1),  // uint8
                                    .in2(cfblk72_out1),  // uint8
                                    .out1(cfblk51_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk51_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk168_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk57_out1 = cfblk1_out1 + cfblk159_out1;



  always @(cfblk155_out1, cfblk57_out1) begin
    cfblk54_div_temp = 9'b000000000;
    cfblk54_t_0_0 = 9'b000000000;
    if (cfblk155_out1 == 8'b00000000) begin
      cfblk54_out1 = 8'b11111111;
    end
    else begin
      cfblk54_t_0_0 = {1'b0, cfblk57_out1};
      cfblk54_div_temp = cfblk54_t_0_0 / cfblk155_out1;
      if (cfblk54_div_temp[8] != 1'b0) begin
        cfblk54_out1 = 8'b11111111;
      end
      else begin
        cfblk54_out1 = cfblk54_div_temp[7:0];
      end
    end
  end



  assign cfblk82_out1 = cfblk54_out1 + cfblk82_const_val_1;



  assign cfblk58_out1 = (cfblk82_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk72_out1 = (cfblk58_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk72_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign dtc_out_6 = cfblk4_out1;



  assign cfblk15_out1 = dtc_out_6;



  assign cfblk44_out1 = cfblk15_out1 + cfblk44_const_val_1;



  DotProduct u_cfblk113_inst (.in1(cfblk44_out1),  // uint8
                              .in2(Mysubsystem_28_out1),  // uint8
                              .out1(cfblk113_out1)  // uint8
                              );

  assign Hdl_out = cfblk113_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

