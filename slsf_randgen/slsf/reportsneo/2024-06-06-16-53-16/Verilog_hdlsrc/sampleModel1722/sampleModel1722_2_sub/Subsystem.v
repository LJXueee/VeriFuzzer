// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1722\sampleModel1722_2_sub\Subsystem.v
// Created: 2024-06-10 11:41:47
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1722_2_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk97_const_val_1;  // uint8
  wire [7:0] cfblk135_const_val_1;  // uint8
  wire [7:0] cfblk110_const_val_1;  // uint8
  wire [7:0] cfblk89_const_val_1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk96_const_val_1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk29_const_val_1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk20_const_val_1;  // uint8
  wire [7:0] cfblk91_const_val_1;  // uint8
  wire [7:0] cfblk111_const_val_1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk18_const_val_1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk54_const_val_1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  reg [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk137_out1;  // uint8
  reg [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [15:0] cfblk2_out1;  // uint16
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] cfblk59_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] dtc_out_13;  // ufix8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] dtc_out_14;  // ufix8
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9
  reg [8:0] cfblk24_div_temp;  // ufix9
  reg [8:0] cfblk24_t_0_0;  // ufix9
  reg [8:0] cfblk28_div_temp;  // ufix9
  reg [8:0] cfblk28_t_0_0;  // ufix9
  reg [8:0] cfblk7_div_temp;  // ufix9
  reg [8:0] cfblk7_t_0_0;  // ufix9
  reg [8:0] cfblk73_div_temp;  // ufix9
  reg [8:0] cfblk73_t_0_0;  // ufix9
  reg [8:0] cfblk59_div_temp;  // ufix9
  reg [8:0] cfblk59_t_0_0;  // ufix9
  reg [8:0] cfblk94_div_temp;  // ufix9
  reg [8:0] cfblk94_t_0_0;  // ufix9
  reg [8:0] cfblk133_div_temp;  // ufix9
  reg [8:0] cfblk133_t_0_0;  // ufix9
  reg [8:0] cfblk137_div_temp;  // ufix9
  reg [8:0] cfblk137_t_0_0;  // ufix9


  assign cfblk97_const_val_1 = 8'b00000000;



  assign cfblk135_const_val_1 = 8'b00000000;



  assign cfblk110_const_val_1 = 8'b00000000;



  assign cfblk89_const_val_1 = 8'b00000000;



  assign cfblk147_out1 = 8'b00000001;



  assign enb = clk_enable;

  assign cfblk145_out1 = 8'b00000000;



  assign cfblk144_out1 = 8'b00000001;



  assign cfblk96_const_val_1 = 8'b00000000;



  assign cfblk148_out1 = 8'b00000001;



  cfblk150 u_cfblk150 (.In1(cfblk44_out1),  // uint8
                       .Out1(cfblk150_out1)  // uint8
                       );

  assign dtc_out = cfblk150_out1;



  assign cfblk115_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        cfblk178_reg[0] <= 8'b00000000;
        cfblk178_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk178_reg[0] <= cfblk178_reg_next[0];
          cfblk178_reg[1] <= cfblk178_reg_next[1];
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk115_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  always @(cfblk148_out1, cfblk178_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk148_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk178_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk148_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  assign cfblk29_const_val_1 = 8'b00000000;



  assign cfblk149_out1 = 8'b00000001;



  assign cfblk20_const_val_1 = 8'b00000000;



  assign cfblk91_const_val_1 = 8'b00000000;



  assign cfblk111_const_val_1 = 8'b00000000;



  cfblk146 u_cfblk146 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk146_out1)  // uint8
                       );

  assign cfblk18_const_val_1 = 8'b00000000;



  assign dtc_out_1 = cfblk149_out1;



  assign cfblk99_out1 = dtc_out_1;



  assign cfblk54_const_val_1 = 8'b00000000;



  assign dtc_out_2 = cfblk15_out1;



  assign cfblk87_out1 = dtc_out_2;



  assign dtc_out_3 = cfblk135_out1;



  assign cfblk75_out1 = dtc_out_3;



  assign cfblk67_out1 = cfblk99_out1 + cfblk75_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk68_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(cfblk166_out1, cfblk67_out1) begin
    cfblk24_div_temp = 9'b000000000;
    cfblk24_t_0_0 = 9'b000000000;
    if (cfblk67_out1 == 8'b00000000) begin
      cfblk24_out1 = 8'b11111111;
    end
    else begin
      cfblk24_t_0_0 = {1'b0, cfblk166_out1};
      cfblk24_div_temp = cfblk24_t_0_0 / cfblk67_out1;
      if (cfblk24_div_temp[8] != 1'b0) begin
        cfblk24_out1 = 8'b11111111;
      end
      else begin
        cfblk24_out1 = cfblk24_div_temp[7:0];
      end
    end
  end



  always @(cfblk137_out1, cfblk42_out1) begin
    cfblk28_div_temp = 9'b000000000;
    cfblk28_t_0_0 = 9'b000000000;
    if (cfblk137_out1 == 8'b00000000) begin
      cfblk28_out1 = 8'b11111111;
    end
    else begin
      cfblk28_t_0_0 = {1'b0, cfblk42_out1};
      cfblk28_div_temp = cfblk28_t_0_0 / cfblk137_out1;
      if (cfblk28_div_temp[8] != 1'b0) begin
        cfblk28_out1 = 8'b11111111;
      end
      else begin
        cfblk28_out1 = cfblk28_div_temp[7:0];
      end
    end
  end



  assign cfblk77_out1 = cfblk115_out1 + cfblk48_out1;



  DotProduct_block2 u_cfblk35_inst (.in1(cfblk183_out1),  // uint8
                                    .in2(cfblk105_out1),  // uint8
                                    .out1(cfblk35_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk35_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk2_out1 = {cfblk171_out1, cfblk70_out1};



  assign cfblk183_out1 = cfblk2_out1[7:0];



  assign cfblk38_out1 = cfblk57_out1 + cfblk183_out1;



  assign dtc_out_4 = cfblk27_out1;



  assign cfblk86_out1 = dtc_out_4;



  assign cfblk109_out1 = cfblk86_out1 + cfblk38_out1;



  assign cfblk118_out1 = cfblk109_out1 - cfblk77_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk118_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk27_out1 = cfblk162_out1 + cfblk28_out1;



  always @(cfblk85_out1, cfblk9_out1) begin
    cfblk7_div_temp = 9'b000000000;
    cfblk7_t_0_0 = 9'b000000000;
    if (cfblk85_out1 == 8'b00000000) begin
      cfblk7_out1 = 8'b11111111;
    end
    else begin
      cfblk7_t_0_0 = {1'b0, cfblk9_out1};
      cfblk7_div_temp = cfblk7_t_0_0 / cfblk85_out1;
      if (cfblk7_div_temp[8] != 1'b0) begin
        cfblk7_out1 = 8'b11111111;
      end
      else begin
        cfblk7_out1 = cfblk7_div_temp[7:0];
      end
    end
  end



  assign cfblk55_out1 = (cfblk13_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block u_cfblk23_inst (.in1(cfblk60_out1),  // uint8
                                   .in2(cfblk154_out1),  // uint8
                                   .out1(cfblk23_out1)  // uint8
                                   );

  assign cfblk80_out1 = cfblk23_out1 - cfblk55_out1;



  always @(cfblk7_out1, cfblk80_out1) begin
    cfblk73_div_temp = 9'b000000000;
    cfblk73_t_0_0 = 9'b000000000;
    if (cfblk7_out1 == 8'b00000000) begin
      cfblk73_out1 = 8'b11111111;
    end
    else begin
      cfblk73_t_0_0 = {1'b0, cfblk80_out1};
      cfblk73_div_temp = cfblk73_t_0_0 / cfblk7_out1;
      if (cfblk73_div_temp[8] != 1'b0) begin
        cfblk73_out1 = 8'b11111111;
      end
      else begin
        cfblk73_out1 = cfblk73_div_temp[7:0];
      end
    end
  end



  assign cfblk33_out1 = cfblk68_out1 + cfblk136_out1;



  cfblk154 u_cfblk154 (.In1(cfblk33_out1),  // uint8
                       .Out1(cfblk154_out1)  // uint8
                       );

  cfblk152 u_cfblk152 (.In1(cfblk154_out1),  // uint8
                       .Out1(cfblk152_out1)  // uint8
                       );

  assign cfblk40_out1 = cfblk146_out1 + cfblk152_out1;



  assign cfblk65_out1 = cfblk40_out1 + cfblk73_out1;



  DotProduct_block4 u_cfblk53_inst (.in1(cfblk65_out1),  // uint8
                                    .in2(cfblk88_out1),  // uint8
                                    .out1(cfblk53_out1)  // uint8
                                    );

  assign cfblk128_out1 = (cfblk53_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk18_out1 = cfblk128_out1 + cfblk18_const_val_1;



  assign cfblk71_out1 = cfblk18_out1 + cfblk70_out1;



  assign dtc_out_5 = cfblk29_out1;



  assign cfblk34_out1 = dtc_out_5;



  always @(cfblk135_out1, cfblk37_out1) begin
    cfblk59_div_temp = 9'b000000000;
    cfblk59_t_0_0 = 9'b000000000;
    if (cfblk37_out1 == 8'b00000000) begin
      cfblk59_out1 = 8'b11111111;
    end
    else begin
      cfblk59_t_0_0 = {1'b0, cfblk135_out1};
      cfblk59_div_temp = cfblk59_t_0_0 / cfblk37_out1;
      if (cfblk59_div_temp[8] != 1'b0) begin
        cfblk59_out1 = 8'b11111111;
      end
      else begin
        cfblk59_out1 = cfblk59_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk59_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk122_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  cfblk1 u_cfblk1 (.u(cfblk163_out1),  // uint8
                   .y(cfblk1_out1)  // uint8
                   );

  assign cfblk112_out1 = cfblk1_out1 + cfblk176_out1;



  assign dtc_out_6 = cfblk112_out1;



  assign cfblk105_out1 = dtc_out_6;



  assign cfblk140_out1 = cfblk19_out1 - cfblk105_out1;



  assign cfblk13_out1 = cfblk140_out1 - cfblk34_out1;



  assign dtc_out_7 = cfblk13_out1;



  assign cfblk136_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk136_out1;



  assign cfblk42_out1 = dtc_out_8;



  assign dtc_out_9 = cfblk11_out1;



  assign cfblk60_out1 = dtc_out_9;



  DotProduct u_cfblk101_inst (.in1(cfblk91_out1),  // uint8
                              .in2(cfblk60_out1),  // uint8
                              .out1(cfblk101_out1)  // uint8
                              );

  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk101_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk12_out1 = cfblk164_out1 + cfblk42_out1;



  assign cfblk20_out1 = cfblk12_out1 + cfblk20_const_val_1;



  assign cfblk122_out1 = (cfblk20_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk122_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign cfblk91_out1 = cfblk4_out1 + cfblk91_const_val_1;



  assign dtc_out_10 = cfblk91_out1;



  assign cfblk63_out1 = dtc_out_10;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk19_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  assign cfblk57_out1 = cfblk149_out1 + cfblk39_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        cfblk177_reg[0] <= 8'b00000000;
        cfblk177_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk177_reg[0] <= cfblk177_reg_next[0];
          cfblk177_reg[1] <= cfblk177_reg_next[1];
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk57_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  assign cfblk48_out1 = (cfblk9_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk153 u_cfblk153 (.In1(cfblk48_out1),  // uint8
                       .Out1(cfblk153_out1)  // uint8
                       );

  assign cfblk29_out1 = cfblk153_out1 + cfblk29_const_val_1;



  assign cfblk16_out1 = (cfblk29_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk16_out1, cfblk177_out1) begin
    cfblk94_div_temp = 9'b000000000;
    cfblk94_t_0_0 = 9'b000000000;
    if (cfblk177_out1 == 8'b00000000) begin
      cfblk94_out1 = 8'b11111111;
    end
    else begin
      cfblk94_t_0_0 = {1'b0, cfblk16_out1};
      cfblk94_div_temp = cfblk94_t_0_0 / cfblk177_out1;
      if (cfblk94_div_temp[8] != 1'b0) begin
        cfblk94_out1 = 8'b11111111;
      end
      else begin
        cfblk94_out1 = cfblk94_div_temp[7:0];
      end
    end
  end



  assign cfblk106_out1 = (cfblk94_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk106_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  assign cfblk14_out1 = cfblk44_out1 - cfblk19_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk14_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk11_out1 = cfblk170_out1 - cfblk5_out1;



  assign cfblk90_out1 = cfblk11_out1 - cfblk145_out1;



  DotProduct_block1 u_cfblk30_inst (.in1(cfblk90_out1),  // uint8
                                    .in2(cfblk169_out1),  // uint8
                                    .out1(cfblk30_out1)  // uint8
                                    );

  assign cfblk85_out1 = (cfblk30_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block7 u_cfblk98_inst (.in1(cfblk85_out1),  // uint8
                                    .in2(cfblk63_out1),  // uint8
                                    .out1(cfblk98_out1)  // uint8
                                    );

  assign cfblk111_out1 = cfblk98_out1 + cfblk111_const_val_1;



  assign cfblk83_out1 = cfblk111_out1 + cfblk71_out1;



  always @(cfblk27_out1, cfblk83_out1) begin
    cfblk133_div_temp = 9'b000000000;
    cfblk133_t_0_0 = 9'b000000000;
    if (cfblk27_out1 == 8'b00000000) begin
      cfblk133_out1 = 8'b11111111;
    end
    else begin
      cfblk133_t_0_0 = {1'b0, cfblk83_out1};
      cfblk133_div_temp = cfblk133_t_0_0 / cfblk27_out1;
      if (cfblk133_div_temp[8] != 1'b0) begin
        cfblk133_out1 = 8'b11111111;
      end
      else begin
        cfblk133_out1 = cfblk133_div_temp[7:0];
      end
    end
  end



  assign cfblk70_out1 = cfblk145_out1 - cfblk9_out1;



  assign cfblk96_out1 = cfblk70_out1 + cfblk96_const_val_1;



  DotProduct_block6 u_cfblk92_inst (.in1(cfblk96_out1),  // uint8
                                    .in2(cfblk133_out1),  // uint8
                                    .out1(cfblk92_out1)  // uint8
                                    );

  assign cfblk123_out1 = (cfblk92_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk43_out1 = cfblk123_out1 + cfblk11_out1;



  assign cfblk49_out1 = cfblk144_out1 + cfblk43_out1;



  assign dtc_out_11 = cfblk49_out1;



  assign cfblk108_out1 = dtc_out_11;



  assign cfblk119_out1 = cfblk108_out1 + cfblk103_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk119_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk110_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  DotProduct_block5 u_cfblk8_inst (.in1(cfblk167_out1),  // uint8
                                   .in2(cfblk145_out1),  // uint8
                                   .out1(cfblk8_out1)  // uint8
                                   );

  assign cfblk97_out1 = cfblk15_out1 + cfblk97_const_val_1;



  assign cfblk37_out1 = (cfblk97_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk135_out1 = cfblk37_out1 + cfblk135_const_val_1;



  assign dtc_out_12 = cfblk135_out1;



  assign cfblk39_out1 = dtc_out_12;



  assign dtc_out_13 = cfblk39_out1;



  assign cfblk103_out1 = dtc_out_13;



  DotProduct_block3 u_cfblk52_inst (.in1(cfblk103_out1),  // uint8
                                    .in2(cfblk68_out1),  // uint8
                                    .out1(cfblk52_out1)  // uint8
                                    );

  assign cfblk110_out1 = cfblk52_out1 + cfblk110_const_val_1;



  assign cfblk89_out1 = cfblk110_out1 + cfblk89_const_val_1;



  assign cfblk19_out1 = cfblk89_out1 + cfblk147_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk19_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk36_out1 = cfblk168_out1 + cfblk8_out1;



  assign cfblk88_out1 = cfblk36_out1 - cfblk161_out1;



  assign cfblk15_out1 = cfblk88_out1 + cfblk150_out1;



  cfblk151 u_cfblk151 (.In1(cfblk15_out1),  // uint8
                       .Out1(cfblk151_out1)  // uint8
                       );

  assign cfblk68_out1 = cfblk151_out1 - cfblk24_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk68_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  always @(cfblk174_out1, cfblk87_out1) begin
    cfblk137_div_temp = 9'b000000000;
    cfblk137_t_0_0 = 9'b000000000;
    if (cfblk87_out1 == 8'b00000000) begin
      cfblk137_out1 = 8'b11111111;
    end
    else begin
      cfblk137_t_0_0 = {1'b0, cfblk174_out1};
      cfblk137_div_temp = cfblk137_t_0_0 / cfblk87_out1;
      if (cfblk137_div_temp[8] != 1'b0) begin
        cfblk137_out1 = 8'b11111111;
      end
      else begin
        cfblk137_out1 = cfblk137_div_temp[7:0];
      end
    end
  end



  assign cfblk54_out1 = cfblk137_out1 + cfblk54_const_val_1;



  assign dtc_out_14 = cfblk54_out1;



  assign cfblk9_out1 = dtc_out_14;



  assign Hdl_out = cfblk9_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

