// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1567\sampleModel1567_3_sub\Subsystem.v
// Created: 2024-08-12 19:27:02
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk144                      ce_out        1
// cfblk146                      ce_out        1
// cfblk148                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1567_3_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk144,
           cfblk146,
           cfblk148,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk144;  // uint8
  output  [7:0] cfblk146;  // uint8
  output  [7:0] cfblk148;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [15:0] cfblk149_out1;  // uint16
  wire [31:0] dtc_out;  // ufix32
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk108_const_val_1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  wire [15:0] cfblk151_out1;  // uint16
  wire [15:0] cfblk71_const_val_1;  // uint16
  wire [15:0] cfblk71_out1;  // uint16
  wire [7:0] cfblk128_const_val_1;  // uint8
  wire [7:0] cfblk96_const_val_1;  // uint8
  wire [7:0] cfblk66_const_val_1;  // uint8
  wire [7:0] cfblk130_const_val_1;  // uint8
  wire [7:0] cfblk109_const_val_1;  // uint8
  wire [7:0] cfblk138_const_val_1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk8_const_val_1;  // uint8
  wire [7:0] cfblk44_const_val_1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  reg [7:0] cfblk15_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  reg [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [15:0] cfblk3_out1;  // uint16
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire signed [31:0] cfblk141_sub_temp;  // sfix32
  wire signed [31:0] cfblk141_1;  // sfix32
  wire signed [31:0] cfblk141_2;  // sfix32
  wire [7:0] cfblk141_out1;  // uint8
  reg [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk73_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  reg [7:0] cfblk76_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] dtc_out_8;  // ufix8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] dtc_out_12;  // ufix8
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  reg [8:0] cfblk20_div_temp;  // ufix9
  reg [8:0] cfblk20_t_0_0;  // ufix9
  reg [8:0] cfblk65_div_temp;  // ufix9
  reg [8:0] cfblk65_t_0_0;  // ufix9
  reg [8:0] cfblk52_div_temp;  // ufix9
  reg [8:0] cfblk52_t_0_0;  // ufix9
  reg [8:0] cfblk73_div_temp;  // ufix9
  reg [8:0] cfblk73_t_0_0;  // ufix9
  reg [8:0] cfblk13_div_temp;  // ufix9
  reg [8:0] cfblk13_t_0_0;  // ufix9
  reg [8:0] cfblk76_div_temp;  // ufix9
  reg [8:0] cfblk76_t_0_0;  // ufix9
  reg [8:0] cfblk77_div_temp;  // ufix9
  reg [8:0] cfblk77_t_0_0;  // ufix9
  reg [8:0] cfblk21_div_temp;  // ufix9
  reg [8:0] cfblk21_t_0_0;  // ufix9
  reg [8:0] cfblk38_div_temp;  // ufix9
  reg [8:0] cfblk38_t_0_0;  // ufix9
  reg [8:0] cfblk15_div_temp;  // ufix9
  reg [8:0] cfblk15_t_0_0;  // ufix9
  reg [8:0] cfblk37_div_temp;  // ufix9
  reg [8:0] cfblk37_t_0_0;  // ufix9


  cfblk149 u_cfblk149 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk149_out1)  // uint16
                       );

  assign dtc_out = {16'b0, cfblk149_out1};



  assign cfblk54_out1 = dtc_out[7:0];



  assign cfblk108_const_val_1 = 8'b00000000;



  assign cfblk108_out1 = cfblk54_out1 + cfblk108_const_val_1;



  assign enb = clk_enable;

  cfblk151 u_cfblk151 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk151_out1)  // uint16
                       );

  assign cfblk71_const_val_1 = 16'b0000000000000000;



  assign cfblk71_out1 = cfblk151_out1 + cfblk71_const_val_1;



  assign cfblk128_const_val_1 = 8'b00000000;



  assign cfblk96_const_val_1 = 8'b00000000;



  assign cfblk66_const_val_1 = 8'b00000000;



  assign cfblk130_const_val_1 = 8'b00000000;



  assign cfblk109_const_val_1 = 8'b00000000;



  assign cfblk138_const_val_1 = 8'b00000000;



  assign cfblk150_out1 = 8'b00000001;



  assign cfblk8_const_val_1 = 8'b00000000;



  assign cfblk44_const_val_1 = 8'b00000000;



  assign cfblk103_out1 = cfblk24_out1 - cfblk21_out1;



  assign cfblk68_out1 = cfblk103_out1 + cfblk135_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        cfblk175_reg[0] <= 8'b00000000;
        cfblk175_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk175_reg[0] <= cfblk175_reg_next[0];
          cfblk175_reg[1] <= cfblk175_reg_next[1];
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk68_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk104_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        cfblk176_reg[0] <= 8'b00000000;
        cfblk176_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk176_reg[0] <= cfblk176_reg_next[0];
          cfblk176_reg[1] <= cfblk176_reg_next[1];
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk63_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  cfblk152 u_cfblk152 (.In1(cfblk115_out1),  // uint8
                       .Out1(cfblk152_out1)  // uint8
                       );

  assign cfblk25_out1 = cfblk97_out1 + cfblk152_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk25_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        cfblk173_reg[0] <= 8'b00000000;
        cfblk173_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk173_reg[0] <= cfblk173_reg_next[0];
          cfblk173_reg[1] <= cfblk173_reg_next[1];
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk29_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk15_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  always @(cfblk170_out1, cfblk77_out1) begin
    cfblk20_div_temp = 9'b000000000;
    cfblk20_t_0_0 = 9'b000000000;
    if (cfblk77_out1 == 8'b00000000) begin
      cfblk20_out1 = 8'b11111111;
    end
    else begin
      cfblk20_t_0_0 = {1'b0, cfblk170_out1};
      cfblk20_div_temp = cfblk20_t_0_0 / cfblk77_out1;
      if (cfblk20_div_temp[8] != 1'b0) begin
        cfblk20_out1 = 8'b11111111;
      end
      else begin
        cfblk20_out1 = cfblk20_div_temp[7:0];
      end
    end
  end



  DotProduct_block2 u_cfblk24_inst (.in1(cfblk20_out1),  // uint8
                                    .in2(cfblk173_out1),  // uint8
                                    .out1(cfblk24_out1)  // uint8
                                    );

  assign cfblk104_out1 = cfblk10_out1 + cfblk16_out1;



  assign dtc_out_1 = cfblk50_out1;



  assign cfblk12_out1 = dtc_out_1;



  assign cfblk113_out1 = cfblk12_out1 + cfblk104_out1;



  assign cfblk74_out1 = cfblk113_out1 + cfblk150_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk74_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        cfblk167_reg[0] <= 8'b00000000;
        cfblk167_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk167_reg[0] <= cfblk167_reg_next[0];
          cfblk167_reg[1] <= cfblk167_reg_next[1];
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk128_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk125_out1 = cfblk10_out1 - cfblk167_out1;



  assign cfblk97_out1 = (cfblk77_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk85_out1 = cfblk13_out1 + cfblk97_out1;



  always @(cfblk55_out1, cfblk85_out1) begin
    cfblk65_div_temp = 9'b000000000;
    cfblk65_t_0_0 = 9'b000000000;
    if (cfblk55_out1 == 8'b00000000) begin
      cfblk65_out1 = 8'b11111111;
    end
    else begin
      cfblk65_t_0_0 = {1'b0, cfblk85_out1};
      cfblk65_div_temp = cfblk65_t_0_0 / cfblk55_out1;
      if (cfblk65_div_temp[8] != 1'b0) begin
        cfblk65_out1 = 8'b11111111;
      end
      else begin
        cfblk65_out1 = cfblk65_div_temp[7:0];
      end
    end
  end



  DotProduct_block8 u_cfblk83_inst (.in1(cfblk65_out1),  // uint8
                                    .in2(cfblk139_out1),  // uint8
                                    .out1(cfblk83_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk83_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk51_out1 = cfblk159_out1 - cfblk107_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk38_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk112_out1 = cfblk168_out1 + cfblk51_out1;



  assign cfblk45_out1 = cfblk122_out1 + cfblk2_out1;



  assign cfblk98_out1 = cfblk153_out1 - cfblk29_out1;



  assign cfblk6_out1 = (cfblk128_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk64_out1 = cfblk27_out1 + cfblk6_out1;



  assign cfblk92_out1 = cfblk107_out1 + cfblk108_out1;



  assign cfblk40_out1 = (cfblk92_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block4 u_cfblk33_inst (.in1(cfblk40_out1),  // uint8
                                    .in2(cfblk64_out1),  // uint8
                                    .out1(cfblk33_out1)  // uint8
                                    );

  assign cfblk17_out1 = (cfblk33_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct u_cfblk11_inst (.in1(cfblk55_out1),  // uint8
                             .in2(cfblk107_out1),  // uint8
                             .out1(cfblk11_out1)  // uint8
                             );

  assign cfblk14_out1 = cfblk11_out1 + cfblk17_out1;



  assign cfblk27_out1 = cfblk8_out1 + cfblk50_out1;



  assign cfblk16_out1 = cfblk48_out1 + cfblk27_out1;



  assign dtc_out_2 = cfblk63_out1;



  assign cfblk47_out1 = dtc_out_2;



  assign cfblk53_out1 = cfblk47_out1 + cfblk16_out1;



  assign cfblk66_out1 = cfblk53_out1 + cfblk66_const_val_1;



  assign dtc_out_3 = cfblk89_out1;



  assign cfblk142_out1 = dtc_out_3;



  assign cfblk96_out1 = cfblk142_out1 + cfblk96_const_val_1;



  assign cfblk128_out1 = cfblk35_out1 + cfblk128_const_val_1;



  assign cfblk41_out1 = cfblk58_out1 - cfblk75_out1;



  assign dtc_out_4 = cfblk41_out1;



  assign cfblk110_out1 = dtc_out_4;



  DotProduct_block5 u_cfblk49_inst (.in1(cfblk110_out1),  // uint8
                                    .in2(cfblk128_out1),  // uint8
                                    .out1(cfblk49_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk49_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk28_out1 = cfblk166_out1 + cfblk96_out1;



  assign dtc_out_5 = cfblk28_out1;



  assign cfblk75_out1 = dtc_out_5;



  assign cfblk117_out1 = (cfblk75_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk67_out1 = (cfblk179_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk67_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk10_out1 = cfblk164_out1 + cfblk117_out1;



  assign cfblk39_out1 = cfblk10_out1 - cfblk15_out1;



  DotProduct_block6 u_cfblk70_inst (.in1(cfblk39_out1),  // uint8
                                    .in2(cfblk66_out1),  // uint8
                                    .out1(cfblk70_out1)  // uint8
                                    );

  DotProduct_block1 u_cfblk134_inst (.in1(cfblk70_out1),  // uint8
                                     .in2(cfblk14_out1),  // uint8
                                     .out1(cfblk134_out1)  // uint8
                                     );

  assign cfblk18_out1 = cfblk134_out1 - cfblk14_out1;



  assign cfblk3_out1 = {cfblk18_out1, cfblk98_out1};



  assign cfblk179_out1 = cfblk3_out1[7:0];



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk179_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  DotProduct_block u_cfblk126_inst (.in1(cfblk15_out1),  // uint8
                                    .in2(cfblk163_out1),  // uint8
                                    .out1(cfblk126_out1)  // uint8
                                    );

  assign dtc_out_6 = cfblk126_out1;



  assign cfblk35_out1 = dtc_out_6;



  assign cfblk141_1 = {16'b0, cfblk71_out1};
  assign cfblk141_2 = {24'b0, cfblk35_out1};
  assign cfblk141_sub_temp = cfblk141_1 - cfblk141_2;
  assign cfblk141_out1 = cfblk141_sub_temp[7:0];



  always @(cfblk141_out1, cfblk45_out1) begin
    cfblk52_div_temp = 9'b000000000;
    cfblk52_t_0_0 = 9'b000000000;
    if (cfblk45_out1 == 8'b00000000) begin
      cfblk52_out1 = 8'b11111111;
    end
    else begin
      cfblk52_t_0_0 = {1'b0, cfblk141_out1};
      cfblk52_div_temp = cfblk52_t_0_0 / cfblk45_out1;
      if (cfblk52_div_temp[8] != 1'b0) begin
        cfblk52_out1 = 8'b11111111;
      end
      else begin
        cfblk52_out1 = cfblk52_div_temp[7:0];
      end
    end
  end



  always @(cfblk2_out1, cfblk52_out1) begin
    cfblk73_div_temp = 9'b000000000;
    cfblk73_t_0_0 = 9'b000000000;
    if (cfblk2_out1 == 8'b00000000) begin
      cfblk73_out1 = 8'b11111111;
    end
    else begin
      cfblk73_t_0_0 = {1'b0, cfblk52_out1};
      cfblk73_div_temp = cfblk73_t_0_0 / cfblk2_out1;
      if (cfblk73_div_temp[8] != 1'b0) begin
        cfblk73_out1 = 8'b11111111;
      end
      else begin
        cfblk73_out1 = cfblk73_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk73_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(cfblk112_out1, cfblk160_out1) begin
    cfblk13_div_temp = 9'b000000000;
    cfblk13_t_0_0 = 9'b000000000;
    if (cfblk112_out1 == 8'b00000000) begin
      cfblk13_out1 = 8'b11111111;
    end
    else begin
      cfblk13_t_0_0 = {1'b0, cfblk160_out1};
      cfblk13_div_temp = cfblk13_t_0_0 / cfblk112_out1;
      if (cfblk13_div_temp[8] != 1'b0) begin
        cfblk13_out1 = 8'b11111111;
      end
      else begin
        cfblk13_out1 = cfblk13_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk139_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  always @(cfblk13_out1, cfblk158_out1) begin
    cfblk76_div_temp = 9'b000000000;
    cfblk76_t_0_0 = 9'b000000000;
    if (cfblk13_out1 == 8'b00000000) begin
      cfblk76_out1 = 8'b11111111;
    end
    else begin
      cfblk76_t_0_0 = {1'b0, cfblk158_out1};
      cfblk76_div_temp = cfblk76_t_0_0 / cfblk13_out1;
      if (cfblk76_div_temp[8] != 1'b0) begin
        cfblk76_out1 = 8'b11111111;
      end
      else begin
        cfblk76_out1 = cfblk76_div_temp[7:0];
      end
    end
  end



  assign dtc_out_7 = cfblk76_out1;



  assign cfblk135_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk135_out1;



  assign cfblk139_out1 = dtc_out_8;



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk48_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  assign cfblk101_out1 = (cfblk88_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk101_out1, cfblk157_out1) begin
    cfblk77_div_temp = 9'b000000000;
    cfblk77_t_0_0 = 9'b000000000;
    if (cfblk157_out1 == 8'b00000000) begin
      cfblk77_out1 = 8'b11111111;
    end
    else begin
      cfblk77_t_0_0 = {1'b0, cfblk101_out1};
      cfblk77_div_temp = cfblk77_t_0_0 / cfblk157_out1;
      if (cfblk77_div_temp[8] != 1'b0) begin
        cfblk77_out1 = 8'b11111111;
      end
      else begin
        cfblk77_out1 = cfblk77_div_temp[7:0];
      end
    end
  end



  always @(cfblk139_out1, cfblk77_out1) begin
    cfblk21_div_temp = 9'b000000000;
    cfblk21_t_0_0 = 9'b000000000;
    if (cfblk139_out1 == 8'b00000000) begin
      cfblk21_out1 = 8'b11111111;
    end
    else begin
      cfblk21_t_0_0 = {1'b0, cfblk77_out1};
      cfblk21_div_temp = cfblk21_t_0_0 / cfblk139_out1;
      if (cfblk21_div_temp[8] != 1'b0) begin
        cfblk21_out1 = 8'b11111111;
      end
      else begin
        cfblk21_out1 = cfblk21_div_temp[7:0];
      end
    end
  end



  assign cfblk130_out1 = cfblk21_out1 + cfblk130_const_val_1;



  assign dtc_out_9 = cfblk130_out1;



  assign cfblk42_out1 = dtc_out_9;



  assign dtc_out_10 = cfblk42_out1;



  assign cfblk69_out1 = dtc_out_10;



  assign cfblk93_out1 = (cfblk69_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk99_out1 = cfblk93_out1 + cfblk44_out1;



  assign cfblk122_out1 = (cfblk99_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk89_out1 = cfblk122_out1 + cfblk112_out1;



  assign cfblk58_out1 = cfblk89_out1 + cfblk67_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk58_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk107_out1 = cfblk165_out1 - cfblk66_out1;



  assign cfblk32_out1 = cfblk15_out1 + cfblk107_out1;



  assign cfblk100_out1 = cfblk32_out1 + cfblk32_out1;



  always @(cfblk100_out1, cfblk108_out1) begin
    cfblk38_div_temp = 9'b000000000;
    cfblk38_t_0_0 = 9'b000000000;
    if (cfblk100_out1 == 8'b00000000) begin
      cfblk38_out1 = 8'b11111111;
    end
    else begin
      cfblk38_t_0_0 = {1'b0, cfblk108_out1};
      cfblk38_div_temp = cfblk38_t_0_0 / cfblk100_out1;
      if (cfblk38_div_temp[8] != 1'b0) begin
        cfblk38_out1 = 8'b11111111;
      end
      else begin
        cfblk38_out1 = cfblk38_div_temp[7:0];
      end
    end
  end



  assign cfblk109_out1 = cfblk38_out1 + cfblk109_const_val_1;



  cfblk2 u_cfblk2 (.u(cfblk109_out1),  // uint8
                   .y(cfblk2_out1)  // uint8
                   );

  assign cfblk138_out1 = cfblk2_out1 + cfblk138_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        cfblk169_reg[0] <= 8'b00000000;
        cfblk169_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk169_reg[0] <= cfblk169_reg_next[0];
          cfblk169_reg[1] <= cfblk169_reg_next[1];
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk138_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  always @(cfblk125_out1, cfblk169_out1) begin
    cfblk15_div_temp = 9'b000000000;
    cfblk15_t_0_0 = 9'b000000000;
    if (cfblk125_out1 == 8'b00000000) begin
      cfblk15_out1 = 8'b11111111;
    end
    else begin
      cfblk15_t_0_0 = {1'b0, cfblk169_out1};
      cfblk15_div_temp = cfblk15_t_0_0 / cfblk125_out1;
      if (cfblk15_div_temp[8] != 1'b0) begin
        cfblk15_out1 = 8'b11111111;
      end
      else begin
        cfblk15_out1 = cfblk15_div_temp[7:0];
      end
    end
  end



  assign cfblk115_out1 = cfblk15_out1 + cfblk122_out1;



  DotProduct_block3 u_cfblk29_inst (.in1(cfblk115_out1),  // uint8
                                    .in2(cfblk70_out1),  // uint8
                                    .out1(cfblk29_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        cfblk172_reg[0] <= 8'b00000000;
        cfblk172_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk172_reg[0] <= cfblk172_reg_next[0];
          cfblk172_reg[1] <= cfblk172_reg_next[1];
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk29_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk172_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  assign cfblk88_out1 = cfblk1_out1 - cfblk161_out1;



  DotProduct_block7 u_cfblk72_inst (.in1(cfblk55_out1),  // uint8
                                    .in2(cfblk88_out1),  // uint8
                                    .out1(cfblk72_out1)  // uint8
                                    );

  assign cfblk143_out1 = cfblk72_out1 + cfblk29_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        cfblk174_reg[0] <= 8'b00000000;
        cfblk174_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk174_reg[0] <= cfblk174_reg_next[0];
          cfblk174_reg[1] <= cfblk174_reg_next[1];
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk143_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  assign cfblk86_out1 = cfblk174_out1 + cfblk24_out1;



  cfblk153 u_cfblk153 (.In1(cfblk86_out1),  // uint8
                       .Out1(cfblk153_out1)  // uint8
                       );

  assign cfblk48_out1 = cfblk153_out1 + cfblk171_out1;



  assign dtc_out_11 = cfblk48_out1;



  assign cfblk55_out1 = dtc_out_11;



  assign cfblk50_out1 = cfblk55_out1 + cfblk176_out1;



  assign cfblk114_out1 = cfblk50_out1 - cfblk162_out1;



  assign cfblk8_out1 = cfblk114_out1 + cfblk8_const_val_1;



  assign cfblk44_out1 = cfblk8_out1 + cfblk44_const_val_1;



  assign cfblk80_out1 = cfblk44_out1 - cfblk175_out1;



  assign cfblk63_out1 = (cfblk80_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk5_out1 = cfblk63_out1 + cfblk53_out1;



  assign cfblk144 = cfblk5_out1;

  assign dtc_out_12 = cfblk114_out1;



  assign cfblk19_out1 = dtc_out_12;



  assign cfblk146 = cfblk19_out1;

  assign cfblk148 = cfblk16_out1;

  always @(cfblk101_out1, cfblk25_out1) begin
    cfblk37_div_temp = 9'b000000000;
    cfblk37_t_0_0 = 9'b000000000;
    if (cfblk101_out1 == 8'b00000000) begin
      cfblk37_out1 = 8'b11111111;
    end
    else begin
      cfblk37_t_0_0 = {1'b0, cfblk25_out1};
      cfblk37_div_temp = cfblk37_t_0_0 / cfblk101_out1;
      if (cfblk37_div_temp[8] != 1'b0) begin
        cfblk37_out1 = 8'b11111111;
      end
      else begin
        cfblk37_out1 = cfblk37_div_temp[7:0];
      end
    end
  end



  assign cfblk95_out1 = cfblk37_out1 + cfblk126_out1;



  assign Hdl_out = cfblk95_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

