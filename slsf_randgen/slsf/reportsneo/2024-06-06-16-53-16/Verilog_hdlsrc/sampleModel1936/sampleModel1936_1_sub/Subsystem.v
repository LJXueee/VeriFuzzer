// -------------------------------------------------------------
// 
// File Name: D:\ljx\code\GUIDANCE-ljx3\slsf_randgen\slsf\reportsneo\2024-06-06-16-53-16\Verilog_hdlsrc\sampleModel1936\sampleModel1936_1_sub\Subsystem.v
// Created: 2024-08-15 17:28:34
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel1936_1_sub/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk53_const_val_1;  // uint8
  wire [7:0] Mysubsystem_37_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk47_const_val_1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [15:0] cfblk145_out1;  // uint16
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk86_const_val_1;  // uint8
  wire [7:0] cfblk21_const_val_1;  // uint8
  wire [7:0] cfblk122_const_val_1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] cfblk13_out1;  // uint8
  reg [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk153_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  reg [7:0] cfblk34_out1;  // uint8
  reg [7:0] cfblk154_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  reg [7:0] cfblk91_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk134_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] cfblk155_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk155_out1;  // uint8
  reg [7:0] cfblk92_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk18_out1;  // uint8
  reg [8:0] cfblk13_div_temp;  // ufix9
  reg [8:0] cfblk13_t_0_0;  // ufix9
  reg [8:0] cfblk97_div_temp;  // ufix9
  reg [8:0] cfblk97_t_0_0;  // ufix9
  reg [8:0] cfblk43_div_temp;  // ufix9
  reg [8:0] cfblk43_t_0_0;  // ufix9
  reg [8:0] cfblk11_div_temp;  // ufix9
  reg [8:0] cfblk11_t_0_0;  // ufix9
  reg [8:0] cfblk91_div_temp;  // ufix9
  reg [8:0] cfblk91_t_0_0;  // ufix9
  reg [8:0] cfblk34_div_temp;  // ufix9
  reg [8:0] cfblk34_t_0_0;  // ufix9
  reg [8:0] cfblk133_div_temp;  // ufix9
  reg [8:0] cfblk133_t_0_0;  // ufix9
  reg [8:0] cfblk40_div_temp;  // ufix9
  reg [8:0] cfblk40_t_0_0;  // ufix9
  reg [8:0] cfblk92_div_temp;  // ufix9
  reg [8:0] cfblk92_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk53_const_val_1 = 8'b00000000;



  Mysubsystem_37 u_Mysubsystem_37 (.clk(clk),
                                   .reset(reset),
                                   .enb(clk_enable),
                                   .Out1(Mysubsystem_37_out1)  // uint8
                                   );

  cfblk3 u_cfblk3 (.u(Mysubsystem_37_out1),  // uint8
                   .y(cfblk3_out1)  // uint8
                   );

  assign cfblk47_const_val_1 = 8'b00000000;



  assign cfblk143_out1 = 8'b00000001;



  cfblk145 u_cfblk145 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk145_out1)  // uint16
                       );

  assign cfblk176_out1 = cfblk145_out1[7:0];



  assign cfblk86_const_val_1 = 8'b00000000;



  assign cfblk21_const_val_1 = 8'b00000000;



  assign cfblk122_const_val_1 = 8'b00000000;



  cfblk142 u_cfblk142 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk142_out1)  // uint8
                       );

  DotProduct_block2 u_cfblk115_inst (.in1(cfblk15_out1),  // uint8
                                     .in2(cfblk80_out1),  // uint8
                                     .out1(cfblk115_out1)  // uint8
                                     );

  assign cfblk108_out1 = cfblk115_out1 + cfblk19_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        cfblk166_reg[0] <= 8'b00000000;
        cfblk166_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk166_reg[0] <= cfblk166_reg_next[0];
          cfblk166_reg[1] <= cfblk166_reg_next[1];
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk108_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(cfblk15_out1, cfblk6_out1) begin
    cfblk13_div_temp = 9'b000000000;
    cfblk13_t_0_0 = 9'b000000000;
    if (cfblk15_out1 == 8'b00000000) begin
      cfblk13_out1 = 8'b11111111;
    end
    else begin
      cfblk13_t_0_0 = {1'b0, cfblk6_out1};
      cfblk13_div_temp = cfblk13_t_0_0 / cfblk15_out1;
      if (cfblk13_div_temp[8] != 1'b0) begin
        cfblk13_out1 = 8'b11111111;
      end
      else begin
        cfblk13_out1 = cfblk13_div_temp[7:0];
      end
    end
  end



  always @(cfblk13_out1, cfblk80_out1) begin
    cfblk97_div_temp = 9'b000000000;
    cfblk97_t_0_0 = 9'b000000000;
    if (cfblk80_out1 == 8'b00000000) begin
      cfblk97_out1 = 8'b11111111;
    end
    else begin
      cfblk97_t_0_0 = {1'b0, cfblk13_out1};
      cfblk97_div_temp = cfblk97_t_0_0 / cfblk80_out1;
      if (cfblk97_div_temp[8] != 1'b0) begin
        cfblk97_out1 = 8'b11111111;
      end
      else begin
        cfblk97_out1 = cfblk97_div_temp[7:0];
      end
    end
  end



  assign cfblk103_out1 = (cfblk97_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out = cfblk103_out1;



  assign cfblk129_out1 = dtc_out;



  assign cfblk70_out1 = (cfblk60_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk70_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign cfblk5_out1 = cfblk142_out1 + cfblk4_out1;



  assign cfblk121_out1 = cfblk5_out1 + cfblk129_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        cfblk160_reg[0] <= 8'b00000000;
        cfblk160_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk160_reg[0] <= cfblk160_reg_next[0];
          cfblk160_reg[1] <= cfblk160_reg_next[1];
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk121_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  assign cfblk50_out1 = (cfblk30_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk100_out1 = cfblk50_out1 + cfblk160_out1;



  assign cfblk45_out1 = cfblk111_out1 + Mysubsystem_37_out1;



  assign cfblk7_out1 = cfblk45_out1 + cfblk116_out1;



  assign cfblk58_out1 = cfblk28_out1 + cfblk1_out1;



  always @(cfblk58_out1, cfblk77_out1) begin
    cfblk43_div_temp = 9'b000000000;
    cfblk43_t_0_0 = 9'b000000000;
    if (cfblk77_out1 == 8'b00000000) begin
      cfblk43_out1 = 8'b11111111;
    end
    else begin
      cfblk43_t_0_0 = {1'b0, cfblk58_out1};
      cfblk43_div_temp = cfblk43_t_0_0 / cfblk77_out1;
      if (cfblk43_div_temp[8] != 1'b0) begin
        cfblk43_out1 = 8'b11111111;
      end
      else begin
        cfblk43_out1 = cfblk43_div_temp[7:0];
      end
    end
  end



  always @(cfblk43_out1, cfblk90_out1) begin
    cfblk11_div_temp = 9'b000000000;
    cfblk11_t_0_0 = 9'b000000000;
    if (cfblk43_out1 == 8'b00000000) begin
      cfblk11_out1 = 8'b11111111;
    end
    else begin
      cfblk11_t_0_0 = {1'b0, cfblk90_out1};
      cfblk11_div_temp = cfblk11_t_0_0 / cfblk43_out1;
      if (cfblk11_div_temp[8] != 1'b0) begin
        cfblk11_out1 = 8'b11111111;
      end
      else begin
        cfblk11_out1 = cfblk11_div_temp[7:0];
      end
    end
  end



  assign cfblk31_out1 = cfblk11_out1 - cfblk30_out1;



  assign cfblk79_out1 = cfblk31_out1 + cfblk14_out1;



  assign cfblk113_out1 = cfblk30_out1 + cfblk79_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_reg[0] <= 8'b00000000;
        cfblk153_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_reg[0] <= cfblk153_reg_next[0];
          cfblk153_reg[1] <= cfblk153_reg_next[1];
        end
      end
    end

  assign cfblk153_out1 = cfblk153_reg[1];
  assign cfblk153_reg_next[0] = cfblk113_out1;
  assign cfblk153_reg_next[1] = cfblk153_reg[0];



  assign cfblk84_out1 = (cfblk19_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        cfblk164_reg[0] <= 8'b00000000;
        cfblk164_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk164_reg[0] <= cfblk164_reg_next[0];
          cfblk164_reg[1] <= cfblk164_reg_next[1];
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk6_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk154_process
      if (reset == 1'b1) begin
        cfblk154_reg[0] <= 8'b00000000;
        cfblk154_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk154_reg[0] <= cfblk154_reg_next[0];
          cfblk154_reg[1] <= cfblk154_reg_next[1];
        end
      end
    end

  assign cfblk154_out1 = cfblk154_reg[1];
  assign cfblk154_reg_next[0] = cfblk34_out1;
  assign cfblk154_reg_next[1] = cfblk154_reg[0];



  assign cfblk86_out1 = cfblk28_out1 + cfblk86_const_val_1;



  assign cfblk78_out1 = (cfblk86_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk6_out1 = (cfblk78_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        cfblk163_reg[0] <= 8'b00000000;
        cfblk163_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk163_reg[0] <= cfblk163_reg_next[0];
          cfblk163_reg[1] <= cfblk163_reg_next[1];
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk6_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk66_out1 = cfblk163_out1 + cfblk47_out1;



  assign cfblk87_out1 = cfblk47_out1 + cfblk34_out1;



  assign cfblk37_out1 = cfblk87_out1 - cfblk101_out1;



  cfblk146 u_cfblk146 (.In1(cfblk37_out1),  // uint8
                       .Out1(cfblk146_out1)  // uint8
                       );

  always @(cfblk146_out1, cfblk22_out1) begin
    cfblk91_div_temp = 9'b000000000;
    cfblk91_t_0_0 = 9'b000000000;
    if (cfblk22_out1 == 8'b00000000) begin
      cfblk91_out1 = 8'b11111111;
    end
    else begin
      cfblk91_t_0_0 = {1'b0, cfblk146_out1};
      cfblk91_div_temp = cfblk91_t_0_0 / cfblk22_out1;
      if (cfblk91_div_temp[8] != 1'b0) begin
        cfblk91_out1 = 8'b11111111;
      end
      else begin
        cfblk91_out1 = cfblk91_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        cfblk170_reg[0] <= 8'b00000000;
        cfblk170_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk170_reg[0] <= cfblk170_reg_next[0];
          cfblk170_reg[1] <= cfblk170_reg_next[1];
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk91_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk96_out1 = cfblk170_out1 + cfblk66_out1;



  assign cfblk98_out1 = (cfblk80_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk109_out1 = cfblk35_out1 + cfblk98_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        cfblk158_reg[0] <= 8'b00000000;
        cfblk158_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk158_reg[0] <= cfblk158_reg_next[0];
          cfblk158_reg[1] <= cfblk158_reg_next[1];
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk109_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk15_out1 = cfblk158_out1 - cfblk96_out1;



  assign cfblk101_out1 = cfblk15_out1 + cfblk154_out1;



  DotProduct_block3 u_cfblk130_inst (.in1(cfblk101_out1),  // uint8
                                     .in2(cfblk164_out1),  // uint8
                                     .out1(cfblk130_out1)  // uint8
                                     );

  assign cfblk36_out1 = cfblk14_out1 + cfblk130_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        cfblk168_reg[0] <= 8'b00000000;
        cfblk168_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk168_reg[0] <= cfblk168_reg_next[0];
          cfblk168_reg[1] <= cfblk168_reg_next[1];
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk36_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk116_out1 = cfblk168_out1 + cfblk84_out1;



  DotProduct_block9 u_cfblk90_inst (.in1(cfblk116_out1),  // uint8
                                    .in2(cfblk153_out1),  // uint8
                                    .out1(cfblk90_out1)  // uint8
                                    );

  DotProduct_block6 u_cfblk54_inst (.in1(cfblk176_out1),  // uint8
                                    .in2(cfblk90_out1),  // uint8
                                    .out1(cfblk54_out1)  // uint8
                                    );

  assign cfblk17_out1 = (cfblk110_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        cfblk157_reg[0] <= 8'b00000000;
        cfblk157_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk157_reg[0] <= cfblk157_reg_next[0];
          cfblk157_reg[1] <= cfblk157_reg_next[1];
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk17_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  always @(cfblk157_out1, cfblk54_out1) begin
    cfblk34_div_temp = 9'b000000000;
    cfblk34_t_0_0 = 9'b000000000;
    if (cfblk54_out1 == 8'b00000000) begin
      cfblk34_out1 = 8'b11111111;
    end
    else begin
      cfblk34_t_0_0 = {1'b0, cfblk157_out1};
      cfblk34_div_temp = cfblk34_t_0_0 / cfblk54_out1;
      if (cfblk34_div_temp[8] != 1'b0) begin
        cfblk34_out1 = 8'b11111111;
      end
      else begin
        cfblk34_out1 = cfblk34_div_temp[7:0];
      end
    end
  end



  assign cfblk29_out1 = cfblk143_out1 + cfblk34_out1;



  assign dtc_out_1 = cfblk1_out1;



  assign cfblk24_out1 = dtc_out_1;



  assign cfblk48_out1 = cfblk24_out1 + cfblk143_out1;



  assign cfblk30_out1 = cfblk48_out1 + cfblk29_out1;



  always @(cfblk19_out1, cfblk30_out1) begin
    cfblk133_div_temp = 9'b000000000;
    cfblk133_t_0_0 = 9'b000000000;
    if (cfblk30_out1 == 8'b00000000) begin
      cfblk133_out1 = 8'b11111111;
    end
    else begin
      cfblk133_t_0_0 = {1'b0, cfblk19_out1};
      cfblk133_div_temp = cfblk133_t_0_0 / cfblk30_out1;
      if (cfblk133_div_temp[8] != 1'b0) begin
        cfblk133_out1 = 8'b11111111;
      end
      else begin
        cfblk133_out1 = cfblk133_div_temp[7:0];
      end
    end
  end



  assign cfblk124_out1 = cfblk133_out1 + cfblk7_out1;



  assign cfblk39_out1 = cfblk124_out1 + cfblk44_out1;



  assign cfblk122_out1 = cfblk39_out1 + cfblk122_const_val_1;



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk47_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  DotProduct_block1 u_cfblk111_inst (.in1(cfblk93_out1),  // uint8
                                     .in2(cfblk35_out1),  // uint8
                                     .out1(cfblk111_out1)  // uint8
                                     );

  assign cfblk47_out1 = cfblk1_out1 + cfblk47_const_val_1;



  assign cfblk60_out1 = cfblk47_out1 + cfblk111_out1;



  assign dtc_out_2 = cfblk60_out1;



  assign cfblk22_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        cfblk162_reg[0] <= 8'b00000000;
        cfblk162_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk162_reg[0] <= cfblk162_reg_next[0];
          cfblk162_reg[1] <= cfblk162_reg_next[1];
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk82_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  DotProduct_block u_cfblk107_inst (.in1(cfblk61_out1),  // uint8
                                    .in2(cfblk162_out1),  // uint8
                                    .out1(cfblk107_out1)  // uint8
                                    );

  DotProduct_block7 u_cfblk80_inst (.in1(cfblk107_out1),  // uint8
                                    .in2(cfblk3_out1),  // uint8
                                    .out1(cfblk80_out1)  // uint8
                                    );

  always @(cfblk22_out1, cfblk80_out1) begin
    cfblk40_div_temp = 9'b000000000;
    cfblk40_t_0_0 = 9'b000000000;
    if (cfblk22_out1 == 8'b00000000) begin
      cfblk40_out1 = 8'b11111111;
    end
    else begin
      cfblk40_t_0_0 = {1'b0, cfblk80_out1};
      cfblk40_div_temp = cfblk40_t_0_0 / cfblk22_out1;
      if (cfblk40_div_temp[8] != 1'b0) begin
        cfblk40_out1 = 8'b11111111;
      end
      else begin
        cfblk40_out1 = cfblk40_div_temp[7:0];
      end
    end
  end



  assign cfblk53_out1 = cfblk93_out1 + cfblk53_const_val_1;



  assign cfblk135_out1 = (cfblk53_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk82_out1 = cfblk135_out1 + cfblk85_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        cfblk161_reg[0] <= 8'b00000000;
        cfblk161_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk161_reg[0] <= cfblk161_reg_next[0];
          cfblk161_reg[1] <= cfblk161_reg_next[1];
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk82_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  DotProduct_block8 u_cfblk85_inst (.in1(cfblk161_out1),  // uint8
                                    .in2(cfblk40_out1),  // uint8
                                    .out1(cfblk85_out1)  // uint8
                                    );

  assign cfblk28_out1 = cfblk85_out1 + cfblk143_out1;



  assign dtc_out_3 = cfblk28_out1;



  assign cfblk77_out1 = dtc_out_3;



  assign dtc_out_4 = cfblk77_out1;



  assign cfblk134_out1 = dtc_out_4;



  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        cfblk165_reg[0] <= 8'b00000000;
        cfblk165_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk165_reg[0] <= cfblk165_reg_next[0];
          cfblk165_reg[1] <= cfblk165_reg_next[1];
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk134_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk155_process
      if (reset == 1'b1) begin
        cfblk155_reg[0] <= 8'b00000000;
        cfblk155_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk155_reg[0] <= cfblk155_reg_next[0];
          cfblk155_reg[1] <= cfblk155_reg_next[1];
        end
      end
    end

  assign cfblk155_out1 = cfblk155_reg[1];
  assign cfblk155_reg_next[0] = cfblk46_out1;
  assign cfblk155_reg_next[1] = cfblk155_reg[0];



  always @(cfblk155_out1, cfblk35_out1) begin
    cfblk92_div_temp = 9'b000000000;
    cfblk92_t_0_0 = 9'b000000000;
    if (cfblk35_out1 == 8'b00000000) begin
      cfblk92_out1 = 8'b11111111;
    end
    else begin
      cfblk92_t_0_0 = {1'b0, cfblk155_out1};
      cfblk92_div_temp = cfblk92_t_0_0 / cfblk35_out1;
      if (cfblk92_div_temp[8] != 1'b0) begin
        cfblk92_out1 = 8'b11111111;
      end
      else begin
        cfblk92_out1 = cfblk92_div_temp[7:0];
      end
    end
  end



  assign dtc_out_5 = cfblk92_out1;



  assign cfblk44_out1 = dtc_out_5;



  cfblk147 u_cfblk147 (.In1(cfblk44_out1),  // uint8
                       .Out1(cfblk147_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        cfblk159_reg[0] <= 8'b00000000;
        cfblk159_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk159_reg[0] <= cfblk159_reg_next[0];
          cfblk159_reg[1] <= cfblk159_reg_next[1];
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk51_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  DotProduct_block4 u_cfblk136_inst (.in1(cfblk159_out1),  // uint8
                                     .in2(cfblk147_out1),  // uint8
                                     .out1(cfblk136_out1)  // uint8
                                     );

  assign cfblk19_out1 = cfblk136_out1 + cfblk165_out1;



  assign dtc_out_6 = cfblk19_out1;



  assign cfblk27_out1 = dtc_out_6;



  DotProduct u_cfblk102_inst (.in1(cfblk27_out1),  // uint8
                              .in2(cfblk2_out1),  // uint8
                              .out1(cfblk102_out1)  // uint8
                              );

  assign cfblk21_out1 = cfblk102_out1 + cfblk21_const_val_1;



  assign cfblk110_out1 = cfblk21_out1 + cfblk122_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        cfblk156_reg[0] <= 8'b00000000;
        cfblk156_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk156_reg[0] <= cfblk156_reg_next[0];
          cfblk156_reg[1] <= cfblk156_reg_next[1];
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk110_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk46_out1 = cfblk156_out1 + cfblk100_out1;



  assign cfblk16_out1 = cfblk46_out1 + cfblk116_out1;



  assign dtc_out_7 = cfblk16_out1;



  assign cfblk93_out1 = dtc_out_7;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        cfblk171_reg[0] <= 8'b00000000;
        cfblk171_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk171_reg[0] <= cfblk171_reg_next[0];
          cfblk171_reg[1] <= cfblk171_reg_next[1];
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk93_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  cfblk1 u_cfblk1 (.u(cfblk171_out1),  // uint8
                   .y(cfblk1_out1)  // uint8
                   );

  assign cfblk35_out1 = (cfblk1_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk51_out1 = cfblk35_out1 + cfblk130_out1;



  assign dtc_out_8 = cfblk51_out1;



  assign cfblk14_out1 = dtc_out_8;



  DotProduct_block5 u_cfblk18_inst (.in1(cfblk14_out1),  // uint8
                                    .in2(cfblk166_out1),  // uint8
                                    .out1(cfblk18_out1)  // uint8
                                    );

  assign cfblk61_out1 = cfblk18_out1 + cfblk96_out1;



  assign Hdl_out = cfblk61_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

